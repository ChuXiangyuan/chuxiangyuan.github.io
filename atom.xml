<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Allen Chu]]></title>
  <link href="http://chuxiangyuan.github.io/atom.xml" rel="self"/>
  <link href="http://chuxiangyuan.github.io/"/>
  <updated>2017-08-27T22:10:21+08:00</updated>
  <id>http://chuxiangyuan.github.io/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://www.mweb.im/">MWeb</generator>
  
  <entry>
    <title type="html"><![CDATA[深入了解 App Store in iOS 11]]></title>
    <link href="http://chuxiangyuan.github.io/15038367340940.html"/>
    <updated>2017-08-27T20:25:34+08:00</updated>
    <id>http://chuxiangyuan.github.io/15038367340940.html</id>
    <content type="html"><![CDATA[
<p>WWDC 2017 上 Apple 介绍了 iOS 11 中全新设计的 App Store，在随后的 Session 中也从设计、编辑等角度详细介绍了焕然一新的 App Store。按照其介绍的思路，结合一些其他相关资料，在 iOS 11 正式版即将发布之前，来一起深入了解下 iOS 11 的 App Store。</p>

<span id="more"></span><!-- more -->

<ul>
<li><p>Note：</p></li>
</ul>

<ol>
<li>iOS 11 App Store 的新功能、新设计介绍主要以 iPhone 设备为主；</li>
<li>有关 App Store 的细节以美区 App Store 为准；</li>
<li>由于大部分参考资料均为英语，所以部分词句没有翻译，即使翻译了的，可能也没有那么准确；</li>
<li>文章阅读对象针对于期望了解全新 App Store 的独立开发者、产品人、设计师、爱好者等；</li>
<li>成文时，iOS 11 正式版还未发布，新的 App Store 的功能和内容还在逐步增加。后续文章可能会有一些增删改。</li>
</ol>

<h2 id="toc_0">Overview 总览</h2>

<ul>
<li><p>App Store 在 2008 年 7 月诞生，那时只有 500 多个 app。</p>

<p><img src="media/15038367340940/1.jpg" alt="1"/></p></li>
<li><p>一直以来 App Store 的结构和布局并没有发生大的变化，只有一些细微的调整。</p>

<p><img src="media/15038367340940/2.jpg" alt="2"/></p></li>
<li><p>九年过去了，到 2017 年在 App Store 里已经有了 220 万个 app。App Store 改变了 app 的购买和分发方式，也影响了我们生活的方方面面。</p></li>
<li><p>在这个历史节点，我们停下来思考如何让 App Store 变得更好？如何从头开始设计一个崭新的 App Store？从以下几点考虑：</p>

<ul>
<li>Daily destination：希望用户每天能够回到这里，把 App Store 作为一个每天的基础；</li>
<li>Give a voice to our editors：把精力更多地放在从一开始就很出色的编辑策划上；</li>
<li>Focus on games：突出 App Store 中游戏所扮演的重要角色，给应用和游戏一份更加清晰的重点划分。</li>
</ul></li>
</ul>

<h2 id="toc_1">Design 设计</h2>

<p>在重新设计 App Store 时，我们考虑了两个问题：我们的设计目标是什么？如何做去满足这些设计目标？除了上面提到的这三个方面，在设计上再增加一条：Clarity and simplification，清晰简单，这一条对于设计来说十分重要。</p>

<h3 id="toc_2">Daily destination 每天的目的地、Give a voice to our editors 让编辑发声</h3>

<ul>
<li><p>Today：卡片式风格，每日更新，可查看最多七天的内容，目前每天会有六个内容更新。这些内容会在不同地区的 App Store 本地化，符合当地的文化习惯。Today 目前有十二种样式，各种样式穿插在一起，应用这些样式会呈现的内容会有：</p>

<ul>
<li>新 app 的发布、app 崭新版本的发布；</li>
<li>杰出 app 的介绍、app 背后的故事、开发者访谈；</li>
<li>有关 app 使用的 tips、tricks、guide；</li>
<li>与一个主题相关的 app 合集推荐；</li>
<li>App of the Day、Game of the Day；</li>
<li>App 中内购的介绍与推荐。</li>
</ul>

<p><img src="media/15038367340940/3.jpg" alt="3"/></p></li>
<li><p>每一个卡片的内容细节</p>

<ul>
<li>交互形式：卡片点击后会有一个自然的过渡从中心展开，点击屏幕右上角的叉号、从卡片顶部向下滑动卡片、从屏幕左侧向右滑动都可以将卡片关闭。</li>
<li>具体内容：每个卡片的内容形式非常丰富，图片、文字、引用、视频、应用穿插在一起，你还可以将这个卡片分享出去，每个卡片实际上都对应一个网址。</li>
</ul>

<p><img src="media/15038367340940/4.jpg" alt="4"/></p></li>
<li><p>每一个卡片的内容都可以在搜索中被搜索到，同时被这些卡片推荐的 app 的详情页上也会有这些卡片的入口（截止到 iOS 11 Beta 7 还未看到这两种形式）。</p>

<p><img src="media/15038367340940/1BF196F8-3421-40F1-84F3-B95B45F2BBCB.png" alt="1BF196F8-3421-40F1-84F3-B95B45F2BBCB"/></p></li>
<li><p>这些内容卡片模板的一些小细节：</p>

<ul>
<li>「Today」tab 中页面滚动到带有视频的卡片并停下时，视频会自动进行静音循环播放；</li>
<li>横向三排式的 app 合集卡片在显示时会有一个从右向左的展示动画；</li>
<li>当一个卡片中只推荐了一个 app 时，页面向下滚动且滚动过封面图片时，页面底部会悬浮这个 app 的详情页跳转入口。</li>
</ul>

<p><img src="media/15038367340940/EFDC65CA-301A-4CDA-B86C-B14BC688BD37.png" alt="EFDC65CA-301A-4CDA-B86C-B14BC688BD37"/></p></li>
</ul>

<h3 id="toc_3">Focus on games &amp; apps 聚焦游戏、应用</h3>

<ul>
<li>在以前，Games 和 Apps 是混在一起的，无论是其编辑推荐还是排行榜。对于游戏，可以细分为许多分类。意识到游戏的重要性和给 App Store 带来的巨大成功，我们为游戏单独设置了一个 tab—「Games」。</li>
<li><p>Games：在这里你能看到各种形式（单个 app、app 合集，视频、图片、文字介绍等）的游戏 app 的推荐，除了app 的推荐还包括内购的推荐、排行榜、分类等。「Apps」tab 亦是同样。在这里游戏 app 的细化分类可以被拿到顶层，用户可以直接找到自己想要的游戏。</p>

<p><img src="media/15038367340940/5D9C3C35-FA24-42D6-AA15-B389897523B3.png" alt="5D9C3C35-FA24-42D6-AA15-B389897523B3"/></p></li>
<li><p>用户在推荐页面可以得到有关 app 更多的信息：</p>

<ul>
<li>Subtitle：每个 app 都会有一个副标题（后有详细说明）；</li>
<li>来自编辑团队的推荐语。</li>
</ul>

<p><img src="media/15038367340940/65FC4A61-C27A-4C2D-91C3-94383D7B5E41.png" alt="65FC4A61-C27A-4C2D-91C3-94383D7B5E41"/></p></li>
<li><p>一个有意思的小细节：「Games」tab 的火箭图标形状取自于 Apple 标志的叶子。</p>

<p><img src="media/15038367340940/Games.png" alt="Games"/></p></li>
<li><p>内购的推荐：在新设计的 App Store 中可以把 app 的内容像推荐 app 一样推荐。为了表示这是一个内购，我们设计了一种专属的卡片样式来表示内购。内购的推荐会出现在「Today」、「Games」、「Apps」的推荐中，亦会出现在对应 app 的详情页面上，还可以通过「搜索」找到。</p>

<p><img src="media/15038367340940/12.jpg" alt="12"/></p>

<ul>
<li><p>App 内购的直接购买流程：对于一个 app 内购推荐，如果想直接购买，若你已安装这个 app，会直接打开这个 app 并显示购买确认页面，即可完成购买；若未安装这个 app，会提示你先购买/下载这个 app。</p>

<p><img src="media/15038367340940/BCB303D8-EDE0-481D-9D5B-89B70D2809CB.png" alt="BCB303D8-EDE0-481D-9D5B-89B70D2809CB"/></p></li>
<li><p>内购卡片的设计：内购卡片的设计关键一点是不能与 app 的样式混淆，当用户看到这个样式时应该知道这就是内购，这是来自于哪个应用的内购。</p>

<ul>
<li><p>内购卡片中圆角的弧度与 app 图标的圆角弧度是一致的，或者说内购就是 app 的四分之一，表示内购是 app 的一部分。</p>

<p><img src="media/15038367340940/17.jpg" alt="17"/></p></li>
<li><p>把 app 的内购图片加上一个统一的框架，在左下角放上 app 的图标即构成了这个内购卡片。所以提供的内购图片的左下角不应有重要的信息。只有在 app 产品详情页上的内购卡片的左下角没有 app 图标。</p>

<p><img src="media/15038367340940/18.jpg" alt="18"/></p></li>
<li><p>如果想让 app 的内购能够作为推荐呈现出来，需要为每个内购提供一张图片，这张图片需要与这个内购的具体内容有关，它不应是一个 app 的截图或者是 app 的图标。</p>

<p><img src="media/15038367340940/19.jpg" alt="19"/></p></li>
</ul></li>
</ul></li>
</ul>

<h3 id="toc_4">Clarity and simplification 清晰简单</h3>

<ul>
<li><p>Product Page：这里是每个 app 的家。随着时间的流逝，在 app 的详情页上有了越多的信息和功能。我们需要对这个页面做出简化，特别是页面的前半部分，因为这是用户打开产品详情页首先映入眼帘的部分。各种各样的信息都应该被清晰的传达给用户。</p>

<ul>
<li><p>App 图标、更加醒目的 App 名称、副标题（会先显示几秒的开发者名称再显示副标题，没有副标题则只显示开发者名称）、价格及购买按钮、更多/分享</p>

<ul>
<li>App Icon：这是用户会看到的第一个元素，对于给用户留下强烈的印象和传达 app 的品质和目的十分重要。App Icon 要做到简单、易识别。为了保证在不同尺寸下的 App Icon 都是清晰可见的，不要在 icon 中添加不必要的视觉细节。上传的 icon 图片要求 1024*1024 像素。</li>
<li>App Name：选取一个简单好记、易拼写、能表明 app 是做什么的来作为 app 名字。名字要与其他 app 区分开来，不要使用一些通用术语或与其他已有的 app 相似的名字。App Name 最多 30 个字符。</li>
<li>Subtitle：从 iOS 11 开始，Subtitle 将出现在 App Name 的下面，最多 30 个字符。推荐使用简练、吸引人的一句话来作为 Subtitle，避免如「世界最好」的这种通用描述，可以通过 Subtitle 来表明 app 的亮点、典型功能等。每次提交一个新版本的 app 时，可以改变一次 Subtitle。</li>
</ul>

<p><img src="media/15038367340940/3FAF9FD0-8188-49A9-A37A-38A64C7D1213.png" alt="3FAF9FD0-8188-49A9-A37A-38A64C7D1213"/></p></li>
<li><p>App 的评分（没有评分会直接写明评分信息不足）、编辑推荐（如有）、在 app 首要分类的排行榜中的名次、年龄评级信息 Age Rating 在一行呈现；</p>

<ul>
<li>分类 Categories：你可以给一个 app 设定两个分类，一个首要分类，一个次要分类。首要分类决定了 app 会出现在哪个分类目录下，影响搜索过滤结果，决定是出现在「Apps」tab 还是「Games」tab。首要分类应该符合你 app 的主要功能。

<ul>
<li>分类反映你 app 的目的、主要功能、主题；</li>
<li>想想用户在找你这样的 app 时会自然想到哪个分类；</li>
<li>看看同类 app 是怎么做的。</li>
</ul></li>
</ul></li>
<li><p>其他包含此 app 的 bundle（如有）；</p></li>
<li><p>更新了什么：包括了当前版本更新日志和进一步查看历史版本的更新日志；</p>

<ul>
<li>每次升级 app 时，都可以利用「What’s New」告诉用户发生了什么改变；</li>
<li>默认显示前三行信息，点击「more」展开查看全部；</li>
<li>只有你购买过的 app（无论现在是否已下载），「What’s New」才会显示在 App Icon 下面的部分，否则会放在「评分和评论」部分之下。因为对于购买过的 app，用户更关注这个 app 最近更新了什么；而对于还未购买过的 app，用户更关注这个 app 有什么特色，更需要从视频、截图、应用介绍中了解这些信息。「内购和订阅」部分的逻辑亦是如此。</li>
</ul></li>
<li><p>订阅和内购推荐；</p>

<ul>
<li>推荐的订阅和内购将被分成两个部分展示在产品详情页上；</li>
<li>开发者可以最多添加 20 个推荐条目；</li>
<li>每个条目都有它自己的名字（避免通用性名字，最多 30 个字符）、营销图片（1024*1024）、描述（最多 45 个字符），可以自定义条目的显示顺序；</li>
<li>可以被搜索到，同时会被推荐到「Today」、「Games」、「Apps」中；</li>
<li>在一个特定的设备上，开发者可以自定义用户会看到那些推荐的内购。比如用户已经购买的可以隐藏、根据用户的游戏等级推荐相关内购。</li>
<li>App 需要支持 SKPaymentTransactionObserver 方法才能实现上述功能。</li>
</ul>

<p><img src="media/15038367340940/A2B82A35-4D61-4B3B-8F38-0EFFA0AF30E8.png" alt="A2B82A35-4D61-4B3B-8F38-0EFFA0AF30E8"/></p></li>
<li><p>视频、app 截图、在其他设备上是否可用（默认收起），视频默认自动静音播放，并可以最多添加三个视频；</p>

<ul>
<li>视频预览：预览视频可以展示你 app 的特色、功能、UI，每段视频最长 30s，默认自动静音播放，确保第一段视频的前几秒能够快速抓住用户的心，最多可以添加三段视频。每一段视频都可以进行本地化，针对于每种 App Store 语言进行翻译。在「Preview」中首先会展示视频，截图会展示在视频之后。</li>
<li>在视频没有自动播放时，会显示 app preview poster frames，确保这张图片是足够吸引人的。</li>
<li>iOS 10.3 及之前版本的用户只能看到第一个预览视频。</li>
<li>截图：最多可以添加五张图片，前两张图片应该突出 app 的重要特色，因为在搜索结果中，如果在 app 有视频预览的前提下，通常情况（竖屏截图、iPhone）下这两张图片会被展示出来。横屏截图的条件下，搜索结果中只会显示第一章截图或第一个预览视频。</li>
</ul>

<p><img src="media/15038367340940/AEB8B962-CEB3-4A34-89D2-CD416DF705D1.png" alt="AEB8B962-CEB3-4A34-89D2-CD416DF705D1"/></p></li>
<li><p>App 介绍 App Description</p>

<ul>
<li>提供一段吸引人的、能够凸显 app 功能和特色的文字来作为 app 介绍。理想的 app 介绍应该是简洁有效，简洁地描述 app 是做什么的，之后每一个段落说明一个主要功能，在表达上使用用户看得懂的话。</li>
<li>介绍的第一句话十分重要，因为默认情况下会显示介绍的前三行。斟酌每一个字词，将最重要的功能放在第一句话中。有关于 app 获得的荣誉可以放到最后。</li>
<li>不要在介绍里放上一些没必要的关键词企图影响搜索结果，也避免在介绍中包括特定的价格信息。因为价格已在产品详情页上说明，且这些信息在不同国家和地区是不同的。</li>
<li>你只能在你提交 app 新版本时更新 app 介绍信息。</li>
</ul></li>
<li><p>营销信息 Promotional Text：最多 170 个字符，会出现在应用描述的上方。无需提交 app 新版本，即可更新这个信息。可用这个信息来分享 app 的最新消息，如最新促销、内购促销、即将上线的功能和内容、限时特价等。注意营销信息不能作为搜索的索引。</p></li>
<li><p>开发者入口：从这里可进入开发者页面，查看开发者的所有 app。</p>

<p><img src="media/15038367340940/809660D0-16BD-4869-AC5B-8345AF770183.png" alt="809660D0-16BD-4869-AC5B-8345AF770183"/></p></li>
<li><p>评分和评论 Ratings &amp; Reviews：评分在上，评论在下，评论从左向右排布，简化了其呈现形式，更加容易阅读，去除了当前版本和所有版本的区分，所以升级 app 并不会隐藏之前的评分；</p>

<ul>
<li>开发者可以在 iTunes Connect 回复用户的评论以解决用户的反馈、问题或关注。开发者回复后，用户可以收到被回复的提醒，并且可以选择更新评论。只有最新的评论和回复会被显示在产品详情页上。</li>
<li>当你提交 app 的新版本时，你可以重置你的评分，谨慎使用此功能。</li>
</ul></li>
<li><p>编辑推荐词（如有）。</p>

<p><img src="media/15038367340940/2D6D8E1B-48E4-4F62-9359-27A3E87B7906.png" alt="2D6D8E1B-48E4-4F62-9359-27A3E87B7906"/></p></li>
<li><p>更多信息：开发者、app 大小、分类、兼容性、语言、开发者网站、隐私政策、包含的内购等；</p></li>
<li><p>支持：如 Wallet、Family Sharing、Game Center 等.</p>

<p><img src="media/15038367340940/1CA2769A-0E1E-4B84-BE62-BCF3C54852C6.png" alt="1CA2769A-0E1E-4B84-BE62-BCF3C54852"/></p></li>
<li><p>Featured In：收录这个 app 的相关 Story，截止到 iOS 11 Developer Beta 7 暂未找到实例，下图为效果图。</p></li>
<li><p>更多来自于这个开发者的 app 和根据这个 app 的推荐。</p>

<p><img src="media/15038367340940/C75EFCEF-FDC1-4B41-956F-1A566A260CCC.png" alt="C75EFCEF-FDC1-4B41-956F-1A566A260CC"/></p></li>
<li><p>导航栏：当页面向下滚动，滚过第一部分时，导航栏上就会显示这个 app 的 icon 和购买按钮，方便在浏览时随时完成购买下载动作。</p>

<p><img src="media/15038367340940/27.jpg" alt="27"/></p></li>
</ul></li>
</ul>

<h2 id="toc_5">Editorial 编辑</h2>

<h3 id="toc_6">Our principles 我们的原则</h3>

<ul>
<li><p>We celebrate apps 我们赞美 app：在这个更大的编辑平台中，我们有能力提供更多内容、更多观点、更多推荐，但这不意味着我们突然对 app 进行审核、批判，编辑团队应该是 app 的啦啦队，赞美应用和应用文化。</p></li>
<li><p>We are the voice of the App Store 我们是 App Store 的发声者：我们不仅思考要写什么，还在思考我们怎样去写？我们要做到真诚可靠、聪明有趣、谦恭友好、充满激情，我们要让内容有苹果范儿，斟酌每个字每个词，我们要尽力帮助用户参与其中。</p></li>
<li><p>We offer independent insights 我们要提供独立的见解：App Store 是一个付费应用商店，但用钱并不能让你的 app 被推荐。在新的 App Store 的「Today」、「Games」、「Apps」中没有广告，编辑希望把有独特角度、有个性的文章与你分享。我们希望用户能够基于此而完全信任我们的内容、我们的推荐，这样用户才会每天回来，在 App Store 中找到巨大的价值。</p></li>
<li><p>We tell interesting and important stories 我们讲述有趣、重要的故事：从有趣到十分有趣到既有趣又重要，这是我们的目标。在 App Store 不仅要告诉你这个 app 很厉害，还会告诉你我们为什么这样认为。在这里我们提供发人深省的观点和内容。</p></li>
<li><p>We deliver a fresh and unexpected take 我们传达一种清新且意想不到的观点：App 的世界发展迅速，我们要去反映那些创新文化。开发者通过 app 改变生活的方方面面，我们也要与你们并肩一起，跟上你们的步伐。</p></li>
</ul>

<h3 id="toc_7">New tabs 新的 Tab</h3>

<ul>
<li>Today：每天更新，在这里聚焦观点。用户可以在卡片上直接购买喜欢的应用和游戏，亦可以点击卡片了解应用和游戏的故事。</li>
<li><p>Games &amp; Apps：你可以看作这是包含排行榜、分类的「Feature」tab 的 2.0 进化版本。虽然不会像「Today」一样每天更新，目前会每周进行更新，以后会更加频繁。在这里用户会有更多的选择。</p></li>
<li><p>Every app has a story to tell. 每一个 app 都有一个故事可讲。我们要找到每一个 app 中的闪光点写成故事，关于这些故事，我们确定了四个主要的主题：</p>

<ul>
<li>Gaming——Apps are the future of gaming 大游戏、小游戏、汽车游戏、动作游戏、角色扮演游戏、跑酷游戏，应用是游戏的未来。</li>
<li>Lifestyle——Apps transform your life 社交、摄影、约会、健身、下厨、通勤应用，应用改变你的生活。</li>
<li>Culture and Entertainment——Apps shape culture 音乐、电影、时尚、电视应用，应用塑造文化。</li>
<li>New Tech and Innovation——Apps change everything 新服务、新想法、新能力，应用改变着一切。</li>
</ul>

<p><img src="media/15038367340940/22.jpg" alt="22"/></p></li>
<li><p>当把这些主题写成故事时，这里三个核心目的：</p>

<ul>
<li>Inform 告知：要及时，要告诉用户他们需要知道的信息，让他们知道世界发生了什么，比如 Netflix 上有了一个新节目；</li>
<li>Help 帮助：要指导，要动员，分享那些对我们很直观但对用户并不是的想法，让用户重温那些之前下载但可能已经闲置一旁的应用，给予全新的动力，比如如何最大化利用 Instagram 的功能；</li>
<li>Inspire 启发：应用于创造性内容、鼓舞人心的内容、独到见解的内容，这些令人鼓舞的内容可能会走向全世界。</li>
</ul>

<p><img src="media/15038367340940/23.jpg" alt="23"/></p></li>
</ul>

<h3 id="toc_8">More options</h3>

<ul>
<li><p>More ways to be featured than ever. 这里有比以前更多的各种各样的形式可以用来推荐 app。举几个例子（在 iOS 11 版本的 iPhone、iPad、iPod 的美区应用商店中才能打开以下链接）：</p>

<ul>
<li><a href="https://itunes.apple.com/us/story/id1245798920">WORLD PREMIERE 世界最佳：The Art of the Impossible——纪念碑谷 2</a></li>
<li><a href="https://itunes.apple.com/us/story/id1246363365">HOW TO 怎样做：5 Tips to Get More Out of VSCO——VSCO</a></li>
<li><a href="https://itunes.apple.com/us/story/id1246381517">DEEP DIVE 深入了解：It All Changes on Level 201——Causality</a></li>
<li><a href="https://itunes.apple.com/us/story/id1247678406">MEET THE DEVELOPER 开发者访谈：It&#39;s a Mom&#39;s Mom&#39;s Mom&#39;s World——Peanut</a></li>
</ul>

<ul class="clearing-thumbs small-block-grid-2" data-clearing>
  <li><a href="media/15038367340940/IMG_3819.jpg"><img data-caption="WORLD PREMIERE 世界最佳：The Art of the Impossible" src="media/15038367340940/IMG_3819-s.png"></a></li>
  <li><a href="media/15038367340940/IMG_3857.jpg"><img data-caption="HOW TO 怎样做：5 Tips to Get More Out of VSCO" src="media/15038367340940/IMG_3857-s.png"></a></li>
  <li><a href="media/15038367340940/IMG_3858.jpg"><img data-caption="DEEP DIVE 深入了解：It All Changes on Level 201" src="media/15038367340940/IMG_3858-s.png"></a></li>
  <li><a href="media/15038367340940/IMG_3859.jpg"><img data-caption="MEET THE DEVELOPER 开发者访谈：It's a Mom's Mom's Mom's World" src="media/15038367340940/IMG_3859-s.png"></a></li>
</ul>

<ul>
<li><a href="https://itunes.apple.com/us/story/id1254095375">APP OF THE DAY 每日应用：Day One Journal</a></li>
<li><a href="https://itunes.apple.com/us/story/id1273222333">GAME OF THE DAY 每日游戏: Pigeon Wings</a></li>
</ul>

<ul class="clearing-thumbs small-block-grid-2" data-clearing>
    <li><a href="media/15038367340940/IMG_3860.jpg"><img data-caption="APP OF THE DAY 每日应用：Day One Journal" src="media/15038367340940/IMG_3860-s.png"></a></li>
    <li><a href="media/15038367340940/IMG_3861.jpg"><img data-caption="GAME OF THE DAY 每日游戏: Pigeon Wings" src="media/15038367340940/IMG_3861-s.png"></a></li>
    </ul>

<ul>
<li><a href="https://itunes.apple.com/us/story/id1266801024">VIDEOS 视频：Go On, Save the Tiny Aliens——Splitter Critters</a></li>
<li><a href="https://itunes.apple.com/us/story/id1267735855">QUICK LOOK 快速浏览：Ride for a Cause</a></li>
<li><p>内购推荐：暂未找到实例</p>

<p><img src="media/15038367340940/E2CC05F2-23DF-4F15-8754-BC1CAAA3D22C.png" alt="E2CC05F2-23DF-4F15-8754-BC1CAAA3D22"/></p></li>
<li><p>COLLECTION &amp; LIST</p>

<ul>
<li><a href="https://itunes.apple.com/us/story/id1254076297">Tap Your Way to Victory</a></li>
<li><a href="https://itunes.apple.com/us/story/id1275104683">Not Your Normal Sports Games</a></li>
<li><a href="https://itunes.apple.com/us/story/id1273579171">One Thumb to Play</a></li>
</ul>

<p><img src="media/15038367340940/2FB40861-7FE2-4D98-88C9-1CED7370EEFC.png" alt="2FB40861-7FE2-4D98-88C9-1CED7370EEF"/></p></li>
</ul></li>
</ul>

<h3 id="toc_9">The big question</h3>

<ul>
<li>How do you reach us?：访问「<a href="http://AppStore.com/promote">Contact the App Store Team</a>」（需要开发者身份登录）

<ul>
<li>如果你即将发布一款新 app、新游戏，即将发布一项重要意义的升级，或者你关于 app 有一段独特的故事，希望在推出时被 App Store 推荐，你可以提前 6-8 周告知 Apple 你的故事。</li>
<li>基本的开发者信息（开发者名字、网站）、app 信息（app 的名字、ID、描述、版本号、版本亮点、发布平台、是否针对儿童、语言、地区、计划提交日期、计划发布日期）、相关链接（网站、demo 视频、其他展示等）、商业模型（Free、Paid、Freemium、Paymium）、市场推广计划、最重要的是你的故事（最多 1000 个字符）。</li>
</ul></li>
</ul>

<h2 id="toc_10">What now？</h2>

<p>iOS 11 的 App Store 发生了如此多的变化，从焕然一新的设计到独特角度的故事。除了 AppStore 本身对应用的推荐，每个开发者也应该特别注意以下这些变化，并且做出改变：</p>

<ul>
<li>In-App Purchases：内购和订阅现在可以被推荐、被搜索；</li>
<li>App Name &amp; Subtitle：App 名字被限制为 30 个字符，但增加了副标题；</li>
<li>Video App Preview ：自动播放、可以本地化的预览视频；</li>
<li><p>Promotional Text：最多 170 个字符，会出现在应用描述的上方；</p>

<p><img src="media/15038367340940/26.jpg" alt="26"/></p></li>
<li><p>Ratings and Reviews</p>

<ul>
<li>iOS 10.3 中加入了在应用内评分的功能，开发者可以回复用户的评论。开发者回复后，用户可以修改评论，通常用户都是把评论越改越好。</li>
<li>要使用应用内评分，需要调用 SKStoreReviewController API。在 365 天内最多请求用户评分 3 次。</li>
<li>每次提交 app 的新版本时，评分不再会被自动重置，不会再有当前版本和所有版本的区分。但开发者可以决定在提交时是否要主动重置评分，这要十分谨慎，三思而后行，毕竟用户非常看重这个数据。</li>
<li>强烈建议将回复用户评论作为日常事务之一。现在已经支持在 iTunes Connect 中分配用户角色为「客户支持」，该角色仅可以对评论进行回复。</li>
</ul></li>
<li><p>Search</p>

<ul>
<li><p>Search Ads：目前在美国、英国、澳大利亚、新西兰可用。转化率达到 50 %。</p>

<p><img src="media/15038367340940/24.jpg" alt="24"/></p></li>
<li><p>Search Keywords：搜索关键词可以决定你的 app 在搜索结果中怎么呈现。仔细考虑当用户想搜索你这种 app 时会用到哪些词语，使用这些词语作为你的搜索关键词。</p>

<ul>
<li>过于笼统或过于具化的术语都不利于用户找到你的 app。</li>
<li>搜索关键词用逗号分隔，最多 100 个字符。</li>
<li>要避免的情况：1.有了单数形式的词再用复数形式；2.分类的名称或者词语「app」；3.重复的字词。</li>
<li>可能会被拒绝审核的关键词，不能使用的关键词：1.未授权的商标名称、名人的名字和其他受保护的字词；2.与 app 不相关的字词；3.竞品 app 的名字；4.不相关、不合适、无礼的、令人讨厌的字词。</li>
</ul></li>
<li><p>影响搜索结果的因素：</p>

<ul>
<li>搜索信息与 app 信息的匹配度；</li>
<li>用户的下载、评分、评论等行为；</li>
<li>App 的搜索关键词；</li>
<li>App 的 名字、副标题、描述；</li>
<li>App 设置的首要分类；</li>
<li>推荐的内购；</li>
<li>搜索广告。</li>
</ul></li>
<li><p>更强大的搜索：除了应用，搜索目前可以搜索到开发者、内购、分类、故事、技巧、合集等。（内购和故事等支持搜索暂未在 iOS Developer Beta 7 中看到）</p>

<p><img src="media/15038367340940/C5AAF3CD-1F73-4EA5-B2FD-77665DF4B7AF.png" alt="C5AAF3CD-1F73-4EA5-B2FD-77665DF4B7AF"/></p></li>
</ul></li>
</ul>

<p>至此，从「Today」到「Games」、「Apps」再到「Product Page」、<br/>
「Search」，App Store in iOS 11 已了解完毕。无论是从设计还是编辑角度，App Store 都是焕然一新。可以看出，从 iOS 11 开始 Apple 期望用户能够从 App Store 中发掘出更多内容，强化以人工推荐为主的内容，弱化排行榜、分类这些自动生成的数据。</p>

<p>目前，美区的 App Store 中的「Today」已经开始每天频率的内容更新，中区的 App Store 暂时还是一周一更新。期待 iOS 11 正式发布后，App Store 为应用带去的崭新的活力。</p>

<h2 id="toc_11">参考内容</h2>

<ul>
<li><a href="https://developer.apple.com/videos/play/wwdc2017/301">Introducing the New App Store - WWDC 2017</a></li>
<li><a href="https://www.apple.com/cn/ios/app-store/">App Store - Apple (中国)</a></li>
<li><a href="https://developer.apple.com/app-store/whats-new/">The All-New App Store - Apple Developer</a></li>
<li><a href="https://developer.apple.com/app-store/discoverability/">Discovery on the App Store - App Store - Apple Developer</a></li>
<li><a href="https://developer.apple.com/app-store/product-page/">App Store Product Page - App Store - Apple Developer</a></li>
<li><a href="https://developer.apple.com/app-store/app-previews/">App Previews - App Store - Apple Developer</a></li>
<li><a href="https://developer.apple.com/app-store/promoting-in-app-purchases/">Promoting Your In-App Purchases - App Store - Apple Developer</a></li>
<li><a href="https://developer.apple.com/app-store/search/">App Store Search - App Store - Apple Developer</a></li>
<li><a href="https://developer.apple.com/app-store/ratings-and-reviews/">Ratings, Reviews, and Responses - App Store - Apple Developer</a></li>
<li><a href="https://developer.apple.com/app-store/categories/">Choosing a Category - App Store - Apple Developer</a></li>
<li><a href="https://help.apple.com/itunes-connect/developer/">iTunes Connect 开发人员帮助</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[为订阅成功而设计 Designing for Subscription Success - WWDC 2017 Session 814]]></title>
    <link href="http://chuxiangyuan.github.io/15036722610708.html"/>
    <updated>2017-08-25T22:44:21+08:00</updated>
    <id>http://chuxiangyuan.github.io/15036722610708.html</id>
    <content type="html"><![CDATA[
<p>在订阅时提供一个轻松简单、透明易懂、吸引人的用户体验将会更好地传达订阅的价值、优化订阅的流程，更加容易获取新的订阅者。</p>

<span id="more"></span><!-- more -->

<h2 id="toc_0">Effortless 轻松</h2>

<ul>
<li><p>Be Visible：要让用户知道你的 app 里存在订阅功能，不要让用户到处寻找如何订阅/注册：</p>

<ul>
<li><p>方法一：在 app 的界面中一直显示一个「订阅」按钮，例如「The New York Times」app 中，每篇文章的导航栏上都有一个「订阅」按钮；</p>

<p><img src="media/15036722610708/1.jpg" alt="1"/></p></li>
<li><p>Note：Subscription ≠ Ad、Subscription ≠ Notification，不要把订阅以弹框或通知的形式呈现；</p></li>
<li><p>方法二：当用户对一部分内容或者功能表现出感兴趣时，展示订阅功能，例如「Her」app 中，当你在浏览每个人的介绍时，刚好错过了一个你感兴趣的人，当你想要回退时，app 会告诉你这是一个「订阅」后可使用的功能。并且在展示订阅的界面上有着漂亮的动画。</p>

<p><img src="media/15036722610708/B285906D-201B-426F-8B12-197437AA49A2.png" alt="B285906D-201B-426F-8B12-197437AA49A2"/></p></li>
<li><p>确保在「设置」或者「帐户」中有一个地方有订阅的入口，因为当一个用户想刻意寻找订阅时自然会想到这些位置。</p>

<p><img src="media/15036722610708/4.jpg" alt="4"/></p></li>
</ul></li>
<li><p>Remove Friction：减少麻烦，不要在注册/订阅过程中要求用户填写太多信息，不要有过多的步骤，不要让用户花过长的时间。下面是美国三大视频流媒体 app 一个月的数据，看下要求点击次数与转换率的关系。要求点击 9 次时转化率只有 7% 了。</p>

<p><img src="media/15036722610708/D1FBC39B-A78F-47F9-84E5-D82A496ECAE4.png" alt="D1FBC39B-A78F-47F9-84E5-D82A496ECAE4"/></p>

<ul>
<li>Less is more. 更少的点击，更少的麻烦就会有更高的转化率和更多的订阅者。先把焦点放在让用户先完成注册上。像爱好、个人介绍等细节可以放在注册之后再让用户补充。</li>
</ul></li>
</ul>

<h2 id="toc_1">Transparent 透明</h2>

<ul>
<li><p>Provide clear terms：提供清晰的订阅条款，让用户明白他们订阅了什么。看到订阅的界面，用户应该能快速了解订阅的是什么和怎样订阅。</p>

<ul>
<li><p>当提供订阅时，通常包括：简洁的价值主张、对订阅的号召、已订阅用户可登录、换了新设备的用户可恢复购买、提供不同层级的订阅选项（最多三到四种为佳）。尽可能的让界面保持简洁。</p>

<p><img src="media/15036722610708/5.jpg" alt="5"/></p></li>
</ul></li>
</ul>

<h2 id="toc_2">Engaging 吸引</h2>

<ul>
<li>Engage through experience：在订阅前，让用户能够体验你的 app 和 app 的内容。在当今，购买前能够体验和尝试是怎样做出购买决定的重要影响因素，如试衣服、看房、试驾等。对 app 的订阅是同样的道理。</li>
<li><p>吸引用户订阅有多种方法，决定用哪种方法时想想：用户当前的使用体验，你 app 里的内容类型，添加订阅后对于用户体验的影响。</p>

<ul>
<li><p>Free trial：适用于人们已经熟悉的品牌，人们想要在订阅前了解到底有什么内容。如 「HBO NOW」app。</p>

<p><img src="media/15036722610708/6.jpg" alt="6"/></p></li>
<li><p>Premium feature：App 的主体免费，但一部分高级功能作为订阅选项。例如「Sleep Cycle」app，将「趋势」功能作为订阅选项，模糊背景的形式作为一个预览。</p>

<p><img src="media/15036722610708/7.jpg" alt="7"/></p></li>
<li><p>Sample content：提供一部分示例内容。如「The New York Times」app，只允许未订阅的用户浏览十篇文章，这样可以让用户自己寻找和决定自己感兴趣的内容，从而决定是否要去订阅。</p>

<p><img src="media/15036722610708/8.jpg" alt="8"/></p></li>
</ul></li>
</ul>

<blockquote>
<p>Session 链接：<a href="https://developer.apple.com/videos/play/wwdc2017/814">Designing for Subscription Success - WWDC 2017 - Videos - Apple Developer</a>  </p>
</blockquote>

<p>📱💻📺</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS 11 设计上的改变 What’s New in iOS 11 - WWDC 2017 Session 810]]></title>
    <link href="http://chuxiangyuan.github.io/15028131788266.html"/>
    <updated>2017-08-16T00:06:18+08:00</updated>
    <id>http://chuxiangyuan.github.io/15028131788266.html</id>
    <content type="html"><![CDATA[
<p>从寻路、排版层级、对比度三个方面介绍 iOS 11 设计上的一些变化，从而帮助你设计一个具有丰富的视觉层级、清晰的导航、易于使用和简单的交互的 app。</p>

<span id="more"></span><!-- more -->

<h2 id="toc_0">概述</h2>

<ul>
<li><strong>Wayfinding：</strong>在 iOS 11 中提供更加清晰的导航、贯彻整个系统的寻路；</li>
<li><strong>Typographic Hierarchy：</strong>通过排版的调整，聚焦整体的层级；</li>
<li><strong>Contrast：</strong>对于有用的信息，在 UI 上增加对比度。</li>
</ul>

<h2 id="toc_1">Wayfinding 寻路</h2>

<ul>
<li>通常意义下，寻路就是指导人们通过某个环境、在物理空间自我定位；</li>
<li><p>生活中常见的标识和信息系统：街道标识、机场、停车场。</p></li>
<li><p>在 UI 中寻路，可以增强使用体验，理解你所处的空间：</p>

<ul>
<li>首要目标：高亮/强调内容；</li>
<li>app 需要清晰的视觉层级；</li>
<li>UI 元素不应该与内容发生竞争，而应该帮助你更好的理解潜在的功能和交互。</li>
</ul></li>
<li><p>大标题导航栏：一种可选的方案，并没有替换掉标准的导航栏样式，页面往下滚动时可以切换为标准的导航栏样式；</p></li>
<li><p>在哪里应该使用大标题导航栏：</p>

<ul>
<li>app 每个 tab 的第一层级：让你理解你在 tab 的第一层级、你已经滚动到了页面顶部；</li>
<li>如果内容和层级众多，在某些二级页面也可以使用大标题导航栏，例如「音乐」app 中「浏览」tab 中的「最新音乐」、「歌单」、「排行榜」；</li>
</ul>

<p><img src="media/15028131788266/1.jpg" alt="1"/></p>

<ul>
<li>在布局相似的页面里也可使用大标题导航栏，例如「电话」app，每个 tab （个人收藏、最近通话、语音信箱）都是行式的文本内容，使用大标题导航栏可以让用户立即知道自己在哪里；</li>
</ul>

<p><img src="media/15028131788266/2.jpg" alt="2"/></p>

<ul>
<li>非常重要：在导航栏中使用大标题并不总是必要的，在某些场景下会阻碍其可用性，例如「时钟」app，虽然它有多个 tab，但是它没有复杂多样的内容，每一个 tab 的布局也十分容易区分，如果使用大标题导航栏，反而会使其与内容发生竞争。</li>
</ul>

<p><img src="media/15028131788266/3.jpg" alt="3"/></p></li>
</ul>

<h2 id="toc_2">Typographic Hierarchy 排版层级</h2>

<ul>
<li>通过排版上的层级变化，可以强调更加重要的内容，帮助内容成组；</li>
<li>减少认知负担，减少在寻找某些东西时所付出的精神努力。</li>
<li>建立排版层级的几个基本的方法：

<ul>
<li><strong>Position 位置：</strong>上面的会比下面的重要一些；</li>
<li><strong>Size 尺寸/字号：</strong>大尺寸的会比小尺寸的重要一些；</li>
<li><strong>Weight 字重：</strong>粗字重可以强调效果，细字重可以减弱效果；</li>
<li><strong>Color 颜色：</strong>如白色对比灰色，白色会有强调效果。</li>
<li>一次可能会用到多种方法。</li>
</ul></li>
</ul>

<p><img src="media/15028131788266/3EEAB629-094D-4391-9677-DC2CCC4C35A9.png" alt="3EEAB629-094D-4391-9677-DC2CCC4C35A9"/></p>

<ul>
<li><p>iOS 11 中的几个实例：</p>

<ul>
<li><strong>「照片」app：</strong>内容——你的照片是这个 app 中最重要的。导航照片的每部分的标题，在 iOS 10 中采用了两种字号来区分两种信息，但仍然显得有点小、有点轻，而在 iOS 11 中，让每部分的标题字号更大，地点信息增加了字重，日期信息采用了灰色文本。这些改变可以使你分离内容中的重点更简单了，让你更快地找到某张特别的照片。</li>
</ul>

<p><img src="media/15028131788266/1%201.jpg" alt="1 1"/></p>

<ul>
<li><strong>「日历」app：</strong>在 iOS 11 中为了强调增加了字重，有意地使用颜色指示当前的年月日。</li>
</ul>

<p><img src="media/15028131788266/2%201.jpg" alt="2 1"/></p>

<ul>
<li><strong>「天气」app：</strong>在 iOS 11 中，增加了文本字重，整体上增大了字号，使得内容更加容易阅读。</li>
</ul>

<p><img src="media/15028131788266/3%201.jpg" alt="3 1"/></p></li>
</ul>

<h2 id="toc_3">Contrast 对比度</h2>

<ul>
<li>在 UI 中，为了与更大、更粗的文本样式保持平衡，需要更新其他 UI 元素，增强其对比度，同时还要保持其功能性，保证最小化粒度的改变。</li>
<li><p>在 iOS 11 中由此带来的一些改变：</p>

<ul>
<li>填充按钮的形状，如数字键盘；</li>
</ul>

<p><img src="media/15028131788266/1%202.jpg" alt="1 2"/></p>

<ul>
<li>增加形状的尺寸，如搜索输入框；</li>
</ul>

<p><img src="media/15028131788266/A4F66E32-2ECC-49B6-873F-476C6599D916.png" alt="A4F66E32-2ECC-49B6-873F-476C6599D916"/></p>

<ul>
<li>Tab Bar：增加文本标签的字重（从 regular 到 medium），填充 icon 的形状、增加笔画的权重；</li>
</ul>

<p><img src="media/15028131788266/F913F827-1261-49A1-9990-864B983EC401.png" alt="F913F827-1261-49A1-9990-864B983EC401"/></p>

<ul>
<li>IPhone 横屏下的 Tab Bar：第一点，为了对空间更好地利用，把文本标签放在了 icon 的右边（iOS 10 中是一上一下），这样使得横屏下的 Tab Bar 更矮了，从而与导航栏、工具栏高度一致。第二点，相对于竖屏，横屏下的 icon 会稍小一些，文本会稍大一些，设计自己的 app 时需要考虑这些因素。</li>
</ul>

<p><img src="media/15028131788266/iPhone%20Tab%20Bar.png" alt="iPhone Tab Ba"/></p>

<ul>
<li>iPad 横屏下的 Tab Bar：更大的文本尺寸、icon 与竖屏时的大小一致。</li>
</ul>

<p><img src="media/15028131788266/6280686D-473F-41F3-AE7A-C9AD96D0EBF8.png" alt="6280686D-473F-41F3-AE7A-C9AD96D0EBF8"/></p>

<ul>
<li>Wallet app：在 iOS 10 中使用了模糊效果，似乎想要表明其位于底下的页面之上，但这个并不符合逻辑，也没有起到指示所处空间的作用，所以在 iOS 11 中移除了这种模糊效果。</li>
</ul>

<p><img src="media/15028131788266/4.jpg" alt="4"/></p></li>
<li><p>移除多余的、不必要的 UI 元素，减少复杂度以改善整个 app 的对比度。</p></li>
</ul>

<blockquote>
<p>Session 链接：<a href="https://developer.apple.com/videos/play/wwdc2017/810/">What’s New in iOS 11 - WWDC 2017 - Videos - Apple Developer</a>  </p>
</blockquote>

<p>📱</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[WWDC Session 学习笔记总览]]></title>
    <link href="http://chuxiangyuan.github.io/15028149583661.html"/>
    <updated>2017-08-16T00:35:58+08:00</updated>
    <id>http://chuxiangyuan.github.io/15028149583661.html</id>
    <content type="html"><![CDATA[
<p>每年 6 月份的 Apple WWDC，除了揭晓 iOS、macOS、watchOS、tvOS 四大新系统的功能亮点的 Keynote 外，在之后还会有众多的针对不同角色、不同目的的开发者、设计师等准备的 Session。虽然有些很简短、有些所讲述的主题非常垂直，但从这些 Session 中说不定就能了解到系统设计背后的故事、未来新功能发展的走向、深入简出的设计/开发方法等。</p>

<p>「好记性不如烂笔头」，我把我看过的 Session 的精华整理成简短的笔记记录下来，笔记中的一些翻译不求准确，但重在理解其所说即可。这篇文章作为这些学习笔记的分类汇总，以方便日后查找。</p>

<p>与设计相关、功能介绍类的 Session 居多，比较简单、能看懂的与开发相关的 Session 也会有一些。</p>

<span id="more"></span><!-- more -->

<p><strong>分类标注：</strong></p>

<ul>
<li>iOS：📱</li>
<li>macOS：💻</li>
<li>watchOS：⌚️</li>
<li>tvOS：📺</li>
</ul>

<h2 id="toc_0">Design🎨</h2>

<h3 id="toc_1">WWDC 2017</h3>

<ul>
<li><a href="15028131788266.html">iOS 11 设计上的改变 What’s New in iOS 11 - WWDC 2017 Session 810</a>📱</li>
<li><a href="15036722610708.html">为订阅成功而设计 Designing for Subscription Success - WWDC 2017 Session 814</a>📱💻📺</li>
</ul>

<h3 id="toc_2">WWDC 2016</h3>

<ul>
<li><a href="15030704996885.html">包容性 App 设计 Inclusive App Design - WWDC 2016 Session 801</a>📱💻</li>
<li><a href="15029504785442.html">排版和字体 Typography and Fonts - WWDC 2016 Session 803</a>📱💻⌚️📺</li>
<li>迭代的 UI 设计 Iteractive UI Design - WWDC 2016 Session 805📱</li>
</ul>

<h3 id="toc_3">WWDC 2015</h3>

<ul>
<li><a href="15028584576994.html">新的系统字体 Introducing the New System Fonts - WWDC 2015 Session 804</a>📱💻⌚️📺</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[从设计出发认识 UIAlertController]]></title>
    <link href="http://chuxiangyuan.github.io/14994455522628.html"/>
    <updated>2017-07-08T00:39:12+08:00</updated>
    <id>http://chuxiangyuan.github.io/14994455522628.html</id>
    <content type="html"><![CDATA[
<p>Apple 在 <a href="https://developer.apple.com/ios/human-interface-guidelines/ui-views/alerts/">iOS Human Interface Guidelines</a> 中提到了两种 View：Alert 和 Action Sheet。如果对 iOS 系统很熟悉的话，在各种 app 里都会看见这两种 View 的身影。两种 View 都会打断用户的操作，覆盖掉当前界面，在界面上以模态窗口的形式呈现，一般是向用户传达重要的信息并期望用户能够做出反馈。</p>

<span id="more"></span><!-- more -->

<h2 id="toc_0">初见 Alert 和 Action Sheet</h2>

<p>通常的 Alert 由标题、描述、一个或一个以上的操作组成，还可能有文本输入框。Alert 会直接显示在界面的中央，必须点击某个操作后才能使其关闭，一般在 app 请求系统权限、确认删除某些内容、输入 Apple ID 等情景时会出现。当然也有一些特殊的 Alert 样式，比如 Touch ID 授权、iOS 10.3 才引入的在应用内评分。</p>

<p><img src="media/14994455522628/Alert.png" alt="Alert " class="mw_img_center" style="display: block; clear:both; margin: 0 auto;"/></p>

<p>Action Sheet 由标题、描述、一个或一个以上的操作组成，在 iPhone 上通常情况下在最底部还会有一个表示「取消」意义的操作。Action Sheet 在 iPhone 上是从底部滑出的一种形式，在 iPad 上是 Popover 的形式。它可以展示较多的操作，且在呈现形式上比 Alert 更圆滑一些，没有那么强硬，一般在一些用户主动操作之后才会出现。在系统里也发现了一个特殊定制化的 Action Sheet，就是音乐 app 里针对一首歌的操作。</p>

<p><img src="media/14994455522628/Action%20Sheet.png" alt="Action Sheet " class="mw_img_center" style="display: block; clear:both; margin: 0 auto;"/></p>

<p>从设计角度来说，Apple 定义了这两种 View 的具体规则，希望 iOS app 的设计师和开发者们都能遵从这套设计规范，这样一方面节省了设计成本，另一方面对于使用 app 的用户来说降低了学习成本，各个 app 的 Alert 和 ActionSheet 的操作逻辑是一样的，各个 iOS app 在不同中又有相同。</p>

<p>当然有的 app 认为原生的样式与自己 app 的设计风格不协调，加之有足够的设计&amp;开发资源，于是根据自己 app 的设计风格设计了一套完全自定义的 Alert 和 Action Sheet。但万变不离其宗，以微信&amp;微博举例，其操作逻辑与原生的是一模一样的，毕竟这样对于用户来说没有什么学习成本，用户也不会觉得很奇怪。</p>

<p><img src="media/14994455522628/Custom%20Alert%20-%20Action%20Sheet.png" alt="Custom Alert - Action Sheet " class="mw_img_center" style="display: block; clear:both; margin: 0 auto;"/></p>

<p>Apple 在设计上对两种 View 进行了规范，那具体在开发上又是怎么去服从这套设计规范的呢？从代码里还能看到这两种 View 的什么细节呢？</p>

<h2 id="toc_1">UIAlertController 是什么？</h2>

<p>Apple 在设计规范中对 Alert 和 Action Sheet 进行了定义，这两种 View 其实也被从代码层级定义好了，使用时直接在 Xcode 中调用就可以。在 iOS 8 时代以前，要想展示 Alert 需要调用 UIAlertView ，想展示 Action Sheet 需要调用 UIActionSheet，且调用的逻辑较为复杂。自 iOS 8 之后，Apple 废弃了之前的调用方法，将上述两个统一成了 UIAlertController，具体呈现哪种样式，由属性「preferredStyle」来决定。</p>

<p>在使用时，整体的思路可以分为三步，1.定义 AlertController 本身，包括其标题、描述、是 Alert 还是 Action Sheet 等；2.定义在 AlertController 中要添加的动作，每个动作又有自己的属性，比如样式、显示文字、执行操作等；3.在页面上展示这个 AlertController。</p>

<p>下面用具体的例子分别说明下各种情景的 AlertController 应该怎么使用，且从这些代码的逻辑中发现那些没有在设计规范中说明的细节。</p>

<h2 id="toc_2">Alert 在代码中的实现</h2>

<h3 id="toc_3">一个操作按钮的 Alert</h3>

<p>最简单的 Alert 自然是只有一个操作按钮，以点击一个按钮弹出 Alert 为例说明：</p>

<pre><code>@IBAction func showAlertViewWithOneAction(sender: UIButton){
    
    // 创建 alertController，定义其显示的标题和描述文字，确定其类型为 Alert
    let alertController = UIAlertController(title: &quot;Hello World！&quot;, message: &quot;This is the most simple alert view.&quot;, preferredStyle: UIAlertControllerStyle.alert)
    
    // 定义要添加到 alertController 中的动作，包括每个动作的标题和样式
    let okAction = UIAlertAction(title: &quot;OK&quot;, style: .default, handler: nil)
    
    // 向 alertController 中添加定义好的动作
    alertController.addAction(okAction)
    
    // 在界面上显示已经配置好的 alertController
    self.present(alertController, animated: true, completion: nil)
    
  }
</code></pre>

<p>对这段代码做一个简单的解析：</p>

<ul>
<li>创建 alertController 时有一个属性「preferredStyle」，当其为「UIAlertControllerStyle.alert」时则为创建一个 Alert View，当其为「UIAlertControllerStyle.actionSheet」时则为创建一个 Action Sheet。</li>
<li>创建一个 action 时，它也有一个属性「style」，这个属性的值有三个：「.default」、「.destructive」、「.cancel」，他们之间有一些区别：

<ul>
<li>「.default」：默认的样式，视觉上是正常字重、蓝色的文字；</li>
<li>「.destructive」：从名字上就可以看出，用在那些具有破坏性、不可恢复的操作上，比如删除、注销、清除等，视觉上是正常字重、红色的文字；</li>
<li>「.cancel」：iOS 开发中特意择出来的一种样式，特别用在取消、不操作、仅关闭 Alert 的这种操作上，视觉上是半加粗（Semibold）的字重、蓝色的文字。 无论在 Alert Controller 中添加取消样式的动作排在第几个，在显示上都会放到所有操作的最后一个，只有两个操作时会放在左边，这是系统定义好的。<strong>注意一个 alertController 里只能有一个样式为「.cancel」的 action，如果代码中写了大于等于两个，app 会直接 crash。</strong></li>
</ul></li>
<li>action 中的 handler 属性是用来描述点击这个操作后会发生的动作，一般情况下会写作一个闭包函数。而对于像取消这种操作，自然就是什么也不执行，即可写成「nil」。文章仅针对 UIAlertController 进行讨论，这部分就不展开详述了。</li>
</ul>

<p>上面这段代码的运行效果如下图，这种只有一个操作按钮的 Alert 多用于提示/告知用户某些信息，起到一个通知的作用。</p>

<p><img src="media/14994455522628/Simulator%20Screen%20Shot%202017%E5%B9%B47%E6%9C%889%E6%97%A5%20%E4%B8%8B%E5%8D%888.43.15.png" alt="Simulator Screen Shot 2017年7月9日 下午8.43.15 " class="mw_img_center" style="display: block; clear:both; margin: 0 auto;"/></p>

<h3 id="toc_4">两个操作按钮的 Alert</h3>

<p>当然如果想增加更多操作按钮，只需在代码中创建更多动作并添加到 alertController 即可。如下面的代码建立一个两个操作按钮的 AlertView：</p>

<pre><code>@IBAction func showAlertViewWithTwoActions(sender: UIButton){
    let alertController = UIAlertController(title: &quot;你确定要退出当前登录帐号吗？&quot;, message: &quot;退出后你的帐户数据不会清除，你可以再次登录&quot;, preferredStyle: .alert)
    
    let exitAction = UIAlertAction(title: &quot;退出&quot;, style: .default, handler: nil)
    let cancelAciton = UIAlertAction(title: &quot;取消&quot;, style: .cancel, handler: nil)
    
    alertController.addAction(exitAction)
    alertController.addAction(cancelAciton)
    
    // 定义 alertController 中的哪个动作需要 highlight
    alertController.preferredAction = alertController.actions[0]
    
    self.present(alertController, animated: true, completion: nil)
    
  }
</code></pre>

<p>下图是这段代码的运行效果。但这里有个问题，「取消」按钮并没有如期显示为半粗体字重，反而「退出」按钮显示为了半粗体字重。这个的原因是在代码里对创建的 alertController 的「preferredAction」属性进行了定义，将 alertController 里的第一个动作设置为了「preferredAction」，在显示效果上使这个 action highlight，也即应用了半粗体字重。因此原本使用了「.cancel」样式的操作按钮恢复成了正常字重。只能有一个动作可以被设置为「preferredAction」，且当设备有外接键盘时，按回车键等于直接点击这个操作。这个逻辑也是系统内置的。</p>

<p><img src="media/14994455522628/Simulator%20Screen%20Shot%202017%E5%B9%B47%E6%9C%889%E6%97%A5%20%E4%B8%8B%E5%8D%888.59.34.png" alt="Simulator Screen Shot 2017年7月9日 下午8.59.34 " class="mw_img_center" style="display: block; clear:both; margin: 0 auto;"/></p>

<p>在使用「preferredAction」这个属性时有几点需要注意，1.必须在创建完 alertController 且添加完动作后才能定义；2.这个属性只能应用于 Alert，不能应用于 Action Sheet。</p>

<h3 id="toc_5">三个操作按钮的 Alert</h3>

<p>当一个 Alert 中出现了大于两个操作时，按钮的排布方式就不能再左右排布了，而是改为由上至下排布，具体代码如下：</p>

<pre><code>@IBAction func showAlertViewWithThreeAcitons(sender: UIButton){
    let alertController = UIAlertController(title: &quot;你确定要注销此帐户吗？&quot;, message: nil, preferredStyle: .alert)
    
    let destructAction = UIAlertAction(title: &quot;注销帐户&quot;, style: .destructive, handler: nil)
    let exitAction = UIAlertAction(title: &quot;仅退出帐户&quot;, style: .default, handler: nil)
    let cancelAction = UIAlertAction(title: &quot;取消&quot;, style: .cancel, handler: nil)
    
    alertController.addAction(destructAction)
    alertController.addAction(exitAction)
    alertController.addAction(cancelAction)
    
    self.present(alertController, animated: true, completion: nil)
    
  }
</code></pre>

<p>以上运行结果为下图，可以看到这个 Alert 只有标题，没有具体的描述信息，这个是被允许的。如果你代码写成只有描述，没有标题，系统会自动把描述作为标题；<strong>但如果你代码中标题和描述都没有，app 会 crash。</strong>如果只有标题和描述，但没有添加任何动作的 alertController 也是可以创建并显示的，但你无法关闭这个 alert。不过这个在实际中也不可能出现这种情况。</p>

<p><img src="media/14994455522628/Simulator%20Screen%20Shot%202017%E5%B9%B47%E6%9C%8810%E6%97%A5%20%E4%B8%8A%E5%8D%8812.56.33.png" alt="Simulator Screen Shot 2017年7月10日 上午12.56.33 " class="mw_img_center" style="display: block; clear:both; margin: 0 auto;"/></p>

<p>当一个 Alert 中有 n 个操作按钮时又会怎样呢？这个 Alert 会自动可上下滚动，并且打开时默认显示最下面的几个按钮操作。Alert 本身就是希望用户对某些操作做出判断并反馈的一个模态窗口，如果有太多的操作，会让用户感觉十分困惑，无法选择，而且交互体验也是非常差的，所以应极力避免这种情况。然而在 iOS 系统中，Airdrop 接收文件选择用什么 app 打开时就会出现这种情况，看上去十分糟糕🙃。</p>

<p><img src="media/14994455522628/%E5%8F%AF%E7%BF%BB%E9%A1%B5%E7%9A%84%20Action%20Sheet.png" alt="可翻页的 Action Sheet " class="mw_img_center" style="display: block; clear:both; margin: 0 auto;"/></p>

<h3 id="toc_6">带文本输入框的 Alert</h3>

<p>一个 Alert 中可以加入文本输入框以获取用户的某些信息，但文本输入框的数量、输入的字符量都应适度，在这么小一个窗口下输入文字的体验不会太好。系统中比较常见的就是购买 app 时输入 Apple ID 密码。以下以输入账户登录名和密码为例说明：</p>

<pre><code>@IBAction func showAlertViewWithTextField(sender: UIButton){
    let alertController = UIAlertController(title:  &quot;请输入你的帐户名和密码&quot;, message: nil, preferredStyle: .alert)
    
    // 在 alertController 中增加两个文本输入框
    alertController.addTextField(configurationHandler: {(textField: UITextField!) -&gt; Void in
      // 为文本输入框添加占位符，也即输入提示
      textField.placeholder = &quot;帐户名&quot;
    })
    
    alertController.addTextField(configurationHandler: {(textField: UITextField!) -&gt; Void in
      textField.placeholder = &quot;密码&quot;
      // 改变文本输入框的属性为安全输入模式
      textField.isSecureTextEntry = true
    })
    
    let loginAction = UIAlertAction(title: &quot;登录&quot;, style: .default, handler: {
      (action:UIAlertAction!) -&gt; Void in
      let firstTextField = alertController.textFields![0] as UITextField
      let secondTextField = alertController.textFields![1] as UITextField
      
      print(&quot;Name \(String(describing: firstTextField.text)), Password \(String(describing: secondTextField.text))&quot;)
    })
    let cancelAction = UIAlertAction(title: &quot;取消&quot;, style: .cancel, handler: nil)

    alertController.addAction(loginAction)
    alertController.addAction(cancelAction)
    
    self.present(alertController, animated: true, completion: nil)
    
  }
</code></pre>

<p>这段代码与之前的不同就是为创建的 alertController 增加了两个文本输入框。在第二个密码输入框中还用到了 textField 的「isSecureTextEntry」属性，当其值「true」时即为安全输入模式，一般用来输入密码。上面这段代码中还细化了点击「登录」按钮时的动作，系统会在控制台中以「Name XXX，Password XXX」的格式输出输入的帐户名和密码。下图是运行效果：</p>

<p><img src="media/14994455522628/Simulator%20Screen%20Shot%202017%E5%B9%B47%E6%9C%889%E6%97%A5%20%E4%B8%8B%E5%8D%889.52.11.png" alt="Simulator Screen Shot 2017年7月9日 下午9.52.11 " class="mw_img_center" style="display: block; clear:both; margin: 0 auto;"/></p>

<p>每个输入框中的文字属性可以自定义，但以默认为佳。另一般情况下这种帐户名+密码输入框会有一些字符判断，比如判断输入值不为空时，「登录」按钮才会可点击。Action 的「isEnabled」属性可以控制按钮是否可点击，「true」为可点击，「false」为不可点。</p>

<h3 id="toc_7">Alert 小结</h3>

<p>从以上实例中小结一下发现的 Alert 的设计细节：</p>

<ul>
<li>Alert 必须要有标题，可以没有描述；只有描述没有标题时，描述会自动变为标题的样式；</li>
<li>Alert 可以有一个或多个操作按钮，当大于两个按钮时会由上至下排列，过多时可以滚动；</li>
<li>Alert 的每个操作有「默认」、「破坏」、「取消」三种样式，显示效果不同。一个 Alert 中只能有一个「取消」样式的操作，且会显示在所有操作之后；</li>
<li>Alert 中有操作（只能有一个）被 highlight 时，「取消」样式的操作会恢复为与「默认」样式相同；</li>
<li>Alert 中的操作可以被控制是否可点击；</li>
<li>Alert 中可以添加文本输入框。</li>
</ul>

<h2 id="toc_8">Action Sheet 在代码中的实现</h2>

<h3 id="toc_9">通常情况下的 Action Sheet</h3>

<p>通常情况下的 Action Sheet 包括其标题、描述、选择的动作和取消动作，以下为具体举例：</p>

<pre><code>  @IBAction func showActionSheetWithThreeActions(sender: UIButton){
    let alertController = UIAlertController(title: &quot;请选择你想要的语言&quot;, message: &quot;选择的语言将在下次 app 打开时生效&quot;, preferredStyle: .actionSheet)
    
    // 定义动作和添加动作到 alertController 两步可以合为一步
    alertController.addAction(UIAlertAction(title: &quot;中文简体&quot;, style: .default, handler: nil))
    alertController.addAction(UIAlertAction(title: &quot;中文繁体&quot;, style: .default, handler: nil))
    alertController.addAction(UIAlertAction(title: &quot;英语&quot;, style: .default, handler: nil))
    alertController.addAction(UIAlertAction(title: &quot;取消&quot;, style: .cancel, handler: nil))
    
    // 设置在 iPad 上 Action Sheet 以 Popover 形式呈现时显示的位置
    let popover = alertController.popoverPresentationController
    if (popover != nil){
      popover?.sourceView = sender
      popover?.sourceRect = sender.bounds
    }
    
    self.present(alertController, animated: true, completion: nil)
    
  }
</code></pre>

<p>说下与之前创建 Alert 时明显的几点不同：</p>

<ul>
<li>Alert 不管在 iPhone 上还是 iPad 上都会显示在屏幕中央，这个位置是系统已经确定好的，无需自己定义；但对于 Action Sheet 来说，在 iPhone 上会从屏幕底部滑出，但对于 iPad 来说要以 Popover 形式展现，就需要定义显示的位置。故上述代码中定义了在 iPad 显示的位置。还有一点，在 iPad 上取消样式的操作按钮是被自动隐藏的。</li>
<li>创建 Action Sheet 后，其中的操作是不可以自定义 highlight 的。</li>
<li>Action Sheet 中是不能有文本输入框的。</li>
</ul>

<p>与 Alert 相同的是：</p>

<ul>
<li>Action Sheet 的操作也是有三种样式，取消样式的操作会显示在最后，且取消样式操作只能有一个；</li>
<li>Action Sheet 的操作过多时会支持滚动；</li>
<li>Action Sheet 只有描述没有标题时，描述会自动变为标题的样式。</li>
</ul>

<p>具体显示效果见下图。</p>

<p><img src="media/14994455522628/Simulator%20Screen%20Shot%202017%E5%B9%B47%E6%9C%889%E6%97%A5%20%E4%B8%8B%E5%8D%889.52.49.png" alt="Simulator Screen Shot 2017年7月9日 下午9.52.49 " class="mw_img_center" style="display: block; clear:both; margin: 0 auto;"/></p>

<p>需要注意的一点是，在显示创建的 alertController 时，「animated」也即是否有过渡动画一般设置为「true」显示。Alert 的过渡动画是一个渐现渐隐的过程，没有的话不会很突兀，但 Action Sheet 如果没有从下而上进入或从上而下退出的过渡动画就会感觉很突然。当然既然系统已经定义好了，两者都显示过渡动画是最好的。</p>

<h3 id="toc_10">没有「取消」操作的 Action Sheet</h3>

<p>如果一个 Action Sheet 没有了「取消」样式的按钮会有什么特别呢？具体代码如下：</p>

<pre><code>@IBAction func showActionSheetWithTwoActions(sender: UIButton){
    let alertController = UIAlertController(title: nil, message: nil, preferredStyle: .actionSheet)
    
    alertController.addAction(UIAlertAction(title: &quot;新建网页&quot;, style: .default, handler: nil))
    alertController.addAction(UIAlertAction(title: &quot;关闭所有网页&quot;, style: .destructive, handler: nil))
    
    self.present(alertController, animated: true, completion: nil)
    
  }
</code></pre>

<p>显示效果见下图。与前面的 Action Sheet 对比就会发现，当一个 Action Sheet 有取消样式操作时，点击这个取消样式的操作按钮或者按页面空白处都可以关闭这个 Action Sheet；但当一个 Action Sheet 没有操作按钮时，点击空白处是没有任何作用的，必须点击操作按钮中的一个才能使其关闭。</p>

<p><img src="media/14994455522628/Simulator%20Screen%20Shot%202017%E5%B9%B47%E6%9C%889%E6%97%A5%20%E4%B8%8B%E5%8D%889.52.53.png" alt="Simulator Screen Shot 2017年7月9日 下午9.52.53 " class="mw_img_center" style="display: block; clear:both; margin: 0 auto;"/></p>

<p>对于 Action Sheet，标题和描述都是可以为空的，这也是与 Alert 不同的一个地方。</p>

<h3 id="toc_11">带有 icon 的 Action Sheet</h3>

<p>99% 的原生 Action Sheet 的操作按钮上都只有文字没有 icon，但在 iOS 系统的系统功能中，在选择输出音频源时显示的 Action Sheet，出现了 icon，如下图。</p>

<p><img src="media/14994455522628/%E5%B8%A6%20Icon%20%E7%9A%84%20Action%20Sheet.png" alt="带 Icon 的 Action Sheet " class="mw_img_center" style="display: block; clear:both; margin: 0 auto;"/></p>

<p>这是一个非常特殊的例子。具体实现方式如下：</p>

<pre><code>@IBAction func showActionSheetWithFourActions(sender: UIButton){
    let alertController = UIAlertController(title: nil, message: nil, preferredStyle: .actionSheet)
    
    let twitterAction = UIAlertAction(title: &quot;Twitter&quot;, style: .default, handler: nil)
    // 为这个动作添加一个 icon
    twitterAction.setValue(UIImage(named:&quot;twitter&quot;), forKey: &quot;image&quot;)
    
    let spotifyAction = UIAlertAction(title: &quot;Spotify&quot;, style: .default, handler: nil)
    spotifyAction.setValue(UIImage(named:&quot;spotify&quot;), forKey: &quot;image&quot;)
    
    let pinterestAction = UIAlertAction(title: &quot;Pinterest&quot;, style: .default, handler: nil)
    pinterestAction.setValue(UIImage(named:&quot;pinterest&quot;), forKey: &quot;image&quot;)
    
    alertController.addAction(twitterAction)
    alertController.addAction(spotifyAction)
    alertController.addAction(pinterestAction)
    alertController.addAction(UIAlertAction(title: &quot;Cancel&quot;, style: .cancel, handler: nil))
    
    self.present(alertController, animated: true, completion: nil)
    
  }
</code></pre>

<p>上述代码运行效果如下图。可以看到添加的 icon 图片默认显示在了每个 action 的最左边，很难再进行进一步的自定义。在 Action Sheet 中显示 icon 不能说不可以，但这种在原生基础上对 AlertController 进行自定义，从设计上来说，一定程度上破坏了统一性。</p>

<p><img src="media/14994455522628/Simulator%20Screen%20Shot%202017%E5%B9%B47%E6%9C%889%E6%97%A5%20%E4%B8%8B%E5%8D%889.52.57.png" alt="Simulator Screen Shot 2017年7月9日 下午9.52.57 " class="mw_img_center" style="display: block; clear:both; margin: 0 auto;"/></p>

<h3 id="toc_12">Action Sheet 小结</h3>

<p>从以上实例中小结一下发现的 Action Sheet 的设计细节：</p>

<ul>
<li>Action Sheet 可以既没有标题，又没有描述；只有描述没有标题时，描述会自动变为标题的样式；</li>
<li>Action Sheet  可以有一个或多个操作按钮，过多时可以滚动，适配 iPad 时要定义在 iPad 上显示的位置，并以 Popover 的形式展现，且取消样式的操作按钮在 iPad 上是被自动隐藏的；</li>
<li>Action Sheet  的每个操作有「默认」、「破坏」、「取消」三种样式，显示效果不同。一个 Alert 中只能有一个「取消」样式的操作，且会显示在所有操作之后；</li>
<li>Action Sheet 有「取消」样式的操作按钮时，可以点击空白处关闭 Action Sheet；但当没有「取消」样式的操作按钮时，不可以点击空白处关闭；</li>
<li>Action Sheet 中的操作不能被自定义 highlight ；</li>
<li>Action Sheet  中的操作可以被控制是否可点击；</li>
<li>Action Sheet 中不可以添加文本输入框；</li>
<li>Action Sheet 的每个操作可以添加 icon，但不推荐。</li>
</ul>

<h2 id="toc_13">自定义 AlertController ？</h2>

<p>iOS 系统提供给了设计师和开发者定义好的 Alert 和 Action Sheet，那这两个 View 还能不能进一步进行自定义视觉显示样式呢？</p>

<p>如果直接回答，答案当然是能。上文中提到的给 action 添加 icon 其实就是一种。再比如改变字体颜色只需要在创建 UIAlertController 后改变其 view 的 「tintcolor」属性，代码如下：</p>

<pre><code>@IBAction func showActionSheetWithTwoActions(sender: UIButton){
    let alertController = UIAlertController(title: nil, message: &quot;选择你想要的操作&quot;, preferredStyle: .actionSheet)
    
    // 更改 alertController 的字体颜色
    alertController.view.tintColor = UIColor.black
    
    // 下面的代码同上文提到的没有「取消」操作的 Action Sheet，不再重复，以……表示
    ……
  }
</code></pre>

<p>运行效果如下图，可以看到默认样式操作的字体已被改为黑色，但破坏样式的操作的字体颜色没有变化。</p>

<p><img src="media/14994455522628/Simulator%20Screen%20Shot%202017%E5%B9%B47%E6%9C%889%E6%97%A5%20%E4%B8%8B%E5%8D%8810.10.45.png" alt="Simulator Screen Shot 2017年7月9日 下午10.10.45 " class="mw_img_center" style="display: block; clear:both; margin: 0 auto;"/></p>

<p>在 Apple 的 <a href="https://developer.apple.com/documentation/uikit/uialertcontroller">UIAlertController 开发文档</a> 中有这样一段话：</p>

<blockquote>
<p>The UIAlertController class is intended to be used as-is and does not support subclassing. The view hierarchy for this class is private and must not be modified.  </p>
</blockquote>

<p>故从 Apple 官网的角度来看，是完全不推荐或者说不允许自定义 UIAlertController 样式的。从设计角度来看亦是如此。原生定义的这两种 View 如果被任意的局部自定义，那么就会有各种奇形怪状的 Alert 和 Action Sheet 出现在用户面前，体验上差劲，整体性大打折扣。网络上有很多文章讲怎么自定义这两个 View 的某些样式，定义后的效果如下：🙄🙄🙄</p>

<p><img src="media/14994455522628/%E5%A5%87%E6%80%AA%E7%9A%84%20Alert%20and%20Action%20Sheet.png" alt="奇怪的 Alert and Action Sheet " class="mw_img_center" style="display: block; clear:both; margin: 0 auto;"/></p>

<p>个人觉得把这些自定义作为开发研究还好，但如果真应用于实际 app 中，就真的……如果觉得系统的原生 Alert 和 Action Sheet 不能满足自己的需求，还是建议重新设计一套有视觉规范的符合自己需求的 Alert 和 Action Sheet。</p>

<h2 id="toc_14">设计 Alert 和 Action Sheet 时还要注意什么</h2>

<p>有关于 Alert 和 Action Sheet 的设计，Apple 在 <a href="https://developer.apple.com/ios/human-interface-guidelines/ui-views/alerts/">iOS Human Interface Guidelines</a> 中还提到了几点：</p>

<ul>
<li>Alert 会打断用户的当前操作，所以在显示 Alert 应该足够谨慎，只在非常必要时显示 Alert，并确保每个操作按钮的必要性和易读性，这样才能确保当真正发生问题时，一个 Alert 能够立即引起用户重视并作出正确的选择。</li>
<li>在横屏和竖屏下的 Alert 显示的标题、描述文本排列是不同的，在测试时应确保在两种角度下文本显示均是最优的。</li>
<li>在 Action Sheet 中，一个表示取消意义的「取消」按钮是十分有必要的，对用户的使用也是友好的。</li>
<li>确保 Action Sheet 中的破坏性操作始终在最上面显示。</li>
</ul>

<p>以上就是从设计出发从设计和开发两方面去研究的 Alert 和 Action Sheet，也即 UIAlertController。希望可以帮助设计师更好的明白其中的诸多细节逻辑，帮助工程师更好的了解这两个 View 的作用。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[包容性 App 设计 Inclusive App Design - WWDC 2016 Session 801]]></title>
    <link href="http://chuxiangyuan.github.io/15030704996885.html"/>
    <updated>2017-08-18T23:34:59+08:00</updated>
    <id>http://chuxiangyuan.github.io/15030704996885.html</id>
    <content type="html"><![CDATA[
<p>要想让自己的 app 面向更多的国家/地区，服务更多的各种各样的用户，就需要考虑 Inclusive App Design。除了为什么这样做，重点讲了该如何做。</p>

<span id="more"></span><!-- more -->

<h2 id="toc_0">Why should I be inclusive?</h2>

<ul>
<li>2016 年第二季度的苹果销售中，有 67% 是国际化的；</li>
<li>全世界有 28.5 亿人是盲人或者视力低下；</li>
<li>全世界超过 10 亿人有残疾。</li>
</ul>

<h2 id="toc_1">How can I be more inclusive?</h2>

<h3 id="toc_2">Typography 字体排版</h3>

<ul>
<li><p>一个例子：一些文本，拆分成三块，针对每块的内容在文字大小、字重、样式、颜色上进行调整，以保证清晰的层级关系，并且可以对应翻译成中文。</p>

<p><img src="media/15030704996885/B59FCDFC-2928-4781-9379-4FACAA261034.png" alt="B59FCDFC-2928-4781-9379-4FACAA261034"/></p></li>
<li><p>需要考虑的因素：</p>

<ul>
<li><p>拉丁文书写系统和非拉丁文书写系统：拉丁文书写除了普通的样式外，还有带有声调的扩展样式；非拉丁文书写可能没有大写样式，可能没有斜体样式；</p>

<ul class="example-orbit" data-orbit>
       <li>
        <img src="media/15030704996885/071336CC-2FD3-4558-88B4-EDD4E1C4D4DA.png" alt="" />
        <div class="orbit-caption">非拉丁文没有大写样式</div>
      </li>
      <li>
        <img src="media/15030704996885/434FD317-6434-4F3A-BEE2-4DE3EB4C9D00.png" alt="" />
        <div class="orbit-caption">带声调的拉丁字母</div>
      </li>
    </ul></li>
<li><p>对于不同的文字，字重数量不同：SF 字体有九种字重，中文（苹方）没有「Bold」、「Heavy」、「Black」这三种字重，日语只有「Regular」和「Bold」两种字重。</p>

<p><img src="media/15030704996885/4A311761-6452-4321-8EBD-2BE24FF12CCC.png" alt="4A311761-6452-4321-8EBD-2BE24FF12CC"/></p></li>
<li><p>更大的字号是更加通用的：对于一个很小字号的拉丁字母可能可读性尚可，但对于同样字号的汉字，可能笔画都叠在了一起而不可读。</p>

<p><img src="media/15030704996885/68449820-9FB1-4B83-B0BE-9085BF4DE119.png" alt="68449820-9FB1-4B83-B0BE-9085BF4DE119"/></p></li>
<li><p>高型书写系统：泰语的字母还有声调等样式，使得整个文字超出 ascender 和 descender，支持这些语言时不应该截掉这些信息。在布局时这些文字自然需要更大的空间显示。</p>

<p><img src="media/15030704996885/BB47E969-CAEF-46DC-9F52-EB54123D5F8C.png" alt="BB47E969-CAEF-46DC-9F52-EB54123D5F8"/></p>

<p><img src="media/15030704996885/B53BA56E-656A-4AEA-98E6-877283452F8C.png" alt="B53BA56E-656A-4AEA-98E6-877283452F8"/></p></li>
</ul></li>
</ul>

<h3 id="toc_3">Dynamic layouts 动态布局</h3>

<ul>
<li><p>通常情况下英语单词越短，翻译到其他语言就越长，2-3 倍的情况经常出现。</p>

<p><img src="media/15030704996885/2E58E3D7-BE8E-4B4C-BC0B-D640C6190507.png" alt="2E58E3D7-BE8E-4B4C-BC0B-D640C6190507"/></p></li>
<li><p>你不希望一些重要的信息在末尾丢失，所以在开发时使用动态布局，以适应不同语言。</p>

<ul class="example-orbit" data-orbit>
  <li>
    <img src="media/15030704996885/%E4%B8%AD%E6%96%87.jpg" alt="" />
    <div class="orbit-caption">中文</div>
  </li>
  <li>
    <img src="media/15030704996885/%E8%8B%B1%E8%AF%AD.jpg" alt="" />
    <div class="orbit-caption">英语</div>
  </li>
  <li>
    <img src="media/15030704996885/%E5%BE%B7%E8%AF%AD.jpg" alt="" />
    <div class="orbit-caption">德语</div>
  </li>
  <li>
    <img src="media/15030704996885/%E6%B3%B0%E8%AF%AD.jpg" alt="" />
    <div class="orbit-caption">泰语</div>
  </li>
  <li>
    <img src="media/15030704996885/%E9%98%BF%E6%8B%89%E4%BC%AF%E8%AF%AD.jpg" alt="" />
    <div class="orbit-caption">阿拉伯语</div>
  </li>
</ul></li>
<li><p>动态类型</p>

<ul>
<li><p>为不同的 Label 确定合适的层级，每个层级有对应的字体、字号、字重、行间距、字间距。</p>

<p><img src="media/15030704996885/3283ADE5-6D59-464C-B796-6E55E77B1B94.png" alt="3283ADE5-6D59-464C-B796-6E55E77B1B94"/></p></li>
<li><p>动态类型会根据这些层级，在系统调整字体大小时进行自动的调整。</p>

<p><img src="media/15030704996885/BE60904A-8B42-4C0C-873C-FC946046BFFB.png" alt="BE60904A-8B42-4C0C-873C-FC946046BFFB"/></p></li>
</ul></li>
<li><p>在 iPad 上，由于屏幕很大，在阅读时从左往右读完一行很小的文字再回到第二行的最左端是比较费力的，应该在这种大屏幕上对边距进行动态调整，小字号，显示区域小；大字号，显示区域大。</p>

<p><img src="media/15030704996885/11D6F175-D183-40D1-B236-435401FFA81A.png" alt="11D6F175-D183-40D1-B236-435401FFA81A"/></p></li>
<li><p>对从右往左读的语言进行优化：镜像 UI，但像数字、电话号码、时钟、乐谱、图表、视频控制、图片不需要镜像。</p>

<ul class="example-orbit" data-orbit>
  <li>
    <img src="media/15030704996885/21.jpg" alt="" />
    <div class="orbit-caption">Left-to-Right Languages</div>
  </li>
  <li>
    <img src="media/15030704996885/22.jpg" alt="" />
    <div class="orbit-caption">Right-to-Left Languages</div>
  </li>
</ul>

<p>一个实例：Tweetbot 在不同语言下的 UI</p>

<p><img src="media/15030704996885/2.jpg" alt="2"/></p></li>
</ul>

<h3 id="toc_4">Color 颜色</h3>

<ul>
<li><p>颜色代表不同的含义，不同文化中不同：</p>

<ul>
<li>蓝色：蓝色是最受欢迎的颜色，蓝天、大海，代表平静，缓和情绪；</li>
<li>绿色：生机、自然、环保、幸运、可通行、股票中的跌；</li>
<li>红色：革命、浪漫、爱、喜庆、股票中的涨。</li>
</ul></li>
<li><p>色盲、色弱：</p>

<ul>
<li>在 12 个男人中就有一个人是色盲；</li>
<li><p>一些功能不能完全靠颜色来区分，如「邮件」app 里的「旗标样式」既可以用颜色来表示，又可以用形状来表示。</p>

<p><img src="media/15030704996885/93C1E2C1-0206-40B3-9259-571B06D62428.png" alt="93C1E2C1-0206-40B3-9259-571B06D62428"/></p></li>
</ul></li>
<li><p>较高的颜色对比度：</p>

<ul>
<li><p>Color Contrast Calculator 工具；</p>

<p><img src="media/15030704996885/24737F73-241B-4EB1-B7A8-539A9D892340.png" alt="24737F73-241B-4EB1-B7A8-539A9D892340"/></p></li>
<li><p>黑和白的对比度为 21：1，字号较小和较大时都适用；</p></li>
<li><p>建议对比度 7：1，最小对比度 4.5：1；</p></li>
<li><p>在对比度比较小时，使用较小的字号是不合适的；在对比度很小时，即使很大的字号也不合适，需要更换颜色；</p>

<p><img src="media/15030704996885/0F2BF27A-98BA-45EB-90A8-D7FBF75730CA.png" alt="0F2BF27A-98BA-45EB-90A8-D7FBF75730CA"/></p></li>
<li><p>在一个背景下该用黑色还是白色文字，可以通过对比度来决定，选取对比度高的颜色。</p>

<p><img src="media/15030704996885/4323FDCB-0781-4B2C-ABF0-97D3AAC7F65E.png" alt="4323FDCB-0781-4B2C-ABF0-97D3AAC7F65E"/></p></li>
</ul></li>
</ul>

<h3 id="toc_5">Iconography 图形标志</h3>

<ul>
<li><p>红十字会：有三种标志——红十字、红月牙、红水晶，用于不同文化的地区；</p>

<p><img src="media/15030704996885/4971C85E-30BC-441E-A1CB-FF80919C5E98.png" alt="4971C85E-30BC-441E-A1CB-FF80919C5E98"/></p></li>
<li><p>手掌：打招呼、阻止、无所畏惧（佛教）</p></li>
<li><p>避免在图标中使用指引和文字；</p>

<p><img src="media/15030704996885/A2633681-6E56-40B8-BF2F-BBC3BBFEC50A.png" alt="A2633681-6E56-40B8-BF2F-BBC3BBFEC50A"/></p></li>
<li><p>图形标志应该与 UI 匹配，如 UI 为从右到左读的语言适配后，图标也要适配。</p>

<p><img src="media/15030704996885/6.jpg" alt="6"/></p></li>
</ul>

<h3 id="toc_6">Next Steps</h3>

<ul>
<li>Who is your audience?</li>
<li>What are their cultural values? </li>
<li>What capabilities will they have? </li>
<li>Speak with them directly</li>
<li>How can I be more inclusive?</li>
</ul>

<blockquote>
<p>Session 链接：<a href="https://developer.apple.com/videos/play/design/24/">Inclusive App Design - Design - Videos - Apple Developer</a>  </p>
</blockquote>

<p>📱💻</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[排版和字体 Typography and Fonts - WWDC 2016 Session 803]]></title>
    <link href="http://chuxiangyuan.github.io/15029504785442.html"/>
    <updated>2017-08-17T14:14:38+08:00</updated>
    <id>http://chuxiangyuan.github.io/15029504785442.html</id>
    <content type="html"><![CDATA[
<p>由 SF 字体引出字体的一些术语和排版上的一些概念，介绍了 SF 字体在排版上提供的新功能。</p>

<span id="more"></span><!-- more -->

<h2 id="toc_0">San Francisco Fonts</h2>

<ul>
<li>SF Pro Text、SF Pro Display：iOS、macOS、tvOS（WWDC 2017 开始启用）</li>
<li>SF UI Text、SF UI Display：iOS、macOS、tvOS；</li>
<li>SF Compact Text、SF Compact Display：watchOS；</li>
<li><p>SF Mono（一种等宽字体，New in WWDC 2016）：Code in Xcode、Terminal、Swift Playgrounds。</p>

<p><img src="media/15029504785442/BC65E41A-C90D-47C7-9C78-9A699C4EEE2F.png" alt="BC65E41A-C90D-47C7-9C78-9A699C4EEE2F"/></p>

<ul>
<li>SF 与 SF Mono</li>
</ul>

<p><img src="media/15029504785442/7AF3BC06-7011-460D-9E7C-C47B7C7695E9.png" alt="7AF3BC06-7011-460D-9E7C-C47B7C7695E9"/></p>

<ul>
<li>等宽字体（Monospaced）：不同字重下有着相同的宽度</li>
</ul>

<p><img src="media/15029504785442/0451C080-D67D-47A2-9EF4-B2451566026B.png" alt="0451C080-D67D-47A2-9EF4-B2451566026B"/></p></li>
</ul>

<h2 id="toc_1">术语 Terminology</h2>

<ul>
<li>Text：文本，如「App」；</li>
<li>Character：字符，文本的抽象单位，可以由一个代码代表，如字母「A」</li>
<li>Glyph：字形，如字母「A」的这个形状，人们看到这个就知道这是字母「A」，而不是其他字母；</li>
<li><p>Feature：功能，通常在字体文件中，字形与字符是一一对应的，但有时候有特殊，如「6」这个字符在一个字体中有两种「字形」，你可以选择其中一种（Optional）；输入两个字母，这两个字母自动连笔，形成了一个新的字形（Automatic），这都是 Feature；</p>

<p><img src="media/15029504785442/Font%20Automatic%20Feature.png" alt="Font Automatic Feature " class="mw_img_center" style="display: block; clear:both; margin: 0 auto;"/></p></li>
<li><p>Font：字体（文件）；</p></li>
<li><p>Style：样式，如「粗体」、「斜体」、「粗斜体」、「紧缩」；</p></li>
<li><p>Typeface：字型，样式背后的设计理念，如将字母「A」变换成各种不同的形状，但其终究还是字母「A」；</p></li>
<li><p>Typography：排版，使用字型来设置文本并给语言编码。</p></li>
</ul>

<p><img src="media/15029504785442/94B33019-6DE5-49B8-954A-C48D7A3CD680.png" alt="94B33019-6DE5-49B8-954A-C48D7A3CD680"/></p>

<ul>
<li>Text 的关心对象：Writers，Editors；</li>
<li>Character 的关心对象：Unicode；</li>
<li>Glyph、Feature、Font、Style、Typeface 的关心对象：Type Designers，Font Manufacturers；</li>
<li>Typography 的关心对象：Typographers = You（App Developer/Designer）。</li>
</ul>

<h2 id="toc_2">概念 Conceps</h2>

<p><img src="media/15029504785442/30AF7D16-B07D-4AC3-A2DC-1EF3168295E8.png" alt="30AF7D16-B07D-4AC3-A2DC-1EF3168295E8"/></p>

<ul>
<li><p>内嵌于字体中（Embedded in the Font）</p>

<ul>
<li>Spacing：空间，一个字符所占的位置，内置在字体中无法改变；</li>
<li><p>Kerning：字偶距，某两个字母间的距离，一般设置在字体内部，无法改变。</p>

<p><img src="media/15029504785442/0053A8A4-21BE-4D83-9C0D-E621D0464CE6.png" alt="0053A8A4-21BE-4D83-9C0D-E621D0464CE6"/></p></li>
</ul></li>
<li><p>可调整的（Adjustable）</p>

<ul>
<li><p>Tracking：字符间距，字间距，所有字符整体调整，正值、零值、负值；</p>

<p><img src="media/15029504785442/4616025D-2E31-4C2D-ADAA-1FF14908BAD0.png" alt="4616025D-2E31-4C2D-ADAA-1FF14908BAD0"/></p></li>
<li><p>Leading：行距，两行的 baseline 的距离称为行距，descenders-理解为字符延伸到 baseline 下面的那部分，如小写字母 q；ascenders-理解为字符延伸到 baseline 上面的那部分，如小写字母 h。</p>

<p><img src="media/15029504785442/F2282DF8-6974-46A8-957E-D34D0B85F8CD.png" alt="F2282DF8-6974-46A8-957E-D34D0B85F8CD"/></p></li>
</ul></li>
<li><p>外部参考链接：<a href="https://creativemarket.com/blog/whats-the-difference-between-leading-kerning-and-tracking">What’s the Difference Between Leading, Kerning and Tracking? </a></p></li>
<li><p>影响排版的一些因素</p>

<ul>
<li>易读性（Legibility）</li>
<li>尺寸（Scale）</li>
<li>布局（Layout）</li>
<li>密集度（Density）</li>
<li>质感（Voice）</li>
</ul></li>
</ul>

<h2 id="toc_3">工具 Tools</h2>

<ul>
<li>System Font：使用系统字体只需确定字体大小和字重：<code>UIFont.systemFont(ofSize: 34, weight: UIFontWeightBlack)</code>，每种字体大小都有预设好的字间距 tracking，开启「粗体文本」后，系统中会自动进行粗体文本转换。</li>
<li>Dynamic Type：应用在 iOS 和 watchOS，在「设置」→「显示与亮度」→「文字大小」中，「辅助功能」中还可开启「更大字体」。使用 Text Styles APIs：<code>UIFont.preferredFont(forTextStyle:)</code>，动态类型功能会自动支持。</li>
<li>Custom Fonts：由于多为开发上的一些实际操作，暂不展开，具体步骤如下，

<ol>
<li>Pick or bundle a font</li>
<li>Lookup table for the Content Size Categories</li>
<li>Override <code>traitCollectionDidChange</code></li>
<li>Update your fonts and paragraph style</li>
<li>Relayout</li>
</ol></li>
<li>Font Selection：如果你决定要使用自定义字体，那么你需要考虑：

<ol>
<li>Easier sticking with one typeface at a time 从一次使用一个字型开始更容易</li>
<li>Understanding design intention helps in usage 深度理解这些字型的设计目的</li>
<li>Consider defaults and knobs you can turn 考虑你可以改变的那些样式，如字间距、行间距</li>
</ol></li>
</ul>

<h2 id="toc_4">细节 Details</h2>

<ul>
<li><p>Arrows 箭头（New in WWDC 2016）：各个方向的箭头是内置于 SF 字体中的，并且同样有不同的自重，可在交互中用于指向。</p>

<p><img src="media/15029504785442/15029510805694.jpg" alt=""/></p></li>
<li><p>High-Legibility Alternates 高易读性替换（New in WWDC 2016）：对于一串字符串，如果用户不易辨别字符串中的字母到底是什么，可以使用开启这个功能，系统自动把不易辨别的字母转换为不会有歧义的字母。但这个功能不要轻易开启，会破坏文本整体的一致性。</p>

<p><img src="media/15029504785442/E598CEAF-F8AA-4263-BE8F-6AE726388D1B.png" alt="E598CEAF-F8AA-4263-BE8F-6AE726388D1B"/></p>

<p>在代码中启用的示例如下：</p>

<pre><code>let pointSize: CGFloat = 60.0
let systemFontDesc = UIFont.systemFont(ofSize: pointSize, weight: UIFontWeightLight).fontDescriptor()
let highLegibilityFontDesc = systemFontDesc.addingAttributes(
  [
    UIFontDescriptorFeatureSettingsAttribute:
      [
        [
          UIFontFeatureTypeIdentifierKey: kStylisticAlternativesType,
          UIFontFeatureSelectorIdentifierKey: kStylisticAltSixOnSelector,
        ],
      ]
  ]
)

label.font = UIFont(descriptor: highLegibilityFontDesc, size: pointSize)
</code></pre></li>
<li><p>Small Caps 小型大写字母：大写字母的缩小版，几乎与小写字母对齐。两个例子如下图。当觉着大写字母与周围的小写字母相比过大而显得不协调，如果仅仅调整字体大小，那会改变字符串的密集度或者说字间距，故可以开启「Small Caps」功能，保证密集度和笔画厚度，使排版美观。</p>

<p><img src="media/15029504785442/10C7242A-570D-4AF0-980C-94171E30D6B1.png" alt="10C7242A-570D-4AF0-980C-94171E30D6B1"/></p>

<p>在 Apple TV 上使用的一个实例：</p>

<p><img src="media/15029504785442/1BB0A3BB-6DC5-4A8D-BA48-08825A863171.png" alt="1BB0A3BB-6DC5-4A8D-BA48-08825A863171"/></p>

<p>具体使用上分为以下几种类型，可以用一种，也可以用多种：</p>

<ul>
<li><p>Small Caps from Uppercase（把大写字母转换为小型大写字母）：对于一个字符串，1.全是大写，适合此功能；2.大小写混合，不适合此功能；3.全是小写，这样使用有点别扭，但也还 OK。</p>

<p><img src="media/15029504785442/FA47AC14-09B1-4920-9854-1060555FC0C9.png" alt="FA47AC14-09B1-4920-9854-1060555FC0"/></p></li>
<li><p>Small Caps from Lowercase（把小写字母转换为小型大写字母）：字符串的上述三种情况都还适合。</p>

<p><img src="media/15029504785442/735C71DC-DA4B-4946-828E-06A578BFB51B.png" alt="735C71DC-DA4B-4946-828E-06A578BFB51B"/></p></li>
<li><p>上述两种类型在代码中启用的方法示意如下：</p>

<pre><code>let pointSize: CGFloat = 60.0
let systemFontDesc = UIFont.systemFont(ofSize: pointSize, weight: UIFontWeightLight).fontDescriptor()
let smallCapsFontDesc = systemFontDesc.addingAttributes(
  [
    UIFontDescriptorFeatureSettingsAttribute:
    [

      [
        UIFontFeatureTypeIdentifierKey: kLowerCaseType,
        UIFontFeatureSelectorIdentifierKey: kLowerCaseSmallCapsSelector,
      ],
      [
        UIFontFeatureTypeIdentifierKey: kUpperCaseType,
        UIFontFeatureSelectorIdentifierKey: kUpperCaseSmallCapsSelector,
      ],

    ]
  ]
)

label.font = UIFont(descriptor: smallCapsFontDesc, size: pointSize)
</code></pre></li>
<li><p>Small Caps Numbers and Punctuation<br/>
<img src="media/15029504785442/1621C0AD-EADF-4D1C-92F7-A7C848B4B522.png" alt="1621C0AD-EADF-4D1C-92F7-A7C848B4B522"/></p></li>
</ul></li>
</ul>

<blockquote>
<p>Session 链接：<a href="https://developer.apple.com/videos/play/wwdc2016/803/">Typography and Fonts - WWDC 2016 - Videos - Apple Developer</a>  </p>
</blockquote>

<h2 id="toc_5">相关文章</h2>

<ul>
<li>有关于 SF 字体的更多介绍： <a href="15028584576994.html">新的系统字体 Introducing the New System Fonts - WWDC 2015 Session 804</a></li>
</ul>

<p>📱💻⌚️📺</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[新的系统字体 Introducing the New System Fonts - WWDC 2015 Session 804]]></title>
    <link href="http://chuxiangyuan.github.io/15028584576994.html"/>
    <updated>2017-08-16T12:40:57+08:00</updated>
    <id>http://chuxiangyuan.github.io/15028584576994.html</id>
    <content type="html"><![CDATA[
<p>介绍从 iOS 9 时代开始使用的新的系统字体 San Francisco，包括 SF 字体的分支、如何使用、提供的功能等。</p>

<span id="more"></span><!-- more -->

<h2 id="toc_0">San Francisco Fonts</h2>

<ul>
<li><p>San Francisco 字体家族有两种字体二级家族，一种是 SF， 用于 iOS、macOS、tvOS，另一种是 SF Compact，专门用于 watchOS。每个字体又分两种视觉尺寸（Optical Sizes），一种是 Text，包含六种字重；另一种是 Display，包含九种字重。注：从 iOS 11 开始，苹果开始启用了 SF Pro 这个字体分支，替代了 SF。</p>

<p><img src="media/15028584576994/0242A688-8764-4A6F-AE6A-D858FC82F490.png" alt="0242A688-8764-4A6F-AE6A-D858FC82F490"/></p></li>
<li><p>SF 与 SF Compact 的对比：SF 字体更加圆润，SF Compact 更显笔直，字母之间有更多的空间，这样在 Apple Watch 的小屏幕上，SF Compact 更加易读。</p>

<p><img src="media/15028584576994/942098B4-087E-48B0-B9C0-589F9FE1AAC3.png" alt="942098B4-087E-48B0-B9C0-589F9FE1AA"/></p></li>
<li><p>几个排版上的术语：</p>

<ul>
<li>baseline：基线；</li>
<li>x-height：小写字母 x 的顶部，小写字母的对齐标准；</li>
<li>cap height：大写字母 X 的顶部，大写字母的对齐标准；</li>
<li>descender：小写字母基准线以下的对齐位置；</li>
<li>ascender：小写字母基准线以上的对齐位置。</li>
</ul>

<p><img src="media/15028584576994/Font%20Proportions.png" alt="Font Proportions"/></p></li>
<li><p>在字体比例上的几点改善：</p>

<ul>
<li>Cap-Height Lower Than Ascenders</li>
<li>Large x-Height</li>
<li>Numbers Align with Uppercase</li>
</ul>

<p><img src="media/15028584576994/SF.png" alt="SF"/></p></li>
</ul>

<h2 id="toc_1">Principles</h2>

<blockquote>
<p>Visual perception is largely about illusion. 视觉感知总是跟错觉有关。  </p>

<p>To make two shapes look similar, they often have to be made dissimilar. 为了让两个形状看起来相似，他们必须要被弄得不相似。  </p>
</blockquote>

<ul>
<li><p>Display VS Text：Display 用于 20 磅及以上大小的文字，Text 用于 19 磅及以下大小的文字。Text 这种视觉尺寸的字间距更大（相同字号下），更易读。两种视觉尺寸在系统里自动切换，但在设计软件里要注意修改。</p>

<p><img src="media/15028584576994/D704CD00-4380-4E9A-B56B-AE1C853C6E55.png" alt="D704CD00-4380-4E9A-B56B-AE1C853C6E55"/></p></li>
<li><p>Negative Space 负空间：字母内测、字母周围的空间，Text 周围的空间几乎是 Display 的两倍。</p>

<p><img src="media/15028584576994/18EB4B79-F752-46AC-86CF-EA1C31446A3F.png" alt="18EB4B79-F752-46AC-86CF-EA1C31446A3F"/></p></li>
<li><p>Confusable Shapes：字母间有很多相似处，在字号小时很容易混淆。Text 和 Display 就在这些地方有细微的差别。</p>

<ul>
<li><p>counter：反向对称区，字母上下对称的部分</p>

<p><img src="media/15028584576994/E081B9C0-3156-486D-9F58-E46496223C76.png" alt="E081B9C0-3156-486D-9F58-E46496223"/></p></li>
<li><p>aperture：缝隙，字母的开口</p>

<p><img src="media/15028584576994/1F6FCE63-B891-4B23-9ECF-DFAE819AEFC5.png" alt="1F6FCE63-B891-4B23-9ECF-DFAE819AEF"/></p></li>
</ul></li>
<li><p>Tracking Is Size-Specific：字号越大，字间距 tracking 越小，有一个变化曲线（tracking tables）</p>

<p><img src="media/15028584576994/15028587818938.jpg" alt=""/></p></li>
<li><p>Weights 字重：Text - 6 种字重（Light、Regular、Medium、Semibold、Bold、Heavy），Display - 9 种字重（多了 Ultralight、Thin、Black），Text 的字号小，没有必要有更多字重。</p></li>
<li><p>在 AppKit 和 UIKit 里提供了配置字号、字重的方法，如：<br/>
<code>UIFont.systemFontOfSize(20, weight: UIFontWeightMedium)</code></p>

<p><img src="media/15028584576994/609EDDCB-B829-4F59-A2FD-3CCC10C3C7C9.png" alt="609EDDCB-B829-4F59-A2FD-3CCC10C3C7"/></p></li>
<li><p>字重的作用：</p>

<ul>
<li><p>Differentiation and hierarchy 区分和层级</p>

<p><img src="media/15028584576994/Weight-Use%20in%20Differentiation%20and%20Hierarchy.png" alt="Weight-Use in Differentiation and Hierarchy"/></p></li>
<li><p>Similitude 相似：更大的尺寸，更小的自重；更小的尺寸，更大的自重</p>

<p><img src="media/15028584576994/F504AA59-9EF0-4347-8EDC-79C67BEBECD9.png" alt="F504AA59-9EF0-4347-8EDC-79C67BEBECD9"/></p></li>
<li><p>Voice 氛围：字重的巧妙利用，可以营造完全不同的氛围。</p>

<p><img src="media/15028584576994/5.jpg" alt="5"/></p></li>
</ul></li>
<li><p>怎样使用字重：</p>

<ul>
<li>首先保证要清楚；

<ul>
<li>建立连续、清晰的层级关系；</li>
<li>在 iOS 中可以使用 Text Style APIs，适配动态类型</li>
</ul></li>
<li>注意在 iOS 和 watchOS 中的「设置」→「通用」→「辅助功能」里提供了「粗体文本」的开关选项；</li>
<li>如果使用过粗的字重可能就会到达极限；</li>
<li>如果使用过细的字重，对于某些用户来说，可读性大大下降。</li>
</ul></li>
</ul>

<h2 id="toc_2">Typographic Features</h2>

<ul>
<li>Features are behaviors embedded inside a font. </li>
<li><p>开启这些 Feature：Xcode 中的 Typography Panel。</p>

<p><img src="media/15028584576994/A3348F38-B260-47B9-9982-1FE9E186A7F8.png" alt="A3348F38-B260-47B9-9982-1FE9E186A7F8 " class="mw_img_center" style="display: block; clear:both; margin: 0 auto;"/></p></li>
<li><p>Fractions 分数：自动转换（2/9这种输入自动转换)</p>

<p><img src="media/15028584576994/542C9FA2-3971-4957-8E73-78B55AAEEF11.png" alt="542C9FA2-3971-4957-8E73-78B55AAEEF11"/></p>

<p>在代码中启用这个功能的方法示例如下：</p>

<pre><code>```
let pointSize : CGFloat = 60.0
let systemFontDesc = UIFont.systemFontOfSize(pointSize, weight: UIFontWeightLight).fontDescriptor()
let fractionFontDesc = systemFontDesc.fontDescriptorByAddingAttributes(
[
  UIFontDescriptorFeatureSettingsAttribute: [
    [
      UIFontFeatureTypeIdentifierKey: kFractionsType,
      UIFontFeatureSelectorIdentifierKey: kDiagonalFractionsSelector,
      ],
  ]
]
)

label.font = UIFont(descriptor: fractionFontDesc, size:pointSize)
```
</code></pre></li>
<li><p>Superiors / Superscripts 上标、Inferiors / Subscripts 下标</p>

<p><img src="media/15028584576994/Subscripts.png" alt="Subscripts"/></p></li>
<li><p>Uppercase Forms 大写形式 （A+3中的加号）</p>

<p><img src="media/15028584576994/DA34D099-ABD5-427C-8138-04205EF97FEC.png" alt="DA34D099-ABD5-427C-8138-04205EF97FE"/></p></li>
<li><p>Vertically Centered Colon：时间中的冒号，默认开启，上下居中显示</p>

<p><img src="media/15028584576994/5A85DC92-65E8-4986-AD75-C59DB5C76DC6.png" alt="5A85DC92-65E8-4986-AD75-C59DB5C76D"/></p></li>
<li><p>Alternate Six and Nine：数字 6 和 9 在字号较小、和数字 8 混排时会容易看不清，所以有另一种字形可供使用，例如在 Apple Watch 上的小表盘里、Apple Watch 背面的序列号上。</p>

<p><img src="media/15028584576994/69.png" alt="69"/></p></li>
<li><p>Features 和 Optical Sizes 的结合：例如在 Display 尺寸下，分数中的数字 6 可以使用默认样式，而在 Text 尺寸下，分数中的数字 6 应该使用变形的样式。</p>

<p><img src="media/15028584576994/B70A67F3-B5C2-4A55-9D59-B3B4B829058F.png" alt="B70A67F3-B5C2-4A55-9D59-B3B4B829058F"/></p></li>
<li><p>proportional numbers（按比例排布的数字，自然宽度，默认），可用于固定显示的数字、monospaced numbers（等宽的数字，可选），可用于动态显示的数字（如跳动的时间、变化的速度）以及为保证对齐的列表样式和多行样式，iOS 9.0 and OS X 10.11 开始默认为 proportional numbers。</p>

<p><img src="media/15028584576994/Number.png" alt="Numbe"/></p></li>
</ul>

<h2 id="toc_3">Font API Pitfalls</h2>

<p>由于涉及到具体的开发细节，在此只列出 Keynote 里提到的几点，暂不展开：</p>

<ul>
<li>Don’t Access Fonts with Private Names；</li>
<li>Don’t Reference Font File Names；</li>
<li>Don’t Access System Font by Name；</li>
<li>Do Reuse Font Descriptors；</li>
<li>Don’t Draw System Font at a Different-Than-Nominal Point Size。</li>
</ul>

<blockquote>
<p>Session 链接：<a href="https://developer.apple.com/videos/play/wwdc2015/804/">Introducing the New System Fonts - WWDC 2015 - Videos - Apple Developer</a></p>
</blockquote>

<h2 id="toc_4">相关文章</h2>

<ul>
<li>排版和字体的一些知识： <a href="15029504785442.html">排版和字体 Typography and Fonts - WWDC 2016 Session 803</a></li>
</ul>

<p>📱💻⌚️📺 </p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用 Alfred 提高你的工作效率]]></title>
    <link href="http://chuxiangyuan.github.io/14774965258076.html"/>
    <updated>2016-10-26T23:42:05+08:00</updated>
    <id>http://chuxiangyuan.github.io/14774965258076.html</id>
    <content type="html"><![CDATA[
<p>相信看过 macOS 系统必备软件推荐这类文章的同学，一定听说过 Alfred 这款软件。Alfred 是一款通过一个输入框快速完成文件搜索、自定义动作从而大幅提高工作效率的软件，可以看成 macOS 自带功能 Spotlight 的加强版。</p>

<p>网上讲 Alfred 的文章很多，Alfred 的许多深度功能可能我都还没用上。在这里只与大家分享一下我自己的一些用法，供大家参考。</p>

<p>写这篇文章的时候，正好赶上万众期待的新的 MacBook 即将发布，对于第一次使用 Mac 的同学这篇文章应该会对你有所帮助，对于还没拥有 Mac 的同学，说不定你看了这篇文章一冲动就买了呢。</p>

<span id="more"></span><!-- more -->

<p><img src="media/14774965258076/14774973341760.jpg" alt="" class="mw_img_center" style="display: block; clear:both; margin: 0 auto;"/></p>

<blockquote>
<p>该文章已被<strong>少数派</strong>推荐为『<strong>Matrix 精选</strong>』，你可以<a href="http://sspai.com/35927">点击这里</a>查看。</p>
</blockquote>

<h2 id="toc_0">目录</h2>

<ul>
<li>
<a href="#toc_0">目录</a>
</li>
<li>
<a href="#toc_1">基本使用</a>
</li>
<li>
<a href="#toc_2">奇思妙用</a>
</li>
<li>
<a href="#toc_3">进阶使用</a>
<ul>
<li>
<a href="#toc_4">搜索类</a>
</li>
<li>
<a href="#toc_5">工具类</a>
</li>
<li>
<a href="#toc_6">软件辅助类</a>
</li>
<li>
<a href="#toc_7">自己动手，丰衣足食</a>
</li>
</ul>
</li>
<li>
<a href="#toc_8">总结</a>
</li>
</ul>


<h2 id="toc_1">基本使用</h2>

<p>Alfred 可以通过快捷键快速触发搜索输入框，我设置的快捷键是<code>⌥+Space</code>。Alfred 本身是免费的，但是想要用更高级的功能需要付费激活 PowerPack 功能。</p>

<ol>
<li><p>基本文件搜索：输入关键字可以搜索电脑里的文件、程序、联系人、书签等，你完全不需要到对应的文件夹或者 Launchpad 里眼花缭乱的找到文件或程序再打开。在搜索结果中可以按<code>⌘+Enter</code>打开文件所在的位置。当然你可以在 Alfred 的偏好设置中选择哪些内容在搜索结果中展示，可以搜索哪些路径下的内容。<br/>
<img src="media/14774965258076/14774975502470.jpg" alt="" class="mw_img_center" style="display: block; clear:both; margin: 0 auto;"/></p></li>
<li><p>无搜索结果时默认搜索：当没有符合关键词的搜索结果时，Alfred 会默认使用 Google、Amazon、Wikipedia 的网页搜索。为了更符合自己的使用习惯，我把它默认设置为 Google 和 Baidu 的网页搜索。（在偏好设置中的 Features-Default Results-Fallbacks：Setup fallback results 进行设置）<br/>
<img src="media/14774965258076/14774974534608.jpg" alt="" class="mw_img_center" style="display: block; clear:both; margin: 0 auto;"/></p></li>
<li><p>更多网站搜索（Web Search）：软件自身内置了一些 Google、Twitter 等搜索，基本上都是一些国外的服务。为了更接地气，我添加了如下图所示的一些网站的搜索。图中的锁形标志代表了搜索结果的网页使用了 HTTPS。<br/>
<img src="media/14774965258076/14773860150947.jpg" alt="" class="mw_img_center" style="display: block; clear:both; margin: 0 auto;"/></p>

<p>添加自定义的搜索项也很简单，只需要知道对应网站的搜索 URL 并添加到偏好设置中的 Features-Web Search 中即可。比如： </p>

<ul>
<li>百度搜索的 URL 是：<code>http://www.baidu.com/s?wd={query}</code> </li>
<li>Appshopper 搜索的 URL 是：<code>http://appshopper.com/search?search={query}</code> </li>
</ul>

<p>添加的时候可以设置一个快捷键，比如百度搜索设置为<code>bd</code>就可以在呼出 Alfred 时，输入『 bd 』加空格，并输入要搜索的关键词，敲击回车，即可打开网页搜索到对应的内容了。</p>

<p>从上面举的两个例子，应该能看出<code>{query}</code>就是要搜索的关键词，这样只要你知道某网站一个搜索结果的 URL，这个网站的搜索 URL 你就知道，自然就可以添加到 Alfred 中了。</p></li>
</ol>

<h2 id="toc_2">奇思妙用</h2>

<p>除了基本的搜索功能，Alfred 还内置了一些常用的小功能。以下列出几个我常用的，大概按我的使用频率由高到低排序。</p>

<ol>
<li><p>如果你恰好需要计算一个简单的算式，可以直接在 Alfred 的搜索框中输入算式，Alfred 就会显示出计算结果。<br/>
<img src="media/14774965258076/14774975977854.jpg" alt="" class="mw_img_center" style="display: block; clear:both; margin: 0 auto;"/></p></li>
<li><p>Alfred 可以作为一个迷你的播放器，调用 iTunes 播放音乐。我设置的快捷键是<code>⌥+⌘+Enter</code>，然后直接输入歌曲／歌手／专辑名称，回车后就可以播放了。同样你也可以在调出 Alfred 搜索框后输入<code>itunes</code>，也可以打开迷你播放器。<br/>
<img src="media/14774965258076/14774976336355.jpg" alt="" class="mw_img_center" style="display: block; clear:both; margin: 0 auto;"/></p></li>
<li><p>Alfred 中内置了一部分系统功能的命令，可以通过自定义的关键字触发，如下图。举两个例子，在 macOS 中想立即锁定自己电脑进入输入密码的界面，除了通过系统自定义的触发角功能，可以在 Alfred 的搜索框中输入<code>lock</code>来锁定；下载安装了多个 dmg 程序安装包，但每个程序的 dmg 安装包都加载在了电脑上，如果一个个弹出，费时费力，可以在 Alfred 的搜索框中输入<code>ejectall</code>直接弹出所有挂载的磁盘。<br/>
<img src="media/14774965258076/14774976593989.jpg" alt="" class="mw_img_center" style="display: block; clear:both; margin: 0 auto;"/></p></li>
<li><p>遇到不懂的英文单词，调起 Alfred 的输入框输入<code>dic</code>+空格+单词即可调用 macOS 内置的词典查询单词的释义，按回车进入词典。<br/>
<img src="media/14774965258076/14774979006501.jpg" alt=""/></p></li>
<li><p>搜索框中直接输入<code>&gt;</code>，并在之后输入命令，就可以调用「终端」程序，并运行命令。例如，在搜索框中输入下面的命令可以查看通过 adb 连接上的安卓设备：<code>adb devices</code><br/>
<img src="media/14774965258076/14774977477267.jpg" alt="" class="mw_img_center" style="display: block; clear:both; margin: 0 auto;"/></p></li>
<li><p>记录多个剪贴板历史：我设置的快捷键是<code>⌥+⌘+C</code>，打开后可以查看最新所有的剪贴板历史。<br/>
<img src="media/14774965258076/14774977724375.jpg" alt="" class="mw_img_center" style="display: block; clear:both; margin: 0 auto;"/></p></li>
<li><p>在进入<code>⌥+⌘+C</code>后，第一项是「All Snippets」，在其中可以设置一些常用的需要输入的字符，比如邮箱，这样在登录、注册时就不需要重复输入复杂的邮箱地址了。<br/>
<img src="media/14774965258076/14774978021140.jpg" alt="" class="mw_img_center" style="display: block; clear:both; margin: 0 auto;"/></p>

<p>注：6 和 7 使用频率比较低的原因是相比其他竞品，Alfred 的调用更加复杂，呈现形式上不够直观，在这两个需求上我更喜欢 <a href="http://pasteapp.me/">Paste</a>。</p></li>
</ol>

<h2 id="toc_3">进阶使用</h2>

<p>在 Alfred 中有一个 Workflows 的 tab，用上这个，你才会发现 Alfred 的强大。简而言之，Workflow 就是把你想干的搜索的事，通过程序代码编写成一个流程化的东西，之后你只需要每次调用就行了。网上有很多分享的 workflow，可以参考 <a href="http://www.alfredworkflow.com">Alfred 2 Workflow List</a> 、<a href="http://www.packal.org/">Packal</a> 这两个网站。软件本身的功能是固定的，但提供的这种可扩展的能力却可以让 Alfred 完成更多不可思议的操作。</p>

<h3 id="toc_4">搜索类</h3>

<p>这类 workflow 主要是搜索某些软件或网站的内容，但相比 Web Search，可以直接在 Alfred 中显示搜索结果，一键即可打开搜索内容的详情页。</p>

<ol>
<li><p><a href="http://www.packal.org/workflow/itunes-store-search">iTunes Store Search</a><br/>
搜索 iTunes Store 里的 app、song、album、podcast 等内容，直接在 Alfred 中显示搜索结果，进一步可在 iTunes Store 里查看。你可在 workflow 的设置中自定义 iTunes Store 的搜索地区和显示的搜索结果的最大数量。<br/>
<img src="media/14774965258076/14774981208539.jpg" alt="" class="mw_img_center" style="display: block; clear:both; margin: 0 auto;"/></p></li>
<li><p><a href="http://www.packal.org/workflow/mac-app-store-search">Mac App Store Search</a><br/>
与 iTunes Store Search 类似，只不过这个是在 Mac App Store 中进行搜索。类似的还有 <a href="http://www.packal.org/workflow/ibooks-search">iBooks Search</a>，在 iBooks Store 中进行搜索。<br/>
<img src="media/14774965258076/14774980375390.jpg" alt="" class="mw_img_center" style="display: block; clear:both; margin: 0 auto;"/></p></li>
<li><p><a href="https://github.com/lucifr/Alfredv2-Extensions/raw/master/Douban.alfredworkflow">Douban</a><br/>
快速搜索豆瓣上的电影、音乐、图书，并返回相应搜索结果。<br/>
<img src="media/14774965258076/14774859695926.jpg" alt="" class="mw_img_center" style="display: block; clear:both; margin: 0 auto;"/></p></li>
<li><p><a href="https://github.com/em91/dianping-Alfredv2/raw/master/Dianping.alfredworkflow">Dianping</a><br/>
快速搜索大众点评上的商家店铺，可以自定义搜索的默认城市。<br/>
<img src="media/14774965258076/14774862831831.jpg" alt="" class="mw_img_center" style="display: block; clear:both; margin: 0 auto;"/></p></li>
<li><p><a href="https://github.com/KJlmfe/Alfred-workflows/raw/master/zhihu.alfredworkflow">知乎</a><br/>
快速搜索知乎上的问题、话题、人，还可返回知乎日报文章列表。<br/>
<img src="media/14774965258076/14774953262521.jpg" alt="" class="mw_img_center" style="display: block; clear:both; margin: 0 auto;"/></p></li>
</ol>

<h3 id="toc_5">工具类</h3>

<p>这类 workflow 主要是满足某些生活、工作、学习中经常用到、但又及其繁琐的需求。</p>

<ol>
<li><p><a href="https://github.com/roylez/alfred_kuaidi/raw/master/kuaidi.alfredworkflow">快递查询</a><br/>
快速查询快递利器，可对查询结果一键复制，可记录查询历史。<br/>
<img src="media/14774965258076/14774872384661.jpg" alt="" class="mw_img_center" style="display: block; clear:both; margin: 0 auto;"/></p></li>
<li><p><a href="https://github.com/wensonsmith/YoudaoTranslate/raw/master/Youdao%20Translate.alfredworkflow">Youdao Translate</a><br/>
调用有道翻译单词、词组、句子，中英互译。<br/>
<img src="media/14774965258076/14774874490798.jpg" alt="" class="mw_img_center" style="display: block; clear:both; margin: 0 auto;"/></p></li>
<li><p><a href="http://www.packal.org/workflow/newfile">NewFile</a><br/>
在 Finder 当前目录下新建文件，默认扩展名是 txt。有两种形式：仅创建和创建并打开。如果习惯于 Windows 的右键新建某种格式的文件，这个应该很方便。<br/>
<img src="media/14774965258076/14774877559589.jpg" alt="" class="mw_img_center" style="display: block; clear:both; margin: 0 auto;"/></p></li>
<li><p><a href="http://www.packal.org/workflow/resize-image">Resize Image</a><br/>
快速对 Finder 中当前选中的图片等比例调整尺寸。输入的数字代表想要调整的图片宽度。<br/>
<img src="media/14774965258076/14774879454220.jpg" alt="" class="mw_img_center" style="display: block; clear:both; margin: 0 auto;"/></p></li>
<li><p><a href="https://github.com/hzlzh/Alfred-Workflows/raw/master/Downloads/Shorten-URL.alfredworkflow">Shorten URL</a><br/>
把已有的较长的链接转换成短连接并复制到剪切板。<br/>
<img src="media/14774965258076/14774883038847.jpg" alt="" class="mw_img_center" style="display: block; clear:both; margin: 0 auto;"/></p></li>
<li><p><a href="http://www.packal.org/workflow/toggle-hidden-files">Toggle Hidden Files</a><br/>
快速显示/隐藏系统中的隐藏文件。虽然在 macOS 10.12 中已经可以通过快捷键<code>⇧+⌘+.</code>来完成上述操作，但这个快捷键可能你会忘记，使用 workflow 可能更加方便快捷。<br/>
<img src="media/14774965258076/14774896982373.jpg" alt="" class="mw_img_center" style="display: block; clear:both; margin: 0 auto;"/></p></li>
</ol>

<h3 id="toc_6">软件辅助类</h3>

<p>这类 workflow 主要是给已安装的软件提供一个辅助功能。但一般情况下这些软件自身都会带有一些全局快捷键或者工具条，软件原生的功能可能支持的更好，通过 Alfred 来实现可能并不能获得最好的效果，在此仅举一例。</p>

<ol>
<li><a href="http://www.packal.org/workflow/things">Things</a>
在 Things 中添加一个 TODO。
<img src="media/14774965258076/14774913959274.jpg" alt=""/></li>
</ol>

<h3 id="toc_7">自己动手，丰衣足食</h3>

<p>上文中提到的所有 workflow 其实都是 Alfred 的用户们自己创造的，有的简单，有的复杂。对于初学者来说，即使你不懂代码，你也可以通过简单的操作来做一个 workflow，从而提高自己的工作效率。</p>

<p>在此拿我自己的实际情况举一个非常简单的例子。每天开始工作的时候，我需要在 Teambiton 中查看最新的项目进展，在微信中与同事沟通，在 Foxmail 中收发邮件。所以我需要在进入工作状态后，打开 Teambiton 网页、微信 app、Foxmail app。这是一个较为固定的操作，但如果手动完成，其实很麻烦，可以借助一个 workflow 来解放劳动力。创建这个 workflow 大概分为以下几步：</p>

<ol>
<li><p>添加 workflow：Alfred 中内置了一些固定的模板，可以选择通过快捷键打开多个文件； <br/>
<img src="media/14774965258076/14774928163426.jpg" alt="" class="mw_img_center" style="display: block; clear:both; margin: 0 auto;"/></p></li>
<li><p>填写 workflow 基本信息：包括名称、Icon 等；<br/>
<img src="media/14774965258076/14774930055324.jpg" alt="" class="mw_img_center" style="display: block; clear:both; margin: 0 auto;"/></p></li>
<li><p>除了打开多个文件，还要添加一个 Action：打开一个 URL；<br/>
<img src="media/14774965258076/14774932148437.jpg" alt="" class="mw_img_center" style="display: block; clear:both; margin: 0 auto;"/></p></li>
<li><p>配置 Keyword；<br/>
<img src="media/14774965258076/14774937454375.jpg" alt="" class="mw_img_center" style="display: block; clear:both; margin: 0 auto;"/></p></li>
<li><p>添加要打开的 app；<br/>
<img src="media/14774965258076/14774931068193.jpg" alt="" class="mw_img_center" style="display: block; clear:both; margin: 0 auto;"/></p></li>
<li><p>配置要打开的 URL。<br/>
<img src="media/14774965258076/14774932046964.jpg" alt="" class="mw_img_center" style="display: block; clear:both; margin: 0 auto;"/></p></li>
</ol>

<p>workflow 创建完成后，在 Alfred 的输入框中输入设置好的 keyword，敲回车，一切搞定。<br/>
<img src="media/14774965258076/14774938791148.jpg" alt="" class="mw_img_center" style="display: block; clear:both; margin: 0 auto;"/></p>

<h2 id="toc_8">总结</h2>

<p>Alfred 的偏好设置中特别设置了一个『 Usage 』tab，在这里可以查看 Alfred 的使用频率，了解这款工具到底对你的工作效率有多大的改变。在用 Alfred 的用户不妨去看一看。<br/>
<img src="media/14774965258076/14774944700695.jpg" alt="" class="mw_img_center" style="display: block; clear:both; margin: 0 auto;"/></p>

<p>Alfred 的扩展性很高，所以他的玩法还有很多。但 Alfred 说到底是一款工具，工具的目的就是为了解决人的某些需求的。如果变成一个庞然大物，我相信不应该是一个工具的初衷。所以找到适合自己的用法才是最重要的，切忌不要被工具绑架了自己。</p>

<p>如你有更多有趣实用的玩法，欢迎与我交流。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Study iOS 9 Programming with Swift（4）]]></title>
    <link href="http://chuxiangyuan.github.io/14727151264192.html"/>
    <updated>2016-09-01T15:32:06+08:00</updated>
    <id>http://chuxiangyuan.github.io/14727151264192.html</id>
    <content type="html"><![CDATA[
<p>使用Swift进行iOS编程知识点总结第四篇。</p>

<span id="more"></span><!-- more -->

<blockquote>
<p>关联阅读：<br/>
<a href="http://chuxiangyuan.github.io/14709182567699.html">Study iOS 9 Programming with Swift（1）</a><br/>
<a href="http://chuxiangyuan.github.io/14710858606215.html">Study iOS 9 Programming with Swift（2）</a><br/>
<a href="http://chuxiangyuan.github.io/14725650174400.html">Study iOS 9 Programming with Swift（3）</a></p>
</blockquote>

<h2 id="toc_0">目录</h2>

<ul>
<li>
<a href="#toc_0">目录</a>
</li>
<li>
<a href="#toc_1">更新记录</a>
</li>
<li>
<a href="#toc_2">Self Sizing Cells</a>
</li>
<li>
<a href="#toc_3">Unwind Segue</a>
</li>
<li>
<a href="#toc_4">实例：多个button触发一个action方法</a>
</li>
</ul>


<h2 id="toc_1">更新记录</h2>

<ul>
<li>2016/09/01 第一次发布</li>
</ul>

<h2 id="toc_2">Self Sizing Cells</h2>

<ul>
<li>设置好cell的Constraints后，并且要把Cell的number of lines的值设置为0，在viewDidLoad方法中添加以下代码：</li>
</ul>

<pre><code>tableView.estimatedRowHeight = 36.0 
tableView.rowHeight = UITableViewAutomaticDimension
</code></pre>

<h2 id="toc_3">Unwind Segue</h2>

<ul>
<li>要点击一个button关闭一个view返回上一级view，可以在destination view controller中添加如下代码，并且将button与exit连接。</li>
<li>代码片段：</li>
</ul>

<pre><code>// 从review view跳转回detail view，并且带回rating的值改变detail view
@IBAction func close(segue:UIStoryboardSegue) {
    
  if let reviewViewController = segue.sourceViewController as? ReviewViewController {
    if let rating = reviewViewController.rating {
      ratingButton.setImage(UIImage(named: rating), forState: UIControlState.Normal)
    }
  }
    
}
</code></pre>

<h2 id="toc_4">实例：多个button触发一个action方法</h2>

<ul>
<li>对于多个button想要触发一个action方法，可以通过为不同的button定义不同的tag，之后coding时通过switch来区分不同tag，从而执行不同的动作。</li>
<li>代码片段：
// 对电影进行评价，根据点击button的不同给rating赋值并关闭modal view</li>
</ul>

<pre><code>@IBAction func ratingSelected(sender: UIButton) {
  
    switch (sender.tag) {
    case 100: rating = &quot;dislike&quot;
    case 200: rating = &quot;good&quot;
    case 300: rating = &quot;great&quot;
    default: break
    }
    
    // 执行特定的segue，即unwind to detailview
    performSegueWithIdentifier(&quot;unwindToDetailView&quot;, sender: sender)
    
}
</code></pre>

<p>未完待续</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Study iOS 9 Programming with Swift（3）]]></title>
    <link href="http://chuxiangyuan.github.io/14725650174400.html"/>
    <updated>2016-08-30T21:50:17+08:00</updated>
    <id>http://chuxiangyuan.github.io/14725650174400.html</id>
    <content type="html"><![CDATA[
<p>使用Swift进行iOS编程知识点总结第三篇，主要包括Navigation Bar的导入和Appearance的自定义、状态栏的样式自定义、Segue的基本使用和通过Segues在两个View Controller间传递数据。</p>

<span id="more"></span><!-- more -->

<blockquote>
<p>关联阅读：<br/>
<a href="http://chuxiangyuan.github.io/14709182567699.html">Study iOS 9 Programming with Swift（1）</a><br/>
<a href="http://chuxiangyuan.github.io/14710858606215.html">Study iOS 9 Programming with Swift（2）</a><br/>
<a href="http://chuxiangyuan.github.io/14725650174400.html">Study iOS 9 Programming with Swift（3）</a></p>
</blockquote>

<h2 id="toc_0">目录</h2>

<ul>
<li>
<a href="#toc_0">目录</a>
</li>
<li>
<a href="#toc_1">更新记录</a>
</li>
<li>
<a href="#toc_2">导航栏的引入</a>
</li>
<li>
<a href="#toc_3">导航栏外表的自定义</a>
</li>
<li>
<a href="#toc_4">对于某个View在滑动时隐藏导航栏</a>
</li>
<li>
<a href="#toc_5">调整状态栏的样式</a>
</li>
<li>
<a href="#toc_6">Segue的类型</a>
</li>
<li>
<a href="#toc_7">通过Segues传递数据</a>
</li>
<li>
<a href="#toc_8">UIImageView的几种模式</a>
</li>
<li>
<a href="#toc_9">Content Hugging Priority</a>
</li>
<li>
<a href="#toc_10">Self Sizing Cells</a>
</li>
</ul>


<h2 id="toc_1">更新记录</h2>

<ul>
<li>2016/08/31 第一次发布</li>
</ul>

<h2 id="toc_2">导航栏的引入</h2>

<ul>
<li>引入导航栏的方式：Select the table view controller and click &quot;Editor&quot; in the menu. Choose &quot;Embed in&quot; &gt; &quot;Navigation Controller&quot;.</li>
<li>选中引入导航栏的View Controller可以设置导航栏中的title。</li>
</ul>

<h2 id="toc_3">导航栏外表的自定义</h2>

<ul>
<li>在AppDelegate.swift文件中的application(_:didFinishLaunchingWithOptions:)方法中添加以下代码可以自定义导航栏的Appearance。</li>
<li>代码片段：</li>
</ul>

<pre><code>// 自定义导航栏的背景色
UINavigationBar.appearance().barTintColor = UIColor(red: 207.0/255.0, green: 0.0/255.0, blue: 15.0/255.0, alpha: 0.9)
    
// 自定义导航栏的导航button及文字、其他导航栏按钮元素的颜色
UINavigationBar.appearance().tintColor = UIColor.whiteColor()
    
// 自定义导航栏title文字的样式，包括字体、字号、颜色等等
UINavigationBar.appearance().titleTextAttributes = [NSForegroundColorAttributeName:UIColor.whiteColor()]
    
// 以下代码自定义了导航栏title文字的字体、字号、颜色，iOS SDK自带字体的名称可在http://iosfonts.com/查看
if let barFont = UIFont(name: &quot;PingFangSC-Semibold&quot;, size: 20.0) {
      
  UINavigationBar.appearance().titleTextAttributes = [NSForegroundColorAttributeName:UIColor.whiteColor(), NSFontAttributeName:barFont]
      
}
</code></pre>

<ul>
<li>若想移除导航栏back button后的title，可以在souce view controller中的viewdidload方法中添加以下代码：</li>
</ul>

<pre><code>// Remove the title of the back button 
navigationItem.backBarButtonItem = UIBarButtonItem(title: &quot;&quot;, style: .Plain, target: nil, action: nil)
</code></pre>

<ul>
<li>在导航栏上显示上级table view中对应cell的标题，在destination view controller中的viewdidload方法中添加以下代码：</li>
</ul>

<pre><code>// 将发现页选择的cell的标题显示在导航栏上
title = movie.name
</code></pre>

<h2 id="toc_4">对于某个View在滑动时隐藏导航栏</h2>

<ul>
<li>因为viewDidLoad方法只会在view初次创建时被调起一次，所以不能使用使用此方法来隐藏导航栏。可以使用viewWillAppear方法，此方法在view每次展示时都会被调起。</li>
<li>在Table View Controller添加以下代码：</li>
</ul>

<pre><code>// view每次展示时都会被调起
override func viewWillAppear(animated: Bool) {
  super.viewWillAppear(animated)
    
  // 向下滑动时隐藏导航栏
  navigationController?.hidesBarsOnSwipe = true
    
}

</code></pre>

<ul>
<li>在Detail View Controller添加以下代码：</li>
</ul>

<pre><code>override func viewWillAppear(animated: Bool) {
  super.viewWillAppear(animated)
    
  // 滑动时不隐藏导航栏
  navigationController?.hidesBarsOnSwipe = false
    
  // 设置导航栏为不可隐藏。第一个页面隐藏了导航栏之后，防止进入详情页不显示导航栏。
  navigationController?.setNavigationBarHidden(false, animated: true)
     
}
</code></pre>

<h2 id="toc_5">调整状态栏的样式</h2>

<ul>
<li>Status Bar有两种样式：Light和Dark。</li>
<li>若想改变某个view controller的Status Bar样式，可以添加以下代码：</li>
</ul>

<pre><code>override func preferredStatusBarStyle() -&gt; UIStatusBarStyle {
  return .LightContent 
}
</code></pre>

<ul>
<li>若想改变app全局的Status Bar样式，有两步需要做。第一步：Select the project in the project navigator. Under the Info tab of the FoodPin target, insert a new key named View controller-based status bar appearance and set the value to NO。第二步在AppDelegate.swift文件中的application(_:didFinishLaunchingWithOptions:)方法中添加以下代码：</li>
</ul>

<pre><code>// 自定义全局的Status Bar为Light Style
UIApplication.sharedApplication().statusBarStyle = .LightContent
</code></pre>

<h2 id="toc_6">Segue的类型</h2>

<ul>
<li>Segue是连接两个View Controller的桥梁，在iOS9之后定义了下面几种Segue的类型

<ul>
<li><strong>Show</strong> - when the show style is used, the content is pushed on top of the current view controller stack. A back button will be displayed in the navigation bar for navigating back to the original view controller. （这种类型是有导航栏的） </li>
<li><strong>Show detail</strong> - similar to the show style, but the content in the detail (or destination) view controller replaces the top of the current view controller stack. （没有导航栏）</li>
<li><strong>Present modally</strong> - presents the content modally. When used, the detail view controller will be animated up from the bottom and cover the entire screen on iPhone. （类似的例子是日历中添加Event时的效果。）</li>
<li><strong>Present as popover</strong> - Present the content as a popover anchored to an existing view. Popover is commonly found in iPad apps. （多用于iPad）</li>
</ul></li>
</ul>

<h2 id="toc_7">通过Segues传递数据</h2>

<ul>
<li>Segue起着连接作用，在从一个View Controller到另一个时，可以在SourceViewController中使用prepareForSegue方法来传递数据。</li>
<li>思路：为Segue定义一个独一无二的可识别的名称→确定选择的哪一行→确定目标ViewController→传递数据。</li>
<li>代码片段：</li>
</ul>

<pre><code>// 向DetailViewController传递信息
  override func prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?) {
    
    // 通过已经定义的segue这个桥梁来传递信息
    if segue.identifier == &quot;showMovieDetail&quot; {
      
      if let indexPath = tableView.indexPathForSelectedRow {
        let destinationController = segue.destinationViewController as! MoiveDetailViewController
        destinationController.movieBackgroudImage = movieImages[indexPath.row]
        destinationController.movieImage = movieImages[indexPath.row]
        destinationController.movieName = movieNames[indexPath.row]
        destinationController.movieType = movieTypes[indexPath.row]
        destinationController.movieYear = movieYears[indexPath.row]
        destinationController.movieActor = movieActors[indexPath.row]
      }
    }
  }
</code></pre>

<h2 id="toc_8">UIImageView的几种模式</h2>

<ul>
<li><p>UIImageView有几种常用的模式如下，在使用时注意选择：</p>

<ul>
<li><strong>Scale to Fill</strong> (默认的模式，会把图片拉伸到指定的尺寸，不能保证图片的原始比率) </li>
<li><strong>Aspect Fit</strong> （可以保持图片的原始比率，但是会在imageview中留下空白）</li>
<li><strong>Aspect Fill</strong> （保持图片的原始比率的前提下不会留下空白，但会切掉图片四周的一些细节，注意使用此模式时要开启“Clip Subviews”，否则图片会扩展到其他view中去。）</li>
</ul>

<p><img src="media/14725650174400/14726256242528.jpg" alt=""/></p></li>
</ul>

<h2 id="toc_9">Content Hugging Priority</h2>

<ul>
<li>对于一个Stack View中的多个view，为了满足指定的constraints，会把某些view拉伸，而拉伸的优先级由Content Hugging Priority定义。Content Hugging Priority的数值越大，级别越高，不会被拉伸。</li>
</ul>

<h2 id="toc_10">Self Sizing Cells</h2>

<ul>
<li>设置好cell的Constraints后，并且要把Cell的number of lines的值设置为0，在viewDidLoad方法中添加以下代码：</li>
</ul>

<pre><code>tableView.estimatedRowHeight = 36.0 
tableView.rowHeight = UITableViewAutomaticDimension
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Study iOS 9 Programming with Swift（2）]]></title>
    <link href="http://chuxiangyuan.github.io/14710858606215.html"/>
    <updated>2016-08-13T18:57:40+08:00</updated>
    <id>http://chuxiangyuan.github.io/14710858606215.html</id>
    <content type="html"><![CDATA[
<p>使用Swift进行iOS编程知识点总结第二篇，主要包括Table View和Table View Controller的区分使用，对Table View的Cells进行自定义，为每个cell添加分享动作，自定义tableview，图片圆角处理、模糊化处理等。</p>

<span id="more"></span><!-- more -->

<blockquote>
<p>关联阅读：<br/>
<a href="http://chuxiangyuan.github.io/14709182567699.html">Study iOS 9 Programming with Swift（1）</a><br/>
<a href="http://chuxiangyuan.github.io/14710858606215.html">Study iOS 9 Programming with Swift（2）</a><br/>
<a href="http://chuxiangyuan.github.io/14725650174400.html">Study iOS 9 Programming with Swift（3）</a></p>
</blockquote>

<h2 id="toc_0">目录</h2>

<ul>
<li>
<a href="#toc_0">目录</a>
</li>
<li>
<a href="#toc_1">更新记录</a>
</li>
<li>
<a href="#toc_2">Table View &amp; Table View Controller</a>
</li>
<li>
<a href="#toc_3">实例：自定义Table View Cells</a>
</li>
<li>
<a href="#toc_4">实例：将图片四个角设置为圆角/将正方形图片设置为圆形图片</a>
</li>
<li>
<a href="#toc_5">实例：对table view中的cell添加Swipe动作——分享</a>
</li>
<li>
<a href="#toc_6">实例：取消row点击后被选中的状态</a>
</li>
<li>
<a href="#toc_7">实例：对table view的分隔线、背景色等进行自定义</a>
</li>
<li>
<a href="#toc_8">实例：对图片采用系统自带的模糊化处理</a>
</li>
</ul>


<h2 id="toc_1">更新记录</h2>

<ul>
<li>2016/08/15 第一次发布</li>
</ul>

<h2 id="toc_2">Table View &amp; Table View Controller</h2>

<ul>
<li>相对于View Controller + Table View, Table View Controller已经提供了DataSource和Delegate，而且针对Table View提前配置好了一些参数，但在某些方面也失去了灵活性。</li>
</ul>

<h2 id="toc_3">实例：自定义Table View Cells</h2>

<ul>
<li>对cell的Identifier定义为Cell→在Cell中加入需要的View，如Label、Image View等，并根据设计图添加constraints→因为cell是与UITableViewCell class关联的，所以创建一个新的class，定义为UITableViewCell的subclass</li>
<li>Coding：

<ul>
<li>思路：对cell中自定义的views创建outlet变量→声明要展示的数据变量并赋值→告知table view有几个cell、几个section→在每个cell中显示具体的值。</li>
<li>Class MovieTableViewCell代码片段及Class MovieTableViewController代码片段：</li>
</ul></li>
</ul>

<pre><code>@IBOutlet weak var nameLabel: UILabel!
@IBOutlet weak var yearLabel: UILabel!
@IBOutlet weak var typeLabel: UILabel!
@IBOutlet weak var actorLabel: UILabel!
@IBOutlet weak var thumbnailImageView: UIImageView!
</code></pre>

<pre><code>      // 告知tableview中有几个section
    override func numberOfSectionsInTableView(tableView: UITableView) -&gt; Int {
        
        return 1
        
    }
    
    // 告知tableview中有几个cell
    override func tableView(tableView: UITableView, numberOfRowsInSection section: Int) -&gt; Int {
        
        // 根据数组的数量返回table view中cell的数量
        return movieNames.count
        
    }
    
    // 在每个cell中显示具体的内容,这个方法会在table view每个row要展示的时候被调起
    override func tableView(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath) -&gt; UITableViewCell {
        
        // 为节省资源，使每个cell可以重复利用
        let cellIdentifier = &quot;Cell&quot;
        let cell = tableView.dequeueReusableCellWithIdentifier(cellIdentifier, forIndexPath: indexPath) as! MovieTableViewCell //downcasting: covert the returned object of dequeueReusableCellWithIdentifier to MovieTableViewCell (对于downcast以及as! &amp; as?的区分与使用还没完全搞懂)
        
        // 定义cell要显示的内容
        cell.nameLabel.text = movieNames[indexPath.row]
        cell.thumbnailImageView.image = UIImage(named: movieImages[indexPath.row])
        cell.yearLabel.text = movieYear[indexPath.row]
        cell.typeLabel.text = movieType[indexPath.row]
        cell.actorLabel.text = movieActor[indexPath.row]
        
        return cell
        
    }
</code></pre>

<h2 id="toc_4">实例：将图片四个角设置为圆角/将正方形图片设置为圆形图片</h2>

<ul>
<li>方法一：通过代码实现

<ul>
<li>代码片段：</li>
</ul></li>
</ul>

<pre><code>// 将图片设置为圆角，圆角半径设置为3
        cell.thumbnailImageView.layer.cornerRadius = 3.0
        cell.thumbnailImageView.clipsToBounds = true
</code></pre>

<ul>
<li>方法二：通过Xcode配置实现

<ul>
<li>配置步骤：在storyboard中选择imageview后，在右侧的Identity inspector中的“Use Defined Runtime Attributes”中添加一个值→Key Path定义为“layer.cornerRadius&quot;,Type定义为”Number“，Value定义为你要设置的圆角半径值。加入一张60*60的正方形图片，设置半径为30，就可以将其变为圆形→切换到Attributes Inspector，将Clip Subviews打钩。</li>
</ul></li>
</ul>

<h2 id="toc_5">实例：对table view中的cell添加Swipe动作——分享</h2>

<ul>
<li>思路：定义分享button的title和style→定义点击分享button后的动作，包括定义分享的文本和图片信息→展示ActivityView。其中share button的颜色可以通过backgroudColor属性来进行自定义。</li>
<li>代码片段：</li>
</ul>

<pre><code>// 对每一个Row添加Swipe Action，如分享、删除等
override func tableView(tableView: UITableView, editActionsForRowAtIndexPath indexPath: NSIndexPath) -&gt; [UITableViewRowAction]? {
    
    // Social Sharing Button
    let shareAction = UITableViewRowAction(style: .Default, title: &quot;分享&quot;, handler: {(action, indexPath) -&gt; Void in
        
        // 定义Share的文本和图片信息，并显示ActivityView
        let defaultText = &quot;Just checking in at&quot; + self.movieNames[indexPath.row]
        if let imageToShare = UIImage(named: self.movieImages[indexPath.row]){
            let activityController = UIActivityViewController(activityItems: [defaultText, imageToShare], applicationActivities: nil)
            self.presentViewController(activityController, animated: true, completion: nil)
        }
    })
    
    // 自定义share action的背景色
    shareAction.backgroundColor = UIColor(red: 25.0/255.0, green: 118.0/255.0, blue: 210.0/255.0, alpha: 1.0)
    
    return [shareAction]
    
}
</code></pre>

<h2 id="toc_6">实例：取消row点击后被选中的状态</h2>

<ul>
<li>代码片段：</li>
</ul>

<pre><code>// 定义Row被选择之后的动作
override func tableView(tableView: UITableView, didSelectRowAtIndexPath indexPath: NSIndexPath) {
        
    // Row点击后取消被选中状态
    tableView.deselectRowAtIndexPath(indexPath, animated: false)
        
}
</code></pre>

<h2 id="toc_7">实例：对table view的分隔线、背景色等进行自定义</h2>

<ul>
<li>代码片段：</li>
</ul>

<pre><code>//View被加载到内存后，以下方法被调起，且只被调起一次，加载好就不再调起
override func viewDidLoad() {
    super.viewDidLoad()
                
    // 自定义tableview的背景色，注意每个cell也有自己的背景色，cell没有内容时才能看到tableview的背景色
    tableView.backgroundColor = UIColor(red: 240.0/255.0, green: 240.0/255.0, blue: 240.0/255.0, alpha: 0.2)
    
    // 通过设置FooterView，移除空的row的分隔线
    tableView.tableFooterView = UIView(frame: CGRectZero)
    
    // 自定义分隔线的颜色
    tableView.separatorColor = UIColor(red: 240.0/255.0, green: 240.0/255.0, blue: 240.0/255.0, alpha: 0.8)
    
}
</code></pre>

<ul>
<li>若想调整cell的背景色或者设置为透明，可在tableView(_:cellForRowAtIndexPath:)方法中添加以下代码片段：</li>
</ul>

<pre><code>// 清除cell的背景色，也即变成透明
cell.backgroundColor = UIColor.clearColor()

</code></pre>

<h2 id="toc_8">实例：对图片采用系统自带的模糊化处理</h2>

<ul>
<li>在viewDidLoad()中添加以下代码片段：</li>
</ul>

<pre><code>// 对背景图进行模糊化处理,style有三种：Dark，ExtraLight，Light
let blurEffect = UIBlurEffect(style: UIBlurEffectStyle.Dark)
let blurEffectView = UIVisualEffectView(effect: blurEffect)
blurEffectView.frame = view.bounds
movieBackgroudImageView.addSubview(blurEffectView)

</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Study iOS 9 Programming with Swift（1）]]></title>
    <link href="http://chuxiangyuan.github.io/14709182567699.html"/>
    <updated>2016-08-11T20:24:16+08:00</updated>
    <id>http://chuxiangyuan.github.io/14709182567699.html</id>
    <content type="html"><![CDATA[
<p>使用Swift进行iOS编程知识点总结第一篇，主要包括项目的基础搭建、Auto Layout、Alert的基本使用以及Table View的基本使用。</p>

<span id="more"></span><!-- more -->

<blockquote>
<p>关联阅读：<br/>
<a href="http://chuxiangyuan.github.io/14709182567699.html">Study iOS 9 Programming with Swift（1）</a><br/>
<a href="http://chuxiangyuan.github.io/14710858606215.html">Study iOS 9 Programming with Swift（2）</a><br/>
<a href="http://chuxiangyuan.github.io/14725650174400.html">Study iOS 9 Programming with Swift（3）</a></p>
</blockquote>

<h2 id="toc_0">目录</h2>

<ul>
<li>
<a href="#toc_0">目录</a>
</li>
<li>
<a href="#toc_1">介绍</a>
</li>
<li>
<a href="#toc_2">更新记录</a>
</li>
<li>
<a href="#toc_3">创建项目</a>
</li>
<li>
<a href="#toc_4">熟悉Xcode</a>
</li>
<li>
<a href="#toc_5">实例：点击一个button，弹出一个alert</a>
</li>
<li>
<a href="#toc_6">Auto Layout</a>
</li>
<li>
<a href="#toc_7">Stack View</a>
</li>
<li>
<a href="#toc_8">Size Classes</a>
</li>
<li>
<a href="#toc_9">实例：创建Table View</a>
</li>
<li>
<a href="#toc_10">实例：隐藏某一个View中的Status Bar</a>
</li>
</ul>


<h2 id="toc_1">介绍</h2>

<ul>
<li>该系列文章主要总结整理了自己在初学使用Swift语言进行iOS编程时的知识点，特别是一些常见功能的实例；</li>
<li>本文档总结的知识点出自<a href="https://www.appcoda.com/swift/">Beginning iOS 9 Programming with Swift</a> —— 国外作者写的一本针对于初学者的电子书，加之自己的理解和实践探索；</li>
<li>由于作为一名小白刚开始学习使用swift进行编程，所以总结的知识点可能有不准确或者错误的地方，故随着学习的深入和对知识点的回顾，可能会不定期的进行更正、增补；</li>
<li>所有的描述以自己能够理解为准则，但可能表述不够严谨或者完整；</li>
<li>为保证原汁原味，一些在开发过程中用到的术语，没有进行翻译。</li>
</ul>

<h2 id="toc_2">更新记录</h2>

<ul>
<li>2016/08/11 第一次发布</li>
</ul>

<h2 id="toc_3">创建项目</h2>

<ul>
<li>Organization Identifier是唯一的，命名方式采用reverse domain name service (or reverse-DNS) notation，如com.chuxiangyuan。加上Product Name，两者组合成一起为独一无二的Bundle ID，如com.chuxiangyuan.myproduct。</li>
<li>Use Core Data：Core Data简单理解为Apple开发包中自带的在本地存储数据的数据库。</li>
</ul>

<h2 id="toc_4">熟悉Xcode</h2>

<ul>
<li>最左侧的列有文件树一栏称为Project Navigator，展示了一个项目的所有文件，中间是编辑区，右侧是选中元素对应的工具区，在storyboard中未选中任何元素时，可以看到Object library，展示了一些内置的元素。底部是Debug相关区域。</li>
<li>Swift扩展名的文件是项目的主要代码，一般是**controller.swift，表示是某一个controller。AppDelegate.swift文件主要用来控制一些全局的设置。</li>
<li>Main.storyboard用于存储App的主路径上的user interface，其中包括Document Outline View、Interface Builder editor。</li>
<li>Assets.xcassets用于存储App中用到所有资源文件，如图片。</li>
<li>Info.plist用于存储App的一些初始化设置项。</li>
</ul>

<h2 id="toc_5">实例：点击一个button，弹出一个alert</h2>

<ul>
<li>思路：创建一个button的点击函数→定义点击后Alert显示消息的title、message、style→定义Alert的button的title、style、handler→展示Alert</li>
<li>代码片段：</li>
</ul>

<pre><code>//需要import UIKit
@IBAction func showMessage(sender: UIButton) {
        
        //创建Alert的Title和Message，可以选择Alert或者ActionSheet显示样式
        let alertController = UIAlertController(title: &quot;Title&quot;, message: &quot;Message&quot;, preferredStyle: UIAlertControllerStyle.Alert)
        
        //给Alert添加动作、点击后的功能，样式可选择Default（文字为蓝色）、Cancel（文字为蓝色加粗）、Destructive（文字为红色）
        alertController.addAction(UIAlertAction(title: &quot;Button Title&quot;, style: UIAlertActionStyle.Default, handler: nil))
        alertController.addAction(UIAlertAction(title: &quot;Button2 Title&quot;, style: UIAlertActionStyle.Destructive, handler: nil))
        alertController.addAction(UIAlertAction(title: &quot;Button3 Title&quot;, style: UIAlertActionStyle.Cancel, handler: nil))
        
        //展示Alert，可选有过渡动画或没有，可在展示后添加动作
        self.presentViewController(alertController, animated: true, completion: nil)
        
}
</code></pre>

<h2 id="toc_6">Auto Layout</h2>

<ul>
<li><p>Auto layout bar</p>

<ul>
<li>Align:创建一些与对齐有关的constraints；</li>
<li>Pin:创建一些与距离有关的constraints；</li>
<li>Issues:自动化解决一些constraints相关问题；</li>
<li>Stack:把几个view变成一个stack view，可以理解为组合起来，以方便对整组定义constraints。</li>
</ul></li>
<li><p>Control-drag</p>

<ul>
<li>在具体的view上按住control键然后拖拽到相关view，松开鼠标后选择添加constraints。小技巧：在选择时按住shift键，可以同时添加多个constraints。</li>
</ul></li>
<li><p>在具体constraints旁边出现黄色或红色标记，表示constraints存在一些问题。可以点击标记并update frames。只有一个问题时可能好使，多个问题的时候一般不好使。</p></li>
<li><p>小技巧：选择assistant pop-up menu→Preview→按住option键点击storyboard，可以在新窗口中预览不同机型的效果，可调整屏幕方向。（constraints复杂了之后，这个方法也不好使了）</p></li>
</ul>

<h2 id="toc_7">Stack View</h2>

<ul>
<li>Stack View插入的两种方式：1.从Object Library中拖到storyboard中，再把要组合的view拖进去；2.选中要组合的view后，使用Auto Layout bar中的Stack选项。</li>
<li>Stack View的两种基本形式：Horizontal（各view在其中水平排列）、Vertical（各view在其中竖直排列）</li>
<li>Stack View的几个可配置项：1.Alignment：设置Stack View中的Views是左对齐、居中还是右对齐；2.Distribution：设置Stack View中的Views高度或者宽度是各自适应还是相等；3.Spaceing：设置Stack View中的Views之间的间距。具体可参见下图。
<img src="media/14709182567699/14709260278104.jpg" alt="" class="mw_img_center" style="display: block; clear:both; margin: 0 auto;"/></li>
</ul>

<h2 id="toc_8">Size Classes</h2>

<ul>
<li>从iOS8开始，开启Size Classes后，可以通过一个storyboard适配不同尺寸、不同屏幕方向的屏幕，甚至是iPhone和iPad，即响应式布局Adaptive Layout。</li>
<li>Size Classes针对于横屏和竖屏定义了两种类型：Regular-空间大，Compact-空间小，这样排列组合后就会有四种类型。这四种类型分别代表了iPhone或iPad设备的不同屏幕方向，具体见下图。这样在针对View进行定义和constraints进行定义时就可以对于不同设备、不同屏幕方向采取不同的方案。具体方法是在这些设置项前面会有一个加号，点击后选择对应Size Classes并进行配置。
<img src="media/14709182567699/14709267301294.jpg" alt="" class="mw_img_center" style="display: block; clear:both; margin: 0 auto;"/></li>
</ul>

<h2 id="toc_9">实例：创建Table View</h2>

<ul>
<li>拖拽一个Table View到storyboard，然后初始配置其Cell（Table View中的每一行）的Style为Basic（系统内置类型），定义其Identifier为Cell，并添加必要的constraints；</li>
<li>对于class viewcontroller需要引入两个protocols：UITableViewDataSource和UITableViewDelegate，前者可以告知TableView要展示的数据是啥，要展示多少个等等，后者可以告诉TableView每一个展示的数据长啥样，比如行高是多少。</li>
<li>引入两个protocols后，要在storyboard中，将其与table view连接起来，具体操作是control-drag从table view到View Controller，并选中datasource和delegate。</li>
<li>Coding：

<ul>
<li>思路：声明要展示的数据变量并赋值→告知table view有几个cell→在每个cell中显示具体的值。</li>
<li>代码片段：</li>
</ul></li>
</ul>

<pre><code> // 声明tableview中展示的数据变量
    var movieNames = [&quot;小男孩&quot;, &quot;火星救援&quot;, &quot;老炮儿&quot;, &quot;心迷宫&quot;, &quot;房间&quot;, &quot;十二公民&quot;, &quot;独立日&quot;, &quot;寒战2&quot;,&quot;完美陌生人&quot;, &quot;大鱼海棠&quot;, &quot;熔炉&quot;, &quot;头脑特工队&quot;, &quot;破风&quot;, &quot;捉妖记&quot;, &quot;歌曲改变人生&quot;, &quot;速度与激情5&quot;, &quot;肖申克的救赎&quot;, &quot;机器人总动员&quot;, &quot;盗梦空间&quot;, &quot;忠犬八公的故事&quot;]

 // 告知tableview中有几个cell
    func tableView(tableView: UITableView, numberOfRowsInSection section: Int) -&gt; Int {
        
        // 根据数组的数量返回table view中cell的数量
        return movieNames.count
        
    }
    
// 在每个cell中显示具体的内容,这个方法会在table view每个row要展示的时候被调起
    func tableView(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath) -&gt; UITableViewCell {
        
        // 为节省资源，使每个cell可以重复利用
        let cellIdentifier = &quot;Cell&quot;
        let cell = tableView.dequeueReusableCellWithIdentifier(cellIdentifier, forIndexPath: indexPath)
        
        // 定义cell要显示的内容
        cell.textLabel?.text = movieNames[indexPath.row]
        cell.imageView?.image = UIImage(named: &quot;房间&quot;)
        
        return cell
        
    }
</code></pre>

<h2 id="toc_10">实例：隐藏某一个View中的Status Bar</h2>

<ul>
<li>代码片段：</li>
</ul>

<pre><code>// 在该View中隐藏Status Bar
    override func prefersStatusBarHidden() -&gt; Bool {
        return true
    }
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[学习使用Swift语言编写iOS程序小记]]></title>
    <link href="http://chuxiangyuan.github.io/14672077197053.html"/>
    <updated>2016-06-29T21:41:59+08:00</updated>
    <id>http://chuxiangyuan.github.io/14672077197053.html</id>
    <content type="html"><![CDATA[
<p>最近在了解Swift语言的语法，学着用Swift编写iOS程序，挖掘一下一直埋藏在心底coding的潜能，也锻炼下自己的逻辑思维能力。</p>

<span id="more"></span><!-- more -->

<h2 id="toc_0">学习时使用的资料汇总</h2>

<ul>
<li><p><a href="https://itunes.apple.com/cn/course/developing-ios-9-apps-swift/id1104579961">Developing iOS 9 Apps with Swift</a> —— Stanford大学一位有名的白胡子老头讲的公开课，年年根据苹果Swift版本迭代和iOS版本迭代的节奏不断更新，苹果官方推荐。iTunes U中有英文字幕，<a href="https://github.com/CS193P-Translation-Group/Developing-iOS-9-Apps-with-Swift">Github</a>上有中文字幕翻译项目，目前翻译的比较慢。着急的话可考虑去年的<a href="https://github.com/CS193P-Translation-Group/Developing_iOS_8_Apps_With_Swift">iOS 8版本</a>,翻译已全部完成。讲的很不错，但是自我感觉语速很快。</p></li>
<li><p><a href="https://developer.apple.com/library/prerelease/content/documentation/Swift/Conceptual/Swift_Programming_Language/index.html#//apple_ref/doc/uid/TP40014097-CH3-ID0">The Swift Programming Language</a> —— 苹果官方Swift语言指导手册，iOS 9在用的是<a href="https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/index.html#//apple_ref/doc/uid/TP40014097-CH3-ID0">Swift 2.2版本</a>，2016年WWDC刚刚发布<a href="https://developer.apple.com/library/prerelease/content/documentation/Swift/Conceptual/Swift_Programming_Language/index.html#//apple_ref/doc/uid/TP40014097-CH3-ID0">Swift 3版本</a>。</p></li>
<li><p><a href="https://www.appcoda.com/swift/">Beginning iOS 9 Programming with Swift</a> —— 国外作者写的一本针对于初学者的电子书，图文并茂，讲解的很详细，例子也很丰富。感觉每一章，作者都在害怕读者因为讲的东西太困难而放弃学习，在书中强调多次😂。</p></li>
</ul>

<h2 id="toc_1">有意思的iOS小程序记录</h2>

<p>从开始学习到不断深入，不管是视频中还是书中或是网络中，总会有很多有意思、启发性的iOS小程序，它们可能很简单，但是却带我走进了iOS开发的大门，让我兴趣越来越浓厚。感觉学习coding还是得以实例来引路，如果一直闷头学习语法，学很长时间也不知道学的到底用来干什么，真的会有强烈的挫败感，最后就像背单词永远停留在字母A序列中一样，了解了语法的皮毛就放弃了。</p>

<p>以下iOS小程序的完整代码可在<a href="https://github.com/ChuXiangyuan/Beginning-iOS-Programming-with-Swift">我的Github</a>中获取到。</p>

<ul>
<li><p>Hello World - 很简单，界面上有个button，点击后弹出一条消息。同时界面上的button和label元素实现Auto Layout。通过这个小程序，初步了解在Xcode中创建项目的方法，了解简单的View和Controler的创建方法和关系，了解了Auto Layout的基本方法。<br/>
<img src="media/14672077197053/1.png" alt="" class="mw_img_center" style="display: block; clear:both; margin: 0 auto;"/></p></li>
<li><p>StackViewDemo - 学习利用Stack View进行Auto Layout，进一步了解Auto Layout的方法，了解在不同设备上响应式布局的方法。<br/>
<img src="media/14672077197053/2.png" alt="" class="mw_img_center" style="display: block; clear:both; margin: 0 auto;"/></p></li>
</ul>

<p><img src="media/14672077197053/3.png" alt="" class="mw_img_center" style="display: block; clear:both; margin: 0 auto;"/></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[利器分享-Zeplin]]></title>
    <link href="http://chuxiangyuan.github.io/14641807710350.html"/>
    <updated>2016-05-25T20:52:51+08:00</updated>
    <id>http://chuxiangyuan.github.io/14641807710350.html</id>
    <content type="html"><![CDATA[
<p>作为一个产品汪或者设计师或者程序猿，你是否遇到过下面这些问题：</p>

<blockquote>
<ul>
<li>程序猿拿到设计师给出的设计图，只看到花花绿绿的一片，但是不知道开发时各个元素的间距到底是多少？该用啥字体？该用多大字号？这个文字是灰色还是黑色？具体的色值是多少？是半透明还是80%透明度？</li>
<li>为了让程序猿看得懂设计图，设计师辛苦的为每个图做出精细的标注，花费的时间比设计图本身还长？</li>
<li>产品经理针对设计图需要沟通的地方总是沟通不到位、理解不一致？花费了很多时间，最后还是没改对地方？</li>
<li>设计师update了设计图，程序猿拿到设计图时感到顿时懵逼？不知道哪张图改了？不知道哪些地方改了？到底要改成啥样？</li>
<li>对于设计图通用的一些样式、形状，程序猿每个都需要机械的去写css代码？</li>
<li>设计图中某个元素需要切图时，@1x、@2x、@3x傻傻分不清楚？</li>
</ul>
</blockquote>

<p>So，安利大家一个利器：Zeplin，上面的问题解决起来so easy，程序猿、产品汪、设计师又可以在一起愉快的玩耍了。</p>

<span id="more"></span><!-- more -->

<p>利用Zeplin可以基本实现：</p>

<ul>
<li><p>快速直接从Sketch文件中导出所有图层到Zeplin中，无需修改，无缝衔接；</p></li>
<li><p>查看所有元素的长度、宽度、边距、字体、字号、字体颜色等，甚至可以生成CSS代码，无需再刻意生成标注图；</p></li>
</ul>

<p><img src="http://o6lwrrweh.bkt.clouddn.com/2016-05-25-%E6%88%AA%E5%9B%BE%202016-05-25%2018%E6%97%B636%E5%88%8650%E7%A7%92.jpg" alt="查看标注"/></p>

<ul>
<li>给具体某个元素添加注释说明NOTE，例如某次更改的地方的注释、希望让开发同学特别注意的地方；</li>
</ul>

<p><img src="http://o6lwrrweh.bkt.clouddn.com/2016-05-25-%E6%88%AA%E5%9B%BE%202016-05-25%2018%E6%97%B639%E5%88%8605%E7%A7%92.jpg" alt="添加NOTE"/></p>

<ul>
<li><p>可邀请项目成员加入协作，所有成员都能同步看到所有更改、NOTE；</p></li>
<li><p>可以自由选择导出想导出的元素、切图；</p></li>
</ul>

<p><img src="http://o6lwrrweh.bkt.clouddn.com/2016-05-25-%E6%88%AA%E5%9B%BE%202016-05-25%2018%E6%97%B638%E5%88%8624%E7%A7%92.jpg" alt="导出元素"/></p>

<ul>
<li>可以定义、查看整个产品的颜色样式和文字样式。</li>
</ul>

<p><img src="http://o6lwrrweh.bkt.clouddn.com/2016-05-25-%E6%88%AA%E5%9B%BE%202016-05-25%2018%E6%97%B637%E5%88%8641%E7%A7%92.jpg" alt="查看颜色和文字样式"/></p>

<p>作为一个细分领域的团队协作工具，Zeplin确实是抓住了设计者和开发者的痛点。对于整体使用Mac的团队，如果可以根据自己团队的实际情况加以利用，一定会提升不少效率。</p>

<p>目前Zeplin仅支持与<a href="https://slack.com">Slack</a>连接，提供项目或页面更新提醒，如果之后能够支持更多服务（如Trello、Teambition、Worktile）就更好了。还有个小细节，目前在项目中添加的NOTE不支持导出、归档，所以在项目结束后，如果有重要的NOTE就会丢失了。这个地方如果能够稍加完善就更好了。</p>

<p>大家可以到<a href="https://zeplin.io">Zeplin的官网</a>了解它的更多细节。这个工具免费版只能创建一个项目，若需创建更多项目需要付费订阅。最便宜的15刀/月可以创建3个项目，不需要项目中每个成员都付费，只需一人订阅，即可全体受益。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[怎么获取手机上的App图标]]></title>
    <link href="http://chuxiangyuan.github.io/14631313149355.html"/>
    <updated>2016-05-13T17:21:54+08:00</updated>
    <id>http://chuxiangyuan.github.io/14631313149355.html</id>
    <content type="html"><![CDATA[
<p>在写文章、做展示或者其他场景中，我们需要某些手机上的App图标来作为素材。网上有许多文章讲了图标的获取方法，在这里说几个我自己常用且获取快速方便的方法。</p>

<span id="more"></span><!-- more -->

<h2 id="toc_0">获取Android应用图标</h2>

<p>相对于iOS应用图标，Android的应用图标获取比较简单：</p>

<ul>
<li>通过Google Play获取：比如想获取Wunderlist这个App的图标，打开Google Play，搜索到<a href="https://play.google.com/store/apps/details?id=com.wunderkinder.wunderlistandroid&amp;hl=zh-CN">Wunderlist的详情页</a>，直接图标上右击保存图标即可。</li>
</ul>

<p><img src="media/14631313149355/14631319696964.jpg" alt=""/></p>

<ul>
<li>如果你没有科学上网工具或者你要查找的App没有在Google Play中收录，那可以利用其它国内的安卓应用市场，以在豌豆荚获取网易云音乐的图标为例，同样是打开<a href="http://www.wandoujia.com/apps/com.netease.cloudmusic">网易云音乐的详情页</a>，直接图标上右击保存图标即可。</li>
</ul>

<p><img src="media/14631313149355/14631321310807.jpg" alt=""/></p>

<h2 id="toc_1">获取iOS应用图标</h2>

<p>iOS应用的渠道比较独立，只有App Store一个，而在应用详情页上不能直接通过右键另存为的方法保存图标，但倒是可以通过查看网页源代码来找到图标文件，如果觉着麻烦可以看看下面的方法。</p>

<ul>
<li>借助App <a href="https://appsto.re/cn/0eIv5.i">Lightscreen（点击下载）</a> 这款软件，在App Store的应用详情页上点击“分享”，再选择“保存为截图”，App的图标就乖乖地躺进相册里了。借助的这个小工具其实是一款截图管理软件，目前售价¥30，曾经冰点到¥18过。</li>
</ul>

<p><img src="media/14631313149355/IMG_1022.jpg" alt="IMG_1022"/></p>

<ul>
<li>上面的方法简单快捷，但如果没有购买 Lightscreen 可以通过<a href="http://appshopper.com/">AppShopper</a>这个网站来获取。<a href="http://appshopper.com/">AppShopper</a>网站是一个可以查看iOS、Mac应用的具体信息的网站，可以查看到App具体的升级、降价历史信息，可以在自己购买应用时做一个参考。在网站上找到应用详情页，然后在图标上直接右键另存为即可。</li>
</ul>

<p><img src="media/14631313149355/14631332088058.jpg" alt=""/></p>

<h2 id="toc_2">MORE</h2>

<p>如果你想知道更多获取App图标的方法，可以看下少数派的这两篇文章：<br/>
<a href="http://sspai.com/27269">提取 Android 高清应用图标？3 招就够</a><br/>
<a href="http://sspai.com/27234">提取 Mac OS X / iOS 应用图标的 6 种技巧</a></p>

<p>推荐下其中提到的网站<a href="http://bendodson.com/code/itunes-artwork-finder/index.html">iTunes Artwork Finder</a></p>

<blockquote>
<p>iTunes Artwork Finder可以提取电视节目、视频、电子书、专辑插图、应用程序、播客、电影等多达十项元素的大图标，还可以选择商店国籍，非常全能。</p>
</blockquote>

<p>注意下，在此网站中提取到的App图标是方形的，而不是圆角矩形的。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[说说Apple“我的照片流”和“iCloud照片图库”那些事]]></title>
    <link href="http://chuxiangyuan.github.io/14625508580709.html"/>
    <updated>2016-05-07T00:07:38+08:00</updated>
    <id>http://chuxiangyuan.github.io/14625508580709.html</id>
    <content type="html"><![CDATA[
<p>关于“我的照片流”和“iCloud照片图库”的Apple的官方解释：</p>

<blockquote>
<p>使用“我的照片流”，您可以在 Mac 和 PC 上访问<strong>最近</strong>使用 iPhone、iPad 或 iPod touch 拍摄的<strong>照片</strong>。</p>

<p>“iCloud 照片图库”可与全新“照片”应用无缝搭配使用，从而将您的<strong>照片和视频</strong>存储在 iCloud 中，并在您的 iPhone、iPad、iPod touch、Mac 和 iCloud.com 上保持最新状态。</p>
</blockquote>

<span id="more"></span><!-- more -->

<h2 id="toc_0">目录</h2>

<ul>
<li>
<a href="#toc_0">目录</a>
</li>
<li>
<a href="#toc_1">阅读指导</a>
</li>
<li>
<a href="#toc_2">“我的照片流”在各设备都不上传了</a>
<ul>
<li>
<a href="#toc_3">事情起因</a>
</li>
<li>
<a href="#toc_4">事情进展</a>
</li>
<li>
<a href="#toc_5">事情转机</a>
</li>
</ul>
</li>
<li>
<a href="#toc_6">“我的照片流”和“iCloud照片图库”到底是个啥</a>
</li>
<li>
<a href="#toc_7">“我的照片流”和“iCloud照片图库”使用特别注意</a>
</li>
<li>
<a href="#toc_8">有啥备份照片的好方法</a>
</li>
<li>
<a href="#toc_9">小彩蛋</a>
</li>
</ul>


<h2 id="toc_1">阅读指导</h2>

<ul>
<li>本文篇幅较长，且包含了一些技术性的东西，所以针对不同的阅读人群有一个阅读指导；</li>
<li>如果你手里有Apple的设备且是一个普通/小白用户，可以从<strong><em>“我的照片流”和“iCloud照片图库”到底是个啥</em></strong>部分开始往后阅读；</li>
<li>如果你手里没有Apple设备，可以从<strong><em>有啥备份照片的好方法</em></strong>部分开始往后阅读；</li>
<li>如果你手里有Apple的设备且想知道“我的照片流”和“iCloud照片图库”的具体原理或者跟我遇到了<strong><em>“我的照片流”在各设备都不上传了</em></strong>的类似问题或者是一个高级用户、极客等，可以直接阅读全文。</li>
</ul>

<h2 id="toc_2">“我的照片流”在各设备都不上传了</h2>

<h3 id="toc_3">事情起因</h3>

<p>前几天，我突然发现我的iPhone上的“照片流”停止工作，不再上传照片了，通过手机拍的美美的照片就不能自动同步到iPad和Mac上了。查看了下iPad和Mac上的照片流也都停止工作了，这是什么鬼？</p>

<p>简单在网络上查了下，发现有不少网友遇到了类似问题，但是时间跨度很大，有最近发生的，有发生在几年前的，结果是有的自己就好了，有的是悬而未决。</p>

<h3 id="toc_4">事情进展</h3>

<p>虽然这个问题也不是很大，但偶尔在Apple设备中使用这个功能还是很方便的。为了搞清事情的真相，我联系了Apple客服，虽然据以前的经验，这种问题Apple客服一般是解决不了的。</p>

<p>果然Apple客服对这个问题有点懵，问题立马从一线客服转向了更高层级的产品专家，在这位产品专家的的建议下，为了找出问题的原因，我做了一系列测试，以下是测试方式和结果：</p>

<ul>
<li>使用我的Apple ID（A，中区），在家里的网络条件下，iPhone、iPad、Mac上照片流同步功能都是停止工作的，即从某个时间点开始往后照片流就不再同步；</li>
<li>同样的设备，在公司的网络条件下，照片流同步功能依然是停止工作；</li>
<li>更换了一个Apple ID（B，美区），在同样的设备上、家里的网络条件下测试，照片流功能恢复正常；</li>
<li>抹除iPad的所有内容和设置后，登录我的Apple ID（A，中区），在家里的网络条件下，照片流功能仍然无法正常同步；</li>
<li>后来无意中发现，在家里的网络条件下，开启VPN，照片流同步功能基本恢复正常。</li>
</ul>

<p>基于前三个测试的测试结果，可以看出问题似乎与我的设备或者Apple ID有关，与网络无关；基于第四个测试结果，问题与我的设备没有关系；基于第五个测试结果，问题似乎又与我的网络有关。这不是相互矛盾吗？</p>

<p>将以上的测试结果反馈给Apple客服，Apple客服也无法解释这种情况，认为可能是Apple的服务器临时抽风了吧，并把此问题进一步向上反馈。</p>

<p>事情至此，我想即使这个问题再向上反馈，估计也不会得到什么特别明确的答复了。毕竟Apple的iCloud的部分服务器由于在国外的缘故，在国内经常出现各种问题也是司空见惯的。</p>

<h3 id="toc_5">事情转机</h3>

<p>之后的几天，我无意中发现了照片流同步功能恢复正常，我去，真是活见鬼，还真的莫名其妙的自己好了。</p>

<p>虽然问题解决了，但是这个问题是怎么解决的？问题是怎么发生的？完全没搞懂啊！无意中到了程序猿聚集地V2EX论坛搜索了一下“照片流”的相关问题，发现有个网友遇到了类似的问题，他设备的照片流功能时好时坏，下面其中有个回复，建议把亚马逊服务器的一个域名“amazonaws.com”加入代理列表。似曾相识的域名，突然恍然大悟，似乎明白了问题的原因，经过进一步查证后也证实了我的想法。</p>

<ul>
<li><p>根据网上的资料可以确认，Apple的iCloud服务中的数据并不是完全存储于Apple的服务器上，部分数据经过Apple加密后存储在了其他外部的服务器上，例如中国电信、亚马逊的AWS和微软的Azure，这些都有过公开报道，但似乎Apple官方并没有正式承认；</p></li>
<li><p>上面所说的亚马逊的AWS服务其实在中国大陆访问存在一定的问题，AWS服务有众多的服务器，这些服务器有的在中国大陆访问正常，有的访问速度特别慢，甚至发生数据丢失的情况，有的直接不能访问。原因是中国的“墙”对其有屏蔽；</p></li>
<li><p>由于我最近需要在亚马逊的AWS服务中访问一些文件，故近期我把此服务的相关域名加入了我的科学上网工具中的代理列表，通俗地说就是在我的这个代理列表中的域名地址，就可以跨过“墙&quot;以正常速度访问；</p></li>
<li><p>我的照片流随之很快恢复了正常同步，后来我意识到这与我将亚马逊AWS服务加入我的代理列表有直接关系。因为我的Apple ID的照片流在同步时上传到了亚马逊的AWS服务器，但AWS服务器在中国大陆环境下访问存在问题，致使我的照片流同步不正常，我跨过”墙“后，AWS访问恢复正常，故我的照片流同步也恢复正常。这也解释了当时为什么在挂VPN的条件下，我的照片流就能同步了。</p></li>
<li><p>为进一步证实，我把域名“amazonaws.com”从科学上网工具中的代理列表中移除，再测试照片流功能，照片又不上传了；</p></li>
<li><p>而我的另一个Apple ID当时能正常同步照片流的原因是没有上传到亚马逊的AWS服务器，而是上传到了其他可以正常访问的服务器，比如中国电信。</p></li>
<li><p>“我的照片流”、“iCloud照片图库”服务中用户的照片会上传到哪个服务器，这个逻辑可能就是Apple不断动态调整的，具体就不清楚了，但可以猜测不同的Apple ID、不同的网络、不同的时间上传的服务器可能都不一样。我的照片流之前同步正常的原因可能就是当时并没有上传到亚马逊的AWS服务器，在某一个时间点调整到了亚马逊的AWS服务器，导致问题发生。</p></li>
</ul>

<p>总结一下，问题的根本原因就是iCloud的分布式服务器搞得鬼，而有的服务器在大陆访问不正常导致了问题的发生。</p>

<p>多么简单的原因啊，这就是埋藏在事情背后的真相。通过问题的表象，自己一步步地查找资料，顺藤摸瓜，拨云见日，最终发现问题的真相，这种感觉真棒。</p>

<h2 id="toc_6">“我的照片流”和“iCloud照片图库”到底是个啥</h2>

<p>在查找问题原因的过程中，我也进一步了解了Apple设备的“我的照片流”和“iCloud照片图库”到底是个啥。只要是有在使用Apple设备的用户很有必要好好了解下。</p>

<ul>
<li><p>“我的照片流/My Photo Stream”是Apple先推出的服务，需要iOS 7 和更高版本以及Lion 10.7.5和更高版本才支持；“iCloud照片图库/iCloud Photo Library”功能是Apple推出不久的服务，需要iOS 8.3 和更高版本以及 Yosemite 10.10.3 和更高版本才支持。两者都依托于iCloud提供功能支持。</p></li>
<li><p>“我的照片流”的用途是在各个Apple设备间同步你<strong><em>最近</em></strong>存储的图片，它只会在Apple的服务器中存储最多30天，最大数量1000张，只同步照片，不同步视频，它不占用iCloud存储空间，即服务是免费的，但存储的照片不保证是原始分辨率、原始画质；</p></li>
<li><p>“iCloud照片图库”的用途是备份并同步各个Apple设备间的照片和视频，没有时间限制，占用iCloud存储空间，iCloud初始免费存储空间是5GB，存满后需要付费购买，存储在服务中的照片全部都是原件，但在下载时可以在各设备上自行选择是下载原件还是优化过的版本。</p></li>
</ul>

<p>总结下，“我的照片流”功能只是用来短暂时间内在各个Apple设备间同步照片的，不担负备份功能；“<br/>
iCloud照片图库”功能既可以备份，又可以同步。</p>

<h2 id="toc_7">“我的照片流”和“iCloud照片图库”使用特别注意</h2>

<p>从我的观察来看，一般情况下Apple设备的“我的照片流”功能都是默认开启的，而“iCloud照片图库”会在第一次设置时询问用户，可能很多用户都是关闭的。这就使得使用”我的照片流“功能的用户非常普遍。</p>

<p>根据上面说的两者的功能和区别，有一个特别需要注意的是：</p>

<p><strong>不要拿“我的照片流”功能当备份用！</strong><br/>
<strong>不要拿“我的照片流”功能当备份用！</strong><br/>
<strong>不要拿“我的照片流”功能当备份用！</strong></p>

<p>重要的话说三遍！不要以为开启了“我的照片流”，看到自己的照片都被上传了，而且还在其他Apple设备间同步了，以为照片被备份了，下次刷机或者购买新设备那些照片就又会被下载下来。这种想法是大多数小白用户都有的，但却是完全错误的。看到的那只是表象，在设备中显示的只是下载下来的照片的副本，一旦你关闭照片流功能再开启、刷机、购置新的设备，下载下来的只有最多30天、最多1000张照片。到那时候再哭着喊着我的照片去哪了，可就啥都不管用了。</p>

<p>如果确实想备份自己美美的照片，那就只能开启“iCloud照片图库”功能了。如果你照片比较多，超过了5GB，那就只能付费了。</p>

<h2 id="toc_8">有啥备份照片的好方法</h2>

<p>除了Apple自有的服务，还有什么好方法，最好是免费的方法可以备份自己的照片呢？特别是自己的设备特别多时该咋整呢？不要告诉我你是手动备份转存在自己的硬盘上的。说几种常见的和我推荐的：</p>

<ul>
<li><p>类似于百度云盘的照片备份功能，优点是应该空间足够大，一般不需要付费（我相信大家的百度云盘的空间都超级大，当年的各大云盘大战不是白战的），缺点是其一安全有很大隐患，据说百度云盘的一些私人文件、照片都可以被搜索引擎直接搜到，说不定下个艳照门的主角就是你，而且百度存储的资料说不能访问就不能访问，这个你也懂得；其二，最近也看到了，“新浪微盘”、“UC网盘”、“快盘”、“115网盘”、“腾讯微云”纷纷关停部分服务甚至整项服务，如果你在这些网盘上存储了大量文件，这简直就是灾难，说没就没啊。虽然百度云盘和360云盘财大气粗，但我依然不看好国内的云盘服务；其三，最近百度这口碑啊直线下滑，不仅谋财还害命，即使公关再强大，说不定哪天也被群众的唾沫淹死了。你说还有360？360也不是什么好鸟。</p></li>
<li><p>类似于小米手机自带的照片备份功能，优点是系统原生自带，肯定一些功能可以做的更加友好方便；缺点其一是到一定量级后还是需要付费，其二是平台局限性太大，如果你有非小米设备就搞不定了。</p></li>
<li><p>类似于国外网盘Dropbox的照片备份功能，优点是安全，Dropbox可以说是世界上最好的个人网盘，没有之一，专注做这个，不干别的；缺点其一是Dropbox的免费空间真的很少，用不了多久就需要付费，照片又那么地占用空间，其二是这么好的服务当然已经被墙了啊，所以好多小白用户用不到这么好的服务。</p></li>
<li><p>最后一个也是我推荐的是Google Photos，这是Google去年才推出的服务，覆盖移动端、PC端、Web端所有平台。优点是其一安全，Google的口碑也是杠杠的，其二是不限空间，这简直就是天上掉馅饼，免费的午餐啊，不过稍微要注意的是，不限空间的前提是备份的照片经过一定处理，不是原片。但有人已经做过仔细对比，这种处理算法做的非常棒，照片的画质损失几乎看不出来；缺点就不用我说了吧，这么好的服务怎么有理由不被墙呢？不过一个科学上网工具不应该是一个社会主义接班人必备的武器吗？</p></li>
</ul>

<p>以上缺点中提到的付费是针对于想要一个免费的照片备份工具来说的，并不是说付费就是不好的。不管是App、电子书还是其他网络服务，我相信只要他对你有很大帮助，甚至改变了你的生活，就是值得你付费的。</p>

<p>说到底，这篇文章其实算是一篇科普文，让你明白你手机上的那些功能背后到底是什么原理，到底该如何利用好它并服务好自己？希望对你有帮助。如果你有疑问，欢迎留言与我进一步探讨。</p>

<h2 id="toc_9">小彩蛋</h2>

<p>之前提到的我咨询问题的Apple 苹果专家倒是给我留下了很深刻的印象。我印象中的客服都是很劳累，问多了会很没有耐心的，因为他们每天要在电话中面对形形色色的用户，重复着说着一些话，但这位Apple 苹果客服是抱着一种学习乐观的态度来做客服的，耐心的听用户反馈问题，交流问题，甚至反过来从用户的描述中学习很多东西自己利用，更甚至可以在交流中聊聊其他更广、更有趣的话题，可以听出她特别积极乐观的工作生活态度。这样一天的工作轻松结束，自己既能学到东西，还帮人解决了问题，自己很开心，客户也很开心。不管干嘛，快乐不快乐，开心不开心，还是看自己怎么看待！</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[建立个人网站目标已达成√]]></title>
    <link href="http://chuxiangyuan.github.io/14631451597072.html"/>
    <updated>2016-05-13T21:12:39+08:00</updated>
    <id>http://chuxiangyuan.github.io/14631451597072.html</id>
    <content type="html"><![CDATA[
<p>之前有了解过Markdown语言，但之前只了解了下皮毛，最近做了进一步研究，也对比了一下各个Markdown编辑器的优劣。结果利用MWeb以及Github的PAGES服务顺藤摸瓜的建立起了自己的个人网站。</p>

<span id="more"></span><!-- more -->

<h2 id="toc_0">💪 建站工具</h2>

<ul>
<li>个人网站的地址：<a href="http://chuxiangyuan.github.io/">http://chuxiangyuan.github.io/</a>，也可通过扫描或识别下边的二维码前往;</li>
</ul>

<p><img src="media/14631451597072/%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2.jpg" alt="我的博客"/></p>

<ul>
<li><p>如果你习惯了使用RSS工具查看文章，你也可以通过RSS工具订阅我的个人博客，以下是RSS地址：<code>http://chuxiangyuan.github.io/atom.xml</code>；</p></li>
<li><p>网站中所有文章均在<a href="http://zh.mweb.im">MWeb</a>中使用Markdown语言格式编写完成;</p></li>
<li><p>通过MWeb的静态博客生成功能生成了网站，使用了<a href="https://github.com/oulvhai/mweb-medium-like">mweb-medium-like</a>主题样式；</p></li>
<li><p>网站所有的源代码均托管在Github上，可在我的Github上查看，<a href="https://github.com/ChuXiangyuan/chuxiangyuan.github.io">点击前往</a>；</p></li>
<li><p>网站中使用了<del><a href="http://duoshuo.com">多说评论插件</a></del><a href="https://disqus.com">Disqus 评论插件</a>、<a href="http://www.jiathis.com">JiaThis分享插件</a>；</p></li>
<li><p>通过Github提供的<a href="https://pages.github.com">PAGES服务</a>发布了网站,根据实际情况暂时没有申请独立域名；</p></li>
<li><p>建站过程中除上述工具外还使用了：<a href="http://www.sketchapp.com">Sketch</a>（经常用此软件画原型，所以直接拿来进行简单的图片处理）、<a href="http://cli.im/">草料二维码</a>（二维码生成）、<a href="https://itunes.apple.com/cn/app/jie-tu-jietu/id1059334054?mt=12">Jietu</a>（截图和截图处理）、<a href="http://pasteapp.me">Paste</a>（剪贴板管理）等工具。</p></li>
</ul>

<h2 id="toc_1">🙌 建站目的</h2>

<ul>
<li><p>在这个各种信息共享的年代，希望能将自己每天所听、所见、所想的事情记录下来、沉淀下来，同时与大家共享，如果我的文字能够帮助你，那是再好不过了；</p></li>
<li><p>具体的主题不限，但是自己作为一只产品汪，对科技、IT、数码、App极其热爱，所以文章内容基本会与这些有关；</p></li>
<li><p>不企望这个网站能有多大的流量，最重要的就是能够静下心来，搞懂逻辑、理清思路，将各种各样的想法转换为一行行文字。</p></li>
</ul>

]]></content>
  </entry>
  
</feed>
