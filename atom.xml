<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[向远公园 | Step Park]]></title>
  <link href="https://steppark.net/atom.xml" rel="self"/>
  <link href="https://steppark.net/"/>
  <updated>2019-09-04T13:48:23+08:00</updated>
  <id>https://steppark.net/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://www.mweb.im/">MWeb</generator>
  
  <entry>
    <title type="html"><![CDATA[Sign In with Apple 的设计准则和功能实现]]></title>
    <link href="https://steppark.net/15676959360699.html"/>
    <updated>2019-09-05T23:05:36+08:00</updated>
    <id>https://steppark.net/15676959360699.html</id>
    <content type="html"><![CDATA[
<p>在你的 app 或者网站上展示一个「Sign In with Apple」按钮意味着人们可以只通过他们已经拥有的 Apple ID 进行登录或注册，跳过填写个人信息、确认电子邮箱和选择密码的部分。Sign In with Apple 通过给用户一个一致的、他们可以信任的登录体验提供了一个全新的、更加隐私的方式以简化和加快登录 app 和网站的过程，也方便了用户不需要记住多个账户和密码。在你需要请求用户的名字和电子邮箱的地方，用户可以选择对他们的真实电子邮箱进行保密，而提供一个独一无二的、随机的、可收发邮件的电子邮箱地址。</p>

<span id="more"></span><!-- more -->

<p><img src="media/15676959360699/hero-lockup-large_2x.png" alt="" class="mw_img_center" style="display: block; clear:both; margin: 0 auto;"/></p>

<p>Sign In with Apple 让人们通过 Face ID 或者 Touch ID 完成授权变得简单，并且内建了两步验证以增加安全层级。Apple 不会通过 Sign In with Apple 的活动在 app 中收集用户的个性化资料和他们的具体活动。<br/>
Sign In with Apple 提供了反欺骗的特性，它可以通过机器学习和其他信息提供给开发者一个新用户是真实人类还是需要进一步观察的标志。</p>

<h2 id="toc_0">目录</h2>

<ul>
<li>
<a href="#toc_0">目录</a>
</li>
<li>
<a href="#toc_1">设计帐户注册和登录流程</a>
</li>
<li>
<a href="#toc_2">Sign In with Apple 按钮</a>
<ul>
<li>
<a href="#toc_3">白色</a>
</li>
<li>
<a href="#toc_4">带描边的白色</a>
</li>
<li>
<a href="#toc_5">黑色</a>
</li>
<li>
<a href="#toc_6">按钮尺寸和位置</a>
</li>
</ul>
</li>
<li>
<a href="#toc_7">实现 Sign In with Apple</a>
<ul>
<li>
<a href="#toc_8">纵览</a>
</li>
<li>
<a href="#toc_9">让 Sign In with Apple 与你的 app 结合</a>
<ul>
<li>
<a href="#toc_10">Button 按钮</a>
</li>
<li>
<a href="#toc_11">Authorization 授权</a>
</li>
<li>
<a href="#toc_12">Verification 鉴权</a>
</li>
<li>
<a href="#toc_13">Handling Changes 处理变动</a>
</li>
</ul>
</li>
<li>
<a href="#toc_14">跨平台</a>
</li>
<li>
<a href="#toc_15">Best Practices</a>
</li>
</ul>
</li>
</ul>


<h2 id="toc_1">设计帐户注册和登录流程</h2>

<ul>
<li>让用户登录只为了交互有价值的信息：例如，人们可能需要创建一个账户来让 app 可以提供个性化的体验、在 app 中访问额外的功能或者同步数据，如果你的 app 不需要基于账户的功能，那就不需要让用户登录。</li>
<li>在你的所有 app 和网站中考虑使用 Sign In with Apple：为了一个一致性的登录体验，推荐你在你 app 覆盖的所有苹果平台和网站上使用 Sign In with Apple。</li>
<li>登录的请求越往后越好：当用户还没做什么有用的事情就被强制登录时，人们可能会放弃使用 app。在向用户发出请求并让用户提供信息前给用户一个熟悉你 app 的机会。例如，一个流媒体播放 app 在需要登录播放内容前可以先让用户看看 app 提供了什么内容。</li>
<li>在任何可能的时候，直到用户要做出购买决定时再让用户创建账户：如果你的服务支持访客结算系统，在交易完成之后处理好结算过程，并可以给用户一个快速创建账户的机会。</li>
<li>向用户解释清楚登录的好处以及如何注册你的服务：如果你的 app 需要登录账户，那就在登录界面上给用户展示一个清晰友好的说明，描述清楚为什么需要登录以及登录的好处。还有，记住并不是每一个使用你 app 的人在一开始就有一个账户。</li>
<li>注册账户时只收集必要的信息：如果只是为了创建一个独一无二的用户标识符，那就不需要收集用户的名字和电子邮箱信息。</li>
</ul>

<h2 id="toc_2">Sign In with Apple 按钮</h2>

<p>为了帮助人们注册一个账户和登录账户，最好使用 Apple 为 Sign In with Apple 功能提供的熟悉的按钮。当你使用系统 API 创建 Sign In with Apple 按钮时，你可以获得下面这些好处：</p>

<ul>
<li>一个确保使用了 Apple 提供的标题、字体、颜色、样式的按钮；</li>
<li>确保了当你改变按钮样式时，按钮的内容可以保持合适的比例；</li>
<li>自动翻译按钮上的标题到用户设备设置的语言；</li>
<li>为了与你的 UI 样式匹配，对按钮圆角半径的调整的功能支持。</li>
</ul>

<p>Sign In with Apple 提供了两种按钮样式变种：「Sign In with Apple」 和 「Continue with Apple」。根据需要，选择最适合你的服务的登录场景的那种样式。</p>

<p><img src="media/15676959360699/1DE720CE-AB70-420C-821A-6854256DF6B2.png" alt=""/></p>

<p>对于 Sign In with Apple 按钮有三种外观：白色（White）、带描边的白色（White with Outline Rule）、黑色（Black）。根据你要展示按钮处的 UI 背景选择最适合的外观。</p>

<h3 id="toc_3">白色</h3>

<p>在可以提供足够对比度的深色或者彩色背景上使用白色外观。</p>

<p><img src="media/15676959360699/EDA18A96-D998-47A8-9813-3B599C3F32E5.png" alt=""/></p>

<h3 id="toc_4">带描边的白色</h3>

<p>在白色或者不能提供足够对比度的浅色背景上使用带描边的白色外观。不要在黑色或者太饱和颜色的背景上使用。</p>

<p><img src="media/15676959360699/9C16E913-90B5-40C0-8890-C91679BE5341.png" alt=""/></p>

<h3 id="toc_5">黑色</h3>

<p>在白色或者可以提供足够对比度的浅色背景上使用黑色外观。不要在黑色或者深色的背景上使用。</p>

<p><img src="media/15676959360699/15676962891072.jpg" alt=""/></p>

<h3 id="toc_6">按钮尺寸和位置</h3>

<ul>
<li>让 Sign In with Apple 按钮展示的显眼一些：让 Sign In with Apple 按钮和其他登录按钮具有相同的尺寸，避免人们需要滚动屏幕才能看到按钮的情况。</li>
<li>调整圆角半径以与 app 中的其他登录按钮样式相匹配：默认情况下，Sign In with Apple 有一个圆角半径。你可通过改变这个半径值让按钮变成矩形或者药丸形状的按钮。</li>
</ul>

<p><img src="media/15676959360699/FC92B3C7-DF00-48A7-8945-22ADEBFD921E.png" alt=""/></p>

<ul>
<li>保证最小按钮尺寸和按钮周围的边距：取决于不同的地区，按钮的标题长度可能会发生变化。使用下面推荐的指导值。</li>
</ul>

<p><img src="media/15676959360699/0E89E6BB-771B-4BA0-8E9D-87E545211E43.png" alt=""/></p>

<h2 id="toc_7">实现 Sign In with Apple</h2>

<h3 id="toc_8">纵览</h3>

<p>当用户点击 Sign In with Apple 按钮后，用户会看到一个根据你 app 要求提供的信息而填好了信息的表单显示在屏幕上，像是名字和电子邮箱。用户可以在提供原始电子邮箱或者一个新的由 Apple 提供的邮箱之间做出选择。当用户点击继续按钮后，就完成了登录。你的 app 也会获得一个独一无二、固定 ID、用户的名字以及一个可以让用户收到邮件的电子邮件地址，不再需要用户做收取验证邮件、点击验证链接这样的事。</p>

<p><img src="media/15676959360699/6295E671-AC96-4AC1-A3E1-FB19680E2845.png" alt=""/></p>

<p>当用户在一台新的设备上登录时，一个轻轻的点击就可以登录之前的用户并开始使用你的 app。</p>

<p><img src="media/15676959360699/CEF1061B-D667-459E-9C01-92E1A7AFF629.png" alt=""/></p>

<p>Sign In with Apple 为你的 app 提供了一套流线化的账户设置体验，不需要填写复杂的表格，只需要轻轻一点。用户从 App Store 使用他的 Apple ID 下载了 app，在 app 中也顺其自然地通过 Sign In with Apple 完成登录。开发者也获得了一个已验证并且可以让用户收到邮件的邮箱，即使用户隐藏了自己的真实邮箱，提供的新的邮箱收取的邮件也可以通过 Apple 的转发服务转到用户的真实邮箱，同样用户也可以使用这个新的邮箱进行邮件回复。</p>

<p><img src="media/15676959360699/FFFF6FC2-C3E9-4BCF-87D4-72D2B0037494.png" alt=""/></p>

<p>Apple 也可以在使用 Sign In with Apple 登录时，通过机器学习和其他获取的信息告诉开发者这个用户是真实的还是未知的。如果是真实的，你就不需要再判断，尽管给这个用户良好的使用体验，如果是未知的，那可能是一个真人用户，也可能是一个机器人。</p>

<p><img src="media/15676959360699/41E3B437-F2CF-4AD7-AB44-C8ADB1A1CD7E.png" alt=""/></p>

<p>Sign In with Apple 也是跨平台的，不仅可以在所有苹果平台上使用，也可以通过 JS API 在网站、Windows、Android 上使用。</p>

<p><img src="media/15676959360699/AC333E4F-9AEB-4AFE-A3BB-FBBB376EC0D9.png" alt=""/></p>

<h3 id="toc_9">让 Sign In with Apple 与你的 app 结合</h3>

<p>分成下图的四个部分：按钮、授权、鉴权、处理变动。先展示 Sign In with Apple 按钮，接着配置和执行授权的请求，在用户看到 Sign In with Apple 按钮并通过 Face ID/Touch ID 完成确认后，授权的结果会返回给 app。这时你需要与 Apple ID 服务器确认结果并在你的 app 中创建一个新用户。最后，凭据状态可能会发生变化，你的 app 需要处理处理好这些变化状态。</p>

<p><img src="media/15676959360699/28AD43B3-2C45-47AA-BCB9-5D98DE69EC5C.png" alt=""/></p>

<h4 id="toc_10">Button 按钮</h4>

<p>只需要几行代码，你就可以把 <code>AuthorizationAppleIDButton</code>  添加到你的 app 中。具体代码如下：</p>

<pre class="line-numbers"><code class="language-swift">// Add “Sign In with Apple” button to your login view

func setUpProviderLoginView() {
 let button = ASAuthorizationAppleIDButton()
 button.addTarget(self, action: #selector(handleAuthorizationAppleIDButtonPress),for: .touchUpInside)
 self.loginProviderStackView.addArrangedSubview(button)
}
</code></pre>

<h4 id="toc_11">Authorization 授权</h4>

<p>利用几行代码，你就可以初始化一个 Apple ID 授权请求。具体的代码如下：</p>

<pre class="line-numbers"><code class="language-swift">// Configure request, setup delegates and perform authorization request

@objc func handleAuthorizationButtonPress() {
 let request = ASAuthorizationAppleIDProvider().createRequest()
 request.requestedScopes = [.fullName, .email]

 let controller = ASAuthorizationController(authorizationRequests: [request])

 controller.delegate = self
 controller.presentationContextProvider = self

 controller.performRequests()
}
</code></pre>

<h4 id="toc_12">Verification 鉴权</h4>

<p>在授权后，app 如果鉴权成功会从凭据中获得一系列信息，如果用户中断了过程或者发生了错误需要有错误处理的逻辑。具体的代码如下：</p>

<pre class="line-numbers"><code class="language-swift">func authorizationController(controller _: ASAuthorizationController, didCompleteWithAuthorization authorization: ASAuthorization) {
 if let credential = authorization.credential as? ASAuthorizationAppleIDCredential {
 let userIdentifier = credential.user
 let identityToken = credential.identityToken
 let authCode = credential.authorizationCode
 let realUserStatus = credential.realUserStatus

 // Create account in your system
 }
}

func authorizationController(_: ASAuthorizationController, didCompleteWithError error: Error) {
 // Handle error
} 
</code></pre>

<p>对于凭据中的信息，userID 是一个独一无二、稳定的、团队范围内的用户识别符，你可以在不同的平台中使用它获取用户信息，它是与你的开发者账户绑定的。鉴权数据包括身份 token 和授权 code，token 的生命周期很短，可以与 Apple ID 服务器交换新的 token。可选的，系统还会返回你请求的账户信息，比如名字和电子邮箱。最后是一个之前提到的真实用户指示标志。</p>

<p><img src="media/15676959360699/59379B20-8BF4-4099-9581-36EC3EBA55F2.png" alt=""/></p>

<h4 id="toc_13">Handling Changes 处理变动</h4>

<p>你的用户可能会在你的 app 中停止使用 Apple ID 登录，可能会在设备中登出。授权服务框架提供了一个快速 API 供开发者获取相关状态。具体的代码如下：</p>

<pre class="line-numbers"><code class="language-swift">let provider = ASAuthorizationAppleIDProvider()
provider.getCredentialState(forUserID: &quot;currentUserIdentifier&quot;) { (credentialState, error) in
 switch(credentialState){
 case .authorized:
     // Apple ID Credential is valid
 case .revoked:
     // Apple ID Credential revoked, handle unlink
 case .notFound:
     // Credential not found, show login UI
 default: break
 }
}
</code></pre>

<p>NotificationCenter 也可以发出通知，告诉 app 用户的凭据状态已经失效。当失效时，在设备上退出登录，进一步可以引导用户重新登录。具体代码如下：</p>

<pre class="line-numbers"><code class="language-swift">// Register for revocation notification
let center = NotificationCenter.default
let name = NSNotification.Name.ASAuthorizationAppleIDProviderCredentialRevoked
let observer = center.addObserver(forName: name, object: nil, queue: nil) { (Notification) in
 // Sign the user out, optionally guide them to sign in again
}
</code></pre>

<p>用户使用 Sign In with Apple 在你的 app 中注册了用户，他可能还会在其他设备上使用你的 app 或者需要重新登录。当第一次进入 app 时，系统会告诉用户曾经使用 Apple ID 注册了用户，经过 Face ID 检查后就可以完成登录。</p>

<p><img src="media/15676959360699/06CFB432-1493-4EE4-82A7-C290BAE26ED2.png" alt=""/></p>

<p>同时，通过相同的 API，iCloud 钥匙串也可以实现此功能。你需要同时支持这两种登录请求。</p>

<p><img src="media/15676959360699/CD86686F-FB8D-4446-8966-DB9A2DD2309E.png" alt=""/></p>

<p>当用户已存在时，具体的代码如下：</p>

<pre class="line-numbers"><code class="language-swift">///Prompts the user if an existing iCloud Keychain credential or Apple ID credential exists.

func performExistingAccountSetupFlows() {
 // Prepare requests for both Apple ID and password providers.
 let requests = [ASAuthorizationAppleIDProvider().createRequest(),
 ASAuthorizationPasswordProvider().createRequest()]

 // Create an authorization controller with the given requests.
 let authorizationController = ASAuthorizationController(authorizationRequests: requests)
 authorizationController.delegate = self
 authorizationController.presentationContextProvider = self
 authorizationController.performRequests()
 } 
</code></pre>

<p>判断是通过 Apple ID 凭据登录还是 iCloud 钥匙串登录的具体代码如下：</p>

<pre class="line-numbers"><code class="language-swift">func authorizationController(controller _: ASAuthorizationController, didCompleteWithAuthorization authorization: ASAuthorization) {
 switch authorization.credential {
 case let credential as ASAuthorizationAppleIDCredential:
     let userIdentifier = credential.user
     // Sign the user in using the Apple ID credential
case let credential as ASPasswordCredential:
     // Sign the user in using their existing password credential
 default: break
 }
}
</code></pre>

<h3 id="toc_14">跨平台</h3>

<p>在浏览器中，你也可以通过 JS SDK 实现用户熟悉的登录窗口，通过输入 Apple ID 和密码完成登录。其 API 与原生的相似。</p>

<p><img src="media/15676959360699/BE69DE27-DFDC-4CAE-9C9B-792C936B1C0E.png" alt=""/></p>

<p>特别的，在 Safari 浏览器上，点击网页上的 Sign In with Apple 按钮会直接定向到一个原生的像 Apple Pay 一样的表单，用户可以通过 Touch ID 授权快速完成登录。</p>

<p><img src="media/15676959360699/C7FB9A8F-6382-4E42-9DB5-6609B56DF3B3.png" alt=""/></p>

<h3 id="toc_15">Best Practices</h3>

<p><img src="media/15676959360699/751B01C9-1E19-4A80-B841-B9332F298918.png" alt=""/></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android 10 的深色主题应用]]></title>
    <link href="https://steppark.net/15675754544495.html"/>
    <updated>2019-09-04T13:37:34+08:00</updated>
    <id>https://steppark.net/15675754544495.html</id>
    <content type="html"><![CDATA[
<p>从 Android 10 开始，系统引入了「Dark Theme 深色主题」功能，app 不仅可以在默认的浅色主题模式下浏览，也可以在新的深色主题下浏览。<br/>
深色主题简而言之就是在深色的界面上展示低亮度的 UI。</p>

<span id="more"></span><!-- more -->

<p><img src="media/15675754544495/darktheme-overview.png" alt=""/></p>

<h2 id="toc_0">目录</h2>

<ul>
<li>
<a href="#toc_0">目录</a>
</li>
<li>
<a href="#toc_1">Usage 用法</a>
<ul>
<li>
<a href="#toc_2">Principles 原则</a>
</li>
<li>
<a href="#toc_3">Properties 特性</a>
</li>
</ul>
</li>
<li>
<a href="#toc_4">Anatomy 结构</a>
</li>
<li>
<a href="#toc_5">Behavior 行为</a>
</li>
<li>
<a href="#toc_6">Properties 属性</a>
<ul>
<li>
<a href="#toc_7">Elevation 海拔</a>
</li>
<li>
<a href="#toc_8">Accessibility and contrast 可访问性和对比度</a>
</li>
</ul>
</li>
<li>
<a href="#toc_9">UI application UI 应用</a>
<ul>
<li>
<a href="#toc_10">Theme colors 主题颜色</a>
</li>
<li>
<a href="#toc_11">Primary color 主要颜色</a>
</li>
<li>
<a href="#toc_12">Secondary color 次要颜色</a>
</li>
<li>
<a href="#toc_13">Accnet color 强调色</a>
</li>
<li>
<a href="#toc_14">Brand colors 品牌颜色</a>
</li>
<li>
<a href="#toc_15">The dark theme baseline palette 深色主题基线色盘</a>
</li>
</ul>
</li>
<li>
<a href="#toc_16">Custom application 自定义应用</a>
</li>
<li>
<a href="#toc_17">States 状态</a>
<ul>
<li>
<a href="#toc_18">Surface Containers</a>
</li>
<li>
<a href="#toc_19">Primary Containers</a>
</li>
<li>
<a href="#toc_20">不可用状态</a>
</li>
</ul>
</li>
</ul>


<h2 id="toc_1">Usage 用法</h2>

<p>深色主题在主要的 UI 之间展示了深色的界面，它是默认浅色主题的一个补充。<br/>
深色主题减少了屏幕发出的亮度，但仍然满足最小对比度。它通过减少眼部压力、适应当前光照条件、让在黑暗环境中使用屏幕更便利来改善视觉效率。当然也节省了电量，对于 OLED 屏幕通过关掉所有的黑色像素的发光来从中受益。</p>

<h3 id="toc_2">Principles 原则</h3>

<ul>
<li>Darken with grey 使用灰色来变暗：使用深灰色而不是纯黑色来表现环境中的海拔感和空间感。</li>
</ul>

<p><img src="media/15675754544495/dark-mode-gray.png" alt=""/></p>

<ul>
<li>Color with accents 强调色：在深色主题中使用有限的强调色，大部分的空间都应该是深色的界面。</li>
</ul>

<p><img src="media/15675754544495/dark-mode-color.png" alt=""/></p>

<ul>
<li>Conserve engery 节省能量：在需要注意效率的设备上，比如 OLED 屏幕，通过减少浅色像素的使用来节省电量。</li>
</ul>

<p><img src="media/15675754544495/dark-mode-battery.png" alt=""/></p>

<ul>
<li>Enhance accessibility：要考虑到那些特殊的使用深色主题的用户，比如视力障碍人士，通过符号可访问性的颜色对比度标准来实现。</li>
</ul>

<p><img src="media/15675754544495/dark-mode-aa.png" alt=""/></p>

<h3 id="toc_3">Properties 特性</h3>

<ul>
<li>Contrast 对比度：深色的界面和纯白色的文本有至少 15.8:1 的对比度；</li>
<li>Depth 深度：在更好的层级上，组件在表现深度时应使用更浅的界面颜色；</li>
<li>Desaturation 去饱和：主要颜色（Primary Colors）应该去饱和，以满足 WCAG 至少 4.5:1 的 AA 标准；</li>
<li>Limited color 限制颜色使用：大的界面使用深色的界面颜色，限制使用强调色。</li>
</ul>

<h2 id="toc_4">Anatomy 结构</h2>

<p>深色主题的 UI 主要使用深色的表面，一点点强调色。为了保持一个高标准的可用性，界面只会散发出一点点光。</p>

<p>下图是一个界面的颜色示例：</p>

<ol>
<li>Background (0dp elevation surface overlay)</li>
<li>Surface (with 1dp elevation surface overlay)</li>
<li>Primary</li>
<li>Secondary</li>
<li>On background</li>
<li>On Surface</li>
<li>On Primary</li>
<li>On Secondary</li>
</ol>

<p><img src="media/15675754544495/darktheme-anatomy.png" alt=""/></p>

<h2 id="toc_5">Behavior 行为</h2>

<p>深色主题可以通过使用一个控件被开启或关闭。</p>

<ul>
<li>为了显眼，可以使用一个 icon 来触发深色主题的开启和关闭；</li>
<li>如果为了不那么显眼，可以使用菜单或者设置里的一个开关来控制。</li>
</ul>

<p>下图是在 top app bar 上设置了一个按钮开关：</p>

<p><img src="media/15675754544495/darktheme-darktheme-usage-availability-toggle.png" alt=""/></p>

<p>下图是在一个弹出菜单中设置了选项：</p>

<p><img src="media/15675754544495/darktheme-darktheme-usage-availability-menu.png" alt=""/></p>

<p>下图是在 app 的设置中设置了一个开关：</p>

<p><img src="media/15675754544495/darktheme-darktheme-usage-availability-settings.png" alt=""/></p>

<h2 id="toc_6">Properties 属性</h2>

<p>深色主题应使用深灰色而不是纯黑色作为组件的首要表面颜色（primary surface color）。深灰色的表面更容易表示更大范围的颜色、海拔、深度，因为它更容易在灰色上看清除阴影。<br/>
深灰色的表面也减少了眼部的压力，在深灰色表面上的浅色文本比在黑色表面上的浅色文本有更低的对比度。</p>

<p>推荐的深色主题表面颜色是「#121212」。</p>

<p><img src="media/15675754544495/darktheme-darksurfaces-grey.png" alt=""/></p>

<h3 id="toc_7">Elevation 海拔</h3>

<p>在深色主题中，组件具有与浅色主题相同的海拔层级和阴影。然而，在深色主题中，不同的海拔层级表示方法不再与以前完全一样。<br/>
表面的海拔层级越高（就像离光源越近），表面应该变得越亮，可以<a href="https://storage.googleapis.com/spec-host-backup/mio-design%2Fassets%2F1ro3dFa9v71nmSj8eg-tqN83z1Hcclgeu%2Fdarktheme-lightsource.mp4">查看动态展示↗</a>。</p>

<p><img src="media/15675754544495/294E1135-1CB1-467F-AE9B-2E33629CBE68.png" alt=""/></p>

<p><img src="media/15675754544495/BDD71245-2701-47E6-92BB-26DF6EA5F007.png" alt=""/></p>

<p>深色主题的表面通过在组件表面上放置一层半透明的白色遮罩（overlay）来展现。</p>

<p><img src="media/15675754544495/4AD669E7-FA38-4068-93A7-AB911BA151CB.png" alt=""/></p>

<p>在表面上的遮罩也使得更容易区分组件之间的海拔层级，以看到阴影。遮罩在表面和阴影之间增加了对比度，使每个表面的边缘更明显，可以<a href="https://storage.googleapis.com/spec-host-backup/mio-design%2Fassets%2F1MHUUJUUsP5V7UUaeeVrgzOuJ6r4FFlIG%2Fdarktheme-light-dark-elevation.mp4">查看动态演示↗</a></p>

<p><img src="media/15675754544495/619B6D2B-B55B-460D-AEE9-B81D39E9D165.png" alt=""/></p>

<p><img src="media/15675754544495/2CC0B459-0D4E-4DAA-9A75-D265B2ECC56B.png" alt=""/></p>

<p>这些表面遮罩的值为保证最大可读性来设计，同时也确保不同海拔层级之间能够看得清。</p>

<p><img src="media/15675754544495/B8C3A6ED-55BD-4E8C-A4C2-98FAAD462736.png" alt=""/></p>

<p>遮罩表明了在组件之间的不同海拔层级。</p>

<p><img src="media/15675754544495/AC6F11F6-71CF-4FE2-B509-0945860E6867.png" alt=""/></p>

<p>对于主要颜色和次要颜色，不要在使用这些颜色的表面上使用海拔层级遮罩。在深色主题中，阴影仍然是深色以保证投影的准确度。</p>

<p><img src="media/15675754544495/D470FB72-D596-40C8-82BB-4595CBF8C6A4.png" alt=""/></p>

<h3 id="toc_8">Accessibility and contrast 可访问性和对比度</h3>

<p>深色主题的表面必须足够暗以能够展示白色文本。在文本和背景之间至少应该达到 15.8:1 的对比度。在更高海拔层级（更浅颜色）的表面上，文本应该至少满足 WACG 的 4.5:1 的 AA 对比度要求。</p>

<p><img src="media/15675754544495/FFE564DB-3E23-4749-9C9F-A846D4CC5782.png" alt=""/></p>

<p><img src="media/15675754544495/4375B991-5860-4BC7-B527-EA964F94D7DC.png" alt=""/></p>

<p>对于那些对电量使用有效率要求的 UI 来说可以使用纯黑色，一些设备（比如配备 OLED 屏幕的可穿戴设备）可以通过关闭像素点来显示黑色从而解压电量，可以<a href="https://storage.googleapis.com/spec-host-backup/mio-design%2Fassets%2F1-j0v2NbxU5lVtcB1A2wjDj-n1_UFHBNu%2Fdarktheme-surfaces-black.mp4">查看动态演示↗</a>。</p>

<p><img src="media/15675754544495/4D14680C-2580-4C09-872D-1F96413B50D6.png" alt=""/></p>

<h2 id="toc_9">UI application UI 应用</h2>

<h3 id="toc_10">Theme colors 主题颜色</h3>

<p>深色主题应该避免使用过饱和的颜色，因为它们与深色表面放在一起不会通过 4.5:1 的最低对比度要求。过饱和的颜色也会造成光学上的振动，增加眼部压力。去饱和的颜色是更好的选择。</p>

<p><img src="media/15675754544495/43E0D0B2-AF8A-4BE3-BBB8-FD4257445867.png" alt=""/></p>

<h3 id="toc_11">Primary color 主要颜色</h3>

<p>主要颜色是在你的 app 中的屏幕和组件中最频繁使用的。Material Design 深色主题一般使用主要颜色的 200 色调变种作为基线，这个变种可以在任何海拔高度的表面通过至少 4.5:1 的对比度要求。</p>

<p><img src="media/15675754544495/6F0FF795-43C2-4478-8B00-D548E2101962.png" alt=""/></p>

<p>具有浅色表面的组件可以使用深色主题主要颜色的某个变种。</p>

<p><img src="media/15675754544495/1FD67276-5D96-4310-BEBA-D95022F152F0.png" alt=""/></p>

<h3 id="toc_12">Secondary color 次要颜色</h3>

<p>次要颜色被用来强调 UI 中的选择部分。在深色主题中，次要颜色也要去饱和以满足至少 4.5:1 的对比度要求。、</p>

<p><img src="media/15675754544495/2DBAB354-3179-4FAC-A587-54C1AABA204C.png" alt=""/></p>

<p><img src="media/15675754544495/FC29658B-068B-4CC6-99D0-5380A39FDD6D.png" alt=""/></p>

<h3 id="toc_13">Accnet color 强调色</h3>

<p>在深色主题中，深色表面几乎占据了 UI 的全部。强调色可以让元素显眼，它们应该被单独应用与需要被强调的核心元素，比如文字或按钮。</p>

<p>可以使用「色盘生成器 color palette generator」来生成颜色主题，它会根据你自定义的主要颜色和次要颜色生成从深色到浅色的一系列颜色变种。你可以从中选择你要用在深色主题中的颜色。</p>

<p><img src="media/15675754544495/05575D43-B1A1-4C0E-84E3-76498A93E0C8.png" alt=""/></p>

<p><img src="media/15675754544495/7B87DF6D-3E56-447A-A9CE-B16C7BB9F570.png" alt=""/></p>

<p><img src="media/15675754544495/918377D7-D1D7-45A0-AD6A-2740BB947FD0.png" alt=""/></p>

<h3 id="toc_14">Brand colors 品牌颜色</h3>

<p>为了保持品牌辨识度，品牌颜色可以在深色主题中保持饱和度，但应用内的品牌元素应该有所限制，比如只有一两个，例如 logo 或者品牌按钮。通过单独使用品牌颜色，元素可以在层级中保持显眼。</p>

<p><img src="media/15675754544495/8EB784ED-2694-417C-B3AA-6C104FA8B662.png" alt=""/></p>

<h3 id="toc_15">The dark theme baseline palette 深色主题基线色盘</h3>

<p>深色主题颜色应该被应用与各个深色主题的 UI，包括下面这些部分</p>

<ul>
<li>颜色：主要颜色、次要颜色、主要颜色变种；</li>
<li>表面：背景和组件；</li>
<li>状态：比如错误状态；</li>
<li>内容：文字排版、图标排版。</li>
</ul>

<p><img src="media/15675754544495/19D185BE-2F00-49B8-9942-18928A2ACDF0.png" alt=""/></p>

<p>在浅色主题和深色主题下不同组成部分颜色的变化：</p>

<p><img src="media/15675754544495/301C1DCF-B20E-4A5D-A371-FAE935028871.png" alt=""/></p>

<p>错误颜色用来表示错误状态。</p>

<p><img src="media/15675754544495/1C65FD00-9040-4B78-8325-FB7F1FCFC863.png" alt=""/></p>

<p>通常情况下用于文字排版和图标排版的「On colors」表示在其他主题颜色表面上使用的颜色，比如主要颜色上、次要颜色上、表面颜色上、背景颜色上、错误颜色上。默认情况下，深色主题的「On colors」是白色和黑色。</p>

<p><img src="media/15675754544495/B0AF1EEA-9AF8-4446-82E1-B8D5CE9B1DC3.png" alt=""/></p>

<p>当浅色文本出现在深色背景上时，一般遵照下面的准则：</p>

<ul>
<li>高层级强调：87% 不透明度；</li>
<li>中层级强调：60% 不透明度；</li>
<li>不可用文本：38% 不透明度。</li>
</ul>

<p><img src="media/15675754544495/darktheme-adjustedcolor-textlegibility.png" alt=""/></p>

<h2 id="toc_16">Custom application 自定义应用</h2>

<p>使用较大比例屏幕的组件，比如 app bar、backdrop，可以使用表面颜色作为深色主题的颜色。</p>

<p><img src="media/15675754544495/2FA48FD2-8085-4840-8A9F-05EB7A74C4C0.png" alt=""/></p>

<p><img src="media/15675754544495/930AC981-60F8-490B-A4E5-5B45118A47B8.png" alt=""/></p>

<p>当深色主题中需要一个浅色表面时，浅色可以被用在组件表面以突出层级关系。举个例子，深色主题的 snackbar 为了突出显示就可以有一个浅色的表面。因此你可以应用浅色主题的 Surface color 和 On Surface color。</p>

<p><img src="media/15675754544495/173DD1EF-CE9D-4C19-BB85-C947F43AD8F4.png" alt=""/></p>

<h2 id="toc_17">States 状态</h2>

<p>「状态」在视觉上通过使用遮罩表达了组件或不可交互元素的状态。在深色主题中，状态也应该使用与浅色主题一样的遮罩值，它们调整后可以满足 AA 的对比度要求。<br/>
有两种类型的容器：一种使用「Surface」填充色，另一种使用「Primary」填充色。</p>

<h3 id="toc_18">Surface Containers</h3>

<p>Surface containers 使用「Surface」颜色作为填充色，使用文本或 icon 的颜色作为遮罩颜色。</p>

<p><img src="media/15675754544495/2A191F46-7395-4218-A962-D873541EE785.png" alt=""/></p>

<h3 id="toc_19">Primary Containers</h3>

<p>Primary containers 使用「Primary」颜色作为填充色，使用白色作为遮罩颜色。</p>

<p><img src="media/15675754544495/CFE7BCF9-8190-4EFC-B1C8-A7A68FE76B4F.png" alt=""/></p>

<h3 id="toc_20">不可用状态</h3>

<p>不可用状态的组件都使用 12% 不透明度的白色作为描边颜色和填充颜色，38% 不透明度的白色作为内容颜色，比如文本或 icon。</p>

<p><img src="media/15675754544495/4D85DF39-029F-4FA5-8418-FE3DE3A1A3B7.png" alt=""/></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在 tvOS 中把内容放在第一位]]></title>
    <link href="https://steppark.net/15675156374221.html"/>
    <updated>2019-09-03T21:00:37+08:00</updated>
    <id>https://steppark.net/15675156374221.html</id>
    <content type="html"><![CDATA[
<p>曾经的日子里，我们通过电视去了解不同的人，更多样的文化，更大的世界。电视就是一座桥梁。你在电视的丰富内容中不断搜索，当你找到吸引你的内容时，你会全神贯注地沉浸其中。</p>

<p>但现在电视的状态有些啰嗦。你会看到一行又一行的内容，你在这些内容中迷茫地穿梭，为了寻找想要看的内容在其中花费了 5 分钟、10分钟、20分钟……这种体验很普遍，也很让人沮丧。我们会失去选择的能力而变得犹豫不决。</p>

<span id="more"></span><!-- more -->

<p><img src="media/15675156374221/1E55D9BD-C2BE-47C8-ABCF-A9F9D01A6625.png" alt=""/></p>

<p>怎样让用户快速地找到他想要看的内容并且排除一切障碍进入呢？</p>

<h2 id="toc_0">目录</h2>

<ul>
<li>
<a href="#toc_0">目录</a>
</li>
<li>
<a href="#toc_1">内容优先 Content First</a>
<ul>
<li>
<a href="#toc_2">Top Shelf——移除障碍</a>
</li>
<li>
<a href="#toc_3">速度和节奏</a>
</li>
<li>
<a href="#toc_4">避免过度刺激</a>
</li>
<li>
<a href="#toc_5">在 UI 中让内容类型多样化</a>
</li>
<li>
<a href="#toc_6">减少元素的数量</a>
</li>
<li>
<a href="#toc_7">内容元数据</a>
</li>
<li>
<a href="#toc_8">使用页码符号</a>
</li>
<li>
<a href="#toc_9">使用 V 形箭头</a>
</li>
<li>
<a href="#toc_10">小结</a>
</li>
</ul>
</li>
<li>
<a href="#toc_11">Top Shelf 的新样式及使用要点</a>
<ul>
<li>
<a href="#toc_12">Top Shelf Carousel（传送带/分页滚动视图）</a>
<ul>
<li>
<a href="#toc_13">Actions Carousel</a>
</li>
<li>
<a href="#toc_14">Details Carousel</a>
</li>
<li>
<a href="#toc_15">Content Best Practices</a>
</li>
<li>
<a href="#toc_16">Image Best Practices</a>
</li>
<li>
<a href="#toc_17">Video Best Practices</a>
</li>
</ul>
</li>
</ul>
</li>
<li>
<a href="#toc_18">Top Shelf Items 的构成</a>
</li>
<li>
<a href="#toc_19">User Profile 用户描述文件</a>
<ul>
<li>
<a href="#toc_20">关于切换用户，系统提供了什么？</a>
</li>
<li>
<a href="#toc_21">关于切换用户，开发者需要做什么？</a>
</li>
<li>
<a href="#toc_22">实例说明</a>
</li>
<li>
<a href="#toc_23">关于 User Profiles 的小结</a>
</li>
</ul>
</li>
<li>
<a href="#toc_24">Tab Bar 标签栏</a>
</li>
<li>
<a href="#toc_25">Full Screen Browse 全屏浏览</a>
</li>
</ul>


<h2 id="toc_1">内容优先 Content First</h2>

<p>Apple TV 的第一设计目标是「内容优先」。这意味着一定有东西正在呈现，一定有东西正在放映。当你运行一个 app 时，它应该是活的。</p>

<h3 id="toc_2">Top Shelf——移除障碍</h3>

<p>首先，我们要移除进入 app 之前的障碍，摆脱内容和界面之间的障碍。这也正是我们要让 Top Shelf 变得可交互、更沉浸的原因。</p>

<p>当光标聚焦在「TV」app 上时，tvOS 默认会显示全屏的节目海报。当光标停留超过五秒后，这个节目的预告片就会开始播放。核心内容占据了屏幕上的每一个元素，充满了整个屏幕。这时，用户不会在没有预料到的情况下听到视频的声音。</p>

<p><img src="media/15675156374221/2A013130-8335-4375-99A1-A2AB21B66280.png" alt=""/></p>

<p><img src="media/15675156374221/CF14EDAC-B119-4546-9814-E5FFE5309648.png" alt=""/></p>

<p>接下来我们要让用户看到的内容变得可交互。在 Top Shelf 中，屏幕顶部会有一个视觉提示，告诉用户可以通过向上移动光标进入全屏模式。当用户在遥控器上向上滑动后，dock 栏将会隐去，内容进入全屏模式。同时视频的标题可能会出现在屏幕上，用户也可以听到视频的声音。虽然仍然处于内容浏览模式中，但用户仿佛已经置身在电影之中。</p>

<p><img src="media/15675156374221/9747D4AC-D95F-4798-85D8-50D17F01EF9A.png" alt=""/></p>

<h3 id="toc_3">速度和节奏</h3>

<p>速度和节奏也是减少用户认知负担的重要组成部分。尝试移除掉 app 中所有的延迟和滞后，这样一来，app 就会变得生动、流畅。</p>

<p><img src="media/15675156374221/A8E4EE05-0431-4DEA-AFF3-BFE145C52D21.png" alt=""/></p>

<h3 id="toc_4">避免过度刺激</h3>

<p>混乱的界面会让用户分心。想象一下在一个屋子里，同时有十几个人在和你讲话，你不能听清任何一个人所讲的内容。如果电视上的 app 也这样，用户就不能找到聚焦点。<br/>
如果使用了太多的动画、图标、图片、文本样式，就会与内容抢夺用户的注意力。我们需要让用户聚焦且放松。</p>

<p><img src="media/15675156374221/C29179D9-0F57-4D46-B1DC-0C27235AA3A6.png" alt=""/></p>

<h3 id="toc_5">在 UI 中让内容类型多样化</h3>

<p>在 UI 中让内容类型多样化实际上就是与不同的形状和比例打交道。在 Apple TV 上，屏幕被划分成不同大小的网格以来展示不同种类的内容。对于内容提供者来说，这些地方可以用来展示重要的、值得注意的有意义的内容。对于内容观看者来说，在浏览这些密集的内容时，这些不同类型的网格能让眼睛能够得到短暂的休息。</p>

<p><img src="media/15675156374221/91496B88-FAF9-43B7-98DF-F9B491EEA557.png" alt=""/></p>

<h3 id="toc_6">减少元素的数量</h3>

<p>减少元素的数量意味着我们要创造层级。在 Top Shelf 的设计中，内容是最高优先级，所以它充满了整个屏幕，接着在屏幕底部放上了 app dock，在下面是其他的应用，这些的重要性要比内容低一些。通过给不同的元素划分优先级，你可以帮助用户导航、更好地引导用户。</p>

<p><img src="media/15675156374221/CFC7F25E-A6D0-427F-9AA9-D47878D28AA8.png" alt=""/></p>

<h3 id="toc_7">内容元数据</h3>

<p>在 Top Shelf 中，内容的元数据是有用的，但是是次于内容考虑的事。因为我们要让用户首先被内容吸引，然后再去关注更多的可用信息。<br/>
Top Shelf 的内容进入全屏时，通过轻点遥控器就可以让内容元数据显示出来，这让用户有了控制权，进一步可以观看内容。这也让用户可以从浏览模式转到购买或订阅的操作中去。</p>

<p><img src="media/15675156374221/97B18CDC-DA4F-4B9C-9C5D-F02720259763.png" alt=""/></p>

<h3 id="toc_8">使用页码符号</h3>

<p>页码符号会提醒用户他们正在浏览一系列内容中的一个，也表明他们正处于浏览模式而不是实际播放模式。就像面包屑一样，页码符号很小并且会出现在界面底部。我们使用了 Apple TV 的系统材料组件以让其与背景有良好的对比度。</p>

<p><img src="media/15675156374221/2683B0EC-9363-409A-A4BE-BB308781D518.png" alt=""/></p>

<h3 id="toc_9">使用 V 形箭头</h3>

<p>V 形箭头表明了滑动的方向，还表明了还有内容在屏幕之后。它和页码符号一起让用户保持空间感。</p>

<p><img src="media/15675156374221/D6CC6FD5-BC21-4819-80C0-BCDE940920CE.png" alt=""/></p>

<h3 id="toc_10">小结</h3>

<p>这些注意点和小功能会避免用户在使用过程中陷入迷惑，避免让他们思考我该怎么导航出去，过一会儿我还能回来这个页面吗。这些地方会让用户沉浸在内容之中，我们也相信内容优先的力量。</p>

<p><img src="media/15675156374221/27B71BA7-32A1-4FE2-B811-B5EEAC2A1A5A.png" alt=""/></p>

<p>电视上的内容有能力改变我们的思维，有能力把我们带到一个新的世界，有能力打开我们的眼界，我们的工作就是让用户与这些能够改变他们的内容连接在一起，不要让用户困惑，帮助他们打开内容的大门，让用户进来，让内容发光。如果我们做到了，用户就会留下来沉浸在内容之中。这也会在用户和你的产品之间创造一种情感上的连接。</p>

<p><img src="media/15675156374221/1ECB973B-2EEE-4C05-B919-57C199926AB8.png" alt=""/></p>

<h2 id="toc_11">Top Shelf 的新样式及使用要点</h2>

<p>Top Shelf 是让用户在进入 app 前就提前预览内容的好地方。已有的 Top Shelf 提供了两种样式，一种是「分组内容 Sectioned Content」，另一种是「插入内容 Inset Content」。</p>

<p><img src="media/15675156374221/D520B4A0-7F0C-4E1B-B7F4-3E6FD3EF18BC.png" alt=""/></p>

<p><img src="media/15675156374221/3A5EF15C-024D-4965-897F-C60C1269D412.png" alt=""/></p>

<p>在 tvOS 13 中，提供了新的一种样式，称为「传送带内容 Carousel Content」。</p>

<h3 id="toc_12">Top Shelf Carousel（传送带/分页滚动视图）</h3>

<p>当 Top Shelf 中的内容进入全屏时，Carousel 是可交互的。你可以在不同项目之间滑动就像是在浏览不同的频道。当你选中一个项目，你会在屏幕底部看到内容的丰富的元数据。这可以让你 app 中的某些内容直接展示在 Apple TV 的首屏上。当然并不是所有的内容都有一样的结构，所以在 API 中有两种内容样式提供给开发者，一种是 Action Carousel，一种是 Details Carousel。</p>

<p><img src="media/15675156374221/E5FBFBFE-5588-4146-B98F-C3DE1ECAE871.png" alt=""/></p>

<h4 id="toc_13">Actions Carousel</h4>

<p>Actions Carousel 首先聚焦于你 app 提供的内容的全屏图片，并且有一部分 UI 元素你可以进行自定义。<br/>
在左上角有标题（title）和情景标题（context title），这可以告诉用户他们看到的是什么内容以及为什么要把这个内容展示给用户。你可以把情景标题想象成是一个部分的统称，它可以在 Top Shelf 的不同项目中创建逻辑分组。<br/>
在屏幕底部会有播放按钮和更多信息按钮，这为用户浏览指定的内容并直接进入 app 提供了一种确切的方式，用户可以选择直接播放或者查看更多信息。</p>

<p><img src="media/15675156374221/0F407464-8AC8-4440-8DB0-A4AF3FB38F54.png" alt=""/></p>

<h4 id="toc_14">Details Carousel</h4>

<p>在这种样式中有熟悉的标题部分以及动作按钮，并且 API 还允许你提供丰富的内容元数据以显示在这里。像下图这样，包括内容的简介、类型、年份、时长，还包括支持的音视频模式以及字幕和声音描述，以及演职员信息。</p>

<p><img src="media/15675156374221/06DAF1F1-6364-4CC2-BE43-D91548260B61.png" alt=""/></p>

<h4 id="toc_15">Content Best Practices</h4>

<ul>
<li>Carousel 被用来作为发现内容的方式是最好的，比如说推荐的电影、电视剧的新剧集或者是已登录用户的个性化推荐。</li>
<li>Top Shelf 中的内容应该被定期更新。这是通过展示亮点内容吸引用户进入 app 的窗口，所以需要保持新鲜和活力。</li>
<li>在 Top Shelf 中不要给用户太多选择，太多的项目会让用户迷失。推荐 5 到 10 个项目为佳。</li>
</ul>

<h4 id="toc_16">Image Best Practices</h4>

<ul>
<li>在 Top Shelf 中的内容是全屏的，所以内容应该是 1920 × 1080pt 的，并且应该铺满全屏。对于 1080P 设备，API 会让你提供 1x 分辨率的，对于 4K 设备，API 会让你提供 2x 分辨率的。这些优化会让你的内容给用户提供最佳的体验。</li>
</ul>

<p><img src="media/15675156374221/8418FB51-FF76-4549-B13D-0588EE6971A1.png" alt=""/></p>

<ul>
<li>tvOS 的安全区域像下图所示，左右有 90pt 的间距，上下有 60pt 的间距。注意如果内容可能会跑出安全区域是没有关系的，但要知道根据不同的设备或电视设置，用户可能看不到边缘的内容和控件。对于 Carousel 也有同样的安全区域定义，当你把图片放上去时，要记得会有一些系统元素会出现在上面，比如 V 形箭头、内容元数据信息等。所以如果图片上有重要的信息，要确保不会与这些系统元素冲突。</li>
</ul>

<p><img src="media/15675156374221/18082266-4007-400F-88DF-5A01C171CC32.png" alt=""/></p>

<p><img src="media/15675156374221/120E542D-DBF9-4C06-82EB-F0AC9673ABFC.png" alt=""/></p>

<h4 id="toc_17">Video Best Practices</h4>

<ul>
<li>你可以在 Top Shelf 中播放视频、预告片等内容，这些视频应该是 1080p 高分辨率的。</li>
<li>你应该使用 HLS（HTTP Live Streaming）把视频传输给系统。这可以帮助改善内容，提供用户更好地体验。这些视频应该可以快速载入，可以根据用户的带宽调整分辨率。</li>
<li>Carousel 是预览内容的好地方，所以不要在这提供过长的视频，推荐 2-5 分钟。</li>
<li>推荐在视频中包含声音。只有在用户作出确切动作的时候，电视才会发出声音。</li>
</ul>

<h2 id="toc_18">Top Shelf Items 的构成</h2>

<ul>
<li>TVTopShelfContentProvider 是 Top Shelf Extension 的源对象，当系统请求 Top Shelf 的数据时，它负责响应此请求。</li>
<li>TVTopShelfContent 是一个你不会直接与其交互的协议，其包括三个具体的类，Carousel、Sectioned、Inset，每一种代表一种 UI 样式。每一个类都有其具体的属性。</li>
<li>TVTopShelfItem 是每一个具备不同属性的内容样式的不同类。</li>
</ul>

<p><img src="media/15675156374221/5C4AEEE3-B233-4B51-9128-B0D057DC7F9A.png" alt=""/></p>

<h2 id="toc_19">User Profile 用户描述文件</h2>

<p>在 tvOS 13 中增加了控制中心，人们可以在这里快速访问一些常用功能，如睡眠、搜索、正在播放以及切换用户。通过这里的切换用户，人们可以在不离开当前情景的前提下，快速地切换到他们的个性化内容和推荐中。这个功能也开放给了开发者，所以开发者也可以利用这个多用户功能。</p>

<p><img src="media/15675156374221/974E8058-7C2C-4F72-B94B-F36C4ADD67F6.png" alt=""/></p>

<p>有多少 app 在一进入时就像下面一样让你选择用户，对于一个提供个性化体验的 app 来说，这样的功能不符合把内容放在第一位的使用体验。在 tvOS 13 中，你应该已经知道了是哪个用户在使用 app，而不需要再次询问用户。</p>

<p><img src="media/15675156374221/8F2C9333-D126-44EB-A6CF-2A482F9E8E99.png" alt=""/></p>

<h3 id="toc_20">关于切换用户，系统提供了什么？</h3>

<p>tvOS 13 的 API 提供了 <code>TVUserManager</code>，使用它可以帮助你的基于用户描述文件的 app 快速切换用户。</p>

<ul>
<li>它提供了一个 identifier 用来代表当前的用户；</li>
<li>它会通知 app 什么时候用户的 identifier 发生了改变；</li>
<li>提供了一些系统 UI 把系统用户的 identifier 映射到 app 的多用户上。</li>
</ul>

<p><img src="media/15675156374221/C03A7488-86A0-41D6-85F6-4264AC053193.png" alt=""/></p>

<h3 id="toc_21">关于切换用户，开发者需要做什么？</h3>

<p>以上是系统提供的功能，对于开发者来说，需要做的是：</p>

<ul>
<li>存储用户的 identifier 并映射到 app 中的用户描述文件，存在多个用户 identifier 映射到一个用户描述文件的情况；identifier 对于不同的开发者账户是不一样的，如果你有多个 app，你可以共享相同的偏好设置。</li>
<li>监听当前用户 identifier 的改变；</li>
<li>在你 app 的路径中调起需要的系统 UI。</li>
</ul>

<p><img src="media/15675156374221/354EA095-401D-4014-9ACB-71663D4A11E8.png" alt=""/></p>

<h3 id="toc_22">实例说明</h3>

<p>以上面的进入 app 显示选择用户的界面为例，现在在进入这个页面之前，你需要检查 app 的描述文件是否已经映射到了当前系统的 identifier。<br/>
如果已经映射了，那无需再显示这个用户选择界面，直接进入相应的内容就好。<br/>
如果没有映射，你可以显示用户选择界面，当用户选择一个用户后你可以询问用户现在选择的用户是否可以映射到当前的 Apple TV 用户。如果用户选择确定映射，那你应该记住这个结果，下次进入 app 就不需要再选择用户了。你可以通过 API <code>shouldStorePreferenceForCurrentUser</code> 来实现。</p>

<p><img src="media/15675156374221/9DC8E472-7B86-45EA-84A3-12201AF36032.png" alt=""/></p>

<p>用户在之后也应该可以修改这个映射，你可以通过 API <code>presentProfilePreferencePane</code> 来实现。</p>

<p><img src="media/15675156374221/DEE0DE37-96A7-437F-81BC-1712E67594A8.png" alt=""/></p>

<p>你需要监听当前用户 identifier 的改变。你可以通过API <code>currentUserIdentifierDidChangeNotification</code>  来实现。当改变发生时，你需要让系统知道新的系统用户映射到了当前的用户描述文件。</p>

<p>几条使用注意点：</p>

<ul>
<li>在切换用户描述文件之前保存当前数据；</li>
<li>确保这种改变是清晰且有意义的，比如改变后个性化推荐发生了变化，应该有一个明显的过渡，告知用户已经切换了用户。</li>
</ul>

<h3 id="toc_23">关于 User Profiles 的小结</h3>

<ul>
<li>如果你的 app 是有多个用户，依赖用户描述文件运行的，那利用好 tvOS 13 系统提供的多用户功能，让用户获得更好的个性化体验；</li>
<li>使用 TVUserManager 构建一个内容优先的体验，用户可以跳过那些不必要的对话框直接进入内容。</li>
</ul>

<h2 id="toc_24">Tab Bar 标签栏</h2>

<p>在 TV app 中引入了新的 tab bar，它让导航更加简单，也让背后的内容更加大放异彩。因为它可以跟随内容一起竖直滚动，而不是在失去焦点时就消失。这对强化用户的层级意识很有用。在 tvOS 13 中，每一个 app 都可以使用这种新的 tab bar 样式。</p>

<p><img src="media/15675156374221/9BF51811-5F7B-4F2D-B6E9-CB44ED8276D8.png" alt=""/></p>

<p>如果你想让 tab bar 与内容一起滚动，你可以在 view controller 中设置 <code>tabBarObservedScrollView</code> 属性，这样样式推荐用于一系列可浏览的内容，而且对于 UI Collection View Controller 这种样式是自动的。<br/>
如果你想 tab bar 固定在屏幕顶部，你可以让上面这个属性为 nil。<br/>
不管哪种情况，你都需要注意安全区域。</p>

<p><img src="media/15675156374221/BD5DAAC1-AA54-4F83-A35C-AECA47967FF8.png" alt=""/></p>

<p>在 tab bar 中也引入了新的 API，你可以在其中展示你的品牌。你可以在 tab bar 的左右两边放置品牌 Logo。Logo 会与 tab bar 一起滚动。</p>

<p><img src="media/15675156374221/0AE331D5-E220-41E6-A291-8AC0A53DDBDF.png" alt=""/></p>

<p>你可以通过下图中的两个属性来实现，同时你不应该把按钮等其他动态内容放在这里。如果你想进一步自定义 tab bar，你也可以通过下面的新属性来实现。</p>

<p><img src="media/15675156374221/F13CF4EF-EFD7-4D44-8932-EB811B31DC30.png" alt=""/></p>

<h2 id="toc_25">Full Screen Browse 全屏浏览</h2>

<p><img src="media/15675156374221/0C4DE9D8-FFD6-4B18-9ADF-C8BFFE075297.png" alt=""/></p>

<p>在 tvOS 13 系统的 API 中引入了「TVCollectionViewFullScreenCell」，它包括「Masked Background View」和「Masked Content View」两部分。你可以在前者上添加不透明的图片，可以在后者上添加 UI 元素。<br/>
因为新的 collection view layout 是为了利用好全屏幕而设计的，所以它的 cell 占据了整个屏幕。</p>

<p><img src="media/15675156374221/C266B0CC-335D-497B-B460-ECFE7A52D67A.png" alt=""/></p>

<p>使用注意点：</p>

<ul>
<li>在cell 移动到中心前不要开始动画或者播放视频；</li>
<li>注意屏外传入（offscreen passes）；</li>
<li>注意内存使用。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在设计和开发时使用 SF Symbols]]></title>
    <link href="https://steppark.net/15675148872165.html"/>
    <updated>2019-09-03T20:48:07+08:00</updated>
    <id>https://steppark.net/15675148872165.html</id>
    <content type="html"><![CDATA[
<p>标志（symbol）在界面中扮演一个非常重要的角色，它们在表达某些含义时非常有效，它们可以表明哪个条目被你选中了，它们被用来在视觉上区分不同的内容类型。标志出现在系统的不同情景中。它们给用户在整个用户界面中创造了一种熟悉的感觉。</p>

<span id="more"></span><!-- more -->

<p><img src="media/15675148872165/BF89717D-7443-4872-B640-BA3E33A0C9EB.png" alt=""/></p>

<p><img src="media/15675148872165/93E43829-F84A-47AC-B8D4-A27124993FB5.png" alt=""/></p>

<p>标志可以在不同的方式中被使用，设计标志也是一个内在的挑战。这些标志要设计得与其他 UI 元素完美得匹配在一起，比如文本。在 UI 中文本会有不同的尺寸，标志也是这样。</p>

<p><img src="media/15675148872165/2D210958-0871-42DC-A0B4-1579BB663A55.png" alt=""/></p>

<p><img src="media/15675148872165/AA300161-C710-4255-8920-6C28183BA193.png" alt=""/></p>

<p>所以为了让这项工作变得更为简单，在 iOS 13 中我们重新设计了所有的标志。你会知道这些标志怎样有一个圆形套在外面，怎样在字重上更粗一点。他们可以完美地与文字相搭配。除了重新设计所有已有的标志，我们还扩展了这个列表，设计了更多的标志。它们统称为「SF Symbols」。它们在整个平台具有高度一致性，可以高质量地应用在你的所有 app 中。它们采用矢量形式，这意味着它们可以放大缩小，无论大尺寸还是小尺寸都能被渲染地很好。</p>

<p><img src="media/15675148872165/D0078F5B-ED9B-49E0-80D9-A7B9BB4D2CF1.png" alt=""/></p>

<p>针对于系统字体 San Francisco 的不同字重，SF Symbols 也有着不同的字重与之搭配。<br/>
这里有超过 1000 个标志可供选择使用。如果这里的标志仍然不够，你甚至可以自动以他们，并创建自己的标志。</p>

<p><img src="media/15675148872165/9B6C4A51-C215-4EB6-811D-2FF8EEFC9136.png" alt=""/></p>

<h2 id="toc_0">目录</h2>

<ul>
<li>
<a href="#toc_0">目录</a>
</li>
<li>
<a href="#toc_1">在设计时使用 SF Symbols</a>
<ul>
<li>
<a href="#toc_2">字号、对齐</a>
</li>
<li>
<a href="#toc_3">字重、缩放</a>
</li>
<li>
<a href="#toc_4">综合使用</a>
</li>
<li>
<a href="#toc_5">设计小结</a>
</li>
</ul>
</li>
<li>
<a href="#toc_6">在开发中使用 SF Symbols</a>
<ul>
<li>
<a href="#toc_7">使用系统提供的 SF Symbols</a>
</li>
<li>
<a href="#toc_8">使用自定义 symbols</a>
</li>
<li>
<a href="#toc_9">配置 SF Symbols 的参数</a>
</li>
<li>
<a href="#toc_10">使用 SF Symbols 进行布局</a>
</li>
<li>
<a href="#toc_11">在按钮中使用 SF Symbols</a>
</li>
<li>
<a href="#toc_12">SF Symbols 的渲染模式（render mode）</a>
</li>
<li>
<a href="#toc_13">几个注意点</a>
</li>
</ul>
</li>
</ul>


<h2 id="toc_1">在设计时使用 SF Symbols</h2>

<h3 id="toc_2">字号、对齐</h3>

<p>SF Symbols 可以像文本一样指定字号。当标志和文本并排在一起时，它们拥有相同的基线。</p>

<p><img src="media/15675148872165/BB1D7CAE-6116-4CC2-83F4-C08949C8A071.png" alt=""/></p>

<p>当标志和文本竖直放在一起时，这里通常会有两种情况：文本支撑标志或者标志支撑文本。</p>

<p><img src="media/15675148872165/8F0D8AA5-82AB-4615-B7E8-4CC93CDFA525.png" alt=""/></p>

<p><img src="media/15675148872165/944E11DC-EDA2-403D-AE58-1D064DCE2A30.png" alt=""/></p>

<p>水平对齐可以确保每一项都看起来没问题，这得益于标志的边界。每一个标志的边界并不一定相同。边界是不可见的，但当在屏幕上布局元素时会需要用到边界。</p>

<p><img src="media/15675148872165/74F33F12-B4C4-4061-A855-3CE5131ECC58.png" alt=""/></p>

<h3 id="toc_3">字重、缩放</h3>

<p>每一个标志都有着九种不同的字重，从超细到超粗，对应系统字体的不同字重。每一个字重都被手动绘制出来，特别考虑了每种不同的设计。更细的字重有着可区分的、优雅的外表，而更粗的字重会尽力保持细节和可见性。</p>

<p><img src="media/15675148872165/4AB3E729-C976-4142-B5A2-F2634809714B.png" alt=""/></p>

<p><img src="media/15675148872165/C2F6D939-1C0F-4C3C-A6A5-62ABFD6FE877.png" alt=""/></p>

<p>当与文本搭配使用，即使文本字号没有变化，可能也需要不同大小的标志。这就是之前我们设计标志时要考虑的问题，取决于我们要多强调标志，取决于有多大的展示空间。在 iOS 13 里，我们把这些变成了系统功能。我们称这一个特性为「scales 缩放」——分为三种，小、中等、大。</p>

<p><img src="media/15675148872165/E2D443BD-1DA0-4ED5-924F-35E9D7F11C76.png" alt=""/></p>

<p><img src="media/15675148872165/D253DF8B-9B35-4A68-9D9A-9D927DAD7709.png" alt=""/></p>

<p>这里注意下，在调整标志的缩放大小时，其字号大小（point size）是始终不变的。调整标志的缩放，会有与文本相匹配的字重，并且会与文本的大写字母高度始终竖直中心对齐。</p>

<p><img src="media/15675148872165/EEA6A64A-E342-47BD-A0A3-96D97FB9668E.png" alt=""/></p>

<p><img src="media/15675148872165/67709481-39F7-4D32-8FE8-DF1F0D7C4666.png" alt=""/></p>

<p>对于该在哪里使用不同的缩放，什么时候该用哪一个具体的 缩放，这里有三个具体的示例。它们都包括了字号为 17 的文本，但每个标志的容器有着不同的高度。文字和标志的字号是相同的，但通过改变标志的缩放来更好地适配不同情况的空间。在像工具栏这样的地方，UIKit 可以自动对控件使用合适的缩放。</p>

<p><img src="media/15675148872165/342151F3-DFA1-4103-8C0B-BF5AA0AA283C.png" alt=""/></p>

<h3 id="toc_4">综合使用</h3>

<p>我们把字号大小、字重、缩放三者放在一起看，这意味着你可以在动态类型中使用它们，每一项都会很完美。</p>

<p><img src="media/15675148872165/912A3D57-82BA-4D5F-9698-B497C274E413.png" alt=""/></p>

<p>当然，标志也可以被本地化。这里有一个语音备忘录应用的例子，在英语和阿拉伯语的不同运行情况下，同一个标志有着不同的样式。</p>

<p><img src="media/15675148872165/5F149E76-1585-4FBD-81F6-8A68D54705D5.png" alt=""/></p>

<p>如果你想搞清楚这些标志的话，每一个标志都提供了一个名字。大多数的标志还会有描边和填充两种样式。</p>

<p><img src="media/15675148872165/3A280B27-7DEE-45B4-979A-A8371362928C.png" alt=""/></p>

<p>它们还可以被包在一个圆圈或者一个方形中，还可以带有一个标准的系统角标。</p>

<p><img src="media/15675148872165/6D8F70DE-FD8D-4FF7-A2DE-803542CDD577.png" alt=""/></p>

<p>使用这些标志也很方便。它们属于 SF 字体家族的一部分，可供下载，你可以在你的设计中使用。缩放功能可以通过 open Type 功能开启。默认缩放是中等，你可以在字体面板中选择小或大的缩放，抑或其他指定 UI 形状。</p>

<p><img src="media/15675148872165/26C1A051-CA9E-4241-AED6-389D191409E3.png" alt=""/></p>

<p>为了更方便使用，我们创建一个名为「SF Symbols」的应用。可以在里面通过平铺方式或者列表方式浏览所有的标志。可以通过名字搜索标志，预览不同的字重。</p>

<p><img src="media/15675148872165/40777400-657E-4E97-B470-8FA68D43F44C.png" alt=""/></p>

<p>我们来看一个实际的例子。在下面的设计中，按以前的操作，你需要定义图片的边界，确定图片的大小、四周边界值。</p>

<p><img src="media/15675148872165/84196755-080A-4CEC-8DE2-46ABD7E314EA.png" alt=""/></p>

<p>但有了 SF Symbols，你只需要确定标志的名字和字号大小以及对齐方式就可以了，如果有需要可以再定义字重和缩放。</p>

<p><img src="media/15675148872165/B84773FC-5D52-43E7-A3B0-FF8E6EDB0B91.png" alt=""/></p>

<p>第二行的图片有些普通，我们可以自己绘制一个茶杯的形状。因为 SF Symbol 里没有这个图形，我们可以自定义一个。</p>

<p><img src="media/15675148872165/2B574EDD-C6A9-4702-A401-550BB42AE0AC.png" alt=""/></p>

<p>你可以从已有的标志中选取一个相似的，导出并作为模板。导出的模板包括所有的字重和缩放大小，并且是 SVG 格式，可以使用自己熟悉的设计工具进行编辑。</p>

<p><img src="media/15675148872165/976421CB-0043-4199-B9F7-05EC781C1F38.png" alt=""/></p>

<p>这个文件可以直接被用于开发时的 Xcode 中，不再需要许多个文件。<br/>
在所有的字重和缩放中，你至少需要提供 regular 字重的中等规模标志样式。</p>

<p><img src="media/15675148872165/D2F965D3-84EE-455C-99DD-C9BD03164F01.png" alt=""/></p>

<p>进一步可提供其他两种缩放的样式，进一步可提供 medium 和 bold 两种字重。当然，也需要根据你 app 的排版样式有针对性的考虑。</p>

<p><img src="media/15675148872165/49D1B752-0FAA-4C2D-BF17-4B12203F211E.png" alt=""/></p>

<p><img src="media/15675148872165/668B2F3C-4AF7-4656-9B51-E018A0F37113.png" alt=""/></p>

<p>制作好的自定义标志可以在「SF Symbols」app 中浏览。</p>

<h3 id="toc_5">设计小结</h3>

<p><img src="media/15675148872165/BA4F526B-0925-425E-9423-9719EBE9BF18.png" alt=""/></p>

<h2 id="toc_6">在开发中使用 SF Symbols</h2>

<h3 id="toc_7">使用系统提供的 SF Symbols</h3>

<p>下面这个 app 提供了滑块的相关功能，可以通过控制滑块或者两边的按钮来调节速度，但是目前的加减图片不太好，我尝试用 SF Symbols 来替换这两张图片。</p>

<p><img src="media/15675148872165/05470A32-D8E1-446E-BF94-F0A1794DF75D.png" alt=""/></p>

<p>在 SF Symbols app 中可以找到「乌龟」和「野兔」两个标志，分别代表更慢和更快。</p>

<p><img src="media/15675148872165/4BB0A6FC-13E4-4776-AD45-7B5802820B65.png" alt=""/></p>

<p><img src="media/15675148872165/59D963FB-581D-4259-85E7-A0BADB3D07F5.png" alt=""/></p>

<p>可以利用新的 API：<code>UIImage(systemName:)</code>  来替换相应的图片，具体的代码如下：</p>

<pre class="line-numbers"><code class="language-swift">// You’re eager to use one of these 1500+ new system symbols
// It’s easy!

slowerImageView.image = UIImage(systemName: &quot;tortoise&quot;)
fasterImageView.image = UIImage(systemName: &quot;hare&quot;)
</code></pre>

<p><img src="media/15675148872165/3ACCCF42-A8E5-4FB9-91CF-E06711FEA672.png" alt=""/></p>

<h3 id="toc_8">使用自定义 symbols</h3>

<p><img src="media/15675148872165/97A3D814-AEA8-4769-8425-D7D18DFD1E76.png" alt=""/></p>

<p>在开发中要使用上图的自定义标志，需要将设计师提供的「teacup.svg」文件导入 Xcode 中，在代码中使用 API  <code>UIImage(named:)</code>  即可调用这个自定义标志，具体代码如下：</p>

<p><img src="media/15675148872165/58FA9B53-A6B3-4641-A257-508559BBA9A8.png" alt=""/></p>

<pre class="line-numbers"><code class="language-swift">// And you want to use the image your designer made?
// It&#39;s just like it was:

cupView.image = UIImage(named: &quot;teacup&quot;) 
</code></pre>

<p><img src="media/15675148872165/6B2B2613-A01B-4179-943B-D8AAF5CD4B4C.png" alt=""/></p>

<p>不止你有没有注意到在资源目录中同时存在两个名称为「teacup」的资源文件，它们都是图片，都不是相同的类型，一个是普通 png 格式图片，一个是 svg 格式的标志。</p>

<p><img src="media/15675148872165/75D6ABC3-6229-436A-B919-A67F770C90EF.png" alt=""/></p>

<p>以前的时候你通过 UIImage(named:)  这个 API 调用图片文件名非常直接和方便，当有了 SF Symbols 时，事情会变得稍微有些复杂。以文件名「envelope」为例，解释下这里。同一个文件名的图片，这里可能有三个版本：一个是系统标志，一个是自定义标志，还有一个是非标志的普通图片。<br/>
对于系统标志没有什么问题，因为它是通过 API  <code>UIImage(systemName:)</code>  单独的命名空间来调用的，不会与其他的产生冲突。</p>

<p><img src="media/15675148872165/B9BDE0CD-DE63-4EEA-94C3-7FCA5142547B.png" alt=""/></p>

<p>而对于自定义标志和普通图片来说，它们都是通过 API <code>UIImage(named:)</code> 来调用的。系统会优先调用自定义标志文件，如果没有再调用普通类型的图片文件。这样做的好处是，不需要多余的代码，不需要版本检查代码，在 iOS 12 或更早版本可以显示普通类型的图片，而在 iOS 13 或之后版本中可以利用 SF Symbols 的功能显示自定义标志。</p>

<p><img src="media/15675148872165/DFDCD360-3C44-47EF-9F0F-4047DF0391A1.png" alt=""/></p>

<h3 id="toc_9">配置 SF Symbols 的参数</h3>

<p><img src="media/15675148872165/905D12FC-859A-4EAB-BFBD-DC783DDEC99D.png" alt=""/></p>

<p>我们需要对「teacup」这个标志进行配置，其缩放是「large」,可以利用新的 API <code>UIImage.SymbolConfiguration()</code> ，具体代码如下：</p>

<pre class="line-numbers"><code class="language-swift">// Our designer specified to use a large configuration:

let configuration = UIImage.SymbolConfiguration(scale: .large)
imageView.preferredSymbolConfiguration = configuration
</code></pre>

<p><img src="media/15675148872165/F8C0C1AD-E96E-40DF-8CF9-194A745341ED.png" alt=""/></p>

<p>想改变标志的更多参数，比如字号、字重，具体的代码如下：</p>

<pre class="line-numbers"><code class="language-swift">// Symbols are typographic in nature, and it reflects
// in how you configure them

// typographic points, not screen points
let headlineConfig = UIImage.SymbolConfiguration(pointSize: 23.0f, weight: .medium)

// you can always add a scale
let annotationConfig = UIImage.SymbolConfiguration(pointSize: 17.0f, scale: .small)
</code></pre>

<p>在这里注意，标志的「pointSize」指的是字体字号大小，而不是屏幕尺寸大小。</p>

<p><img src="media/15675148872165/93C0A958-957B-43E9-876E-D5560A715350.png" alt=""/></p>

<p>如下图所示，下面这个标志其字号尺寸是 28 pt，但其物理尺寸是 33pt × 32pt。你应该把标志看作是文本的一部分。</p>

<p><img src="media/15675148872165/378AB0A3-37A1-4F02-944B-D256B9BDF725.png" alt=""/></p>

<p>正因为标志就像文本一样，所有标志可以配置它的文本类型（text style），以支持系统的动态类型功能。具体代码如下：</p>

<pre class="line-numbers"><code class="language-swift">// Symbols are typographic in nature, and it reflects
// in how you configure them

// dynamic type text styles
let footnoteConfig = UIImage.SymbolConfiguration(textStyle: .footnote)

// … you can always add a scale
let introConfig = UIImage.SymbolConfiguration(textStyle: .body, scale: .large) 
</code></pre>

<p><img src="media/15675148872165/3D2A54FF-758F-4021-A02A-D37E45311B04.png" alt=""/></p>

<p>如果 app 使用了非系统字体，标志的参数也可以根据自定义字体进行变化。当你已经有了一段配置好属性的文本，你就不需要一个个属性地去调整标志。具体代码如下：</p>

<pre class="line-numbers"><code class="language-swift">// Symbols are typographic in nature,
// and it reflects in how you configure them

titleLabel.font = style.titleFont()

let configuration = UIImage.SymbolConfiguration(font: titleLabel.font, scale: .large)
titleImage.preferredSymbolConfiguration = configuration
</code></pre>

<p>关于标志的属性它是一个常量，它是不可变的。如果你想利用已有的属性值，你可以通过方法 <code>applying</code> 去创建了一个新的属性，从而间接修改已有的属性，并应用在你需要的地方。具体代码如下：</p>

<pre class="line-numbers"><code class="language-swift">// It’s also possible to combine configurations、
let boldLargeConfig = UIImage.SymbolConfiguration(weight: .bold, scale: .large)
let smallConfig = UIImage.SymbolConfiguration(scale: .small)

let config = boldLargeConfig.applying(smallConfig)

// config will be .bold, .small
</code></pre>

<h3 id="toc_10">使用 SF Symbols 进行布局</h3>

<p><img src="media/15675148872165/6D8FD6EC-70A7-4B9E-B545-DABD5784525A.png" alt=""/></p>

<p>上图这个 app，每一行都有一个头像、一条文字评论和一个箭头。对于头像可以使用 SF Symbols，一般情况下头像与右边的文字是竖直中心对齐的，即使右边的文字大于一行，也是可以的。</p>

<p><img src="media/15675148872165/A2211C0B-3E93-4918-AC91-8F7E0F75CB8A.png" alt=""/></p>

<p>要想让头像与第一行文字对齐，有两种方法，一种是让头像和文字的边缘对齐，还有一种方法是让头像的基线与第一行文字的基线对齐。对于第二种方法，在 iOS 13 中，对于图片新增了一个 <code>baselineOffsetFromBottom</code> 属性，正如名字所示，它表示从底部到基线的偏移值，它是一个可选的 CGFloat 类型。对于 SF Symbols 来说，它默认具有这个属性，而对于普通图片来说，它默认不具有这个属性。查看图片的这个属性的具体代码如下：</p>

<pre class="line-numbers"><code class="language-swift">// You can inspect the baseline values on images
// Expressed in screen points from the bottom of the image

let chevron = UIImage(systemName: “person.square”)

// Not all images have baselines!
if let offset = chevron.baselineOffsetFromBottom {
    // …
}
</code></pre>

<p>下图中的两个标志和文字的基线相同，可以看到下箭头标志的偏移值是「-3.5」，而云朵标志的偏移值是「+4.5」，所以说基线可能不在图片的边界之内。如果偏移值为 0，并不是说没有基线，而是基线与图片的底部是重合的。</p>

<p><img src="media/15675148872165/9486BA51-3194-4ACD-BE6D-23AB135A2467.png" alt=""/></p>

<p>对于默认没有基线的普通图片，我们可以通过 API <code>withBaselineOffsetFromBottom</code> 来为其添加基线。具体的代码如下：</p>

<pre class="line-numbers"><code class="language-swift">// You can add baselines to any image
// Important: baseline offsets are in screen points.

let avatarImage: UIImage?

if let loadedImage = AvatarCache.load(forUser: user.id) {
    // give the avatar a baseline
    avatarImage = loadedImage.withBaselineOffsetFromBottom(3.5f)
}
else {
    avatarImage = UIImage(systemName: “person.square”)
}
</code></pre>

<p>通过以上代码，为普通图片添加了基线，这样普通图片和标志可以用同一逻辑进行统一的布局。</p>

<p><img src="media/15675148872165/83EF3DF8-E3EA-44F7-8218-2283628F7D8B.png" alt=""/></p>

<h3 id="toc_11">在按钮中使用 SF Symbols</h3>

<p>为了区分不同的情况，在这里把按钮可以分为三种，第一种是系统按钮，第一种是普通按钮，第三种是栏上的按钮（bar buttons)。先来看系统按钮。</p>

<p><img src="media/15675148872165/F9940190-1D9B-4F65-A937-78B56B6BAB01.png" alt=""/></p>

<p>在 UIKit  中的所有「系统按钮」都有一个预置的配置参数，他是「body」文本类型，「large」缩放大小。在系统按钮中使用 SF Symbols 的具体代码如下：</p>

<pre class="line-numbers"><code class="language-swift">// System buttons have a default configuration of: .body, .large

let watchImage = UIImage(systemName: “stopwatch”)

let startButton = UIButton.system(image: watchImage,
                                     target: self,
                                     action: #selector(startTimer)) 
</code></pre>

<p>再来看普通按钮。在下图的这个例子中，有一个 pop-over 弹窗，在其中有两个动作按钮。在普通按钮上使用 SF Symbols，默认缩放大小是「medium」。</p>

<p><img src="media/15675148872165/4A0CDA48-C850-4355-B6E2-8FE4CF5C6229.png" alt=""/></p>

<p>在普通按钮上使用 SF Symbols 并改变其属性值的具体代码如下：</p>

<pre class="line-numbers"><code class="language-swift">// Buttons have a default configuration of .medium
// use setPreferredSymbolConfiguration() to change

let checkButton = UIButton(type: .custom)
checkButton.setImage(UIImage(systemName: &quot;check&quot;), forState: .normal)

let config = UIImage.SymbolConfiguration(textStyle: .caption, scale: .small)
button.setPreferredSymbolConfiguration(config, forState: .normal)
</code></pre>

<p>对于下图中左右两个按钮，左边按钮是一个标志，右边按钮是文字，虽然它们没有紧挨在一起，但它们应该有同样的参数。它们应该有着同一条基线值，有着同样的属性（字体、字号、字重、文本样式等）。这样来看，可以让布局的思考更加简单。</p>

<p><img src="media/15675148872165/4BA54907-B7A2-43BC-8F56-A6EA0F2244F3.png" alt=""/></p>

<p>最后来看栏上的按钮（bar buttons）。在 iOS 13 中，所有 bar buttons 的图片资源也已经使用 SF Symbols 更新过了。</p>

<p><img src="media/15675148872165/ACA71914-7234-414E-BB3A-52B04341431C.png" alt=""/></p>

<p>对于 bar buttons，也有预置的属性。栏上按钮在像 iPhone 竖屏高度上是 regular 这种尺寸等级（size class）的屏幕上是「large」缩放大小，而在高度上是 compact 这种尺寸等级的屏幕上是「medium」缩放大小。这也意味着你不需要针对高度不同的栏提供两套不同的栏上按钮资源文件。</p>

<p><img src="media/15675148872165/4FE6E169-46A4-4B05-A7A6-AE41C59DADFA.png" alt=""/></p>

<p><img src="media/15675148872165/B8DCF7C7-82C8-4634-8942-3F9073D4A667.png" alt=""/></p>

<h3 id="toc_12">SF Symbols 的渲染模式（render mode）</h3>

<p>对于普通图片来说都有颜色数据，而对于 SF Symbols 来说其没有固定的颜色。我们可以通过描边颜色（tint color）来渲染标志。如果没有描边颜色，会使用黑色。但黑色并不总是合适，比如在深色模式中。</p>

<p><img src="media/15675148872165/62511826-436F-4D03-9F28-758C809FA357.png" alt=""/></p>

<p>以前图片的渲染模式都是自动的，都是原始颜色。而现在来说对于非标志类型的图片仍然是这样，对于标志类型的图片将会是根据描边颜色来显示。</p>

<p><img src="media/15675148872165/9A9B0D1B-899F-44A2-9801-113ED8B4649D.png" alt=""/></p>

<p>绘制一个标志的具体代码如下：</p>

<pre class="line-numbers"><code class="language-swift">// Drawing symbols

let cupImage = UIImage(named: &quot;teacup&quot;)
let receipt = UIGraphicsImageRenderer(size: receiptSize).image {
    // …

    cupImage.draw(at: .zero) // use natural size of the image

    // …
}
</code></pre>

<p>如果觉得绘制的标志太小，可以通过下面的代码创建一个新的属性，并创建一张新的标志图片。</p>

<pre class="line-numbers"><code class="language-swift">let cupImage = UIImage(named: &quot;teacup&quot;)

let configuration = UIImage.SymbolConfiguration(pointSize: 34.0f, weight: .bold)
let largeTeacupImage = cupImage.withConfiguration(configuration)
</code></pre>

<p>回到之前的 pop-over 页面，我们想要让其中的某些文字用标志替代。</p>

<p><img src="media/15675148872165/4F754298-E167-47EB-9D07-8A49307DF25B.png" alt=""/></p>

<p>因为标志是图片，我们要把标志通过一些方法转换为字符串，具体的代码如下：</p>

<pre class="line-numbers"><code class="language-swift">// Symbols in strings
// — use attachments

let string = NSMutableAttributedString(string: &quot;I just symbol images!&quot;,
                                          attributes: [.foregroundColor: UIColor.label])

let heartImage = UIImage(systemName: &quot;heart.fill&quot;)
let heartAttachment = NSTextAttachment(image: heartImage)
let heartString = NSAttributedString(attachment: heartAttachment)

string.insert(heartString, at: 7)
</code></pre>

<p>转换后的标志会根据匹配的文字来自动确定属性值，比如颜色、大小等。进一步，要想改变插入文字中的这些标志的颜色，可以通过下面的代码实现，其中可以选择是否改变渲染模式：</p>

<pre class="line-numbers"><code class="language-swift">// Tinting images
// — apply a color to the whole image

let heartImage = UIImage(systemName: &quot;heart.fill&quot;)
let redHeartImage = heartImage.withTintColor(.redColor, renderingMode: .alwaysOriginal) 
</code></pre>

<p><img src="media/15675148872165/758AF029-8C10-4E6E-AB41-E6A11A915BD9.png" alt=""/></p>

<h3 id="toc_13">几个注意点</h3>

<p><img src="media/15675148872165/097FDF53-4ED4-41D8-BE08-3C09EA2A0458.png" alt=""/></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS 13 的设计有什么新变化？]]></title>
    <link href="https://steppark.net/15674389801268.html"/>
    <updated>2019-09-02T23:43:00+08:00</updated>
    <id>https://steppark.net/15674389801268.html</id>
    <content type="html"><![CDATA[
<p>从 iOS 13 系统开始，用户可以像在 macOS 中一样开启全局的「Dark Mode 深色模式」，聚焦于内容本身。这对 app 在设计时提出了挑战。为了让用户在 app 中使用时更有空间感，iOS 13 强化了「Modal Presentation 模态展示」页面的样式。3D Touch 让使用支持此功能的硬件的用户可以快捷访问某些功能、预览某些页面，「Context Menu 情景化菜单」把这项功能带给了所有用户。</p>

<span id="more"></span><!-- more -->

<h2 id="toc_0">目录</h2>

<ul>
<li>
<a href="#toc_0">目录</a>
</li>
<li>
<a href="#toc_1">Dark Mode 深色模式</a>
<ul>
<li>
<a href="#toc_2">核心设计目标</a>
</li>
<li>
<a href="#toc_3">Color 颜色</a>
</li>
<li>
<a href="#toc_4">Materials 材料</a>
</li>
<li>
<a href="#toc_5">Controls and bar 控件和栏</a>
</li>
<li>
<a href="#toc_6">SF Symbols</a>
</li>
</ul>
</li>
<li>
<a href="#toc_7">Modal Presentations 模态展示</a>
</li>
<li>
<a href="#toc_8">Contextual Menus 情景化菜单</a>
</li>
</ul>


<h2 id="toc_1">Dark Mode 深色模式</h2>

<p>在 iOS 13 及之后的系统中，人们可以选择采用一个全局的深色系统外观——称为「Dark Mode 深色模式」。在深色模式中，系统中的所有屏幕、界面、菜单、控件都使用了更深的颜色，这让在更深背景中的前景内容更容易显现出来。注意深色模式仍然支持所有的辅助功能设置。<br/>
人们可以选择深色模式作为他们的默认界面样式，他们也可以通过设置设定周围灯光变暗时自动开启深色模式。<br/>
因此深色模式带来了一个与颜色、图片、文本打交道的新界面方案。</p>

<p><img src="media/15674389801268/646DFB45-7C4F-49F0-A993-7BB4CE922BF7.png" alt=""/></p>

<p>深色的 UI 更适合灯光条件较暗的情况，对于我们的眼睛来说，在一个暗色的屏幕和周围的世界之间做出调整也更加容易。抛开功能性去说，许多人只是喜欢把使用暗色的界面作为自己的个人偏好。<br/>
 iOS 的 Dark Mode 使用了几乎全黑的背景以提供与文本和其他前景元素的最大对比度。黑色的背景会使 UI 与硬件本身看上去融为一体。<br/>
通常情况下，你的 app 都应该支持 Dark Mode 功能。当人们使用 iPhone 切换到 Dark Mode 时，他们期望你的 app 也一起改变。</p>

<p><img src="media/15674389801268/78327CCF-8350-4BF7-9068-5A7E7C59294F.png" alt=""/></p>

<h3 id="toc_2">核心设计目标</h3>

<ul>
<li>保持熟悉：iOS 设计系统会经历一个从头到尾的更新，但是结果还是人们熟悉的那个 iOS 系统；</li>
<li>平台一致性：所有的内置 app 在 iOS 13 中都被重新设计过，它们的组成部分都保持着平台的一致性；</li>
<li>清晰的信息层级：通过颜色区分信息层级，让重要的信息更加显眼，不重要的信息隐藏在背后；</li>
<li>可访问：把辅助功能与其他目标放在同等地位，新的系统同样支持粗体文本、增强对比度、减少透明度等辅助功能模式；</li>
<li>保持简洁：让新的设计系统保持简洁、直接、易于操作执行。</li>
</ul>

<p><img src="media/15674389801268/7E2132DC-7C02-4F1E-9880-9236DBA3A791.png" alt=""/></p>

<h3 id="toc_3">Color 颜色</h3>

<p>每一个 app 都有一个背景，大多数 app 会包含文字、图形。有的还会包含分隔线、分组以帮助组织内容。在以前当我们描述这些的颜色时，可以直接说它们的色值是多少，比如文本是黑色，背景是白色等等。但当 app 有了另一套外观时，就出现了两套对应相同元素的不同颜色体系。</p>

<p><img src="media/15674389801268/051EB791-1111-4B2D-AFD0-6AE98178B070.png" alt=""/></p>

<p>此时，对颜色需要有一个更抽象的方式来描述，那就是「semantic colors 语义化颜色」。</p>

<p><img src="media/15674389801268/525A6D6E-F76B-4AA2-86B0-5AD9C2C41ECD.png" alt=""/></p>

<p>「语义化颜色」描述了一个颜色的目的而不是颜色的值。所以对于「背景颜色」来说，在亮色模式下是白色，在深色模式下就是黑色。你需要对 UI 元素匹配语义化颜色，以使得外观可以自动在亮色和深色模式之间切换。</p>

<p>大多数的颜色会分为四个等级：一级、二级、三级、四级。这些变种用来表现不同的信息层级。</p>

<p><img src="media/15674389801268/1EBDD6C2-467E-4DDC-A970-63B52C9745E1.png" alt=""/></p>

<p>Label 文字标签应该与背景有着最强的对比度，是需要用户注意的地方，所以对于标题使用一级，副标题使用二级，占位文本使用三级，不可用文本使用四级。</p>

<p><img src="media/15674389801268/9F81C17D-43BA-4A2E-8002-41F064B9CBBE.png" alt=""/></p>

<p>同样的，对于背景颜色也是这样。系统背景是一级，二级和三级的背景颜色可以让你在视觉上构建信息层级。</p>

<p><img src="media/15674389801268/4704953F-249F-4938-A4C6-C5913F89031B.png" alt=""/></p>

<p>对于成组的 table view 来说也有特定的视差背景效果。Table view 的背景是一级，每一行的背景是二级。仔细观察，相比于亮色模式，深色模式不是简单地将颜色进行翻转。</p>

<p><img src="media/15674389801268/92D3DA9F-0CD1-457F-A9C8-72EC20CC2441.png" alt=""/></p>

<p>新的系统色盘还包括「fill color 填充颜色」和「separator color 分隔线颜色」。所有的填充颜色和其中一个分隔线颜色都是半透明的。这对增强与多变的背景颜色的对比度有所帮助。</p>

<p><img src="media/15674389801268/0F1002CC-DADA-4A29-8776-27500D219B13.png" alt=""/></p>

<p>新的色盘还包括了六种完全不透明的灰色值。当透明会导致出现问题时，可以使用这些灰色值。例如在绘制横纵相见的分割线时。</p>

<p><img src="media/15674389801268/D2311261-FC2E-4052-AE50-BAABD2EB25F3.png" alt=""/></p>

<p>同样地，在色盘中，对于「tint color 着色」在亮色模式和深色模式中也有不同的变种。针对增强对比度模式，也有更进一步的变种。开启增强对比度功能后，对于一个颜色，在亮色模式中应该更暗，在深色模式中应该更亮。</p>

<p><img src="media/15674389801268/B105C12C-5FA9-4B88-A0F7-B371D2FF5E16.png" alt=""/></p>

<p><img src="media/15674389801268/E3B32D72-911F-472A-B098-69DBFD9DB91D.png" alt=""/></p>

<p>当你自己设置自定义的颜色时，要注意在两种模式中颜色的显示都应该合适，必要时应该使用颜色对比度计算器，对比度至少达到 4.5：1，对于更小的文本需要达到 7：1。更强的颜色对比度可以帮助改善 app 的可访问性和可用性。不同模式下的颜色可以在保证最小对比度的情况下保持相似。</p>

<p><img src="media/15674389801268/1D9B0DE5-1B2F-4B44-93D6-74525CA26667.png" alt=""/></p>

<p><img src="media/15674389801268/A4BD32F0-5B28-4934-9CC3-7196B3183FAC.png" alt=""/></p>

<p>当两个界面叠在一起时，我们需要建立视觉上的层级。比如两个白色背景的界面叠在一起的时候，两个界面之间会通过阴影来表现出两个界面间的关系。但到了深色模式下的黑色背景，这个方法就不太管用了。此时，需要对背景中的那个界面使用更深的背景，对于前景中的界面使用较浅的背景。</p>

<p><img src="media/15674389801268/3AB6AB66-57CA-4E1B-8FC5-A875AEFB4A30.png" alt=""/></p>

<p>以「通讯录」应用举例，当有一个模态窗口展示在原来的界面上时，通讯录的界面相比之前会更浅。</p>

<p><img src="media/15674389801268/4F198898-3971-4E9F-A19D-62EF7A42B9D3.png" alt=""/></p>

<p>继续看一个更复杂的例子，在 iPad 上的「邮箱」应用的界面上 slide over 一个「通讯录」应用。「通讯录」应用的背景颜色会比背景中的「邮箱」应用更浅，以使其更显眼。</p>

<p><img src="media/15674389801268/DD839CD9-A8D3-438B-84CE-2E45F72AA99E.png" alt=""/></p>

<p>当「邮箱」应用和「通讯录」应用以 side view 的方式并排展示时，它们两个应用的背景颜色都变得更浅了。这可以与两个 app 间的分隔线形成对比，也避免了两个 app 的背景色融在了一起，看上去像一个 app。</p>

<p><img src="media/15674389801268/BC4DDC06-7451-4F1E-B344-59F893935A39.png" alt=""/></p>

<p>再进一步，在上面的情况下，在「邮箱」应用中写一封新邮件会弹出一个模态窗口。新的窗口的背景颜色与旁边的「通讯录」应用一个层级，而背景中的「邮箱」主应用看上去变得更暗了一些。这是因为模态窗口绘制了一层遮罩覆盖在了上面。</p>

<p><img src="media/15674389801268/B6694725-3EED-4234-842A-10D2C4272B7B.png" alt=""/></p>

<p>以上，为了保持对视觉层级的呈现，需要在深色模式的设计中特别注意背景颜色的变化（可借助前面提到的「fill colors」和「separator colors」，并确保有合适的对比度。</p>

<p><img src="media/15674389801268/E5B6CA2C-6749-4180-801D-46B5706A2E7B.png" alt=""/></p>

<p>如果你必须在深色模式中使用白色的背景颜色，可以选择一个稍暗淡的白色，以此避免白色背景与周围的暗色内容相冲撞。</p>

<h3 id="toc_4">Materials 材料</h3>

<p>在 iOS 13 中引入了四种不停厚度的材料：厚、普通（默认）、薄、超薄，并且针对亮色和深色模式有不同的变种。<br/>
如果需要建立与背景明确的对比度，可以使用更厚的材料；对于一些更轻量化的交互，可以使用更薄的材料。使用何种材料完全取决于你要展示的内容。</p>

<p><img src="media/15674389801268/71C5D5FD-61E6-4395-B3FE-85F888454CBB.png" alt=""/></p>

<p>对于不同的材料类型，系统也对文本标签、填充和分隔线的颜色进行了定义。「Vibrancy 虚化透明效果」是贯彻 Apple 所有系统的一个视觉效果，使用系统材料，建议最好使用动态调整颜色而不是固定的颜色。因为随着背景的各种变化，使用固定颜色可能会造成一些可读性的问题，而动态调整可以在背景颜色变化的情况下保持良好的对比度。</p>

<p><img src="media/15674389801268/B38ACF92-1D10-44EA-9812-04AA4E2D4708.png" alt=""/></p>

<p><img src="media/15674389801268/553B48CA-14F8-4FE3-A16C-153C324BB88F.png" alt=""/></p>

<h3 id="toc_5">Controls and bar 控件和栏</h3>

<p>iOS 13 UIKit 中的所有控件已经更新，针对于亮色和深色模式有着不同的变种。所有的控件都使用了语义化颜色重新绘制。不要对这些已有的控件尝试重新创造，不要重复造轮子。</p>

<p><img src="media/15674389801268/10CA82E2-0904-48D4-8E0D-0D4D28CF23D0.png" alt=""/></p>

<p>在创造自定义控件时，针对于亮色和深色模式的不同颜色使用系统色盘。</p>

<p><img src="media/15674389801268/9A7A0EDC-8711-4A0A-92C5-00D7ED2E7B7C.png" alt=""/></p>

<p>导航栏也被进行了更新。默认情况下，大标题导航栏没有背景和阴影，这可以使标题和下面的内容融为一体。当内容滚动时，导航栏的背景和阴影才会出现。</p>

<p><img src="media/15674389801268/4977D064-E0FB-44A3-954F-F43F73F2E308.png" alt=""/></p>

<p>非大标题的导航栏在某些情况下也可以使用这种效果。例如在 iPad 上的「设置」app，master view 和 split view 中的导航栏都没有背景和阴影。</p>

<p><img src="media/15674389801268/253033E1-998A-4F57-BEF8-12B2612EFC57.png" alt=""/></p>

<p>但这种样式并不是总是合适的。以下两种情况还是更适合以前的导航栏样式：<br/>
    * 元素会出现在透明的导航栏后面时；<br/>
    * 需要视觉分隔时。</p>

<p><img src="media/15674389801268/C208AC65-6DBE-47CC-B84D-0FADADD5C120.png" alt=""/></p>

<h3 id="toc_6">SF Symbols</h3>

<p>以前，iOS 系统提供了一些常用的「symbol 符号」用于表示 table view 每一行和工具栏上的图标。但现在有了深色模式，一些符号就会看上去不是很合适，显得有些单薄。</p>

<p><img src="media/15674389801268/850CC01D-0D09-4EBB-97C8-1C025EB61014.png" alt=""/></p>

<p>设计团队重新设计了所有的符号，并且整合成了包含 1500 多个符号的「SF Symbols」。这不仅仅是一些图标的合集，而且这代表了一种思考、设计图标的新的方式。</p>

<p><img src="media/15674389801268/61A389C4-E26F-4D3F-8CF2-25D58F7D179C.png" alt=""/></p>

<p>SF Symbols 可以与 Apple 的系统字体 San Francisco 的设计特征相匹配。它们可以被展示到一行文本中，SF Symbols 中插入了基线以确保能与文字有合适的对齐关系。每一个 SF Symbol 在一个字号下提供了小、中等、大三种大小变种以适配不同的情景 。</p>

<p><img src="media/15674389801268/9C0D501E-81D6-4C51-BBDE-60BEBCA0411C.png" alt=""/></p>

<p>并且每一个 SF Symbol 也像 SF 字体一样提供了九种字重，因此在粗体文本的辅助功能开启时可以变得更粗。因为 SF Symbols 是矢量的，所以可以跟随文本在动态类型中发生变化。</p>

<p><img src="media/15674389801268/B03256ED-240B-4C35-B865-EE6571A6A6FD.png" alt=""/></p>

<p>要在实际的设计中使用 SF Symbols，只需要在 SF Symbols app 中浏览或搜索你想要的符号，将其复制粘贴到你的设计中即可。</p>

<p><img src="media/15674389801268/9612CE0C-2A32-4E25-AC69-2A98B99C4BEE.png" alt=""/></p>

<p>如果 app 中没有你想要的符号，你可以通过模板创造一个格式为 svg 的自定义的符号，之后就可以获得 SF Symbols 所提供的所有功能。</p>

<h2 id="toc_7">Modal Presentations 模态展示</h2>

<p>新的卡片样式的表单不仅通过一种不同的方式呈现了「Modal Prensentations 模态展示」，而且改变了我们与这些控件交互的方式。</p>

<p><img src="media/15674389801268/84F85BAC-67D0-4E1C-9EA6-CC1EC96ECD71.png" alt=""/></p>

<p>模态展示通常被称为「sheets 薄片」，因为它是从屏幕底部划入屏幕中的。这个进场动画告诉人们他们从一个模式转换到了另一个新的模式或者说进入了 app 的一个新的模态。在 iOS 13 中，模态窗口有了一个在全系统使用的新的像卡片样子的外观。模态展示的好处是可以让用户看到背景中还有其他内容待确认或者待完成。如果是一个全屏的模态窗口，你可能就会忘记你之前在做什么。</p>

<p><img src="media/15674389801268/7F9F72A7-5DFD-4D2E-BF92-95C4B292AA3B.png" alt=""/></p>

<p>模态窗口可以通过在卡片的导航栏上向下滑动来关闭。不可滚动的卡片样式的模态窗口可以通过在任意位置向下滑动来关闭，这比点击导航栏上的一个按钮来得更容易操作，而且这种单指就能完成的操作也对大屏手机有利。可滚动的模态窗口向上滚动到顶端，若继续向上滚动则可以关闭模态窗口。</p>

<p><img src="media/15674389801268/51B77D63-51C6-4A08-884E-906257511494.png" alt=""/></p>

<p>如果你的 app 的某个交互与这个关闭交互发生了冲突，那这个关闭操作就会不起作用。当模态窗口包含一个强制性的操作请求时，那关闭模态窗口的交互也会不起作用。例如在关闭一个正在写邮件的模态窗口时，为了防止用户误操作而丢失内容，界面会显示一个 Action Sheet 让用户选择是否要保存草稿。</p>

<p><img src="media/15674389801268/AE97B31F-6872-4D5E-B88A-872E48E589A1.png" alt=""/></p>

<p>有了关闭的手势并不代表不需要可以执行关闭操作的按钮。关闭按钮对于让用户知道这个页面可以关闭十分重要，对于可访问性也非常有帮助。况且人们可能并不熟悉关闭窗口的手势操作。而且当一个内容区域被向下滚动时，一个关闭操作的按钮也更加方便。</p>

<p><img src="media/15674389801268/BA4E395B-55E2-4B1A-A3C1-3B2089FA2956.png" alt=""/></p>

<p>虽然卡片形式的模态展示非常方便，遍布整个 iOS 系统，但是并不代表这个交互总是合适的。对于一些任务，像编辑图片、标记截图界面，你更需要最大化屏幕操作空间，减少让用户分心的视觉元素。对于这种情况，你应该使用全屏的模态展示。</p>

<p><img src="media/15674389801268/8CAC7C5E-B6F7-421F-8D83-95D387187A76.png" alt=""/></p>

<p>特别注意，模态是指的是模式之前的切换。不要因为喜欢这个交互的动效或者视觉样式而去使用它。例如在日历中，当浏览日历时你可以查看日历的所有事项，选中某个事项查看详情。因为我们一直处于浏览模式，一个子视图更加适合展示事项详情。一个子视图就是父视图的延伸，其代表任务或者工作流的继续。当创建或编辑一个事项时，一个模态窗口表示进入了一个新的工作流。</p>

<p><img src="media/15674389801268/8B778C6D-2B5B-40B3-8CB2-EA874F2D7EF2.png" alt=""/></p>

<h2 id="toc_8">Contextual Menus 情景化菜单</h2>

<p>新的「Contextual Menus 情景化菜单」控件使快速获取情景相关的功能更加简单。</p>

<p><img src="media/15674389801268/EB1ADF03-10DB-4E52-8F8F-151022C908C7.png" alt=""/></p>

<p>通过 3D Touch 引入了一个新的一个新的交互「Peek」和「Pop」。这对于预览内容很有用，如果有相关的操作可以通过上划显示并选择相应的操作。情景化菜单在这基础上进行了转化，将重点放在了操作上。与内容相关的操作可以立马呈现出来。</p>

<p><img src="media/15674389801268/E68D02C0-178A-41BE-AB5A-2ED19B0F1EDD.png" alt=""/></p>

<p>情景化菜单可以在所有的设备上起作用，而 peek 和 pop 操作只在具备 3D Touch 功能的设备上起作用。展示情景化菜单的手势是通过长按，而在具备 3D Touch 功能的设备上操作更简单，只需用力按。情景化菜单可以分为两部分，一部分是可以被执行的操作，另一部分是可选的，用于显示所选内容的预览。</p>

<p><img src="media/15674389801268/66E6CD12-593E-4F4D-B94B-A7E64D4B9C4B.png" alt=""/></p>

<p>情景化菜单的样式取决于设备的屏幕尺寸和方向。在 iPhone 上情景化菜单的预览和命令操作竖直排列，在 iPad 上当命令操作小于等于三个时，也是竖直排列，而其他情况则是左右排列。</p>

<p><img src="media/15674389801268/8EDA95BD-4E07-4E11-9599-48EA23657854.png" alt=""/></p>

<p>情景化菜单会出现在被触发内容的最近之处，应该把用户常用的操作放在上面。并且对于相关的操作应该作为一组，对于不同的组可以使用分隔线进行视觉区分。情景化菜单也可以是有层级的，某些操作可以有二级操作。情景化菜单也包括一个图标帮助用户快速找到想要的操作，并使用红色文本标签提醒用户这是一个破坏性的操作。就像 macOS 的情景化菜单（右键菜单）一样，你应该尽可能地让 app 的每一个对象都有情景化菜单。</p>

<p><img src="media/15674389801268/32B6A089-A1F4-4510-97A7-08E77385F3CC.png" alt=""/></p>

<p>情景化菜单中的操作也应该在 app 中的其他位置找到并可用。因为人们可能并不一定能及时发现相关的情景化菜单。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Designing For New iPad Pro and Apple Pencil — 适配没有刘海的 iPad Pro 与有刘海的 iPhone Xs 有什么不同?]]></title>
    <link href="https://steppark.net/15416976044741.html"/>
    <updated>2018-11-09T01:20:04+08:00</updated>
    <id>https://steppark.net/15416976044741.html</id>
    <content type="html"><![CDATA[
<p>Apple 在 10 月 30 日发布了全新的 iPad Pro 11 寸版本和 12.9 寸版本，它们去除了 Home 键、配备了 Face ID，从而使得边框变得极窄，iPad Pro 也步入了无 Home 键的时代。但与之前发布的 iPhone Xs、iPhone Xs Max 不同，全新的 iPad Pro 并没有刘海。同时，Apple 发布了第二代 Apple Pencil，在这支笔上配备了双击手势功能。那在设计与开发适配全新的具备 Split View、Slide Over 功能、搭配第二代 Apple Pencil 的 iPad Pro 时，有什么要注意的呢？</p>

<span id="more"></span><!-- more -->

<blockquote>
<p>全新 iPad Pro 亮相：</p>

<iframe width="560" height="315" src="https://www.youtube.com/embed/LjaKHqDbzSA" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
</blockquote>

<ul>
<li><strong>Note:</strong></li>
</ul>

<blockquote>
<p>在进一步阅读此文章前，推荐阅读这篇文章的姊妹篇，有利于更好地理解 Apple 最新 iPhone、iPad 的适配原则：  </p>

<ol>
<li><a href="15086036845015.html">Designing For iPhone X —— iPhone 上有了刘海，设计和开发到底该咋整?</a><br/></li>
<li><a href="15433010141111.html">Designing For iPhone Xs、iPhone Xs Max、iPhone Xʀ — 比大还大，更大的刘海屏 iPhone 来了</a></li>
</ol>
</blockquote>

<h2 id="toc_0">目录</h2>

<ul>
<li>
<a href="#toc_0">目录</a>
</li>
<li>
<a href="#toc_1">屏幕尺寸的变化</a>
</li>
<li>
<a href="#toc_2">App 的适配与设计原则</a>
</li>
<li>
<a href="#toc_3">Compatibility Mode—App 没有适配会如何显示？</a>
<ul>
<li>
<a href="#toc_4">全屏显示</a>
</li>
<li>
<a href="#toc_5">Split View</a>
</li>
<li>
<a href="#toc_6">Slide Over</a>
</li>
<li>
<a href="#toc_7">只为 iPhone 而设计的 app</a>
</li>
<li>
<a href="#toc_8">总结</a>
</li>
</ul>
</li>
<li>
<a href="#toc_9">适配常见问题</a>
<ul>
<li>
<a href="#toc_10">示例一：由自定义 Tab Bar 引出的问题</a>
</li>
<li>
<a href="#toc_11">示例二：完全自定义 UI 的全屏游戏</a>
</li>
</ul>
</li>
<li>
<a href="#toc_12">Apple Pencil 新功能的设计原则</a>
</li>
<li>
<a href="#toc_13">Read More</a>
<ul>
<li>
<a href="#toc_14">Apple 官方</a>
</li>
<li>
<a href="#toc_15">非官方</a>
</li>
</ul>
</li>
</ul>


<h2 id="toc_1">屏幕尺寸的变化</h2>

<ul>
<li><p>全新的 iPad Pro 11″ 与 iPad Pro 10.5″ 相比，在去除了 Home 键之后，将上下边框（竖屏模式下）缩小，而机身尺寸几乎变化不大，故屏幕由原来的 10.5 寸增大为 11 寸。因此 iPad Pro 11″ 在横屏模式下的屏幕高度与 iPad Pro 10.5″ 是相同的，但在横屏模式下的屏幕宽度比  iPad Pro 10.5″ 多出了 82pt @2x，即横屏模式下 iPad Pro 11″ 为 1194 × 834pt @2x，iPad Pro 10.5″ 为 1112 × 834pt @2x。</p></li>
<li><p>全新的 iPad Pro 12.9″ 与第二代 iPad Pro 12.9″ 相比，在去除了 Home 键并缩小了上下边框（竖屏模式下）后，整体机身尺寸变小一圈，使得屏幕仍保持 12.9 寸不变。因此第三代 iPad Pro 12.9″ 和前两代的 iPad Pro 12.9″ 的屏幕显示宽度、高度完全一致，即横屏模式下 1366 × 1024pt @2x。</p></li>
</ul>

<p><img src="media/15416976044741/67162CE4-3789-4CBE-B020-67DE1F8FA5A8.png" alt="67162CE4-3789-4CBE-B020-67DE1F8FA5A8"/></p>

<ul>
<li>有人可能会产生疑惑：同是新一代的 iPad Pro，为什么 11 寸的和 12.9 寸的相比上一代的变化方式不同？一个增大屏幕、保持机身尺寸几乎不变；一个保持屏幕尺寸不变、减小机身尺寸。如果新的小尺寸的 iPad Pro 仍然保持 10.5 寸屏幕、减小机身尺寸，iPad 分辨率的变种不就更少、适配不就更简单？一个个人感觉靠谱的说法：iPad Pro 的定位是注重生产力的个人电脑，Smart Keyboard 是其重要的一个配件，不可或缺，如果机身尺寸在上一代的基础上进一步缩小，那就会导致全尺寸的 Smart Keyboard 的按键设计出现问题。所以基于此，Apple 不会再减小 iPad Pro 的机身尺寸，自然只能扩大屏幕尺寸。</li>
</ul>

<h2 id="toc_2">App 的适配与设计原则</h2>

<p>全新的 iPad Pro 的屏幕与 iPhone Xs 一样是四个圆角，所以在设计 app 时，应该避免重要的信息或控件出现在四个角落，以免被圆角遮挡或切割。像 Status Bar、Navigation Bar、Tab Bar、Tool Bar 这些会覆盖到边角的标准控件，应该被自动且正确地放置。</p>

<p><img src="media/15416976044741/ED039BBE-40FF-438D-A43F-9BAAC784EF3A.png" alt="ED039BBE-40FF-438D-A43F-9BAAC784EF3A"/></p>

<p>为了让你的 app 在全新的 iPad Pro 上完美地呈现，你需要在设计 app 时遵守下面三个原则：</p>

<ul>
<li><p><strong>使用安全区域布局规范（Safe Area Layout Guides）阻止界面元素被屏幕圆角切割或者被 Home Indicator 遮挡。</strong></p>
<ul>
<li><p>在屏幕上没有其他控件时，安全区域几乎覆盖整个屏幕，在横屏和竖屏模式下，需要在底部留出 20pt 高度的区域给 Home Indicator，以防内容被 Home Indicator 遮挡。</p>
<p><img src="media/15416976044741/AA38670A-D8C0-4759-A5FB-FFAE16FB66F8.png" alt="AA38670A-D8C0-4759-A5FB-FFAE16FB66F8"/></p></li>
<li><p>不要尝试在 Home Indicator 周围放置控件、元素，虽然在全屏模式下，Home Indicator 是位于屏幕底部中央位置的，但在 Split View 中，Home Indicator 的位置会跟随 app 发生变化。如果有内容放置在 Home Indicator 两边就可能会被遮挡。</p>
<p><img src="media/15416976044741/52F6C707-BEDA-4663-9EFC-68573F451383.png" alt="52F6C707-BEDA-4663-9EFC-68573F451383"/></p></li>
<li><p>当界面中显示 Status Bar 时，Status Bar 的高度是 24pt，而不是 iPhone 或者前几代 iPad 上的 20pt。</p>
<p><img src="media/15416976044741/73F8EA5A-E64A-41B3-98C1-7BE2AB92DB05.png" alt="73F8EA5A-E64A-41B3-98C1-7BE2AB92DB05"/></p></li>
<li><p>特别提示，在 Slide Over 模式中，app 的安全区域完全充满 app 的可显示区域，安全区域到顶部和底部的距离均为 0pt。 </p>
<p><img src="media/15416976044741/FE0AAB89-583B-46CA-AAD0-363DD002F92C.png" alt="FE0AAB89-583B-46CA-AAD0-363DD002F92"/></p></li>
<li><p>在界面中有 Navigation Bar、Tab Bar 或者 Tool Bar 时，不管屏幕方向是横向还是纵向，安全区域到左右两侧的距离均为 0pt。这不同于 iPhone Xs，在横向屏幕时，因为刘海的缘故，需要在左右两侧留出对称相等的安全距离。</p>
<p><img src="media/15416976044741/71D19712-586A-40B0-BA80-293F2C31BFF3.png" alt="71D19712-586A-40B0-BA80-293F2C31BFF3"/></p></li>
</ul></li>
<li><p><strong>使用布局边界（Layout Margins）从屏幕左端到屏幕右端插入内容。</strong></p>
<ul>
<li><p>布局边界在内容之间、屏幕的左右边缘提供了可以呼吸的空间，也有利于内容与 Status Bar、Navigation Bar、Tab Bar、Status Bar 上的内容相对齐。同时布局边界也使得内容不会滚动到屏幕边缘的圆角中去。</p>
<p><img src="media/15416976044741/87E608E5-598A-44F5-98A5-631F7A8CF886.png" alt="87E608E5-598A-44F5-98A5-631F7A8CF886"/></p></li>
<li><p>布局边界的宽度是由设备的 Size Class 来决定的。在 Regular 普通模式（如iPad Pro 11″ 横屏模式）下，布局边界的宽度是 20pt；在 Compact 紧凑模式（如 iPhone Xs 竖屏模式）下，布局边界的宽度是 16pt。有关于 Size Class 的更多细节可以阅读我的另一篇文章：<a href="15171487371271.html">尺寸级别和核心要素 Size Classes and Core Components - WWDC 2017 Session 812</a></p>
<p><img src="media/15416976044741/CD25F2B3-A2CD-40DC-A63A-D23796C9202B.png" alt="CD25F2B3-A2CD-40DC-A63A-D23796C9202B"/></p></li>
</ul></li>
<li><p><strong>要考虑到多种不同的屏幕比率。</strong></p>
<ul>
<li><p>所有之前的 iPad 的屏幕比率是 4:3，iPad Pro 11″ 有着更宽的屏幕比率。</p>
<p><img src="media/15416976044741/ABF2E500-6E6E-4985-BDCB-BC9B44AF9B6E.png" alt="ABF2E500-6E6E-4985-BDCB-BC9B44AF9B6E"/></p></li>
<li><p>例如，一个游戏只为 4:3 比率而设计，那么在横屏模式下的 iPad Pro 11″ 上显示时，左右两侧就会出现黑条，或者当 app 充满屏幕显示时，上下两侧的内容就会被切掉。所以要特别注意那些独立的界面元素的位置和大小。</p>
<p><img src="media/15416976044741/3C2337B8-C3B5-423C-B863-6497ABB8CA3E.png" alt="3C2337B8-C3B5-423C-B863-6497ABB8CA3E"/></p></li>
</ul></li>
</ul>

<h2 id="toc_3">Compatibility Mode—App 没有适配会如何显示？</h2>

<p>不同于 iPhone Xs、iPhone Xs Max 在屏幕尺寸发生变化时基本上只需要考虑竖屏和横屏两种情况，iPad Pro 在屏幕尺寸发生变化时不仅需要考虑 app 全屏时在竖屏和横屏的适配显示方式，还需要考虑 app 在 Slide Over、Spit View 模式下的适配显示方式。<br/>
以下主要以 iPad Pro 11″ 为例说明在各种不同的情况下，未适配的 app 会如何在新款 iPad Pro 上显示。请注意，探究 app 最后的显示结果是次要的，重要的是为什么 app 会那样显示，以此来深入了解、思考当硬件屏幕尺寸发生变化时，原有的 app 如何兼容、新的 app 如何与旧的 app 共存？进一步可展望未来新硬件设备尺寸的可能性和兼容旧 app 的大原则、大方向。</p>

<p><strong>图例说明</strong></p>

<ul>
<li>蓝色表示已经适配了新 iPad Pro 的应用的实际显示区域，红色表示已经适配了新 iPad Pro 的另一个应用的实际显示区域（如有）。</li>
<li>黄色表示未适配新 iPad Pro 的应用的实际显示区域，绿色表示未适配新 iPad Pro 的另一个应用的实际显示区域（如有）。</li>
<li>黑色表示 app 运行时不能被利用的区域，通常会显示状态栏 Status Bar、Home Indicator 或黑边等。</li>
<li>为了更好地区分屏幕边框和屏幕显示区域，特将示意图中的 iPad 黑色边框修改为了白色。</li>
<li>以下示意图中的尺寸、比例虽与实际情况接近，但不足够精确，仅供参考。</li>
</ul>

<p>在分不同的情况观察未适配的 app 如何显示之前，需要先将 iPad 上的 app 分为三类。发布在 App Store 中的 app 有的是专门为 iPad 设计的，有的并没有，只为 iPhone 进行了设计，但可以下载运行在 iPad 上。而专门为 iPad 设计的这类应用中，一部分应用支持 Split View、Slide Over 功能，常见的如「微信」、「微博」，这类 app 因为支持这种功能所以其布局会根据屏幕分配的显示区域大小动态变化；另一部分应用则不支持 Split View、Slide Over 功能（这类 app 在 <code>Info.plist</code> 文件中将 <code>UIRequiresFullScreen</code> 属性设置为了 <code>YES</code>），常见的如「腾讯视频」、「淘宝」、大部分游戏，它们不支持这种功能因此 app 的布局是固定的。因此分出的三类分别是：</p>

<ol>
<li>专门为 iPad 而设计但不支持 Split View、Slide Over 功能的 app；</li>
<li>专门为 iPad 而设计且支持 Split View、Slide Over 功能的 app；</li>
<li>只为 iPhone 而设计但可以运行在 iPad 上的 app。</li>
</ol>

<p>这三类重点来关注前两类。</p>

<h3 id="toc_4">全屏显示</h3>

<p>已经适配全新 iPad Pro 的 app 的显示区域自然可以完全充满屏幕。在屏幕的顶端一般会显示状态栏 Status Bar，底部一般会显示 Home Indicator。<br/>
对于一个未适配的 app来说，其在开发时，圆角屏幕和 Home Indicator 是不存在的。所以当显示在全新的 iPad Pro 上时，必须要留出空间。在横屏模式下的 iPad Pro 11″ 上，一个未适配且不支持 Split View 功能的 app 由于其布局尺寸是固定的，所以其必须保持 4:3 的显示比例，又需要在顶部为 Status Bar 和在底部为 Home Indicator 留出空间，综上其显示时上、下、左、右都是有黑边的。而对于一个未适配但支持 Split View 功能的 app 由于可以自动调整布局尺寸，所以其显示比例是灵活的。只需要为 Status Bar 和 Home Indicator 留出空间，即只有上、下有黑边。</p>

<p><img src="media/15416976044741/5F195401-FC52-4719-9103-B8198DED3DB9.png" alt="5F195401-FC52-4719-9103-B8198DED3DB9"/></p>

<p>同理，在竖屏模式下的 iPad Pro 11″ 上，一个未适配且不支持 Split View 功能的 app 显示比例仍旧保持 4:3，其实际显示区域和 iPad Pro 10.5″ 是一样的，但在上、下留有黑边。而对于一个未适配但支持 Split View 功能的 app 由于比例灵活，其实际显示区域大于 iPad Pro 10.5″，上、下的黑边比前述情况更小一些。</p>

<p><img src="media/15416976044741/EE824C4F-2218-457D-8D0B-AAF7F2563308.png" alt="EE824C4F-2218-457D-8D0B-AAF7F2563308"/></p>

<p>iPad Pro 12.9″ 与前两代屏幕分辨率完全相同，于是很多人想当然的认为 app 就有什么需要适配的。然而由于圆角屏幕和 Home Indicator 的引入，app 仍然需要做一些适配工作。<br/>
在横屏模式下的 iPad Pro 12.9″ 上，一个未适配且不支持 Split View 功能的 app，显示时保持比例 4:3，其上、下、左、右均有黑边，但相比同情况下的 iPad Pro 11″，左右两侧的黑边宽度看上去更小一些。在竖屏模式下的 iPad Pro 12.9″ 上，一个未适配且不支持 Split View 功能的 app 由于要保持 4:3 的显示比例且上、下需要留出空间，所以其左、右两侧会空出，即其上、下、左、右均有黑边。</p>

<p><img src="media/15416976044741/63894588-8DC1-406F-B2F9-D5B114C2C307.png" alt="63894588-8DC1-406F-B2F9-D5B114C2C307"/></p>

<p>虽然现在已经是 iPad Pro 11″ 和 iPad Pro 12.9″（第三代）的时代了，iPad Pro 10.5″ 已经成为了历史。但仍旧有许多 app 没有适配 iPad Pro 10.5″ 和 iPad Pro 12.9″，只适配了 iPad 9.7″。这种应用在 iPad Pro 11″ 和 iPad Pro 12.9″ 上显示时不仅会出现上述的黑边情况，还会在 iPad 9.7″ 基础上直接放大到对应尺寸，由此造成的结果就是 app 显示看上去有点糊或者说字号看上去都很大或者说 app 显示的内容比正常情况少。</p>

<h3 id="toc_5">Split View</h3>

<p>在 Split View 显示模式下，两个 app 可以以 1:1 或者 2:1 的方式并排显示，实现多任务处理。两个已经适配全新 iPad Pro 的 app 进行 Split View 时，app 均能充满其分配的显示区域。在屏幕的顶端一般会显示状态栏 Status Bar，底部一般会显示 Home Indicator，两个 app 之间会显示控制 app 显示方式的控制条。<br/>
在此指出 iOS 12 和新设备引入的两个小变化：</p>

<ul>
<li>自 iOS 12 开始，Apple 取消了在竖屏模式下的 1/2 Split View 这种显示模式，猜测可能是因为在此模式下两个 app 的显示宽度比较窄，功能使用比较受限，所以被取消。当处于横屏下 1/2 Split View 显示模式时，此时将设备竖屏会自动切换到 1/3 Split View 显示模式。</li>
<li>由于 iPad Pro 11″ 的宽度（横屏模式下）比上一代进一步增加，所以在横屏下的 1/3 Split View 显示模式时，较窄的 app 的宽度由 320pt（iPhone SE、iPhone 4s 相同宽度） 增加到了 375pt（iPhone 8、iPhone Xs 相同宽度），与 iPad Pro 12.9″ 同样情况下的宽度相等。</li>
</ul>

<p>不管是横屏还是竖屏，未适配的 app 在显示时需要为 Status Bar 和 Home Indicator 留出空间，所以在 1/2 Split View 和 1/3 Split View 时上、下均有黑边。<br/>
特别注意的是，若一个已适配的 app 和另一个没有适配的 app 进行 Split View 时，两个 app 都会被当做没有适配，即上、下有黑边，以此作兼容性处理。</p>

<p><img src="media/15416976044741/97419587-D98C-45C6-A9C3-A6ED7516A5FC.png" alt="97419587-D98C-45C6-A9C3-A6ED7516A5F"/></p>

<h3 id="toc_6">Slide Over</h3>

<p>在 Slide Over 显示模式下，一个全屏显示的 app 或者两个进行 Split View 的 app 之外，可以打开另一个 app 附在其他 app 之上进行操作，不需要时可以滑出屏幕隐藏，继续在之前的 app 上操作。这个功能对于需要临时查看、参考的 app 很有用。已经适配全新 iPad Pro 的 app 进行 Slide Over 时，app 可以充满其分配的显示区域，并浮在其他 app 之上，上、下、右都会留出一个 Status Bar 的高度/宽度（24pt）。<br/>
同样的，由于 iPad Pro 11″ 的宽度（横屏模式下）的增加，横屏下进行 Slide Over 的 app 的宽度也由 320pt（iPhone SE、iPhone 4s 相同宽度） 增加到了 375pt（iPhone 8、iPhone Xs 相同宽度），与 iPad Pro 12.9″ 同样情况下的宽度相等。</p>

<p>不管是横屏还是竖屏，未适配的 app 在进行 Slide Over 时，app 均可以充满被分配的显示区域。但在实际情况下，与已适配的 app 对比，还是可能会有一些细节上的不同。例如，Tab Bar/Tool Bar 的高度在未适配的 app 中是 50pt，而在已适配的 app 中是 70pt，增加的 20pt 即是 Home Indicator 的高度。</p>

<p><img src="media/15416976044741/FC793C5B-154B-42D1-B4B1-25CE03E965AE.png" alt="FC793C5B-154B-42D1-B4B1-25CE03E965AE"/></p>

<h3 id="toc_7">只为 iPhone 而设计的 app</h3>

<p>在 iOS 12 之前，那些只为 iPhone 而设计的 app 运行在 iPad 上时，会以 iPhone 4s 的屏幕尺寸 320pt × 480pt 显示，可以等比例放大显示。可想而知，在如今这个大屏时代，其显示效果真是又窄又矮。<br/>
在 iOS 12 中，Apple 终于更改了这个显示尺寸，这样的 app 会以 iPhone 8 的屏幕尺寸 375pt × 667pt 显示，可以等比例放大显示。自然的，无论放大与否，app 的四周均有黑边，毕竟这些 app 不是为 iPad 而设计的。</p>

<p><img src="media/15416976044741/3AC1E889-075C-4F65-9C53-9079CEEFD0FD.png" alt="3AC1E889-075C-4F65-9C53-9079CEEFD0FD"/></p>

<h3 id="toc_8">总结</h3>

<p>从各种情况的不适配 app 的显示结果来看，全新 iPad Pro 对原有 app 的兼容显示原则并不像从 iPhone 7 → iPhone X 时那样简单明了，app 的显示尺寸也不一定是与老设备的显示尺寸完全一致，需要考虑 iPad 特有的多种不同的显示模式、屏幕方向、app 显示比例的变化、新的屏幕元素（圆角和 Home Indicator ）的引入、已适配 app 和未适配 app 的共存等诸多因素，综合这些来确定一个合适的最终方案。</p>

<p>从发布 iPhone Xs Max 之后来看，由于 iPhone Xs Max 上的 app 显示时会直接放大 iPhone X 版本的 app 到全屏，不存在黑边，看上去问题没有那么严重，因此 app 的开发者/开发厂商对于适配 iPhone Xs Max 的积极性并不高或者说推进速度并不块，例如「微信」在 iPhone Xs Max 发布今近两月后仍没有适配。而对于全新的 iPad Pro 来说，iPad 的 app 市场远小于 iPhone app 市场，许多厂商在考虑缩减成本的情况下，将 iPad 版本直接做成了 iPhone 版本的放大版甚至完全停止更新或取消 iPad 版本。这是一个不好的信号，可想而知，全新 iPad Pro 的 app 的适配推进速度也不会很快。<br/>
Apple 肯定也意识到了 iPad app 生态的这些问题，这两年更加坚定和清晰地将 iPad 分为了高低端两档产品，低端维持原有的娱乐属性，高端大幅向提高生产力、创造力方向改进，并从近期和远期推出两项改进计划：</p>

<ol>
<li>近期：Apple 已经发出<a href="https://developer.apple.com/ios/submit/">通知</a>，自 2019 年 3 月开始，所有更新提交的 app 或新上架的 app 都需要使用 Xcode 10.1/iOS 12.1 SDK 或以上版本来编译，即需要更新适配最新的 iPhone、iPad 机型。</li>
<li>远期：Apple 在 WWDC 2018 上宣布，从 2019 年晚些时候开始，iOS 平台上的 app 可以通过 UIKit 等底层框架的适配和调整直接借鉴到 macOS app 中去，以减少分别开发两个平台 app 的成本。macOS 10.14 中的「Stocks 股市」、「News 新闻」、「Voice Memos 语音备忘录」、「Home 家庭」app 即是这项技术的一个示例。</li>
</ol>

<p>希望随着 Apple 对 iPad 的定位更加清晰，可以吸引更多的生产力、创造力 app 开发者入场，使得 iPad app 市场死灰复燃，真正可以说出「用 iPad Pro 取代电脑」这句话。那时的 iPad Pro 和电脑市场到底会是怎样的呢？值得期待。</p>

<h2 id="toc_9">适配常见问题</h2>

<h3 id="toc_10">示例一：由自定义 Tab Bar 引出的问题</h3>

<ul>
<li>下面这个 app 在 iPad Pro 10.5″ 上运行时没有任何问题，但在 iPad Pro 11″ 上运行时，底部的 Tab Bar 会和 Home Indicator 重叠在一起。</li>
<li>造成这个问题的一个原因是底部的 Tab Bar 看上去是标准的 Tab Bar，但实际上是自定义的 Tab Bar，并没有服从 Safe Area 的布局规范；另一个可能的原因是 app 在开发时并没有使用 Storyboard 而是通过 API 去定义了屏幕边界。</li>
<li>解决这个问题的方法很简单：在开发时使用 Storyboard 以及符合 Safe Area 的布局规范，以及尽可能地使用原生的 UI 控件。</li>
</ul>

<p><img src="media/15416976044741/8974FE24-E0EA-4F45-B685-4119F4FF985C.png" alt="8974FE24-E0EA-4F45-B685-4119F4FF985"/></p>

<h3 id="toc_11">示例二：完全自定义 UI 的全屏游戏</h3>

<ul>
<li>下面这个 app 是完全自定义 UI 元素的一个全屏游戏，在 iPad Pro 10.5″ 上运行也没有任何问题，但运行在 iPad Pro 11″ 上会发现，上部和顶部的元素被切掉了，而且四个角落里的按钮离屏幕圆角太近了以致于不能完全显示出来。</li>
<li>造成这个问题的一个原因是游戏 app 在开发时假设了屏幕的比率固定为 4:3，然而这对于 iPad Pro 11″ 来说并不再符合。</li>
<li> 需要在设计时就考虑到可变的屏幕比率，特别注意新的 iPad 的四个圆角。并且在开发时使用 Safe Area 布局规范，不要让按钮和控件超出安全区域。特别在游戏中，要注意游戏的手势或控件要远离 Home Indicator。</li>
</ul>

<p><img src="media/15416976044741/5B22AD48-B1A2-4A09-B75D-03FC2E2ABF11.png" alt="5B22AD48-B1A2-4A09-B75D-03FC2E2ABF11"/></p>

<h2 id="toc_12">Apple Pencil 新功能的设计原则</h2>

<p><img src="media/15416976044741/A33D261C-522D-4423-B4BD-50851B7744FE.png" alt="A33D261C-522D-4423-B4BD-50851B7744FE"/></p>

<ul>
<li>第二代 Apple Pencil 在笔身上增加了一个双击手势。用户可以在系统设置中为双击手势选定一个固定操作，这也给用户在使用各个 app 时提供了连贯一致的、可预测的使用体验。用户可以在以下几种选项中选择双击手势的操作：
<ul>
<li>在当前选择的工具和橡皮擦之间切换；</li>
<li>在当前选择的工具和上次使用的工具之间切换；</li>
<li>展示一个调色板；</li>
<li>关闭双击手势功能。</li>
</ul></li>
</ul>

<p><img src="media/15416976044741/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-11-06%20%E4%B8%8A%E5%8D%8812.41.04.png" alt="屏幕快照 2018-11-06 上午12.41.04"/></p>

<ul>
<li><p>为了在 app 中提供不同功能的 Apple Pencil 双击操作手势，你需要遵守下面几个原则：</p>
<ul>
<li><p>如果在系统设置中用户关闭了双击操作手势，app 就不应该响应用户在 Apple Pencil 上的双击操作手势。</p>
<p><img src="media/15416976044741/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-11-06%20%E4%B8%8A%E5%8D%8812.41.27.png" alt="屏幕快照 2018-11-06 上午12.41.27"/></p></li>
<li><p>在任何可能的时候，都要遵守系统的设置。在你的 app 中如果存在多种不同的笔功能、橡皮擦功能、调色板功能，但却并没有遵守双击操作手势对应功能的系统设置，这种不一致、不连贯的操作会让你的 app 变得不直观，特别是在配合其他支持 Apple Pencil 的 app 进行多任务操作时尤为明显。</p>
<p><img src="media/15416976044741/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-11-06%20%E4%B8%8A%E5%8D%8812.41.45.png" alt="屏幕快照 2018-11-06 上午12.41.45"/></p></li>
<li><p>如果在你的 app 中，需要针对双击手势提供不同于系统设置中的功能，确保让这个自定义的行为默认保持关闭。在用户明确需要的时候，由用户主动开启，以让 app 中的自定义功能覆盖系统层级中设定的功能。这样也防止了用户在使用你的 app 时发现其行为与其他 app 不一致。</p>
<p><img src="media/15416976044741/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-11-06%20%E4%B8%8A%E5%8D%8812.42.27.png" alt="屏幕快照 2018-11-06 上午12.42.27"/></p></li>
<li><p>如果你的 app 支持 Apple Pencil，但并不支持或不完全支持在系统设置中提到的几个双击手势功能，你可以尽可能地将相似含义的功能映射到 Apple Pencil 的双击手势上，以保持连贯一致。例如在一个照片类 app 中，Apple Pencil 的双击手势可以在两种不同的滤镜模式中切换。不要让 Apple Pencil 的双击手势执行直接修改内容的操作以防止出现严重的操作失误，因为双击手势这个操作很容易误操作。</p></li>
<li><p>不管 Apple Pencil 的双击手势在你的 app 中对应什么操作，确保总是给用户提供有关于 Apple Pencil 双击后发生了什么的清晰、及时的视觉反馈，这样用户可以及时感知到 app 的行为发生了变化，如果是误操作可以及时恢复。</p></li>
<li><p>要向第一代、第二代 Apple Pencil 的用户都提供一份绝佳的使用体验。Apple Pencil 双击手势所提供的功能应该是用户在 app 中某个功能的快捷方式，而不是在 app 的界面中找不到的功能。</p></li>
</ul></li>
</ul>

<h2 id="toc_13">Read More</h2>

<h3 id="toc_14">Apple 官方</h3>

<ul>
<li><a href="https://developer.apple.com/design/human-interface-guidelines/ios/visual-design/adaptivity-and-layout/#auto-layout">Adaptivity and Layout - Visual Design - iOS - Human Interface Guidelines - Apple Developer</a></li>
<li><a href="https://developer.apple.com/design/human-interface-guidelines/ios/icons-and-images/image-size-and-resolution/">Image Size and Resolution - Icons and Images - iOS - Human Interface Guidelines - Apple Developer</a></li>
<li><a href="https://developer.apple.com/design/human-interface-guidelines/ios/icons-and-images/launch-screen/">Launch Screen - Icons and Images - iOS - Human Interface Guidelines - Apple Developer</a></li>
<li><a href="https://developer.apple.com/design/human-interface-guidelines/ios/system-capabilities/multitasking/">Multitasking - System Capabilities - iOS - Human Interface Guidelines - Apple Developer</a></li>
<li><a href="https://developer.apple.com/ipad/">Developing iPad Apps - Apple Developer</a></li>
<li><a href="https://developer.apple.com/videos/play/tech-talks/804/">Designing for iPad Pro and Apple Pencil - Tech Talks - Videos - Apple Developer</a></li>
<li><a href="https://developer.apple.com/videos/play/tech-talks/209/">Bringing Your Apps to the New iPad Pro - Tech Talks - Videos - Apple Developer</a></li>
</ul>

<h3 id="toc_15">非官方</h3>

<ul>
<li> <a href="https://medium.com/@hacknicity/how-ipad-apps-adapt-to-the-new-11-and-12-9-ipads-pro-cabd1c0e5f20">How iPad Apps Adapt to the New 11” and 12.9” iPads Pro</a></li>
</ul>

<blockquote>
<p>如果你觉得这篇文章对你有所帮助，欢迎请我喝杯咖啡，感谢你的支持😁</p>

<p><img src="media/14625521742746/15088240400740.jpg" alt=""/></p>
</blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Designing For iPhone Xs、iPhone Xs Max、iPhone Xʀ — 比大还大，更大的刘海屏 iPhone 来了]]></title>
    <link href="https://steppark.net/15433010141111.html"/>
    <updated>2018-11-27T14:43:34+08:00</updated>
    <id>https://steppark.net/15433010141111.html</id>
    <content type="html"><![CDATA[
<p>在人民群众的热切期盼下，比 iPhone X 更大、刘海屏版的 iPhone 8 Plus —— iPhone Xs Max 终于在 2018 年 9 月苹果秋季发布上发布，一同发布的还有升级版的 iPhone X —— iPhone Xs 和看似低配实则仍然很贵的 iPhone Xʀ。正如<a href="15086036845015.html#toc_16">去年文章中推测</a>的一样，iPhone Xs Max 的分辨率是在 iPhone 8 Plus 的基础上保持宽不变高拉长的规律且保持与 iPhone X 一致的屏幕比例，即为 1242px × 2689px。那设计、适配运行在 iPhone Xs Max 上以及 iPhone Xʀ 上的 app 又有什么需要注意的呢？这就是本篇文章想要探讨的主题。</p>

<span id="more"></span><!-- more -->

<blockquote>
<p>iPhone Xs Max、iPhone Xs 广告：</p>

<iframe width="560" height="315" src="https://www.youtube.com/embed/uJkOP1-v9B4" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

<p>iPhone Xʀ 广告：</p>

<iframe width="560" height="315" src="https://www.youtube.com/embed/tG7vx7-3sl0" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
</blockquote>

<ul>
<li><strong>Note:</strong></li>
</ul>

<blockquote>
<p>在进一步阅读此文章前，推荐先阅读这篇文章的姊妹篇，看看初代刘海屏手机上 app 的那些设计和开发问题，再来更好地理解全新 iPhone 的变化：  </p>

<ul>
<li><a href="https://steppark.net/15086036845015.html">Designing For iPhone X —— iPhone 上有了刘海，设计和开发到底该咋整?</a><br/></li>
</ul>

<p>2018 年 10 月苹果秋季发布会上，iPad 也与 Home 实体键说再见了，想了解全新 iPad Pro 的更多设计和适配细节，推荐阅读下面这篇文章：  </p>

<ul>
<li><a href="https://steppark.net/15416976044741.html">Designing For New iPad Pro and Apple Pencil — 适配没有刘海的 iPad Pro 与有刘海的 iPhone Xs 有什么不同?</a><br/></li>
</ul>
</blockquote>

<h2 id="toc_0">屏幕尺寸的变化</h2>

<ul>
<li>iPhone Xs 的屏幕尺寸以及屏幕分辨率与上一代的 iPhone X 没有任何区别，仍然是 375 × 812pt @2x。</li>
<li>iPhone Xs Max 的屏幕尺寸是 6.5 寸，其屏幕分辨率是在 iPhone 8 Plus 的基础上保持宽不变高拉长，即 414 × 896pt @3x。其比例因子与 iPhone 8 Plus 一样，同是 @3x。</li>
<li>对于 6.1 寸的 iPhone Xʀ，其屏幕分辨率是 414 × 896pt @2x，和 iPhone Xs Max 不同的是其比例因子为 @2x，但它们以 pt 为单位的屏幕分辨率是完全一样的，这就意味着在这两款设备上运行相同的 app，看到的内容是完全一致的。</li>
<li>新发布的三款 iPhone 设备的屏幕比例都大约为 9:19.5。</li>
</ul>

<p><img src="media/15433010141111/5AA815C9-BF65-408C-BE39-6C1363922A04.png" alt="5AA815C9-BF65-408C-BE39-6C1363922A04"/><br/>
<em>注：iPhone 8 Plus 物理设备的屏幕在渲染时是在上述屏幕分辨率基础上进一步进行了缩放，实际屏幕物理分辨率为 1080px × 1920px。</em></p>

<ul>
<li>Size Class 方面，由于 iPhone Xs Max 和 iPhone Xʀ 是由 iPhone 8 Plus 衍化而来，所以其在横屏和竖屏时的 Size Class 与 iPhone 8 Plus 保持一致，具体可以参见下表。</li>
<li>特别的，在横屏条件下，iPhone Xs Max 和 iPhone Xʀ 的 Size Class 均为「Regular width，Compact height」，与 iPhone Xs 横屏的 Size Class「Compact width，Compact height」相比，更宽的宽度可以显示更多的内容，例如 Split View 可以同时显示 Master View 与 Detail View。</li>
<li>有关于 Size Class 的更多细节可以阅读我的另一篇文章：<a href="15171487371271.html">Size Classes and Core Components - WWDC 2017 Session 812</a></li>
</ul>

<p><img src="media/15433010141111/D92ABA2D-810A-4DF5-B386-F38C9F37B85E.png" alt="D92ABA2D-810A-4DF5-B386-F38C9F37B85E"/></p>

<h2 id="toc_1">未适配 app 在新 iPhone 上的显示</h2>

<ul>
<li>由于 iPhone Xs 与 iPhone X 的屏幕分辨率、屏幕尺寸完全一致，那如果已经适配了 iPhone X 的 app 自然可以在 iPhone Xs 上正常显示。</li>
<li><p>对于相同屏幕分辨率（以 pt 为单位）的 iPhone Xs Max 与 iPhone Xʀ 来说，由于它们与 iPhone X 的屏幕比例一样，所以运行在这两款新 iPhone 上的未适配 app 会直接通过放大拉伸 iPhone X 版本的 app 到全屏幕的方式来显示。这时，与 iPhone X 上显示的内容是完全一致的，但由于是整体放大显示，与 iPhone X 屏幕上的 app 显示相比仔细看会有些模糊。</p>
<p><img src="media/15433010141111/FE5B0516-B29C-4DFF-810B-AB58145C6EC9.png" alt="FE5B0516-B29C-4DFF-810B-AB58145C6E"/><br/>
图片来源：<a href="https://medium.com/@hacknicity/how-ios-apps-adapt-to-the-iphone-xs-max-and-iphone-iPhone%20X%CA%80-screen-sizes-f4c1f2d4eec2">How iOS Apps Adapt to the iPhone Xs Max and iPhone Xʀ Screen Sizes</a></p></li>
</ul>

<h2 id="toc_2">改进和改变</h2>

<h3 id="toc_3">自动布局 Auto Layout 性能的改善</h3>

<ul>
<li><p>Auto Layout 在 iOS 12 中的性能得到了大幅提升，推荐在开发 app 甚至设计 app 时就通过 Auto Layout 的方法进行思考，这将十分有利于以后新机型的适配，更加直观的同时减少适配工作量。下图中灰色表示 Auto Layout 在 iOS 11 中的表现，蓝色表示在 iOS 12 中的表现。</p>
<p><img src="media/15433010141111/40E38F4A-9429-48A9-9681-6DE2A666B06A.png" alt="40E38F4A-9429-48A9-9681-6DE2A666B06A"/></p></li>
</ul>

<h3 id="toc_4">Split View Controller 在 iPhone Xs Max 和 iPhone Xʀ 上的行为变化</h3>

<ul>
<li><p>由于屏幕宽度（横屏下）的进一步拉长，在横屏时，iPhone Xs Max、iPhone Xʀ 默认情况下显示的 Split View 与 iPhone 8 Plus 有稍许的不同。</p>
<ul>
<li>虽然这几款设备在横屏时的 Size Class 都为「Regular width，Compact height」，但在默认情况下显示 Split View 时，iPhone 8 Plus 会默认左右并排显示 Master View 和 Detail View，用户若有需要可以手动放大 Detail View 到全屏，其 Master View 的 Size Class 为「Compact width，Compact height」，Detail View 的 Size Class 为「Regular width，Compact height」。</li>
<li>而在 iPhone Xs Max 和 iPhone Xʀ 上，会像「邮件」应用在竖屏 iPad 上一样，默认全屏显示 Detail View，需要显示 Master View 时可以通过导航栏上的按钮或在屏幕左侧右滑呼出，Master View 的显示方式是直接覆盖住 Detail View 的一部分显示，而不是左右并排显示。此时 Master View 的 Size Class 为「Regular width，Compact height」，Detail View 的「Regular width，Compact height」也为「Regular width，Compact height」。</li>
<li>当然，开发者可以在开发时不选择这种默认显示模式，而选择与 iPhone 8 Plus 上一样的左右并排显示模式。</li>
</ul>
<p><img src="media/15433010141111/F6BB8A5B-5ED1-424C-8C99-75DCD1A871B8.png" alt="F6BB8A5B-5ED1-424C-8C99-75DCD1A871B8"/><br/>
图片来源：<a href="https://medium.com/@hacknicity/how-ios-apps-adapt-to-the-iphone-xs-max-and-iphone-iPhone%20X%CA%80-screen-sizes-f4c1f2d4eec2">How iOS Apps Adapt to the iPhone Xs Max and iPhone Xʀ Screen Sizes</a></p></li>
<li><p>代码中的实现一瞥</p>
<ul>
<li><p>默认全屏显示 Detail View，通过点击导航栏上左侧按钮或屏幕左侧右滑呼出 Master View：</p>
<p><img src="media/15433010141111/4EFB45A9-843D-4CDC-97F7-17BDBA2150DB.png" alt="4EFB45A9-843D-4CDC-97F7-17BDBA2150DB"/></p></li>
<li><p>Detail View 和 Master View 并排显示：</p>
<p><img src="media/15433010141111/D7F88015-8235-41C1-9AF6-E81B10204126.png" alt="D7F88015-8235-41C1-9AF6-E81B10204126"/></p></li>
</ul></li>
</ul>

<h2 id="toc_5">适配常见问题</h2>

<h3 id="toc_6">避免写死屏幕分辨率或根据设备机型执行指令</h3>

<ul>
<li>为某一个分辨率或某一个机型设置特例，虽然看上去很有针对性，但这反而占用了开发其他新特性的时间，后期还需要维护成本，这很大程度上是冗余的工作。</li>
<li>当代码在新的机型上运行时，可能会造成不可预知的问题，而你又不能在第一时间让用户用上新版本，这会影响用户体验。</li>
<li>你为一个分辨率、一个机型设置里特例，那之后有了新的机型、新的分辨率，还需要再做一遍这个工作，耗时耗力，无穷无尽。</li>
<li>要把这部分工作交给 UIKit 和 Auto Layout 来处理。</li>
</ul>

<h3 id="toc_7">确定某个特性在设备上的可用性的方法</h3>

<ul>
<li><p>新发布的 iPhone Xʀ 并不支持 3D Touch 功能，以「家庭 Home」app 为例，当在支持 3D Touch 功能的设备开启了 3D Touch 功能时，可以通过 3D Touch 查看智能硬件的更多选项；当在不支持 3D Touch 功能的设备上或者支持此功能但没有开启此功能时，可以通过长按来查看智能硬件的更多选项。具体代码实现方式示例如下：</p>
<ul>
<li><p>在 app 启动时检查设备是否支持某个特性，以作出相对应的处理：</p>
<p><img src="media/15433010141111/50D640F1-94EB-41FD-8EDE-2519618F9732.png" alt="50D640F1-94EB-41FD-8EDE-2519618F9732"/></p></li>
<li><p>用户可能在运行时关闭了 3D Touch，需要在运行时也检查设备某个特性的状态，以做出改变：</p>
<p><img src="media/15433010141111/06CBD00D-AD43-428D-8BCF-6FD41DAA2DF8.png" alt="06CBD00D-AD43-428D-8BCF-6FD41DAA2DF8"/></p></li>
<li><p>可以考虑使用长按手势来替代 3D Touch 的功能。</p></li>
</ul></li>
</ul>

<h2 id="toc_8">Read More</h2>

<h3 id="toc_9">Apple 官方</h3>

<ul>
<li><a href="https://developer.apple.com/design/human-interface-guidelines/ios/visual-design/adaptivity-and-layout/#auto-layout">Adaptivity and Layout - Visual Design - iOS - Human Interface Guidelines - Apple Developer</a></li>
<li><a href="https://developer.apple.com/iphone/">iPhone - Apple Developer</a></li>
<li><a href="https://developer.apple.com/videos/play/tech-talks/207">Building Apps for iPhone Xs, iPhone Xs Max, and iPhone Xʀ - Tech Talks - Videos - Apple Developer</a></li>
</ul>

<h3 id="toc_10">非官方</h3>

<ul>
<li><a href="https://www.paintcodeapp.com/news/ultimate-guide-to-iphone-resolutions">The Ultimate Guide To iPhone Resolutions</a></li>
<li><a href="https://medium.com/@hacknicity/how-ios-apps-adapt-to-the-iphone-xs-max-and-iphone-iPhone%20X%CA%80-screen-sizes-f4c1f2d4eec2">How iOS Apps Adapt to the iPhone Xs Max and iPhone Xʀ Screen Sizes</a></li>
</ul>

<blockquote>
<p>如果你觉得这篇文章对你有所帮助，欢迎请我喝杯咖啡，感谢你的支持😁</p>

<p><img src="media/14625521742746/15088240400740.jpg" alt=""/></p>
</blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Designing Fluid Interfaces 设计流畅的界面 - WWDC 2018 Session 803]]></title>
    <link href="https://steppark.net/15416957498069.html"/>
    <updated>2018-11-09T00:49:09+08:00</updated>
    <id>https://steppark.net/15416957498069.html</id>
    <content type="html"><![CDATA[
<p>在使用 iPhone X 时，用户可以通过简单直观的手势顺畅地完成回到主屏幕、查看多任务、切换 app 等操作。之所以让用户感到界面如此流畅甚至与用户的思想融为一体的界面是如何设计的？这个 session 将会带领你学习如何设计直观、自然的手势、动画，从而让用户爱上你的 app。</p>

<span id="more"></span><!-- more -->

<p><img src="media/15416957498069/2247_wide_250x141_2x.jpg" alt="2247_wide_250x141_2x" class="mw_img_center" style="display: block; clear:both; margin: 0 auto;"/></p>

<h2 id="toc_0">Interfaces that extend our minds 延伸我们思想的界面</h2>

<blockquote>
<p>Aligning interfaces to the way we think and the way we move</p>
</blockquote>

<ul>
<li>Respond to input instantly 对输入马上做出响应</li>
<li><p>Allow for constant redirection and interruption 允许持续的重新定向和打断</p>
<ul>
<li><p>如果不允许重新定向和打断，那界面的操作将是线性的，你要先思考决定要干什么再通过特定的手势完成任务。<br/>
<img src="media/15416957498069/FA964CC6-3EC4-4B9C-81D3-CCF065537F62.png" alt="FA964CC6-3EC4-4B9C-81D3-CCF065537F62"/></p></li>
<li><p>如果可以重新定向和打断，那「思考」和「手势操作」就可以同时进行，你可以将不同的单一的手势结合，组成新的手势。<br/>
<img src="media/15416957498069/75DDEA69-BA4C-4A4F-8CA9-75680B5759E2.png" alt="75DDEA69-BA4C-4A4F-8CA9-75680B5759E2"/></p></li>
<li><p>Gesture in Parallel With Thought Summary</p>
<ol>
<li>Faster than thinking before doing 比「做之前做出思考」更快</li>
<li>One gesture solves multiple problems 一个综合的手势可以解决多个不同的问题</li>
<li>Helps with discovery 有助于探索新的手势，创造 1+1&gt;2 的效果</li>
<li>Allow you to layer gestures at the speed of thought 允许你跟上思考的速度做出对应的手势</li>
</ol></li>
<li><p>Examples：</p>
<ol>
<li>Swipe home-screen pages /<em>while</em>/ going home</li>
<li>Go to multitasking /<em>while</em>/ app is launching</li>
<li>Close app /<em>while</em>/ launching app</li>
<li>Interact with app /<em>as</em>/ it launches</li>
</ol></li>
</ul></li>
<li><p><em>Summary：</em>这些事情看起来没有那么重要，但要想界面一直能够及时响应并理解你的意图这一点十分重要。要让用户感到界面是有生命的。这对于用户对界面的期待和理解以及使用的舒适度亦十分重要。</p></li>
<li><p>Maintain spatial consistency throughout movement 在移动的过程中保持空间一致性</p>
<ul>
<li>保持在移动时的空间一致性、对称性，以符合物理世界物体运动的规律。例如一个页面自右向左滑入屏幕，那返回时应该自左向右滑出屏幕。
<img src="media/15416957498069/ECD639EA-72D3-42C9-8902-ECC64975F8CC.png" alt="ECD639EA-72D3-42C9-8902-ECC64975F8C"/></li>
</ul></li>
<li><p>Hint in the direction of the gesture 在手势方向上的暗示/预测</p>
<ul>
<li>物理世界中，人们会根据规律，对物体的形态、轨迹进行预测。例如控制中心的某个功能模块会随着手指的按下弹起并逐渐变大，直至弹出完整的功能页面。
<img src="media/15416957498069/73AA81DD-4777-4730-959E-DADA6A8F3BBE.png" alt="73AA81DD-4777-4730-959E-DADA6A8F3BBE"/></li>
</ul></li>
<li><p>Keep touch interfaces lightweight, but amplify their motion 保持触摸交互轻量化，但是放大它们的动作</p>
<ul>
<li>小的投入产生大的、满意的效果；</li>
<li>short interaction：通过 position（位置）、velocity（加速度）、speed（速度）、force（力）建立手势的动量/惯性文档，继而放大动作的效果，让其感觉就是自己的延伸。例如在滚动页面时，手指只在屏幕停留了一瞬间，但系统可以保持手指手势的能量和动量，移动合适、满意的距离。
<img src="media/15416957498069/DB59CA57-9C73-4543-8B86-514552C0AD36.png" alt="DB59CA57-9C73-4543-8B86-514552C0AD36"/></li>
</ul></li>
<li><p>Softly indicate boundaries 柔和地表明边界</p>
<ul>
<li>例如在到达页面顶端和底端时，界面会柔和的提醒你，而不是戛然而止，像是碰到了一堵墙。</li>
</ul></li>
<li><p>Soft transitions 柔和地过渡</p>
<ul>
<li>从一个界面过渡到另一个界面、从一个动作过渡到另一个动作。例如在 iPad 上手指从屏幕底部向上轻扫划出 Dock，继续向上轻扫会进入多任务界面或回到首页。在这两者直接的过渡是平滑的，不是生硬的。</li>
</ul></li>
<li><p>Design smooth frames of motion 设计平滑的动作运动效果</p>
<ul>
<li>界面中物体的运动实际上是由多个帧组成，相邻的两个帧的视觉变动太大，就会造成视觉频闪，人的眼睛跟不上运动的速度。</li>
<li>在设计中重要的不是帧速率，而是帧内容。</li>
<li>几种运动效果：正常、动作模糊、动作拉伸
<img src="media/15416957498069/BDB64898-80DC-483F-A3CB-825400986D7D.png" alt="BDB64898-80DC-483F-A3CB-825400986D7D"/></li>
</ul></li>
<li><p>Work with behavior rather than animation 更多地考虑行为而不是动画</p>
<ul>
<li>物理世界中的物体是一直处于动态的，并且会受到人的影响。</li>
<li>动画和操作更像是你和物体之间的对话，而非界面的描述。不要把静态的事物转变成动态的。</li>
<li>例如，在相册中滑动照片时的阻力较小，因为这个动作是轻量化的；而通过 Home Indicator 左右滑动切换 app 时需要用到的阻力就会更大，因为我们把这个动作看得更重。</li>
</ul></li>
<li><p><em>Summary 总结：</em></p>
<ul>
<li>Instant response and constant redirection 立即地响应、连续地重定向</li>
<li>Maintain spatial consistency 保持空间一致性</li>
<li>Hint in the direction of the gesture 在手势方向上的预测</li>
<li>Lightweight interactions, amplified output 轻量化交互，放大输出</li>
<li>Soft boundaries and transitions 柔和的边界和过渡</li>
<li>Design smooth, dynamic behavior 设计平滑、动态的行为
<img src="media/15416957498069/35E6DFE8-E909-4A8A-9CEC-52A9E926134B.png" alt="35E6DFE8-E909-4A8A-9CEC-52A9E926134B"/></li>
</ul></li>
</ul>

<h2 id="toc_1">Designing with dynamic motion 动态动作的设计</h2>

<ul>
<li><p>在界面中常见的使用动态的一种形式是定时动画，只要敲击一下按钮，屏幕的控制权就完全交给了设计者。<br/>
<img src="media/15416957498069/C4E49A86-76BE-4816-9A62-9D50B5808E20.png" alt="C4E49A86-76BE-4816-9A62-9D50B5808E20"/></p></li>
<li><p>在一个流畅的界面中，动画是动态的，屏幕的控制权是属于用户的，动画应该与互动同步进行。<br/>
<img src="media/15416957498069/9D40AE03-CB51-4928-B9BC-6414EBC68811.png" alt="9D40AE03-CB51-4928-B9BC-6414EB"/></p></li>
<li><p>Seamless motion 无缝动作</p>
<blockquote>
<p>Characteristics of the physical world make great behaviors  物理世界的特征创造了完美的行为。  </p>
</blockquote>
<ul>
<li>Familiar, natural motion 熟悉的、自然的符合物理规律、人们认知的动作</li>
<li>Maintains throw momentum 保持运动的动力</li>
<li>Friction gracefully reduces speed 阻力优雅地使速度变慢</li>
<li><p>Imperceptibly comes to rest 难以觉察地趋向于静止，这种感觉不到结尾的运动会增强内容是不断运动的感觉。</p></li>
<li><p>当滚动一个页面到边缘时，页面会有一个弹性告诉用户用户已经到了页面的边缘，当用户放手时，这个弹性又会让页面渐渐回到其静息状态。</p></li>
<li><p>拿物理世界中最常见的弹簧来看，影响弹簧运动的几个因素：</p>
<ul>
<li>质量+硬度（可合称为响应时间）：可以影响弹簧的惯性、运动时间和距离等</li>
<li>阻尼：可以影响弹簧的力的衰减等。
<img src="media/15416957498069/2C9B4A83-EB8C-4AA2-B3B8-17EAC1065935.png" alt="2C9B4A83-EB8C-4AA2-B3B8-17EAC1065935"/></li>
</ul></li>
<li><p>从简单开始，最基本的动作不需要弹簧的阻尼/过冲；一个有动量的手势需要有像弹簧一样的阻尼/过冲。例如在音乐 app 中，点击 tab bar 上方的正在播放以展开「正在播放」模态页面时，这个点击动作就没有动量，不需要阻尼，但当用手指向下轻扫关闭「正在播放」模态页面时就需要一点阻尼。</p></li>
<li><p>反弹可以用来暗示：例如在 iPhone X 的锁屏上有「手电筒」和「照相机」按钮，为了避免用户在无意间点击了这两个按钮，用户需要使用更加强烈的手势（3D Touch）才能打开相应的功能。但当一个不知道如何操作的用户轻点了这两个按钮，两个按钮会使用反弹的形式告诉用户界面正在响应用户的操作，这两个按钮是可以使用的，但还需要再用力一点。</p></li>
<li><p>Think beyond motion. 思考并不仅仅是动作。</p>
<ul>
<li>在界面中，不仅仅可以通过动效来告诉用户内容是运动的，还可以通过声音、触觉、颜色等。</li>
<li>例如在一个 Data Picker 中，用户上下滑动日期，屏幕上有动画，扬声器中有声音，手机会有震动反馈，这更加让用户感受到内容的运动。</li>
</ul></li>
</ul></li>
<li><p>Crafting a character 构造一个特征</p>
<ul>
<li>任何一个动作都不应该是独立的，而应该是置于整体考虑的，应该是在 app 中可重复的，用户可以轻易学会的；</li>
<li>例如手指向上滑动，使一个页面向上滚动时，用户也可以双击状态栏使页面回到顶部，这是无缝衔接的，这也应该是贯彻整个 app 的交互操作。</li>
</ul></li>
<li><p>Understanding intent 理解意图</p>
<ul>
<li>普通的按钮在点击后的发生的结果比较显而易见，且每个按钮与结果一般是一一对应的。但对于用户触发的手势来说，需要根据用户手势的动作、动量、时间等因素预测并理解用户的意图。</li>
<li><p>例如在 Facetime 中，默认情况下右下角的浮窗可以显示对方能看到的你的画面，用户可以通过手势将其移动到屏幕的四个角落的任意一个。当用户的手势触发时，就应该根据手势的动量等数据预测用户的意图，以确定最终的移动位置。<br/>
<img src="media/15416957498069/BA2FC553-65E1-4611-A6AC-ED2A11E524C4.png" alt="BA2FC553-65E1-4611-A6AC-ED2A11E524"/></p></li>
<li><p>意图的预测与理解不仅适用于物体的移动，也适用于物体的旋转、改变大小或者几者之间的结合。</p></li>
</ul></li>
<li><p><em>Summary 总结：</em></p>
<ul>
<li>Continuous behaviors, not timed animations 连续一致的行为，而不是定时动画；</li>
<li>Draw inspiration from the physical world 从物理世界获取灵感</li>
<li>Springs don’t need to be springy! 弹簧并不一定要有弹性，要合理利用反弹</li>
<li>Align motion with intent  利用动量，预测意图，展现动作
<img src="media/15416957498069/1C9C0D1D-58D6-49E2-8067-9481C9145948.png" alt="1C9C0D1D-58D6-49E2-8067-9481"/></li>
</ul></li>
</ul>

<h2 id="toc_2">Responding to interaction 对交互作出响应</h2>

<ul>
<li><p>Design of taps and swipes  轻点和轻扫手势的设计</p>
<ul>
<li>轻点手势：以计算器键盘上的一个按钮来说，一个按钮需要至少满足以下条件：
<ul>
<li>按钮在点击之后需要立即做出响应，这让用户知道按钮响应了用户的操作；</li>
<li>除开按钮本身的可见区域外，还需要有一个更大的点击有效区域，这可以防止用户在点击过程完成前意外移动出了按钮的可见区域；</li>
<li>若用户在按下按钮之后且松开按钮之前改变了注意，用户可以将手指移出可点击区域取消操作，亦可在移出后回到可点击区域恢复操作，即用户松开手指才算是完成了一次轻点手势操作。</li>
</ul></li>
<li>轻扫手势：广义上的轻扫可以代表许多动作，滑动、拖拽、弹开、滚动等，以将一张图片从一个位置拖拽到另一个位置为例，其过程需要注意：
<ul>
<li>当拖拽手势离原点移动超过了 10 point（动作滞后），图片就应该开始移动；</li>
<li>当开始移动时，需要注意其运动的方向，严格符合拖拽手势的动量、速度，符合物理规律；</li>
<li>最后，根据移动的历史轨迹落入最终的位置。</li>
</ul></li>
</ul></li>
<li><p>Principles of fluid interactions 流畅交互的原则</p>
<ul>
<li>Touch and content move together 触摸和内容要一起动，两者是一一对应的。
<ul>
<li>一旦触摸和内容没有一起移动，用户立即就能感受到。例如滑动一个页面到页面边缘时。</li>
<li>触摸和内容一起动不仅仅存在于手和屏幕之间，还存在于 Apple TV 中，遥控器上的触摸手势和屏幕之间。</li>
</ul></li>
<li>Provide continuous feedback 提供连续一致的反馈
<ul>
<li>例子一：iPhone X 锁屏上的手电筒按钮，随着按压的面积和力度逐渐变大，按钮会变得越来越大，同时也提醒用户只要再用力一点，就可以触发其功能。</li>
<li>例子二：Apple TV 上的焦点系统会随着遥控器触摸表面上的手势而变化：聚焦时焦点的变化、移动焦点时的方向指向</li>
</ul></li>
</ul></li>
<li><p>Dealing with multiple gestures 处理多个手势</p>
<ul>
<li>例如，在一个列表页面可以通过轻扫上下滚动，也可以用力按下（3D Touch）一个条目以预览/查看（Peep）其详细内容。</li>
<li><p>如果系统先判断出是什么手势再做出视觉反馈，那么就会存在延迟：<br/>
<img src="media/15416957498069/09920A47-6F3B-488D-9063-4FCCE3EA817E.png" alt="09920A47-6F3B-488D-9063-4FCCE3EA817E"/></p></li>
<li><p>所以，必须要同时判断所有手势，并在确定最终手势的时候，中断其他手势。例如在 3D Touch 过程中又想改变意图而去滚动页面。<br/>
<img src="media/15416957498069/3051B1CB-A29C-40CB-9867-3B464570CB76.png" alt="3051B1CB-A29C-40CB-9867-3B464570CB76"/></p></li>
<li><p>但有时候延迟不可避免，例如在「照片」中当照片全屏显示时，单击可以显示菜单，双击可以使图片放大，系统必须要等点击结束后才能做出响应，因为其必须要知道这次点击是单击还是双击。</p></li>
</ul></li>
<li><p><em>Summary 总结：</em></p>
<ul>
<li>Design of taps and swipes 轻点和轻扫手势的设计</li>
<li>Content and touch move one-to-one  内容和触摸的移动是一一对应的</li>
<li>Provide continuous feedback 提供连续一致的反馈</li>
<li>Detect multiple gestures in parallel 同步检测多个手势
<img src="media/15416957498069/2C7A08D4-CCE8-4E4A-9E26-4FB5660A4814.png" alt="2C7A08D4-CCE8-4E4A-9E26-4FB5660A4814"/></li>
</ul></li>
</ul>

<h2 id="toc_3">Fluidity as a medium 作为一个媒介的流畅度</h2>

<ul>
<li><p>怎样让用户知道交互具体是如何操作的？</p>
<ul>
<li><p>Visual Cues 视觉线索：页面底部只露出一部分内容，表明后面还有更多的内容；利用页面指示器表明还有更多的页面；通过一个「把手」提示用户这个界面可以提起展示更多内容。<br/>
<img src="media/15416957498069/96F7DD7F-0734-47B5-996B-5C02C365CE2B.png" alt="96F7DD7F-0734-47B5-996B-5C02C365CE2B"/></p>
<p><img src="media/15416957498069/C25E1BC2-9E74-4A81-9940-4D475CBE7C7C.png" alt="C25E1BC2-9E74-4A81-9940-4D475CBE7C7"/></p></li>
<li><p>Elevate interactive elements to a separate plane 提升可交互元素的层级到一个单独的平面：「开关」控件。<br/>
<img src="media/15416957498069/70ECC8F0-C04B-4EB1-B18D-4C20BE56DFF4.png" alt="70ECC8F0-C04B-4EB1-B18D-4C20BE56DFF4"/></p></li>
<li><p>Use behavior to teach gesture 利用行为去教用户手势：如在 Safari 中的多页面界面，点击「关闭」按钮，该网页会从右往左滑出屏幕，也暗示了如果直接在网页上从右往左滑动也可以关闭网页。<br/>
<img src="media/15416957498069/A5A04C11-E4E8-46D7-BA51-2AB5BE6EC3EF.png" alt="A5A04C11-E4E8-46D7-BA51-2AB5BE6EC3EF"/></p></li>
<li><p>Explanations 解释：应该最少使用，应该只在那些重复使用的场景下使用，不要在间歇性使用手势的地方使用，否则用户会记不住</p></li>
</ul></li>
<li><p>Playfulness 让交互变得活泼有趣——一个将以上都做到所达到的境界，这表明 app 的界面和交互正在内化：</p>
<ul>
<li>A natural consequence of a fluid interface 一个流畅交互的自然结果</li>
<li>Happens when the interface feels in sync with you 界面与你完全同步这件事真的发生了</li>
<li>You feel comfortable exploring new areas 探索新的领域，你感觉很舒服</li>
<li>Allow people to <em>discover</em>your interface through play 允许人们通过玩去发现你的界面</li>
</ul></li>
<li><p><em>Summary 总结：</em></p>
<ul>
<li>Design the interactions to be /inseparable/ from the visuals 将交互和视觉设计成不可分割的</li>
<li>A interactive demo is worth a million static designs 一个可交互的 demo 值得一百万个静态设计，以让自己真正理解其内涵</li>
<li>Prototyping helps you /think/ by exploring 搭建原型时通过探索可以帮助你的思考</li>
<li>Sets a goal for the implementation 为实施设定一个目标</li>
<li>Hard to copy and gives your app a unique character 很难复制，给予你的 app 一个独一无二的特征
<img src="media/15416957498069/B2BE5E1E-A4A9-407C-B938-420C44C099B2.png" alt="B2BE5E1E-A4A9-407C-B938-420C44C099B2"/></li>
</ul></li>
</ul>

<blockquote>
<p>Session 链接：<a href="https://developer.apple.com/videos/play/wwdc2018/803/">Designing Fluid Interfaces - WWDC 2018 - Videos - Apple Developer</a>  </p>
</blockquote>

<p>📱</p>

<blockquote>
<p>如果你觉得这篇文章对你有所帮助，欢迎请我喝杯咖啡，感谢你的支持😁</p>

<p><img src="media/14625521742746/15088240400740.jpg" alt=""/></p>
</blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Allen 说:🎙]]></title>
    <link href="https://steppark.net/15107547493398.html"/>
    <updated>2017-11-15T22:05:49+08:00</updated>
    <id>https://steppark.net/15107547493398.html</id>
    <content type="html"><![CDATA[
<blockquote>
<p><i class="fas fa-quote-left fa-2x fa-pull-left"></i></p>

<h5 id="toc_0">日本的退休养老制度</h5>

<ul>
<li>今天在<a href="https://weibo.com/3951975029/GnsrKFujp">微博</a>上无意中了解到了日本的退休养老制度，引起我关注的几个核心内容如下，具体不展开：
<ul>
<li>以前，日本人退休后领取养老金的年龄是 60 岁，但随着日本老龄化严重、劳动力短缺问题越来越明显，政府不得不推迟领取养老金的年龄，但并不是一刀切；</li>
<li>你可以选择在 60-70 岁之间的某个年龄开始领取养老金。以 65 岁为分界线，选择小于 65 岁时，则每提前一个月，每月领取额减少 0.5%；选择大于 65 岁时，则每延迟一个月，每月领取额增加 0.7%。以后可能会进一步实施的是，如果选择 70 岁以后开始领取，每月领取额的增额率进一步提高；</li>
<li>总结一下就是根本上还是通过提高开始领取养老金的年龄（推荐 65 岁之后开始领取）来促进老年劳动力就业、减缓养老金开支，但实施的更加柔和，更能让人接受。在不得不推迟开始领取的年龄的前提下，我也更倾向于这种方式，毕竟自己有的选，大不了早领少拿点钱。</li>
</ul></li>
<li>对比下中国目前的养老保险制度，几个要点如下：
<ul>
<li>现行退休年龄是男性达到 60 岁，女性达到 55 岁，目前的计划是从某个时间点开始，女性退休年龄每 3 年延迟 1 岁，男性退休年龄每 6 年延迟 1 岁，直至同时达到 65 岁。虽然退休年龄从整体上是渐变的，但对于一个已经确定了出生年月的个体来说，根据政策退休年龄是完全确定的。</li>
<li>领取养老金必须符合两个条件：1.达到上述的法定退休年龄；2.累积缴纳养老保险大于等于 15 年。如果符合条件，退休后领取的养老金数额将会根据你之前缴纳的金额、届时当地的平均工资水平、平均寿命都因素来计算。</li>
<li>我国目前养老金存在的一个问题：个人缴纳部分未坐实，即每个人个人缴纳的养老保险理应像银行存款一样是不能动的，有多少就是多少，但是现状是部分数额被用来弥补现状发放养老金的缺口，即「拆东墙补西墙」，但「东墙」终究还是要补的，就看怎么补了。</li>
</ul></li>
<li>随着社会经济的发展，人民的生活水平在提高，人的寿命也在增长，像日本一样，中国的老龄化问题也会越来越严重，养老退休制度如何改革确实是一个迫在眉睫需要解决的问题。但回过头来，这种用现代打工者缴的钱养上一代老人的养老保险制度，真的合理吗？
<i class="fas fa-quote-right fa-pull-right fa-lg"></i></li>
</ul>
</blockquote>

<span id="more"></span><!-- more -->

<hr/>

<p>随着我的博客的日趋完善，我渐渐意识到一个问题：每天的所见所闻所想，并不是都能或者说都需要通过一篇文章来记录，那样显得很重。因为各种事情、各种产品所引发的深入思考可能三言两语就可以讲完，但这些仍然值得被记录、被沉淀、被回溯。所以我想利用这个博客已有的功能创建一个新的分类「Talk」，并建立一个全新的栏目称为「<strong>Allen 说：</strong>」（目前暂定的名字），用以记录那些短小且值得分享出来的闪念。</p>

<p>三言两语的思考可以很多，但这不能成为充斥一个以文章为主的博客的理由，我不想这里变成我的第二个「微博」。所以所有的「Allen 说」都会按照时间倒序汇总在这篇文章里，当有新的「Allen 说：」发布时，会置顶在博客首页，点击也可以进入查看所有过去的「Allen 说：」。</p>

<p>不管是文章，还是闪念，一切的目的还是会如同这个博客的主题一样：搞懂逻辑、理清思路、沉淀想法、纪录生活。</p>

<h2 id="toc_1">2018 年</h2>

<h3 id="toc_2">6 月</h3>

<h4 id="toc_3">6/29</h4>

<blockquote>
<p><i class="fas fa-quote-left fa-2x fa-pull-left"></i></p>

<h5 id="toc_4">日本的退休养老制度</h5>

<ul>
<li>今天在<a href="https://weibo.com/3951975029/GnsrKFujp">微博</a>上无意中了解到了日本的退休养老制度，引起我关注的几个核心内容如下，具体不展开：
<ul>
<li>以前，日本人退休后领取养老金的年龄是 60 岁，但随着日本老龄化严重、劳动力短缺问题越来越明显，政府不得不推迟领取养老金的年龄，但并不是一刀切；</li>
<li>你可以选择在 60-70 岁之间的某个年龄开始领取养老金。以 65 岁为分界线，选择小于 65 岁时，则每提前一个月，每月领取额减少 0.5%；选择大于 65 岁时，则每延迟一个月，每月领取额增加 0.7%。以后可能会进一步实施的是，如果选择 70 岁以后开始领取，每月领取额的增额率进一步提高；</li>
<li>总结一下就是根本上还是通过提高开始领取养老金的年龄（推荐 65 岁之后开始领取）来促进老年劳动力就业、减缓养老金开支，但实施的更加柔和，更能让人接受。在不得不推迟开始领取的年龄的前提下，我也更倾向于这种方式，毕竟自己有的选，大不了早领少拿点钱。</li>
</ul></li>
<li>对比下中国目前的养老保险制度，几个要点如下：
<ul>
<li>现行退休年龄是男性达到 60 岁，女性达到 55 岁，目前的计划是从某个时间点开始，女性退休年龄每 3 年延迟 1 岁，男性退休年龄每 6 年延迟 1 岁，直至同时达到 65 岁。虽然退休年龄从整体上是渐变的，但对于一个已经确定了出生年月的个体来说，根据政策退休年龄是完全确定的。</li>
<li>领取养老金必须符合两个条件：1.达到上述的法定退休年龄；2.累积缴纳养老保险大于等于 15 年。如果符合条件，退休后领取的养老金数额将会根据你之前缴纳的金额、届时当地的平均工资水平、平均寿命都因素来计算。</li>
<li>我国目前养老金存在的一个问题：个人缴纳部分未坐实，即每个人个人缴纳的养老保险理应像银行存款一样是不能动的，有多少就是多少，但是现状是部分数额被用来弥补现状发放养老金的缺口，即「拆东墙补西墙」，但「东墙」终究还是要补的，就看怎么补了。</li>
</ul></li>
<li>随着社会经济的发展，人民的生活水平在提高，人的寿命也在增长，像日本一样，中国的老龄化问题也会越来越严重，养老退休制度如何改革确实是一个迫在眉睫需要解决的问题。但回过头来，这种用现代打工者缴的钱养上一代老人的养老保险制度，真的合理吗？
<i class="fas fa-quote-right fa-pull-right fa-lg"></i></li>
</ul>
</blockquote>

<h4 id="toc_5">6/25：</h4>

<blockquote>
<p><i class="fas fa-quote-left fa-2x fa-pull-left"></i></p>

<h5 id="toc_6">「Night Mode/夜间模式」还是「Dark Mode/暗色模式」？</h5>

<p><a href="https://www.apple.com/cn/macos/mojave-preview/">macOS Mojave 中关于「暗色模式」的介绍↗</a><br/>
<a href="https://developer.apple.com/design/human-interface-guidelines/macos/visual-design/dark-mode/">macOS Human Interface Guidelines 中关于「Dark Mode」的描述↗</a></p>

<ul>
<li>WWDC 18 中 Apple 发布了 Dark Mode for macOS，在 <a href="https://www.apple.com/cn/macos/mojave-preview/">macOS Mojave 的中文介绍页面</a>里翻译成了<strong>「暗色模式」</strong>而不是我们经常提到的<strong>「夜间模式」</strong>。关于「Night Mode/夜间模式」还是「Dark Mode/暗色模式」我有一些自己的思考。</li>
<li>我的理解是 Apple 一直认为将 app 的背景色调成黑色/暗色的目的并不是让用户在晚上或者光线暗的时候去使用它，而是在这种「暗色模式」下，核心内容像文章的内容、列表上的文字、画布上的设计这些能够更加突显出来，而像菜单、工具栏会不那么显眼。用户可以更专注在这些核心内容上。所以称之为「Dark Mode/暗色模式」而不是「Night Mode/夜间模式」。</li>
<li><a href="https://developer.apple.com/design/human-interface-guidelines/macos/visual-design/dark-mode/">macOS HIG 里讲 Dark Mode</a> 的第一条也提到「Focus on your content」，第二条中更提到「Dark Mode is an aesthetic choice for users.Users … may use it at any time of day or in any lighting conditions.」。</li>
<li>一直以来在 iOS 上的暗色或者说夜间模式呼声很高，但在 WWDC18 上 Apple 只发布了 macOS 的暗色模式，我认为可能是更需要长时间专注生产力工作的 macOS 平台更应该有以专注核心内容为目的的暗色模式。</li>
<li>而 iOS 平台也有 iPad Pro 这种往生产力工作方向走的硬件设备，根据 Apple 这几年新软件/硬件功能或技术的发布规律来看，或许 WWDC19 就能见到 Dark Mode for iOS 13。</li>
<li>对于在晚上或者光线暗的时候操作设备比较刺眼甚至影响睡眠的问题，Apple 或许已经给出了他的答案——之前在 iOS 和 macOS 平台都已推出的<a href="https://support.apple.com/zh-cn/HT207570">「Night Shift/夜览」</a>功能。</li>
<li>当前，很多 app（特别是一些国产阅读类 app）喜欢跟风做出一个夜间模式的功能，很多都是一些换个背景的表面功夫，我很怀疑他们是否真的想明白了这个模式的目的和效果？
<i class="fas fa-quote-right fa-pull-right fa-lg"></i></li>
</ul>
</blockquote>

<h4 id="toc_7">6/21:</h4>

<blockquote>
<p><i class="fas fa-quote-left fa-2x fa-pull-left"></i></p>

<h5 id="toc_8">越来越臃肿的知乎</h5>

<ul>
<li>我在很早期的时候（可能那时候很多非互联网从业者/爱好者还不知道知乎的存在）就成为了知乎的用户，那时候知乎的用户量还很小，整个社区的氛围很友好，回答问题的人写的基本都是干货，我也乐于花时间在知乎里到处探索自己感兴趣的话题。</li>
<li>随着后来知乎被越来越多人知晓，知乎渐渐地从一个小众产品变成了一个大众产品，自然而然也有了更多需要落地的商业诉求，知乎涉及的领域逐渐扩大以至于变成现在这个在我看来十分「臃肿」的知乎。</li>
<li>之前由于工作的需要，对知乎 app 现在的信息架构仔细梳理了一下，惊异于一个小小的 app 里包含如此复杂众多的内容和结构，内容方面除了包括最早的问题回答，还包括「文章」/「专栏」、社交属性的「想法」、知识付费领域的「Live 小讲」/「私家课」/「书店」/「会员课堂」/「读书会」等等，功能方面自然还有由内容引申出的「消息」、「我的/个人主页」、「设置」等，更不用说由内容引申出的多维度推荐、搜索、私信等。这一切全部塞在这一个 app 里，不免让人觉得有点喘不动气。</li>
<li>而伴随着用户越来越多，用户的背景也越来越复杂，知乎中推荐的内容渐渐地被抖机灵的段子、消磨时间的泛娱乐化话题、看完哈哈一笑转头就忘了的各种湿货所占领，而好的回答/干货也被雪藏，乐于分享干货的人也在变少。现在如果不是因为想探索的话题恰好在知乎被搜索到，我不再会像以前一样打开知乎探索点什么未知的东西。</li>
<li>知乎早期的 Slogan 是「与世界分享你的知识、经验、见解」，现在的 Slogan 是「发现更大的世界」。由重在分享向重在发现的转变，由知识、经验、见解向更大范围内容的转变，知乎的发展定位由此也可见一斑。</li>
<li><p>非常戏剧化的是，今天知乎更新了新版本，又又又又增加了新的内容功能——一个视频 tab，把回答和文章里的视频单独拎了出来，看来又看上了最近逐渐火热的短视频市场。我在微博中吐槽道「有种反正已经复杂的像个怪胎索性放弃治疗的感觉，眼睁睁的看着知乎从一个清新脱俗的小孩子变成了一个失去底线的老流氓。」😔<br/>
<img src="media/15107547493398/15298992479454.jpg" alt=""/></p></li>
<li><p>产品做加法很简单，做减法很难，不仅在于怎么做，更在于敢不敢。受国内大环境的一部分影响，国产 app 可能都像知乎一样，因为商业诉求而不得不变得越来越庞大/复杂、核心跑偏，真的就没有办法做一个既获利，又克制的回归本源、真正重视用户体验的产品吗？<br/>
<i class="fas fa-quote-right fa-pull-right fa-lg"></i></p></li>
</ul>
</blockquote>

<h4 id="toc_9">6/13:</h4>

<blockquote>
<p><i class="fas fa-quote-left fa-2x fa-pull-left"></i></p>

<h5 id="toc_10">Apple 这些年新功能、新硬件的发布节奏</h5>

<ul>
<li>WWDC 18 中 Dark Mode 这个功能只在 macOS 平台中出现，Screen Time 这个功能只在 iOS 平台中出现，这俩功能什么时候会对应出现在 iOS、macOS 平台中呢？下面是根据这些年 Apple 发布的一个规律所得出的猜测：</li>
<li>过去已知🧐：
<ul>
<li>2013 年 iOS 扁平化→2014 年 macOS 扁平化；</li>
<li>2017 年改版 iOS App Store→2018 年改版 Mac App Store；</li>
<li>2015 年 3 月发布配备了 Force Touch 的 MacBook Pro→2015 年 4 月发布配备了 Force Touch 的第一代 Apple Watch→2015 年 9 月发布配备了 3D Touch 功能的 iPhone 6s</li>
<li>2016 年发布配备了 True Tone 技术的 iPad Pro→2017 年发布配备了 True Tone 技术的 iPhone 8、iPhone X；</li>
</ul></li>
<li>未来预测🤔：
<ul>
<li>2018 年 Dark Mode for macOS 10.14→2019 年 Dark Mode for iOS 13？</li>
<li>2018 年 Screen Time for iOS 12→2019 年 Screen Time for macOS 10.15？</li>
<li>2017 年发布了配备最高支持 120Hz 屏幕刷新率的 iPad Pro→2018 年发布配备最高支持 120Hz 屏幕刷新率的 iPhone？</li>
<li>2017 年发布了配备 Face ID 的 iPhone X→2018 年发布配备 Face ID 的 iPad Pro？→2019 年发布配备 Face ID 的 MacBook Pro？</li>
</ul></li>
<li>一切静待时间的验证吧。
<i class="fas fa-quote-right fa-pull-right fa-lg"></i></li>
</ul>
</blockquote>

<h4 id="toc_11">6/5:</h4>

<blockquote>
<p><i class="fas fa-quote-left fa-2x fa-pull-left"></i></p>

<h5 id="toc_12">由 iOS 12 Developer Beta 预测未来的 iPad Pro</h5>

<p><a href="https://weibo.com/2403484123/GjWVC9TDk?type=comment">在 iOS 12 Developer Beta 1 中，iPad Pro Face ID 的录入界面被曝光&amp;状态栏上的时间由中间移到了屏幕最左侧↗</a></p>

<ul>
<li>刘海屏的 iPad Pro 是一种可能性，但 iPad 更应该讲究握持感，而且「刘海」是一个因为技术所限不得不有的产物，终究有一天我们还是希望干掉刘海，如果现在能够在 iPad 上去掉刘海当然就没有必要留着了。</li>
<li>所以秋季要发布的新 iPad Pro 会不会是没有刘海、但配备 Face ID 的极窄边框的形式？将时间放在了左侧说不定只是为了和 iPhone 端的 iOS 统一交互🤔</li>
<li>在 iOS 11 中增加了很多专门为 iPad 设计的一些功能交互，而 iPhone X 的刘海屏幕也使得 iOS 11 for iPhone X 的交互与其他机型产生了很大的不同。Apple 作为一家特别注重全平台交互功能一致性（Consistency）的公司，在经过几次因为发展不得不有的交互不统一的阵痛后，统一各个平台、机型的交互也是当务之急。</li>
<li>近期，AppleiDesigner 发布的一组全面屏 iPad Pro 的渲染图或许也印证了上面的猜测。
<img src="media/15107547493398/8f4241dbly1fsj0v1o15bj21kw1kwagl.jpg" alt="8f4241dbly1fsj0v1o15bj21kw1kwag" class="mw_img_center" style="display: block; clear:both; margin: 0 auto;"/></li>
<li><strong>7/2 Update:</strong>对于新一代 iPad 和 Face ID 的结合目前也有争议，毕竟 iPad 的使用习惯不会完全与 iPhone 使用时需要正对屏幕一样，因此可能会导致 Face ID 在 iPad 上的应用有那么一些不方便。由此产生一个猜想：或许今年新机型配备的 Face ID 更加先进，能够正对识别，又可斜着、侧着、横屏下识别？可能说不定有惊喜？也可能是我想多了，技术还没有发展那么快？🤨
<i class="fas fa-quote-right fa-pull-right fa-lg"></i></li>
</ul>
</blockquote>

<h2 id="toc_13">2017 年</h2>

<h3 id="toc_14">11 月</h3>

<h4 id="toc_15">11/17：</h4>

<blockquote>
<p><i class="fas fa-quote-left fa-2x fa-pull-left"></i></p>

<h5 id="toc_16">我眼中的优秀程序猿</h5>

<ul>
<li>在两份工作中我见过各型各色的程序猿，每个人的性格都不会一样，但随着各种项目的合作与配合，我发现在我的心中会逐渐形成一把衡量优秀的程序猿的尺子。与优秀的程序猿一起工作是一件十分舒服的事情。关于我眼中的优秀程序猿，我总结了下面几点：
<ul>
<li>不需要有足够多的开发知识储备，但需要有足够开阔的视野，这点十分重要；</li>
<li>对行业的新技术、新方法十分敏感，乐于尝试，善于学习；</li>
<li>以结果为导向，对结果有足够的责任心；</li>
<li>善于利用已有的工具、灵活的解决办法去解决问题，不死板；</li>
<li>不错的沟通能力，有一定的技术洁癖；</li>
<li>考虑问题有全局观念，甚至能够站在开发的角度先想一步。
<i class="fas fa-quote-right fa-pull-right fa-lg"></i></li>
</ul></li>
</ul>

<p><i class="fas fa-quote-left fa-2x fa-pull-left"></i></p>

<h5 id="toc_17">产品汪与程序猿的关系</h5>

<ul>
<li>时常会在网络上看到产品与开发间的相互吐槽，产品认为开发做出来的东西与自己期望值相差甚远，开发认为产品定的需求可笑离谱，甚至出现过「因产品经理不断提出新的不合理需求，工程师一怒之下捅死了产品经理」的段子/新闻。不管这些是真是假，是戏谑还是自嘲，都能看出互联网界产品汪与程序猿之间似乎有着天生的不可化解的敌意。</li>
<li>问题的关键还是在于「沟通」，产品经理没有足够有理有据地说明那样做的背景和原因，开发关注的点更多地在于程序上是如何实现的而不是实现后的产品的细枝末节，产品和开发都没能站在对方的角度去换位思考一下，做不到相互理解、深入沟通，只能激化矛盾，变得互不信任，形成恶性循环。</li>
<li>实际操作中，我自己是十分希望产品汪能够与程序猿一起愉快的玩耍的，并在工作中努力达成这个目标。一方面能根据每个程序猿的不同性格与其进行沟通，重点关注为什么会出现问题而不是出了什么问题，既要治标又要治本，以在之后的工作中避免同类问题；另一方面作为产品汪，虽然不是专业写代码的但我会十分乐意去了解代码背后的逻辑与原理，去了解产品背后更大的世界，这既有利于与程序猿之间的沟通，又能在确定需求时更加合理全面。</li>
<li>说白了，都是在一个窝里混口饭吃的，何必弄得相互不开心呢🤪？
<i class="fas fa-quote-right fa-pull-right fa-lg"></i></li>
</ul>
</blockquote>

<h4 id="toc_18">11/15：</h4>

<blockquote>
<p><i class="fas fa-quote-left fa-2x fa-pull-left"></i></p>

<h5 id="toc_19">Apple 的创新与勇气</h5>

<p><a href="https://www.bilibili.com/video/av16317395/">「iPhone X 消费者报告」From @爱否科技↗</a><br/>
<a href="https://www.bilibili.com/video/av14940301/">「iPhone 8 Plus消费者报告」From @爱否科技↗</a></p>

<ul>
<li>一千个人眼中有一千个哈姆雷特，每一家媒体也会从自己的角度把对 iPhone X 的看法呈现给观众。看多了大众媒体对 iPhone X 抓住一个点就不放的浅显吐槽，甚至是为了搏大众眼球的水货文章，我们也应该静下心来去了解下产品背后的故事。</li>
<li>这两个视频的尾声说的很好，Apple 之所以是 Apple，是因为 Apple 总是能从人性的角度出发去提前发现用户的需求并满足它，苛求极致并做到尽善尽美，不是堆叠处理器的参数而是使用不同的专用处理器去契合用户的不同使用场景，不是强调相机有多高的像素而是努力做到拍出的照片如同人眼看到的一模一样，不单单是想让用户通过拍照留住美好瞬间的 picture 而是想更多地留住这一瞬间的 moment；Apple 亦敢于顶住压力、拿出「Courage」去砍掉光驱、砍掉网口、砍掉 USB 接口、砍掉耳机接孔、用上 Touch ID、用上 Face ID，在产品上用上你想不到的创新。不敢说 Apple 百年不倒，但至少现在，Apple 值得我去学习和喜爱。
<i class="fas fa-quote-right fa-pull-right fa-lg"></i></li>
</ul>

<p><i class="fas fa-quote-left fa-2x fa-pull-left"></i></p>

<h5 id="toc_20">共享单车</h5>

<p><a href="https://weibo.com/1750070171/Fvby82QZH">小蓝单车被爆宣布解散↗</a></p>

<ul>
<li>今年 3 月 16 日我第一次使用小蓝单车，相比摩拜和 ofo，小蓝单车简直不能更好骑。在共享单车百家争鸣，试图通过各种红包优惠、月卡促销抢占用户的情况下，我曾一度在想用车时宁愿选择花钱的小蓝，也不愿选择免费的摩拜和 ofo。无奈小蓝还是输了，输给了入场速度，输给了融资困难，市场就是如此残酷😞</li>
<li>去年 9 月 16 日我第一次使用共享单车-摩拜，对于接受新鲜事物很快的我来说，很期待共享单车能对我的生活做出一些改变，而那个时候也是共享单车刚刚进入市场的时候。一年的时间，共享单车确实在方便我的生活，但各家公司的野蛮发展是以牺牲城市整洁度为代价的，各种共享单车像蝗虫一样堆满了各城市主干道、各地铁站周边的道路，北京这座本身建设就不咋样的城市更是被摧残的惨不忍睹。抛开公司对单车的运营管理不足、公司为了抢占市场不择手段、政府出手监管不及时、政府监管仍在摸索不够完善这些因素，共享单车是否也是人的基本素质的照妖镜？每一次用车、每一次停车、每一次骑车穿行在繁忙的十字路口，我们每一个人是不是也应该对共享单车现在的乱象负点责？</li>
<li>2018/04/19 Update：今天发现小蓝单车挂上了滴滴的牌子又重新出现了在北京的街头，因为之前对小蓝的喜爱而略感到一丝欣慰，希望以后能去更多城市吧。
<i class="fas fa-quote-right fa-pull-right fa-lg"></i></li>
</ul>
</blockquote>

<h4 id="toc_21">11/14：</h4>

<blockquote>
<p><i class="fas fa-quote-left fa-2x fa-pull-left"></i></p>

<h5 id="toc_22">产品设计的抉择</h5>

<ul>
<li>手里的广发信用卡进账了一笔一万块的退款，这卡本身用的也不多，一查才知道，广发规定当期消费在账单日后、还款日前退款入账，退款不能抵扣当期账单，该还多少还得还多少，莫名把这张信用卡花成了储蓄卡。</li>
<li>深究一下这个设定，银行既要通过长达一个多月的免息消费吸引用户，又要确保每个用卡人有能力正常偿还每期账单。广发的做法可以弥补借款被无限借下去的漏洞，但却让用户的用卡便利度打了折扣，这是一个政策安全但对用户不够方便的设定；而像招行的当期消费退款只要在当期的还款日前入账即可抵充当期账单的做法就是一个对用户方便但政策上有点风险的设定。明白不同设定背后的缘由，再去评判孰优孰劣，那就见仁见智了。
<i class="fas fa-quote-right fa-pull-right fa-lg"></i></li>
</ul>
</blockquote>

<h2 id="toc_23">One More Thing</h2>

<ul>
<li><p>你可以<a href="about.html">点击这里查看我的联系方式</a>😎</p></li>
<li><p>如果你觉得这个网站的某些文章对你有所帮助，欢迎请我喝杯咖啡，感谢你的支持😁</p>
<p><img src="media/14625521742746/15088240400740.jpg" alt=""/></p></li>
</ul>
<link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.1.0/css/all.css">
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[内容丰富的通知 Rich Notifications - WWDC 2017 Session 817]]></title>
    <link href="https://steppark.net/15416970661320.html"/>
    <updated>2018-11-09T01:11:06+08:00</updated>
    <id>https://steppark.net/15416970661320.html</id>
    <content type="html"><![CDATA[
<span id="more"></span><!-- more -->

<h2 id="toc_0">一个通知的概述</h2>

<ul>
<li><p>注意人们的时间</p>
<ul>
<li>只发送有必要的消息，不要发送垃圾信息；</li>
<li>不要只是为了促进流量或是参与度就发给他们通知；</li>
<li>在请求通知权限时，解释下这些通知是干什么用的，它们提供了什么价值？</li>
</ul></li>
<li><p>一个好的通知不仅仅是一个打开 app 的邀请</p>
<ul>
<li>不要把通知当作是进入你 app 的途径；</li>
<li>它们应该是完备的信息包，可以让你完成某个任务；</li>
<li>确保人与通知进行交互是值得的，一个令人愉快的通知有机会在人们与 app   之间创立一条纽带，以为开发者和用户创造价值。</li>
</ul></li>
</ul>

<h2 id="toc_1">如何创造一个内容丰富的通知</h2>

<ul>
<li><p><em>Short Look：通知是用来干什么的？</em>描述通知的内容，确保通知中所有的描述是清晰、直观且提供足够信息量的。</p>
<ul>
<li>在日历中，告诉了用户事件的名称、时间以及位置
<img src="media/15416970661320/FullSizeRender.jpg" alt="FullSizeRende"/></li>
</ul></li>
<li><p><em>Long Look：额外的哪些信息对用户是有帮助的？</em>提供一些额外的上下文情景信息，提供一些关于通知的额外信息。</p>
<ul>
<li>在日历中，获得了事件的更多细节信息，可以看到当天的详细日程</li>
</ul></li>
<li><p><em>Quick Action：哪些操作对于这个通知是合适的？</em>完成相关的操作，让用户继续做刚才在做的事情。</p>
<ul>
<li>在日历中，根据获取的信息可以快速做出想到的那些操作
<img src="media/15416970661320/FullSizeRender%202.jpg" alt="FullSizeRender 2"/></li>
</ul></li>
</ul>

<h2 id="toc_2">实例说明</h2>

<ul>
<li><p>邮件：短视图中提供邮件的发件人、邮件主题以及邮件的几行预览，长视图中提供了更加详细的邮件内容→短视图中，某些内容被切割了，可以在长视图中显示完整的内容。</p>
<p><img src="media/15416970661320/06EB2774-70FB-4013-956B-441092C9B520.png" alt="06EB2774-70FB-4013-956B-441092C9B520"/></p></li>
<li><p>照片：短视图中提供了照片发布的流、发布的人以及照片的缩略图，长视图中提供了更大尺寸的完整清晰的图片以及相关操作→在长视图中为了显示完整的内容，不一定是显示图片，还可以显示定制的页面、定制的排版、图表、流程图、天气状况、股票趋势等。</p>
<p><img src="media/15416970661320/EE968F3C-40B9-4BD5-9EE1-DD107CA193D4.png" alt="EE968F3C-40B9-4BD5-9EE1-DD107CA193D4"/></p></li>
<li><p>提示：短视图中告诉了你通知的内容，长视图中，会通过视频让内容变得生动起来，以展示某个技巧→例如在一个象棋游戏中，可以通过通知的长视图来显示上一个人的具体下法。既可以使用 UI 动画，又可以使用视频形式（如新闻摘要）来展示内容。</p>
<p><img src="media/15416970661320/A313F2D4-BF69-4B8F-B41E-ACE716A59492.png" alt="A313F2D4-BF69-4B8F-B41E-ACE716A59492"/></p></li>
<li><p>电话：短视图中告诉了你你的朋友给你打了一个电话并留了一条语音信箱，长视图中可以看到未接来电的具体信息，可以直接听语音信息或是阅读文本翻译的内容。</p>
<p><img src="media/15416970661320/D1373765-0D11-4175-9EE6-93B17FE1F0F8.png" alt="D1373765-0D11-4175-9EE6-93B17FE1F0F8"/></p></li>
<li><p>查找朋友：短视图中告诉了你你的朋友分享了他的位置，长视图中可以在地图中看到实时更新的朋友的位置→这种实时更新的通知可以是某种送达服务、航班追踪服务等，或是应用中的动态数据，如股价、赛事比分等。</p>
<p><img src="media/15416970661320/7D01010A-329F-4880-AFBA-C012A327A4E5.png" alt="7D01010A-329F-4880-AFBA-C012A327A4E5"/></p></li>
<li><p>信息：短视图中可以看到发送者和他发的信息，长视图中可以看到完整的 iMessage 实时对话界面。</p>
<p><img src="media/15416970661320/FCB672F6-0A49-4366-ACF2-EC9BFCD90206.png" alt="FCB672F6-0A49-4366-ACF2-EC9BFCD90206"/></p></li>
<li><p>Castro：短视图中告诉你有一集新的播客更新，长视图中可以看到标题、持续时间、完整的描述以及博客的缩略图，而且文字是已经经过排版的。→一个应用可以把应用内的设计语言带到通知中去。<br/>
<img src="media/15416970661320/B3CC5DE4-17E5-4BF1-970B-F5C8E30CC6EA.png" alt="B3CC5DE4-17E5-4BF1-970B-F5C8E30CC6EA"/></p></li>
<li><p>Kuna：短视图中告诉你摄像头监测到有人来到了前门，长视图中可以看到实时的摄像头影像并可作出适合的操作</p>
<p><img src="media/15416970661320/BE3E5CF2-28F4-4CB7-BC41-9E9F96AA7FF6.png" alt="BE3E5CF2-28F4-4CB7-BC41-9E9F96AA7FF6"/></p></li>
</ul>

<h2 id="toc_3">总结</h2>

<ul>
<li>确保在<em>短视图（Short Look）</em>中提供了清晰的信息，以告诉用户这个通知是干什么的；</li>
<li>在一个设计漂亮的<em>长视图（Long Look）</em>中提供额外的上下文环境信息；</li>
<li>确保提供的<em>快速操作（Quick Action）</em>是相关的、有用的，用户可以在这里实现那些想做的操作并切处理好通知。</li>
</ul>

<blockquote>
<p>Session 链接：<a href="https://developer.apple.com/videos/play/wwdc2017/817/">Rich Notifications - WWDC 2017 - Videos - Apple Developer</a>  </p>
</blockquote>

<p>📱</p>

<blockquote>
<p>如果你觉得这篇文章对你有所帮助，欢迎请我喝杯咖啡，感谢你的支持😁</p>

<p><img src="media/14625521742746/15088240400740.jpg" alt=""/></p>
</blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[妙用 Xcode 修改 iPhone 的当前定位位置]]></title>
    <link href="https://steppark.net/15294912961206.html"/>
    <updated>2018-06-20T18:41:36+08:00</updated>
    <id>https://steppark.net/15294912961206.html</id>
    <content type="html"><![CDATA[
<p>iPhone 可以利用 GPS 来精确定位所处的位置，借助得到的位置结果可以应用在众多地图类、社交类等 app 中。为了 app 的开发和测试或者一些其他目的，有时需要改变当前的定位位置来测试一些结果。本文的主题就是在不需要越狱的前提下，使用 iOS 开发最常用的 Xcode 工具来临时修改 iPhone 的当前定位位置。</p>

<span id="more"></span><!-- more -->

<h2 id="toc_0">背景</h2>

<p>地图中的每一个点都有一个坐标，可以用经度（表东西方向）和纬度（表南北方向）来表示。针对于这个坐标，我们常见的有三种坐标系标准：</p>

<ul>
<li><a href="https://zh.wikipedia.org/wiki/%E4%B8%96%E7%95%8C%E5%A4%A7%E5%9C%B0%E6%B5%8B%E9%87%8F%E7%B3%BB%E7%BB%9F">WGS-84</a>：即在 1984 年定义的世界大地测量系统（World Geodetic System, WGS），也是被广泛采用的坐标系标准；</li>
<li><a href="https://zh.wikipedia.org/wiki/GCJ-02">GCJ-02</a>：一种基于 WGS-84 制定的大地测量系统 ，由中国国测局制定。此坐标系所采用的混淆算法会在经纬度中加入看似随机的偏移，号称可以促进国家安全🙃。目前该算法已经通过多种语言形式实现了向 WGS-84 坐标的转换。高德地图、Google Map 中国内地部分的坐标采用了此标准。</li>
<li><a href="https://zh.wikipedia.org/wiki/%E7%99%BE%E5%BA%A6%E5%9C%B0%E5%9B%BE#%E5%9D%90%E6%A0%87%E7%B3%BB">BD-09</a>：百度在 GCJ-02 的基础上多增加了一次变换，号称“有助保护用户隐私”🙃🙃。目前也已被反向转换。百度地图采用了此标准。</li>
</ul>

<p>要想把定位位置改成我们想要的位置，首先要找到那个位置的经度+维度坐标，确定其使用的坐标标准，利用工具将其转换为 WGS-84 标准，获取到在 WGS-84 标准下的准确坐标。</p>

<h2 id="toc_1">准备</h2>

<p>以下以「上海中心」这个地理位置坐标作为最终目标为例说明：</p>

<ul>
<li><strong>1.获取 GCJ-02 标准的地理位置坐标：</strong>在<a href="http://lbs.amap.com/console/show/picker">高德地图</a>或者 <a href="http://map.google.com">Google 地图</a>中找到上海中心的经纬度坐标（GCJ-02 标准）为<code>121.505385,31.233526</code>，如下图：</li>
</ul>

<ul class="example-orbit" data-orbit>
      <li>
        <img src="media/15294912961206/15294961375135.jpg" alt="" />
        <div class="orbit-caption">高德地图</div>
      </li>
      <li>
        <img src="media/15294912961206/15294959439988.jpg" alt="" />
        <div class="orbit-caption">Google Map</div>
      </li>
    </ul>

<ul>
<li><strong>2.获取 WGS-84 标准的地理位置坐标：</strong>利用<a href="http://www.dituwa.com/tool/gpxaxes">转换工具</a>将获取到的 GCJ-02 标准的坐标转换成 WGS-84 标准的坐标，如下图，最终获取到的 WGS-84 坐标为<code>121.50097295,31.23555959</code>。</li>
</ul>

<p><img src="media/15294912961206/15294938764536.jpg" alt=""/></p>

<ul>
<li><strong>3.配置一个 GPX 格式的文件：</strong>这个文件稍后会导入到 Xcode 项目中使用，文件内容如下，注意将其中的 <code>lat</code> 和 <code>lon</code> 改成刚刚你获取到的 WGS-84 坐标。</li>
</ul>

<pre class="line-numbers"><code class="language-text">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;
&lt;gpx version=&quot;1.1&quot;
    creator=&quot;GMapToGPX 6.4j - http://www.elsewhere.org/GMapToGPX/&quot;
    xmlns=&quot;http://www.topografix.com/GPX/1/1&quot;
    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
    xsi:schemaLocation=&quot;http://www.topografix.com/GPX/1/1 http://www.topografix.com/GPX/1/1/gpx.xsd&quot;&gt;
    &lt;wpt lat=&quot;31.23555959&quot; lon=&quot;121.50097295&quot;&gt;
    &lt;/wpt&gt;
&lt;/gpx&gt;
</code></pre>

<h2 id="toc_2">操作</h2>

<ul>
<li>1.在 Xcode 中新建一个项目，并将刚刚创建的 gpx 格式文件拖入到项目中，如下图：</li>
</ul>

<p><img src="media/15294912961206/15294943878773.jpg" alt=""/></p>

<ul>
<li>2.打开 Xcode 项目的「Edit Scheme…」设置窗口，在「Run-Option-Core Location」中选中「Allow Location Simulation」，并在「Default Location」选择刚刚添加的 gpx 文件（Default Location 中默认包含了一些全世界各个国家和地区的位置，这些位置的周围一般都有一家 Apple Store），如下图：</li>
</ul>

<p><img src="media/15294912961206/15294945642294.jpg" alt=""/></p>

<ul>
<li>3.在 iPhone 真机上编译并运行此 app，此时手机的定位位置就已经变成了「上海中心」，可以在地图 app 或者社交 app 中查看确认。</li>
</ul>

<p><img src="media/15294912961206/15294951958551.jpg" alt=""/></p>

<ul>
<li>4.只要不在 Xcode 中停止运行 app，这个模拟的地理位置就可以保持一段时间，在 Xcode 中停止运行 app 或者重启手机都会恢复成真实的地理位置。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[尺寸级别和核心要素 Size Classes and Core Components - WWDC 2017 Session 812]]></title>
    <link href="https://steppark.net/15171487371271.html"/>
    <updated>2018-01-28T22:12:17+08:00</updated>
    <id>https://steppark.net/15171487371271.html</id>
    <content type="html"><![CDATA[
<p>如今开发 iOS App 需要面对六种不同的 iPhone 屏幕尺寸（iPhone SE、iPhone 8、iPhone 8 Plus、iPhone Xs、iPhone Xs Max、iPhone Xʀ）和五种不同的 iPad 屏幕尺寸（iPad Mini、iPad 9.7″、iPad Pro 10.5″、iPad Pro 11″、iPad Pro 12.9″），同时还有不同的屏幕方向、左右分屏、多任务屏幕需要处理。这就导致在设计开发一个 app 时有许多种屏幕尺寸需要考虑。</p>

<span id="more"></span><!-- more -->

<p><img src="media/15171487371271/812_size_classes_and_core_components.jpg" alt="812_size_classes_and_core_components"/></p>

<p>Apple 构建了一套基本框架用于简化设计和构建 iOS App 时的这些过程，这会使开发者节约大量时间，不管用户使用的是哪一款设备你的 app 都会看起来不错。针对于屏幕中的内容采用尺寸类别 Size Classes、使用动态类型 Dynamic Type、利用标准 UI 元素就是需要考虑的三点。</p>

<h2 id="toc_0">Size Classes</h2>

<p>各种尺寸的 iOS 屏幕方向都可以归类为两种尺寸类别：compact 紧凑型、regular 常规型。像 iPhone 的布局，更窄的屏幕宽度就是紧凑型，而像 iPad 的屏幕更宽的宽度就是常规型。</p>

<p><img src="media/15171487371271/5079015A-8795-47C1-A410-CA4116D2A10A.png" alt="5079015A-8795-47C1-A410-CA4116D2A10A"/></p>

<p>把各种尺寸的屏幕的不同屏幕方向归类在一起，每个屏幕状态的宽度和高度就可以划分出对应属于哪一个尺寸等级。根据屏幕等级，屏幕上的内容应该更加灵活，元素应该根据屏幕尺寸进行自适应。</p>

<p><img src="media/15171487371271/12F5661F-2D23-4C1B-AA93-887D242801AC.png" alt="12F5661F-2D23-4C1B-AA93-887D242801A"/></p>

<p>例如，横屏下的 iPhone 7 Plus 就是常规宽度，这使其可以像 iPad 一样显示分屏视图。而其他两个更小的 iPhone 在横屏下的宽度和高度都是紧凑型的。</p>

<p><img src="media/15171487371271/88325087-1103-4973-B086-A14B9CE54A42.png" alt="88325087-1103-4973-B086-A14B9CE54A42"/></p>

<p>这也意味着在小屏的 iPhone 上横屏条件下 bar 的高度是比竖屏条件下的高度小一些的。</p>

<p><img src="media/15171487371271/9E03D92D-EF0E-4AAA-A157-5E37DB06E864.png" alt="9E03D92D-EF0E-4AAA-A157-5E37DB06E864"/></p>

<p>屏幕的宽度也定义了 UIKit 的边界值，边界宽度可以是标准的，也可以是像 iPad 这种大屏幕一样更加宽松。但要注意，如果文本的边界宽度与 UIKit 的边界宽度一样，文本就会变得很长，在一行的结尾人的眼睛就需要来回地从一边跳到另一边。所以我们使用可读性边界（Readability Margin）在大屏设备上限制每行的长度。这些边界值是灵活的，可以根据文本尺寸发生变化。更小的文本需要更窄的可读长度，更大的文本需要更宽的可读长度。</p>

<p><img src="media/15171487371271/A8B453F6-4191-42CA-88DC-B59C117F68F6.png" alt="A8B453F6-4191-42CA-88DC-B59C117F68F6"/></p>

<p>对于各种屏幕尺寸、屏幕方向的设备的 Size Class 具体定义如下：</p>

<p><img src="media/15171487371271/745CCD32-7AAF-4E17-9BA4-E65D75C1D923.png" alt="745CCD32-7AAF-4E17-9BA4-E65D75C1D923"/></p>

<p>特别地，在 iPad 上以多任务方式运行你的 app 时，其 Size Class 定义如下：</p>

<p><img src="media/15171487371271/00E6370F-92B2-4219-81EE-02153711F136.png" alt="00E6370F-92B2-4219-81EE-02153711F136"/></p>

<p>注：自 iOS 12 开始，苹果在全系 iPad 上移除了竖屏模式下 1/2 Split View 的这种显示模式。</p>

<h2 id="toc_1">Dynamic Type 动态类型</h2>

<p>如果你使用具备可读性边界属性的动态类型的话，人们使用你的 app 将会有一个更舒服的阅读体验。动态类型预定义了可以在不同设备上变化大小的文本样式，用户可以使用某一种文本尺寸以达到最舒服的用户体验。<br/>
有许多用户感觉在他们的 app 里的文本太小了而不能阅读。所以可以使用动态类型，从而自动地允许文本放大放小，又不影响布局。用户可以在辅助功能设置中开启更大类型。也可以使你的 app 本地化更加无缝。<br/>
你的文本将会根据字符的高度调整字间距、行间距。使用这个特性会让更多的用户使用你的 app 更加容易。</p>

<p><img src="media/15171487371271/3ADCF6DE-E144-4069-8DC2-A0045DEB753F.png" alt="3ADCF6DE-E144-4069-8DC2-A0045DEB753F"/></p>

<p>Apple 定义了一份标准的动态类型图表。最近，Apple 针对于我们已经存在的文本样式进行了一些调整，将 Tiltle 样式的字重从 light 调整到了 regular。在大多数的场景下，我们推荐在每个屏幕上使用两到三种文本文本样式。你可以从十种不同的文本样式中选择，这里有无数的组合，在设计你的 app 时有很大的灵活性。</p>

<p><img src="media/15171487371271/93D7931A-8512-4B2A-AABA-461E30A1174F.png" alt="93D7931A-8512-4B2A-AABA-461E30A1174F"/></p>

<p>其中 Large 类型是系统默认的，其不同文本样式的字重、字号、行间距、字间距在 iOS 中具体定义如下：</p>

<p><img src="media/15171487371271/4A776C6C-1C3A-4CE2-BA42-B7855A4167C9.png" alt="4A776C6C-1C3A-4CE2-BA42-B7855A4167"/></p>

<p>上表中提到的 Tracking 字间距可以直接在 Photoshop 中调整，但在 Sketch 中需要调整 Character Spacing，两者之间的换算关系如下：</p>

<p><img src="media/15171487371271/E68F9983-DF96-4BC6-9706-8FF690A81138.png" alt="E68F9983-DF96-4BC6-9706-8FF690A81138"/></p>

<p>文本样式的名字是具有描述性的，建议了那种文本样式更适合在什么场景下使用。例如，Body 文本样式更适合在一大片正文文本中使用，它也是 iOS 整个系统的默认文本样式。你也可以使用更大或更小的文本样式，在下面的例子里，你还可以使用更粗的文本样式来建立文本层级。</p>

<p><img src="media/15171487371271/B0FD4676-5E1D-4EFA-8451-ED3B161094DC.png" alt="B0FD4676-5E1D-4EFA-8451-ED3B161094D"/></p>

<p>使用 Apple 提供的 API，也可以为自定义字体创建动态类型。这需要你为不同的字号尺寸分配不同的文本样式，因为不是所有的字体都有着同样的比例。</p>

<p><img src="media/15171487371271/19E82A45-DFCE-4514-976D-7007F7D779AA.png" alt="19E82A45-DFCE-4514-976D-7007F7D779AA"/></p>

<h2 id="toc_2">UIKit Elements</h2>

<p>与其在设计一个人们都早已熟悉的功能上下功夫，不如集中精力设计你 app 里独一无二的部分。Apple 提供了一系列的标准 UI 元素可以在你的 app 里使用，这些元素可以自动适配所有屏幕尺寸。</p>

<p><img src="media/15171487371271/666F9484-3AC2-4573-8E11-BC930809E52C.png" alt="666F9484-3AC2-4573-8E11-BC930809E52"/></p>

<p>像 TableView 这种不仅可以很好地根据动态类型调整文本大小，同时也继承了可读性边界、标准的交互（如滑动操作、编辑模式）。还有好多其他的资源可以帮助你的 app 增强一致性、在所有的设备上无缝适配。</p>

<p><img src="media/15171487371271/05295F07-01E9-4262-AE93-35B1C364EA1C.png" alt="05295F07-01E9-4262-AE93-35B1C364EA1"/></p>

<p>对于 iPad 上的适配，这里有一些小建议。标准的尺寸级别或者说 iPad 可以使用分屏视图，为了在 iPhone 和 iPad 上保持内容层级，需要考虑你的 app 的内容是怎样呈现的。<br/>
对于分屏视图，其左侧被称之为 Master View 主视图，右侧被称为 Detail View 详情视图。在 iPhone 上的详情视图你必须要进入更深的层级页面才能看到。</p>

<p><img src="media/15171487371271/1A4F4352-5B32-46D8-AD28-C59F1FC066D7.png" alt="1A4F4352-5B32-46D8-AD28-C59F1FC066D7"/></p>

<p>一个 iPad 会共享 iPad 和 iPhone 上特定的布局，iPad 的布局应该与 iPhone 布局一样保持相同的布局层级，比如标准的导航栏、工具栏、标签栏等。</p>

<p><img src="media/15171487371271/E1F1B2A3-92EC-44AB-AD5C-B708A9B32439.png" alt="E1F1B2A3-92EC-44AB-AD5C-B708A9B32439"/></p>

<p>如果的你的 app 可以使用多任务功能，当你的 app 需要与其他 app 同时显示时这可以保持 app 的一致性。在多任务时，你的 app可以根据当前的屏幕宽度在 iPhone 布局或者说 Compact 紧凑型布局和 Regular 标准型布局间过渡切换。</p>

<p><img src="media/15171487371271/D19AF33C-B2CB-48DE-AA6D-FD4EBE6C9755.png" alt="D19AF33C-B2CB-48DE-AA6D-FD4EBE6"/></p>

<p><img src="media/15171487371271/1C410DF9-B559-4455-8478-8C9689B61B62.png" alt="1C410DF9-B559-4455-8478-8C9689B61B62"/></p>

<h2 id="toc_3">总结</h2>

<ul>
<li>考虑使用 Size Class 可以使你的 app 不管用户使用什么设备都能表现的很出色。</li>
<li>使用动态类型可以使你的文本更加容易放大缩小、翻译到其他语言，这可以让更多的人使用你的 app。</li>
<li>充分利用好已经有的 UI 元素将会把你从再设计、再创造那些用户早已熟悉的功能中解放出来。</li>
</ul>

<p>我们鼓励你利用好这些工具，不仅会节约你的时间，而且不管用户使用的是什么 iOS 设备，你的 app 的体验都是无缝完美的。</p>

<h2 id="toc_4">Read More</h2>

<ul>
<li><a href="https://developer.apple.com/ios/human-interface-guidelines/visual-design/adaptivity-and-layout/">Adaptivity and Layout - Visual Design - iOS Human Interface Guidelines</a></li>
<li><a href="https://developer.apple.com/ios/human-interface-guidelines/visual-design/typography/">Typography - Visual Design - iOS Human Interface Guidelines</a></li>
</ul>

<blockquote>
<p>Session 链接：<a href="https://developer.apple.com/videos/play/wwdc2017/812">Size Classes and Core Components - WWDC 2017 - Videos - Apple Developer</a>    </p>
</blockquote>

<p>📱</p>

<blockquote>
<p>如果你觉得这篇文章对你有所帮助，欢迎请我喝杯咖啡，感谢你的支持😁</p>

<p><img src="media/14625521742746/15088240400740.jpg" alt=""/></p>
</blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[什么是好的，什么是美的]]></title>
    <link href="https://steppark.net/15120578044761.html"/>
    <updated>2017-12-01T00:03:24+08:00</updated>
    <id>https://steppark.net/15120578044761.html</id>
    <content type="html"><![CDATA[
<p>这是我的个人博客中关于生活的第一篇文章，今天也是 2017 年的最后一个月的第一天，此时此刻的我正准备开始我的第三份工作，准备与北京说再见，再次回到上海，开启一段新的旅程。在这个转折点，我觉得值得用一篇文章来承前启后，记录下当前的状态和对未来的期望。</p>

<span id="more"></span><!-- more -->

<blockquote>
<iframe allow="autoplay *; encrypted-media *;" frameborder="0" height="150" sandbox="allow-forms allow-popups allow-same-origin allow-scripts allow-top-navigation-by-user-activation" src="https://embed.music.apple.com/cn/album/%E6%88%91%E4%BB%AC%E7%9A%84%E6%97%B6%E5%85%89/1156892027?i=1156892150&app=music" width="100%"></iframe>
</blockquote>

<h2 id="toc_0">好的城市、好的生活</h2>

<h3 id="toc_1">北京与上海</h3>

<p>北京和上海，中国最大的两座特一线城市，几年间我用亲身经历体验了两座城市不同的生活，所以我想先来聊聊北京和上海这两座城市。</p>

<p>以下这些文字我也作为我的一个回答放在了知乎的「<a href="https://www.zhihu.com/question/21727056/answer/269191132">北京和上海给你的感觉的对比是怎样的？ </a>」这个问题下面。</p>

<hr/>

<p>作为一个在上海上过四年大学，在上海工作过两年，又在北京工作过两年，现在准备回到上海生活的亲身深入体验过北京和上海生活的人，我来说说我自己对于北京和上海这两座中国超级大都市的主观感受。<br/>
先说明下，我的职业是互联网公司产品经理，以下均是根据我的实际情况、个人偏好输出的主观感受，每个人的情况都不一样，仅供参考。</p>

<ul>
<li><p><strong>交通、地理位置</strong></p>
<ul>
<li>北京：北京的交通由于道路规划的问题堵车十分严重，北京地铁与上海地铁的里程数不相上下，但坐多了北京地铁你就会有个感觉：你去一个地方总得换乘好几次或者说两条线离得特别近，可你就是不能一下子换过去。北京虽然也是一个交通枢纽，但你会发现周边好像没啥值得去、值得玩的地方。</li>
<li>上海：得益于将城市环线修建成高架，上海的交通拥堵会比北京好一些。上海地铁相对于也修建的晚一些，但是后期发展迅猛，目前也是十分便捷的公共交通工具。上海地理位置得天独厚，北江苏南浙江，可玩的地方太多，一小时可达南京、杭州、苏州、无锡这些重要城市。另外江浙沪小商品产业发达，「江浙沪包邮」习惯了之后可以说就离不开。</li>
</ul></li>
<li><p><strong>气候、空气质量</strong></p>
<ul>
<li>北京：地处北方，夏天没有那么炎热（高了也就 35 度左右），冬天寒风刺骨（低了能到零下 10 度），但好在冬季供暖。北方人应该比较适应这个气候。但到了冬季，随之而来的还有严重的雾霾，长期看着那灰蒙蒙的天空，每天的心情必然也好不到哪去。</li>
<li>上海：地处南方，夏天潮湿闷热（高了能到 40 度），高温红色预警一年总有那么几次，冬天虽然温度没有那么低，但湿冷，没有供暖。另外上海还会有梅雨天气，一连好多天一直都是淅淅沥沥的小雨，比拼谁的袜子和内裤多的季节。雾霾相比于北京自然轻得多，但不是没有。</li>
</ul></li>
<li><p><strong>互联网行业</strong></p>
<ul>
<li>北京：由于大量理工类院校盘踞帝都再加上早期一些政策上的扶持等因素，北京是互联网重镇，各种各样的互联网公司层出不穷，特别是一些互联网巨头北京优势明显，择业范围很广。</li>
<li>上海：上海作为中国的经济中心，自然互联网行业发展的远不如金融相关行业，相比北京，特别是互联网成熟的公司的数量，逊色很多。</li>
</ul></li>
<li><p><strong>城市建设</strong></p>
<ul>
<li>北京：北京给我的感觉是现代化、洋气的地方过于集中，一走出去立马就感觉到了城乡结合部，发展不均衡。城市的整体建设比较粗犷，可能和北方人的性格有关。</li>
<li>上海：上海的城市建设可以用鳞次栉比、错落有致来形容，各种商圈的分布比较均匀，郊区亦有自己的特色和发展实力。</li>
</ul></li>
<li><p><strong>人文历史气息</strong></p>
<ul>
<li>北京：人文历史气息浓厚，天安门、故宫、前门、雍和宫、长城、天坛、鼓楼各种历史建筑任君挑选。</li>
<li>上海：几乎没有什么历史人文景点，说到去上海旅游首先想到的应该就是外滩了。</li>
</ul></li>
<li><p><strong>生活便利度</strong></p>
<ul>
<li>北京：便利店稀稀落落，没有深入贯穿到大街小巷，有时候买个东西确实很不方便。</li>
<li>上海：全家、罗森、好德、可的、711、喜士多十分常见，有这些的时候你感觉不到什么，但离开了你就能觉出来没有这些造成的不便利。</li>
</ul></li>
<li><p><strong>办事风格</strong></p>
<ul>
<li>北京：更讲究走关系，你需要通过一些方法来达成自己的目的，当然比三四线城市好得多。北京作为「首都」，有时候生活莫名会受到一些政策影响。</li>
<li>上海：更有契约精神，讲究规则，讲究办事效率。如果你关注了「上海发布」，你会发现它发布的东西会和我们的民生非常贴近，有时候十分受用。</li>
</ul></li>
</ul>

<p>在根据我的个人偏好综合考虑了这些因素之后，我选择再次回到上海。人生苦短，及时行乐，相比于工作，我觉得生活的开心亦十分重要。<br/>
从上海到北京再到上海，我并没有觉着这是在折腾，是在浪费时间。反而倒觉得，这样深入真实的亲身经历是一份宝贵的人生体验，就是因为我真的亲身听到了、看到了、感受到了、比较过了、思考过了我才知道什么才是适合我的。<br/>
一个城市的各方面的特点在每个人的心里的比重都不会一样，重要的还是能找到自己喜欢的、适合自己的城市。</p>

<hr/>

<h3 id="toc_2">这一年我去过的城市</h3>

<p>即将过去的 2017 年对我的意义十分重大，在这一年，到目前为止非常幸运地游览了大大小小十八座不同特色的城市，不仅作为一名游客体验了不同城市的风光，更深入了解思考了城市背后的人和事。</p>

<ul>
<li><p><strong>成都、西安、昆明</strong></p>
<ul>
<li>这三座城市均是省会城市，给我留下印象最深刻的还属成都，这里有着丰富的美食，有着难得的悠闲的生活节奏以及还不错的城市建设，从成都双流国际机场的客流量就可见一斑。而西安和昆明给我的感觉就是不瘟不火，有着省会城市的发达，亦有着发展过程中的种种乱象，要想更好还需要加把劲。</li>
</ul></li>
<li><p><strong>杭州、深圳</strong></p>
<ul>
<li>之所以把这两座城市并列来讲，是因为它们都是提到互联网可以想到的城市。杭州的地理位置决定了它不会差，良好的城市建设配上西湖，想想在这里生活就不错。</li>
<li>来到深圳这座年轻的城市，「来了就是深圳人」的标语一定会让你留下深刻印象，去香港的便利度也让你能同时体验两种不同的城市生活。</li>
</ul></li>
<li><p><strong>大阪、京都、奈良、东京</strong></p>
<ul>
<li>提到日本，中国人可能想到更多的是历史，是战争。可你真正到了这个国家之后才会发现，日本值得我们学习的太多太多，礼仪之道、环保观念、服务意识、城市规划、发达交通、对每一件事的精细程度都令人大为惊叹。</li>
<li>洗手间便池旁边的一个小挂钩、电梯里的应急物品、下车时司机的感谢、电车上的轻声细语、民宿里设备的完善周到，你在其他地方见不到或不常见到的，在日本你都能处处可见。</li>
<li>推荐每一个做产品设计的人都去日本看看，这里的生活处处蕴藏着产品设计应有的追求极致的理念与哲学。我也期望之后能够再次造访日本，更深入地认识刻板印象背后的日本，学其长，补己短。</li>
</ul></li>
<li><p><strong>台北、香港、澳门</strong></p>
<ul>
<li>这三座城市的环境与生活方式与中国内地有着极大的不同，但又与中国内地密不可分。</li>
<li>台北温良恭俭让的人民在第一天到达时给予我的热情帮助就让我对这座城市好感倍增；从澳门独特的博彩文化的神奇存在之内之外，你总能体会到一丝丝普通人生活的无奈；今年去了两次香港，不仅感受到了这座国际化都市里各种自由文化的碰撞与交流，亦感受到了香港人为争取更好生活、维系个人权利所作出的勇敢努力和其生活背后的压力。</li>
</ul></li>
</ul>

<p>不同城市的风景，在我的脑海里自由地碰撞，极大地扩大了我的视野，影响着我对世界的看法，更让我知道对于城市、对于生活，什么是好的，什么是美的，还有更大的世界等我去探索。</p>

<h2 id="toc_3">好的产品、好的工作</h2>

<p>「作为一个产品经理，你要首先知道什么是好的，什么是美的。」这是大学还未毕业、第一次面试产品经理时，一位让我第一次知道还有产品经理这个职业、当时我非常喜欢和佩服的产品经理告诉我的，这也是这篇文章题目的出处。她是一位来自小米的女产品，她口齿伶俐、逻辑清晰，具有优秀的领导管理能力但又十分亲切，她是我心目中优秀的产品经理。而那时的我仅有一番做产品经理的热情和一丢丢做产品的感觉，不懂的不知道的还有太多太多。</p>

<p>而如今在做了近四年产品经理之后，再回过头去想这句简单的话，感触颇深。四年工作，两家公司，产品经理的工作不仅让我在产品的专业技能上得到了极大提升，更让我知道了如何做一名合格的职场人、如何与团队紧密地协作，更让我扩大了眼界，知道了什么是好的产品、好的团队、好的工作，更让我建立成熟稳重的人生观、价值观、世界观。</p>

<p>有一位产品经理曾经公开讲过：「产品经理最重要的能力不是某一项技能，而是「让正确的事情相继发生」。「让正确的事情相继发生」，就是产品经理的全部工作，如果在这个过程中需要懂技术，就去学技术，需要懂交互，就去学交互，需要懂画图，就去学画图，需要懂公开演讲，就去学公开演讲，需要懂 XX，就去学 XX。团队中，谁都可以说这不是我的职责范围，只有产品经理不行。」可见，产品经理的学习没有边界，要想变得更好，需要探索的还有许多许多。</p>

<p>非常幸运能够在当初毕业之时，没有走过多弯路就选择了能与自己兴趣结合的工作，并且能一直热情不减地做下去。如今第三份工作，我选择了看上去最近颇为热门的人工智能方向。希望能够再过三年、五年在各个方面能成长到一个新的高度，再次回过头来还能发现现在的不足，而这不也正是成长的意义和价值所在吗？</p>

<p>世界很大，未来的路道阻且长，但这并不妨碍我们不断去发现、去成就更好的、更美的，行则将至，与君共勉。</p>

<blockquote>
<iframe allow="autoplay *; encrypted-media *;" frameborder="0" height="150" sandbox="allow-forms allow-popups allow-same-origin allow-scripts allow-top-navigation-by-user-activation" src="https://embed.music.apple.com/cn/album/best-day-of-my-life/832889970?i=832889974&app=music" width="100%"></iframe>
</blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[个人常用 app 适配 iPhone X 的时间线记录]]></title>
    <link href="https://steppark.net/15091947537272.html"/>
    <updated>2017-10-28T20:45:53+08:00</updated>
    <id>https://steppark.net/15091947537272.html</id>
    <content type="html"><![CDATA[
<p>iPhone X 与之前的 iPhone 不同，为了达到全面屏的效果，实体 Home 键被屏幕底部的 Home Indicator 取代，屏幕的四个角由直角变为了圆角，屏幕比例也不再是常见的 16:9，更引人注意的是屏幕顶部还有一个特殊的 Sensor Housing，也即人们俗称的刘海。<a href="15086036845015.html">之前的文章</a>详细阐述了这些变化给 iPhone X 上的 app  适配带去的挑战。</p>

<p>10 月 27 日 iPhone X 开启预订，11 月 3 日第一批大众用户就将要拿到崭新的 iPhone X。同在 10 月 27 日，Apple 发布<a href="https://developer.apple.com/news/?id=10272017a">公告</a>提醒开发者现在可以开始在 iTunes Connect 中提交适配了 iPhone X 的 app、更新 app 的元数据信息了。<a href="https://itunespartner.apple.com/en/apps/news/5993372">iTunes Connect 也开始支持为 app 添加 5.8 寸屏幕预览图片</a>。</p>

<span id="more"></span><!-- more -->

<p><img src="media/15091947537272/15091977143817.jpg" alt="" class="mw_img_center" style="display: block; clear:both; margin: 0 auto;"/></p>

<blockquote>
<h5 id="toc_0">🗳 <strong>本文章已归档，不再更新</strong></h5>
</blockquote>

<p>没有适配 iPhone X 的 app 在 iPhone X 上打开时，很有可能就是以 iPhone 8 的屏幕大小、上下有黑边的形式（竖屏条件下）呈现（具体可以看<a href="15086036845015.html">这篇文章</a>的<a href="15086036845015.html#toc_16">「App 的适配」</a>部分），这将十分影响用户体验。以下按照不同的使用频率，列出了我个人使用的一些 app，以记录这些 app 适配 iPhone X 的时间线。一方面可以观察什么时间 iPhone X 可以度过这个 app 适配的尴尬期，有助于购机决策；另一方面也把这些信息记录下来，以供以后 Apple 再次推出这种改变已有屏幕比例、增加新的特性以致需要耗费较多工作适配的机型时的参考。</p>

<p>一个 app 对新机型的适配速度和适配质量能够很大程度上反映出开发者对这个 app 上不上心。</p>

<ul>
<li><p><strong>Note：</strong></p></li>
</ul>

<ol>
<li>本文章会根据 app 适配 iPhone X 的进度不定期更新；</li>
<li>部分 app 如果没有在更新日志中提到适配了 iPhone X，该 app 也会被标记为未适配；</li>
<li><p>10 月 27 日前 Apple 不允许在更新日志中提及 iPhone X 及其相关截图、视频等资源，在这之前也有一些成功提交了更新信息的「漏网之鱼」。</p></li>
</ol>

<ul>
<li><p><strong>11 月 1 日更新：</strong></p></li>
</ul>

<ol>
<li>从 10 月 31 日各家媒体发出的 iPhone X 评测来看，国内的这些应用适配的速度比想象的快一些，像手机淘宝、大众点评、什么值得买等 app 都进行了 iPhone X 的适配，但并没有在更新说明中提到此事。不过常用的微博没有适配，微信适配了一部分，仍有一些问题。</li>
<li><p>下表中的适配选项暂时仍按照 app 的更新说明来确定。</p></li>
</ol>

<ul>
<li><p><strong>11 月 3 日更新：</strong></p></li>
</ul>

<ol>
<li>今日 iPhone X 正式开卖，App Store app 更新密度变高，适配 iPhone X 的 app 开始多了起来；</li>
<li>微信算是在发售前赶上了末班车，完成适配；微博不出所料依旧没有适配，点名批评；支付宝看似适配了，实际上 Face ID 没有适配，iPhone X 上只能用手势和密码了；</li>
<li>银行界的希望「招商银行」果然完成了适配，表扬；</li>
<li><p>后续只更新个人认为比较重要 app 的更新状态。</p></li>
</ol>

<ul>
<li><p><strong>11 月 5 日更新：</strong></p></li>
</ul>

<ol>
<li>根据 app 在真机上的实际情况来更新适配情况，不再根据 app 更新日志来确定 app 适配情况；</li>
<li>还是有挺多 app 已经完成了适配，但是并没有在 app 更新日志里提及； </li>
<li><p>适配 iPhone X 的状态改为三种：Yes-完全适配，No-完全没适配，Icp（incomplete）-不完全适配，在备注中会写明适配细节，☹️ 表明对这个 app 本来很看好，但实际的适配情况略有失望。</p></li>
</ol>

<ul>
<li><p><strong>11 月 8 日更新：</strong></p></li>
</ul>

<ol>
<li>越来越多的 app 更新适配了 iPhone X，但发现绝大多数的 app 的适配更新都有赶工痕迹，主要路径、整体 UI 没有特别大的问题，但仔细观察一些细节就会发现问题。要想把 iPhone X 适配好，得仔细多花些心思。</li>
<li>视频播放这块，由于各家视频应用的播放器都有一些花里胡哨的功能，所以在横屏播放上大多数的适配都有问题或者说交互不够友好、容易误触等。</li>
<li>国内的这些应用喜欢在开屏时设置全屏的开屏广告，应用内又喜欢设置令人眼花缭乱的推荐位广告。非常明显，这些广告的图片没有针对 iPhone X 进行特殊优化，切字、盖字现象普遍存在。</li>
<li><p>笼统比较一下国内主要 app 适配的速度，豆瓣、饿了么、美团、大众点评、携程、网易、京东、滴滴这几家都比较迅速，腾讯紧随其后，再就是阿里系，百度直接垫底。</p></li>
</ol>

<ul>
<li><p><strong>12 月 1 日最后更新：</strong></p></li>
</ul>

<ol>
<li>一个月过去，来个总结，这也是最后一次更新此文章。主流 app 基本完成了对 iPhone X 的适配更新。优秀的 app 整体完成度很高，能够在 iPhone X 上获得很好的使用体验；次之的是简单完成适配更新的 app，整体使用没有问题，但在一些细节上可能仍存在问题，现在的方案并不是最好的方案还需要开发者慢慢调整。</li>
<li>当然仍然存在一些尚未更新适配的 app，其中也不乏用户量比较大的 app。</li>
<li><p>正如之前预料的一样，对于一些紧密跟随 iOS 新技术、由独立开发者/小团队开发、有一定用户规模的 app （这类 app 反而会较多使用系统标准控件，响应用户、跟进新特性也比较及时😎）会较快适配 iPhone X，而对于一些逻辑复杂、牵一发而动全身、只追求能用不追求好用的 app（这类 app 使用系统标准控件较少，经常出现一些自以为很炫酷但实际很反人类的交互，而且修改 bug、适配新特性还不积极🙄，如银行 app、12306等）对于 iPhone X 的适配响应和质量就会差一些。</p>
<p><img src="media/15086036845015/F3F09540-55D2-42BA-89A0-111F28078172.png" alt="F3F09540-55D2-42BA-89A0-111F28078172"/></p></li>
</ol>

<h2 id="toc_1">第一梯队</h2>

<table>
<thead>
<tr>
<th style="text-align: center">App</th>
<th style="text-align: center">适配 iPhone X</th>
<th style="text-align: center">版本号</th>
<th style="text-align: center">日期</th>
<th style="text-align: center">备注</th>
</tr>
</thead>

<tbody>
<tr>
<td style="text-align: center">Wechat</td>
<td style="text-align: center">Yes</td>
<td style="text-align: center">6.5.21</td>
<td style="text-align: center">2017-11-03</td>
<td style="text-align: center"></td>
</tr>
<tr>
<td style="text-align: center">Weibo</td>
<td style="text-align: center">Icp</td>
<td style="text-align: center">7.10.3</td>
<td style="text-align: center">2017-11-04</td>
<td style="text-align: center">赶工痕迹明显，图片拉伸、UI 错位</td>
</tr>
<tr>
<td style="text-align: center">Alipay</td>
<td style="text-align: center">Yes</td>
<td style="text-align: center">10.1.8</td>
<td style="text-align: center">2017-11-28</td>
<td style="text-align: center"></td>
</tr>
<tr>
<td style="text-align: center">Youtube</td>
<td style="text-align: center">Yes</td>
<td style="text-align: center"></td>
<td style="text-align: center">2017-11-04 前</td>
<td style="text-align: center"></td>
</tr>
<tr>
<td style="text-align: center">Spotify</td>
<td style="text-align: center">Yes</td>
<td style="text-align: center">8.4.28</td>
<td style="text-align: center">2017-11-17</td>
<td style="text-align: center"></td>
</tr>
<tr>
<td style="text-align: center">Pocket Casts</td>
<td style="text-align: center">Yes</td>
<td style="text-align: center"></td>
<td style="text-align: center">2017-11-04 前</td>
<td style="text-align: center"></td>
</tr>
<tr>
<td style="text-align: center">Surge</td>
<td style="text-align: center">Yes</td>
<td style="text-align: center">2.7.0</td>
<td style="text-align: center">2017-11-04 前</td>
<td style="text-align: center">在此指 TestFlight 版本</td>
</tr>
<tr>
<td style="text-align: center">Documents</td>
<td style="text-align: center">Yes</td>
<td style="text-align: center">6.2.1</td>
<td style="text-align: center">2017-11-03</td>
<td style="text-align: center"></td>
</tr>
<tr>
<td style="text-align: center">端</td>
<td style="text-align: center">Yes</td>
<td style="text-align: center">1.9.0</td>
<td style="text-align: center">2017-11-29</td>
<td style="text-align: center"></td>
</tr>
<tr>
<td style="text-align: center">Airmail</td>
<td style="text-align: center">Yes</td>
<td style="text-align: center"></td>
<td style="text-align: center">2017-11-04 前</td>
<td style="text-align: center"></td>
</tr>
<tr>
<td style="text-align: center">Things 3</td>
<td style="text-align: center">Yes</td>
<td style="text-align: center">3.2.4</td>
<td style="text-align: center">2017-11-04</td>
<td style="text-align: center"></td>
</tr>
<tr>
<td style="text-align: center">Tweetbot 4</td>
<td style="text-align: center">Yes</td>
<td style="text-align: center">4.7.6</td>
<td style="text-align: center">2017-10-22</td>
<td style="text-align: center"></td>
</tr>
<tr>
<td style="text-align: center">Due</td>
<td style="text-align: center">Yes</td>
<td style="text-align: center">2.6</td>
<td style="text-align: center">2017-11-05</td>
<td style="text-align: center"></td>
</tr>
<tr>
<td style="text-align: center">My Weather</td>
<td style="text-align: center">Yes</td>
<td style="text-align: center">1.5.5</td>
<td style="text-align: center">2017-10-27</td>
<td style="text-align: center"></td>
</tr>
<tr>
<td style="text-align: center">Medium</td>
<td style="text-align: center">Yes</td>
<td style="text-align: center">3.11</td>
<td style="text-align: center">2017-11-04</td>
<td style="text-align: center"></td>
</tr>
<tr>
<td style="text-align: center">Moke</td>
<td style="text-align: center">Yes</td>
<td style="text-align: center">2.23</td>
<td style="text-align: center">2017-11-03</td>
<td style="text-align: center"></td>
</tr>
<tr>
<td style="text-align: center">Fantastical</td>
<td style="text-align: center">Yes</td>
<td style="text-align: center">2.9.2</td>
<td style="text-align: center">2017-11-02</td>
<td style="text-align: center"></td>
</tr>
<tr>
<td style="text-align: center">Bear</td>
<td style="text-align: center">Yes</td>
<td style="text-align: center">1.3.2</td>
<td style="text-align: center">2017-11-04</td>
<td style="text-align: center"></td>
</tr>
<tr>
<td style="text-align: center">Dictionary</td>
<td style="text-align: center">Yes</td>
<td style="text-align: center"></td>
<td style="text-align: center">2017-11-04 前</td>
<td style="text-align: center"></td>
</tr>
<tr>
<td style="text-align: center">Today</td>
<td style="text-align: center">Yes</td>
<td style="text-align: center"></td>
<td style="text-align: center">2017-11-04 前</td>
<td style="text-align: center"></td>
</tr>
<tr>
<td style="text-align: center">Tydlig</td>
<td style="text-align: center">Yes</td>
<td style="text-align: center">1.6</td>
<td style="text-align: center">2017-11-29</td>
<td style="text-align: center"></td>
</tr>
<tr>
<td style="text-align: center">高德地图</td>
<td style="text-align: center">Yes</td>
<td style="text-align: center">8.2.0</td>
<td style="text-align: center">2017-11-07</td>
<td style="text-align: center"></td>
</tr>
<tr>
<td style="text-align: center">豆瓣</td>
<td style="text-align: center">Yes</td>
<td style="text-align: center">5.10.0</td>
<td style="text-align: center">2017-10-25</td>
<td style="text-align: center"></td>
</tr>
<tr>
<td style="text-align: center">即刻</td>
<td style="text-align: center">Yes</td>
<td style="text-align: center">3.6.0</td>
<td style="text-align: center">2017-11-03</td>
<td style="text-align: center"></td>
</tr>
<tr>
<td style="text-align: center">Instapaper</td>
<td style="text-align: center">Yes</td>
<td style="text-align: center">7.5</td>
<td style="text-align: center">2017-11-04</td>
<td style="text-align: center"></td>
</tr>
<tr>
<td style="text-align: center">VSCO</td>
<td style="text-align: center">Yes</td>
<td style="text-align: center"></td>
<td style="text-align: center">2017-11-04 前</td>
<td style="text-align: center"></td>
</tr>
<tr>
<td style="text-align: center"><strong><em>Ai Search</em></strong></td>
<td style="text-align: center">No</td>
<td style="text-align: center"></td>
<td style="text-align: center"></td>
<td style="text-align: center">据作者说，这个版本应该不会对 iPhone X 适配了，只能等待新的大版本（3.0）了</td>
</tr>
<tr>
<td style="text-align: center"><strong><em>挖财记账理财</em></strong></td>
<td style="text-align: center">No</td>
<td style="text-align: center"></td>
<td style="text-align: center"></td>
<td style="text-align: center"></td>
</tr>
</tbody>
</table>

<h2 id="toc_2">第二梯队</h2>

<table>
<thead>
<tr>
<th style="text-align: center">App</th>
<th style="text-align: center">适配 iPhone X</th>
<th style="text-align: center">版本号</th>
<th style="text-align: center">日期</th>
<th style="text-align: center">备注</th>
</tr>
</thead>

<tbody>
<tr>
<td style="text-align: center">LightScreen</td>
<td style="text-align: center">Yes</td>
<td style="text-align: center">2.14</td>
<td style="text-align: center">2017-10-20</td>
<td style="text-align: center"></td>
</tr>
<tr>
<td style="text-align: center">Starbucks China</td>
<td style="text-align: center">Yes</td>
<td style="text-align: center">5.0</td>
<td style="text-align: center">2017-10-25</td>
<td style="text-align: center"></td>
</tr>
<tr>
<td style="text-align: center">淘宝</td>
<td style="text-align: center">Icp</td>
<td style="text-align: center"></td>
<td style="text-align: center"></td>
<td style="text-align: center">还是很多页面适配存在问题，顶部导航栏直接被刘海遮住，另外商品详情页上的 tool bar 适配的与京东一样，不够完美</td>
</tr>
<tr>
<td style="text-align: center">京东</td>
<td style="text-align: center">Yes</td>
<td style="text-align: center"></td>
<td style="text-align: center">2017-11-04 前</td>
<td style="text-align: center">个人感觉在商品详情页上的 tool bar 适配的不够好</td>
</tr>
<tr>
<td style="text-align: center">Instagram</td>
<td style="text-align: center">Yes</td>
<td style="text-align: center"></td>
<td style="text-align: center">2017-11-04 前</td>
<td style="text-align: center"></td>
</tr>
<tr>
<td style="text-align: center">Dropbox</td>
<td style="text-align: center">Yes</td>
<td style="text-align: center"></td>
<td style="text-align: center">2017-11-04 前</td>
<td style="text-align: center"></td>
</tr>
<tr>
<td style="text-align: center">Swarm</td>
<td style="text-align: center">Yes</td>
<td style="text-align: center"></td>
<td style="text-align: center">2017-11-04 前</td>
<td style="text-align: center"></td>
</tr>
<tr>
<td style="text-align: center">Reeder</td>
<td style="text-align: center">Yes</td>
<td style="text-align: center">3.1</td>
<td style="text-align: center">2017-11-10</td>
<td style="text-align: center"></td>
</tr>
<tr>
<td style="text-align: center">Infuse</td>
<td style="text-align: center">Yes</td>
<td style="text-align: center">5.6</td>
<td style="text-align: center">2017-11-10</td>
<td style="text-align: center"></td>
</tr>
<tr>
<td style="text-align: center">Workflow</td>
<td style="text-align: center">Yes</td>
<td style="text-align: center">1.7.7</td>
<td style="text-align: center">2017-11-10</td>
<td style="text-align: center"></td>
</tr>
<tr>
<td style="text-align: center">Authy</td>
<td style="text-align: center">Yes</td>
<td style="text-align: center">21.1</td>
<td style="text-align: center">2017-11-23</td>
<td style="text-align: center"></td>
</tr>
<tr>
<td style="text-align: center">Telegram</td>
<td style="text-align: center">Yes</td>
<td style="text-align: center">4.5</td>
<td style="text-align: center">2017-11-15</td>
<td style="text-align: center"></td>
</tr>
<tr>
<td style="text-align: center">1Password</td>
<td style="text-align: center">Yes</td>
<td style="text-align: center">7.0</td>
<td style="text-align: center">2017-11-02</td>
<td style="text-align: center"></td>
</tr>
<tr>
<td style="text-align: center">ofo</td>
<td style="text-align: center">Yes</td>
<td style="text-align: center"></td>
<td style="text-align: center">2017-11-04 前</td>
<td style="text-align: center"></td>
</tr>
<tr>
<td style="text-align: center">Mobike</td>
<td style="text-align: center">Yes</td>
<td style="text-align: center"></td>
<td style="text-align: center"></td>
<td style="text-align: center"></td>
</tr>
<tr>
<td style="text-align: center">大众点评</td>
<td style="text-align: center">Yes</td>
<td style="text-align: center"></td>
<td style="text-align: center">2017-11-04 前</td>
<td style="text-align: center"></td>
</tr>
<tr>
<td style="text-align: center">饿了么</td>
<td style="text-align: center">Yes</td>
<td style="text-align: center">7.21</td>
<td style="text-align: center">2017-11-04 前</td>
<td style="text-align: center"></td>
</tr>
<tr>
<td style="text-align: center">Twitter</td>
<td style="text-align: center">Yes</td>
<td style="text-align: center">7.10</td>
<td style="text-align: center">2017-11-04 前</td>
<td style="text-align: center"></td>
</tr>
<tr>
<td style="text-align: center">淘票票</td>
<td style="text-align: center">Yes</td>
<td style="text-align: center">7.3.5</td>
<td style="text-align: center">2017-10-31</td>
<td style="text-align: center"></td>
</tr>
<tr>
<td style="text-align: center">WaterMinder</td>
<td style="text-align: center">Yes</td>
<td style="text-align: center">3.4</td>
<td style="text-align: center">2017-10-31</td>
<td style="text-align: center"></td>
</tr>
<tr>
<td style="text-align: center">网易云音乐</td>
<td style="text-align: center">Yes</td>
<td style="text-align: center">4.2.2</td>
<td style="text-align: center">2017-10-31</td>
<td style="text-align: center"></td>
</tr>
<tr>
<td style="text-align: center">滴滴出行</td>
<td style="text-align: center">Yes</td>
<td style="text-align: center">5.1.18</td>
<td style="text-align: center">2017-11-02</td>
<td style="text-align: center"></td>
</tr>
<tr>
<td style="text-align: center">Google Photos</td>
<td style="text-align: center">Yes</td>
<td style="text-align: center">3.8.0</td>
<td style="text-align: center">2017-11-02</td>
<td style="text-align: center"></td>
</tr>
<tr>
<td style="text-align: center">Instapaper</td>
<td style="text-align: center">Yes</td>
<td style="text-align: center"></td>
<td style="text-align: center">2017-11-06</td>
<td style="text-align: center"></td>
</tr>
<tr>
<td style="text-align: center">猫眼电影</td>
<td style="text-align: center">Yes</td>
<td style="text-align: center">8.1.4</td>
<td style="text-align: center">2017-11-06</td>
<td style="text-align: center"></td>
</tr>
<tr>
<td style="text-align: center">知乎</td>
<td style="text-align: center">Yes</td>
<td style="text-align: center">4.4.2</td>
<td style="text-align: center">2017-11-08</td>
<td style="text-align: center"></td>
</tr>
<tr>
<td style="text-align: center">QQ</td>
<td style="text-align: center">Yes</td>
<td style="text-align: center">7.2.8</td>
<td style="text-align: center">2017-11-08</td>
<td style="text-align: center"></td>
</tr>
</tbody>
</table>

<h2 id="toc_3">第三梯队</h2>

<table>
<thead>
<tr>
<th style="text-align: center">App</th>
<th style="text-align: center">适配 iPhone X</th>
<th style="text-align: center">版本号</th>
<th style="text-align: center">日期</th>
<th style="text-align: center">备注</th>
</tr>
</thead>

<tbody>
<tr>
<td style="text-align: center">Castro 2</td>
<td style="text-align: center">Yes</td>
<td style="text-align: center">2.5.1</td>
<td style="text-align: center">2017-10-27</td>
<td style="text-align: center"></td>
</tr>
<tr>
<td style="text-align: center">好奇心日报</td>
<td style="text-align: center">Yes</td>
<td style="text-align: center">3.4.5</td>
<td style="text-align: center">2017-10-29</td>
<td style="text-align: center"></td>
</tr>
<tr>
<td style="text-align: center">菜鸟裹裹</td>
<td style="text-align: center">Yes</td>
<td style="text-align: center">4.4.1</td>
<td style="text-align: center">2017-10-31</td>
<td style="text-align: center"></td>
</tr>
<tr>
<td style="text-align: center">PCalc</td>
<td style="text-align: center">Yes</td>
<td style="text-align: center">3.7.2</td>
<td style="text-align: center">2017-11-01</td>
<td style="text-align: center"></td>
</tr>
<tr>
<td style="text-align: center">Enlight</td>
<td style="text-align: center">Yes</td>
<td style="text-align: center">1.4</td>
<td style="text-align: center">2017-11-02</td>
<td style="text-align: center"></td>
</tr>
<tr>
<td style="text-align: center">招商银行</td>
<td style="text-align: center">Yes</td>
<td style="text-align: center">6.0.0</td>
<td style="text-align: center">2017-11-02</td>
<td style="text-align: center"></td>
</tr>
<tr>
<td style="text-align: center">Spark</td>
<td style="text-align: center">Yes</td>
<td style="text-align: center">1.12</td>
<td style="text-align: center">2017-11-04</td>
<td style="text-align: center"></td>
</tr>
<tr>
<td style="text-align: center">Launcher Center Pro</td>
<td style="text-align: center">Yes</td>
<td style="text-align: center">2.8.2</td>
<td style="text-align: center">2017-11-04</td>
<td style="text-align: center"></td>
</tr>
<tr>
<td style="text-align: center">QQ音乐</td>
<td style="text-align: center">Yes</td>
<td style="text-align: center">7.9.2</td>
<td style="text-align: center">2017-11-14</td>
<td style="text-align: center"></td>
</tr>
</tbody>
</table>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Designing For iPhone X —— iPhone 上有了刘海，设计和开发到底该咋整?]]></title>
    <link href="https://steppark.net/15086036845015.html"/>
    <updated>2017-10-22T00:34:44+08:00</updated>
    <id>https://steppark.net/15086036845015.html</id>
    <content type="html"><![CDATA[
<p>Apple 在 2017 年 9 月的秋季发布会上正式发布了 iPhone X。iPhone X 与之前的 iPhone 不同，为了达到全面屏的效果，实体 Home 键被屏幕底部的 Home Indicator 取代，屏幕的四个角由直角变为了圆角，屏幕比例也不再是常见的 16:9，更引人注意的是屏幕顶部还有一个特殊的 Sensor Housing，也即人们俗称的刘海。这些变化对 iOS app 甚至网站的适配都提出了挑战，或多或少会影响你正在使用的 app 的功能与交互。</p>

<span id="more"></span><!-- more -->

<blockquote>
<p>iPhone X 首次亮相： </p>

<iframe width="560" height="315" src="https://www.youtube.com/embed/apGuVR3iJqk" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
</blockquote>

<ul>
<li><p><strong>Note：</strong></p></li>
</ul>

<ol>
<li>文章从与 iPhone X 有关的交互设计和视觉设计出发，略有提及一些开发相关问题✍️</li>
<li>由于仅是略懂一些开发的皮毛，文章中开发相关的问题的描述大部分是根据已有资料的自己理解，难免有不准确或错误的地方。如有发现，欢迎指出🖐</li>
<li><p>文章中大部分图片资源引用自 Apple 官方，一部分引用自一些其他文章。这部分均已标注出处，如果您是这些文章的作者且觉得这些引用不合适，请尽管告诉我，我会尽快删除🤝</p></li>
</ol>

<ul>
<li><p><strong>更新记录：</strong></p>
<ul>
<li>11 月 13 日：增加了有关于 iPhone X 上播放视频的「<a href="15086036845015.html#toc_10">视频</a>」部分。</li>
</ul></li>
<li><p><strong>扩展阅读：</strong></p></li>
</ul>

<blockquote>
<p>2018 年 Apple 发布了新款 iPhone — iPhone Xs、iPhone Xs Max、iPhone Xʀ 和新款 iPad Pro — iPad Pro 11″、iPad Pro 12.9″（第三代），想了解新设备的设计与适配故事，推荐阅读下面两篇文章：</p>

<ol>
<li><a href="15433010141111.html">Designing For iPhone Xs、iPhone Xs Max、iPhone Xʀ — 比大还大，更大的刘海屏 iPhone 来了</a></li>
<li><a href="https://steppark.net/15416976044741.html">Designing For New iPad Pro and Apple Pencil — 适配没有刘海的 iPad Pro 与有刘海的 iPhone Xs 有什么不同?</a><br/></li>
</ol>
</blockquote>

<h2 id="toc_0">目录</h2>

<ul>
<li>
<a href="#toc_0">目录</a>
</li>
<li>
<a href="#toc_1">前言</a>
</li>
<li>
<a href="#toc_2">屏幕尺寸</a>
</li>
<li>
<a href="#toc_3">Safe Area</a>
</li>
<li>
<a href="#toc_4">布局</a>
</li>
<li>
<a href="#toc_5">图片</a>
</li>
<li>
<a href="#toc_6">控件</a>
</li>
<li>
<a href="#toc_7">Status Bar</a>
</li>
<li>
<a href="#toc_8">Home Indicator</a>
</li>
<li>
<a href="#toc_9">颜色</a>
</li>
<li>
<a href="#toc_10">视频</a>
</li>
<li>
<a href="#toc_11">手势</a>
</li>
<li>
<a href="#toc_12">按键</a>
</li>
<li>
<a href="#toc_13">Face ID</a>
</li>
<li>
<a href="#toc_14">键盘</a>
</li>
<li>
<a href="#toc_15">适配</a>
<ul>
<li>
<a href="#toc_16">App 的适配</a>
</li>
<li>
<a href="#toc_17">App 适配实例</a>
</li>
<li>
<a href="#toc_18">网页的适配</a>
</li>
<li>
<a href="#toc_19">网页适配实例</a>
</li>
</ul>
</li>
<li>
<a href="#toc_20">iOS 11 常用 UI 标准控件的尺寸对照</a>
<ul>
<li>
<a href="#toc_21">iPhone 8</a>
</li>
<li>
<a href="#toc_22">iPhone 8 Plus</a>
</li>
<li>
<a href="#toc_23">iPhone X</a>
</li>
</ul>
</li>
<li>
<a href="#toc_24">Read More</a>
<ul>
<li>
<a href="#toc_25">Apple 官方</a>
</li>
<li>
<a href="#toc_26">非官方</a>
</li>
</ul>
</li>
</ul>


<h2 id="toc_1">前言</h2>

<p>针对 iPhone X 这些独特的新特性，有些人在网上提出了一些有趣的「解决方案」，比如：</p>

<ul>
<li><p>横屏时，列表滚动时文字优雅地略过刘海：</p>
<p><img src="media/15086036845015/1.gif" alt="1"/><br/>
（图片来源：<a href="https://twitter.com/vojtastavik/status/907911237983449088">Vojta Stavik 的 Twitter: “I think I’ve fixed the notch issue in landscape 🍾 ”</a>）</p></li>
<li><p>横屏时，列表滚动时滚动条的怪异移动路径：</p>
<p><img src="media/15086036845015/2.gif" alt="2"/><br/>
（图片来源：<a href="https://twitter.com/ZevEisenberg/status/908148886363103232">Zev Eisenberg 的 Twitter: “Here’s what the notch would look like on the other side 🍷&quot;</a>）</p></li>
<li><p>将刘海作为 UI 的一部分，从刘海里拉出工具菜单：</p>
<p><img src="media/15086036845015/72157b63ly1fjols2bjgig20ij0ij7wj.gif" alt="72157b63ly1fjols2bjgig20ij0ij7wj"/><br/>
（图片来源：<a href="https://twitter.com/0therPlanet/status/909788913702785026">Luboš Volkov⚡️ 的 Twitter: “I was working on this idea of blending app design with the #iPhoneX notch. 📲🤗&quot;</a>）</p></li>
<li><p>有人假设设置里可以控制刘海的「开与关」🙃：</p>
<p><img src="media/15086036845015/ear.gif" alt="ea"/><br/>
（图片来源：<a href="https://dribbble.com/shots/3807679-Earsbar">Earsbar by Grisha Uglanov - Dribbble</a>）</p></li>
<li><p>据说 iPhone X 发布后，天猫成为了最大赢家😅：</p>
<p><img src="media/15086036845015/4667830F-8599-443B-AF55-A0D97F3F62A4.png" alt="4667830F-8599-443B-AF55-A0D97F3F62A4"/><br/>
（图片来源：<a href="https://twitter.com/LON1ST/status/908221915453464576">朗仙森 的 Twitter: “天猫应该这样适配一下iPhone X！&quot;</a>）</p></li>
<li><p>甚至有人做出了一个快速适配方法，直接将你的 app 放置在 iPhone X 屏幕中间算完😶：</p>
<p><img src="media/15086036845015/6fe2f976ly4fjntfpkfa3j20kk0ddq3n.jpg" alt="6fe2f976ly4fjntfpkfa3j20kk0ddq3n"/><br/>
（暂时没找到原始来源）</p></li>
</ul>

<p>上面这些方法真的好吗？关于 iPhone X 的适配到底应该怎么做？这篇文章的目的就是结合 Apple 提供的一些官方资料加上网上大家对 iPhone X 的一些探索，系统地梳理下 iPhone X 在 UI 上的变化和应对方法。</p>

<h2 id="toc_2">屏幕尺寸</h2>

<ul>
<li><p>在纵向时，iPhone X 的宽度同 4.7 寸的 iPhone 6、iPhone 7、iPhone 8（也包括放大模式下的 iPhone Plus）一样，故在宽度上，这几个设备显示的内容应该是一样的；而 iPhone X 的高度上比 4.7 寸屏幕高了 145pt，这使得 iPhone X 增加了 20% 的垂直空间来显示内容。</p>
<p><img src="media/15086036845015/22FEEDE4-DAF5-48D3-86D9-EA6AB6CC3CC5.png" alt="22FEEDE4-DAF5-48D3-86D9-EA6AB6CC3C"/></p>
<ul>
<li>iPhone 6, 6s, 7, 8（4.7 寸屏幕，9:16，326ppi）：375pt × 667 pt @2x → 750px × 1334px；</li>
<li>iPhone 6 Plus, 6s Plus, 7 Plus, 8 Plus（5.5 寸屏幕，9:16，401ppi）：414pt × 736 pt @3x → 1242px × 2208px （设备显示时的物理像素为 1080px × 1920px）；</li>
<li>iPhone Plus 的放大显示模式：375pt × 667 pt @3x → 1125px × 2001px（设备显示时的物理像素为 1080px × 1920px）；</li>
<li><p>iPhone X（5.8 寸屏幕，约 9:19.5，458ppi）：375pt × 812 pt @3x → 1125px × 2436px；</p>
<p><img src="media/15086036845015/66E1E0C6-B327-445E-9734-F9C148B06ADC.png" alt="66E1E0C6-B327-445E-9734-F9C148B06AD"/><br/>
（图片来源：<a href="https://www.paintcodeapp.com/news/iphone-x-screen-demystified">iPhone X Screen Demystified</a>）</p></li>
</ul></li>
<li><p>iPhone X 外壳的一些参考尺寸标注：</p>
<p><img src="media/15086036845015/1BF24051-EEA8-4266-8C6B-400D2B16798A.png" alt="1BF24051-EEA8-4266-8C6B-400D2B16798A"/><br/>
（图片来源：<a href="https://www.paintcodeapp.com/news/iphone-x-screen-demystified">iPhone X Screen Demystified</a>）</p></li>
<li><p>iPhone 6, 7, 8, X 横屏时在 Size Class 中都属于 Compact Width，这意味着在这些设备上的横屏布局应该是一致的。</p>
<p><img src="media/15086036845015/E50C571F-85B9-4990-A124-C36D97C7BCB1.png" alt="E50C571F-85B9-4990-A124-C36D97C7BCB1"/></p>
<ul>
<li><a href="https://developer.apple.com/ios/human-interface-guidelines/visual-design/adaptivity-and-layout/#size-classes">进一步了解 Size Class</a></li>
<li><a href="https://www.paintcodeapp.com/news/ultimate-guide-to-iphone-resolutions">有关 iPhone 各个设备分辨率的参考说明</a></li>
</ul>
<p><img src="media/15086036845015/Design-iPhone.jpg" alt="Design-iPhone"/><br/>
（图片来源：<a href="https://designcode.io/ios11-iphone-x">Design+Code - Learn to design and code for iOS 11</a>）</p></li>
<li><p>需要为 iPhone X 提供 @3x 的高分辨率的图片素材，对于一些单色的图形（Apple 称之为 Glyph，如用于 tab bar、tool bar 上的 icon）推荐使用不依赖分辨率的 pdf 格式。</p>
<p><img src="media/15086036845015/2F836253-AF4A-44A8-882D-A7122378238A.png" alt="2F836253-AF4A-44A8-882D-A7122378238A"/></p></li>
</ul>

<h2 id="toc_3">Safe Area</h2>

<ul>
<li>从 iOS 11 开始，Auto Layout 中增加了一个新的布局指南：Safe Area Layout Guide，废弃了在 iOS 11 之前的 Top Layout Guide 和 Bottom Layout Guide。</li>
<li><p>在 iPhone 8 中，Safe Area 的区域即除去各种 bar 之后的区域，如果没有任何 bar，Safe Area 就是整个屏幕。iPhone 8  竖屏下的 Safe Area 大小：375pt × 667pt。</p>
<p><img src="media/15086036845015/B7550342-1D3C-4228-A6DF-3D903EFF7EEE.png" alt="B7550342-1D3C-4228-A6DF-3D903EFF7EEE"/></p></li>
<li><p>在 iPhone X 中，竖屏下的 Safe Area 顶部距屏幕顶端 44pt，底部距屏幕底端 34 pt，左右两边与屏幕左右两端对齐。这样竖屏下的 Safe Area 大小：375pt × 734pt，相比 iPhone 8 增加了 67pt。横屏下的 Safe Area 左右两边距屏幕左右两端均为 44pt（对称），底部距屏幕底端 21pt，顶部与屏幕顶端对齐。Safe Area 避免了内容与屏幕的圆角、Sensor Housing、Home Indicator 发生重叠或裁切。</p>
<p><img src="media/15086036845015/3746252E-F817-4BF9-A02C-7A7270ACA7B3.png" alt="3746252E-F817-4BF9-A02C-7A7270ACA7B3"/></p></li>
<li><p>例如，在 iPhone X 的横向视图中，table view 将会横跨整个屏幕，而 table cell 中的 content view 是嵌入其中的，即在 Safe Area 中，以避免内容被 Sensor Housing 覆盖或被屏幕圆角裁切。</p>
<p><img src="media/15086036845015/F2DC0E2A-B215-492C-9A76-124FCE328F15.png" alt="F2DC0E2A-B215-492C-9A76-124FCE328F15"/></p></li>
<li><p>Table view cell 中的 content view 会被限制在 Safe Area 中，而文本内容和控件又进一步被 Layout Margin 限制，这使得在整个 app 中的内容边距能够保持一致，并且内容能够与其他控件（如 navigation bar 上的按钮）对齐。即使你的 app 中没有使用 Auto Layout，UIView 也提供了 Safe Area 嵌入和 Layout Margin 属性的值。</p>
<p><img src="media/15086036845015/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-10-11%20%E4%B8%8A%E5%8D%8811.22.59.png" alt="屏幕快照 2017-10-11 上午11.22.59"/></p></li>
</ul>

<h2 id="toc_4">布局</h2>

<ul>
<li><p>确保内容充满整个 iPhone X 屏幕，确保内容不要被设备的圆角、传感器模块（Sensor Housing，也即刘海）、主屏幕指示器（Home Indicator）遮盖。</p>
<p><img src="media/15086036845015/9DBF4979-BBD6-4551-827A-40C231BA006A.png" alt="9DBF4979-BBD6-4551-827A-40C231BA006A"/></p></li>
<li><p>例如「Carrot Weather」针对 iPhone X 的适配，让天气的背景延伸到屏幕边缘：</p>
<p><img src="media/15086036845015/DJn4H8YWsAYgMRQ.jpg-large.jpeg" alt="DJn4H8YWsAYgMRQ.jpg-large"/><br/>
(图片来源：<a href="https://twitter.com/carrot_app/status/908029622243209223">CARROT 的 Twitter: “If this doesn’t make you want to spend $1,000 in November, I don’t know what will.”</a>)</p></li>
<li><p>可以使用 Xcode 中的模拟器提前预览 app 在 iPhone X 上的效果，检查被裁切或者其他布局问题。而对于一些特别的功能特征，像广色域图像，最好就是在 iPhone X 真机上进行测试。</p>
<p><img src="media/15086036845015/AA0A093E-8874-4CA8-ADEB-873CC6929BE8.png" alt="AA0A093E-8874-4CA8-ADEB-873CC6929BE8"/></p></li>
<li><p>提供一个全屏的使用体验：确保背景延伸到了屏幕的边界，像 tables、collections 这种竖直滚动的布局要一直延续到屏幕底部，不应被限制在 Safe Area 中。不管 table view 中的 cell 是否在 Home Indicator 的后面，轻点屏幕底部的 cell 依然可以正常操作。</p>
<p><img src="media/15086036845015/PNG%20%E5%9B%BE%E5%83%8F-9478BC4F869E-1.png" alt="PNG 图像-9478BC4F869E-1"/></p></li>
</ul>

<h2 id="toc_5">图片</h2>

<ul>
<li><p>当复用已有的图片资源时，注意长宽比率的不同：iPhone X 有一个特殊的长宽比率，因此，在 4.7 寸屏幕上的图片资源全屏展示在 iPhone X 上时，可能会被左右裁切或者出现信箱 letterboxing 模式（即上下有黑条）。与之相反，如果一个可以全屏显示在 iPhone X 上的图片资源拿到 4.7 寸 iPhone 上去，图片就会被上下裁切或者出现邮筒 pillarboxing 模式（即左右有黑条）。最好是采用兼容性的图片，以确保在所有的屏幕尺寸中，重要的视觉内容都能被看到。</p>
<p><img src="media/15086036845015/DAA49612-4210-4D53-84F4-8F4EE6994B7B.png" alt="DAA49612-4210-4D53-84F4-8F4EE6994B7B"/></p>
<ul>
<li><a href="https://support.apple.com/zh-cn/HT204429">有关信箱模式（Letterboxing）、邮筒模式（Pillarboxing）、窗口模式（Windowboxing）的参考说明</a></li>
</ul></li>
</ul>

<h2 id="toc_6">控件</h2>

<ul>
<li><p>不要对屏幕的几个新特征进行掩盖或者吸引用户特别注意：不要尝试通过在屏幕顶部或底部使用黑色的 bar 来隐藏设备的圆角、Sensor Housing、Home Indicator，这会使得你的 app 看上去很狭小拥挤，与其他在 iPhone X 上的 app 不一致。不要使用一些视觉装饰物（如括弧、边框、形状或指导性文字）使用户对这些区域特别注意。</p>
<p><img src="media/15086036845015/9A361EFA-8FD8-4650-9DA2-5162B122094B.png" alt="9A361EFA-8FD8-4650-9DA2-5162B122094B"/></p></li>
<li><p>避免内容被裁切：使用标准的、系统提供的交互元素，使用 Auto Layout 构建 app 的交互。App 应该遵守由 UIKit 定义的 Safe Area 和 Layout Margin，这确保内容可以根据设备和情景合适的嵌入。 Safe Area 也会阻止内容被 status bar、navigation bar、toolbar、tab bar 覆盖。</p>
<p><img src="media/15086036845015/FC998171-5121-485F-8DAE-0E2A24444DD3.png" alt="FC998171-5121-485F-8DAE-0E2A24444DD3"/></p></li>
<li><p>避免把一些交互控制元素恰好放置在屏幕的底部或者角落：用户在使用 iPhone X 时，会在屏幕底部使用滑动手势来访问主屏幕或者切换 app，这个手势会影响你在屏幕底部自定义的手势。屏幕的几个角落放置的内容可能会被屏幕的圆角、Sensor Housing、Home Indicator 遮挡覆盖，并且对于用户来说也是难以轻松地触碰到的。可以通过 Safe Area 和 Layout Margin 来确定合适的嵌入值。</p>
<p><img src="media/15086036845015/896AAFBA-DAF0-4B30-9AE6-A76352A103E2.png" alt="896AAFBA-DAF0-4B30-9AE6-A76352A103E2"/></p></li>
<li><p>大多数情况下，在横屏视图时，内容、控件能够居中对称显示是最好的。在设备旋转方式不同的情况下，如果是不对称的布局，控件会左右发生漂移，这将会造成不连贯的用户体验，潜移默化地破坏用户建立肌肉记忆的能力。</p>
<p><img src="media/15086036845015/CF6C33B7-F5A9-4D18-AC61-2DD8CF78F702.png" alt="CF6C33B7-F5A9-4D18-AC61-2DD8CF78F702"/></p></li>
</ul>

<h2 id="toc_7">Status Bar</h2>

<ul>
<li><p>注意 status bar 的高度：在 iPhone X 中，相比其他 iPhone status bar 更高（iPhone X 的 status bar 高度为 44pt，其他设备为 20pt）。如果你的 app 假定了一个固定的 status bar 高度，以此来在 status bar 下面放置内容，你必须更新你的 app 以基于用户设备动态放置内容。</p>
<p><img src="media/15086036845015/8F514EB8-0A7B-4B39-A16B-3DA4EA1CC0EF.png" alt="8F514EB8-0A7B-4B39-A16B-3DA4EA1CC0EF"/></p></li>
<li><p>特别注意，在 iPhone X 中，当某些后台任务（如通话中、录音中、位置记录中）进行时、status bar 不会像其他 iPhone 一样改变高度。这为提供连贯的用户体验提供了帮助。</p>
<p><img src="media/15086036845015/CCD66544-DE3F-4BEF-9101-7967D164A542.png" alt="CCD66544-DE3F-4BEF-9101-7967D164A542"/></p></li>
<li><p>如果你的 app 现在是隐藏 status bar 的，你需要在 iPhone X 上重新考虑这个：iPhone X 在垂直方向上比 4.7 寸 iPhone 提供了更多空间来显示内容。Status bar 中也展示了用户觉得很有用的信息。Status bar 应该只在真正有价值的时候被隐藏。</p></li>
</ul>

<h2 id="toc_8">Home Indicator</h2>

<ul>
<li><p>Home Indicator（134pt × 5pt）可以提示用户从屏幕底部向上轻扫可以访问主屏幕或者切换 app，这是 iOS 设备的一个核心交互，因此 Home Indicator 应该总是被清晰可见的。iOS 会根据当前的背景颜色，动态地调整 Home Indicator 显示为白色或黑色，以保证与背景有足够的对比度。确保不要把一些交互元素放的离 Home Indicator 很近。</p>
<p><img src="media/15086036845015/5CA9DA5A-25B7-4FFC-AA3D-167A0F767940.png" alt="5CA9DA5A-25B7-4FFC-AA3D-167A0F767940"/></p></li>
<li><p>谨慎地允许 Home Indicator 可以自动隐藏：当自动隐藏功能被打开时，如果用户在几秒钟没有触碰屏幕，Home Indicator 就会自动隐藏，用户再次触碰屏幕时，Home Indicator 就会再次出现。这个行为只应该在像播放视频、图片幻灯片时被启用。</p></li>
<li><p>避免与系统全局的屏幕边缘手势冲突：在各个 app 中，人们依赖于这些手势。只在很少的一些情况下，一些沉浸式的 app 如游戏类 app 可能需要一些比系统手势优先级更高的自定义的屏幕边缘手势，第一次滑动响应 app 指定的手势（同时正常的 Home Indicator 会被拉起并进入可用状态），第二次滑动才响应系统的手势。这个行为被称为 edge protection，一旦开启，Home Indicator 将会有一个更加细致的外观，对于用户来说就很难访问系统级别的动作，导致不连贯的用户体验，所以它只应该在确实需要的情况下被启用。</p>
<p><img src="media/15086036845015/3F9A6BCC-0971-4E35-BCBF-56CF287E902A.png" alt="3F9A6BCC-0971-4E35-BCBF-56CF287E902A"/></p></li>
</ul>

<h2 id="toc_9">颜色</h2>

<ul>
<li><p>iPhone X 的屏幕支持 Display P3 色域，相比 sRGB 可以显示更加多样、沉浸的颜色。</p>
<p><img src="media/15086036845015/D7C6D362-EA41-4140-846E-7B180517FF56.png" alt="D7C6D362-EA41-4140-846E-7B180517FF56"/></p></li>
<li><p>使用广色域来增强视觉体验：使用了广色域的图片和视频会看上去更加生动，视觉数据和状态指示器会更加有冲击力。</p></li>
</ul>

<h2 id="toc_10">视频</h2>

<ul>
<li><p>系统提供的视频播放器提供了两种视频播放模式：全屏播放模式 full-screen (aspect fill) 和适应屏幕播放模式 fit-to-screen (aspect)。默认情况下，系统会基于视频的纵横比选择一种视频播放模式，在播放过程中，用户可以在这两种模式之间自由切换。</p>
<ul>
<li><p>全屏播放模式 Full-screen (aspect-fill) viewing mode：视频会按照视频比例进行放大以铺满整个屏幕。一些边缘切割会出现。对于宽幅视频（纵横比在 2：1 到 2.40：1 之间），全屏播放模式是系统的默认选择。</p>
<p><img src="media/15086036845015/15105074890096.jpg" alt=""/></p>
<p><img src="media/15086036845015/15105075047735.jpg" alt=""/></p></li>
<li><p>适应屏幕播放模式 Fit-to-screen (aspect) viewing mode：屏幕里可以完全显示完整的视频。信箱模式或邮筒模式会出现。对于标准的视频（纵横比 4：3、16：9、低于 2：1的）和超宽幅视频（纵横比大于 2.40：1），适应屏幕模式是系统的默认选择。</p>
<p><img src="media/15086036845015/15105075243173.jpg" alt=""/></p>
<p><img src="media/15086036845015/15105075301705.jpg" alt=""/></p></li>
</ul></li>
<li><p>确保自定义的视频播放器的表现符合预期：在 iPhone X 中，默认铺满屏幕的全屏播放模式的视频，如果铺满全屏导致太多的内容被裁切，那视频就应该调整显示尺寸以适应屏幕的模式播放。你也应该允许用户基于他们的个人偏好在两种播放模式间自由切换。</p></li>
<li><p>视频播放时总是保证其原始纵横比：如果你的视频内容为了服从某个特定的纵横比，自行插入了一个信箱或邮筒边距，iOS 将不能够基于用户对视频播放模式的选择正确的调整视频显示尺寸。在视频框架中插入的边距会造成视频在全屏播放模式下和适应屏幕播放模式下变得更小。它也使得视频不能被正确地以边到边的方式显示，也会影响非全屏情景（如 iPad 上的画中画模式）下的视频显示。</p>
<p><img src="media/15086036845015/15105075474870.jpg" alt=""/></p>
<p><img src="media/15086036845015/15105075538340.jpg" alt=""/></p></li>
</ul>

<h2 id="toc_11">手势</h2>

<ul>
<li>在 iPhone X 中使用屏幕边缘来触发访问主屏幕、app 切换、打开通知中心、打开控制中心的动作。</li>
<li><p>Home Indicator 相关手势：</p>
<ul>
<li><p>访问主屏幕：向上轻扫 Home Indicator</p>
<p><img src="media/15086036845015/large.mp4.gif" alt="large.mp4"/></p></li>
<li><p>访问多任务处理：向上轻扫 Home Indicator 并停顿一下</p>
<p><img src="media/15086036845015/large-3.mp4.gif" alt="large-3.mp4"/></p></li>
<li><p>切换到上一个使用的 app：向上轻扫 Home Indicator 并顺势向右滑动</p>
<p><img src="media/15086036845015/%E5%88%87%E6%8D%A2%E5%88%B0%E4%B8%8A%E4%B8%80%E4%B8%AA%E5%BA%94%E7%94%A8.gif" alt="切换到上一个应用"/><br/>
(图片来源：iMore)</p></li>
<li><p>左右快速切换 app：左右轻扫 Home Indicator</p>
<p><img src="media/15086036845015/%E5%B7%A6%E5%8F%B3%E5%BF%AB%E9%80%9F%E5%88%87%E6%8D%A2%E5%BA%94%E7%94%A8.gif" alt="左右快速切换应用"/></p></li>
<li><p>便捷访问 Reachability：也即在 iPhone 8 上通过轻点两下 Home 键界面下移悬停的功能。在 iPhone X 使用此功能，需要到「设置」-「通用」-「辅助功能」中打开「便捷访问」开关，使用时，向下轻扫 Home Indicator 即可。</p></li>
</ul></li>
<li><p>刘海相关手势：</p>
<ul>
<li><p>访问通知中心：从「刘海」处或左侧向下轻扫</p>
<p><img src="media/15086036845015/%E9%80%9A%E7%9F%A5%E4%B8%AD%E5%BF%83.gif" alt="通知中心"/><br/>
(图片来源：The Verge)</p></li>
<li><p>访问控制中心：从「刘海」右侧向下轻扫</p>
<p><img src="media/15086036845015/large-4.mp4.gif" alt="large-4.mp4"/></p></li>
</ul></li>
</ul>

<h2 id="toc_12">按键</h2>

<ul>
<li><p>由于 iPhone X 取消了实体 Home 键，引入了 Home Indicator，原来的电源键现在称之为「侧边按钮」，这使得原有的一些功能的操作方法发生了变化。</p>
<ul>
<li><p>使用 Siri：按住侧边按钮。</p>
<p><img src="media/15086036845015/large-5.mp4.gif" alt="large-5.mp4"/></p></li>
<li><p>使用 Apple Pay：连按两下侧边按钮。</p>
<p><img src="media/15086036845015/large-6.mp4.gif" alt="large-6.mp4"/></p></li>
<li><p>截屏：按住侧边按钮加音量增按钮。</p></li>
<li><p>进入 SOS 紧急联络：按住侧边按钮和任一音量按键、快速点按侧边按钮五次（需在设置中开启），SOS 紧急联络中包括「滑动来关机」、「医疗急救卡」、「SOS 紧急联络」三个功能。</p></li>
<li><p>关机：先进入「SOS 紧急联络」再滑动来关机、设置-通用-关机</p></li>
<li><p>强制重启：按下再快速松开调高音量按钮，然后按下再快速松开调低音量按钮，最后，按住侧边按钮 10 秒。</p></li>
<li><p>进入恢复模式：将设备连接到电脑，打开 iTunes，按下再快速松开调高音量按钮然后按下再快速松开调低音量按钮，最后按住侧边按钮，直到看到恢复模式屏幕（连接 iTunes 的图示）。</p></li>
</ul></li>
</ul>

<h2 id="toc_13">Face ID</h2>

<ul>
<li><p>在 iPhone X 中，Face ID 替代了 Touch ID，这使得某些操作和体验有了变化：</p>
<ul>
<li><p>指纹的识别变成了面容的识别：</p>
<p><img src="media/15086036845015/large%20-2-.mp4.gif" alt="large -2-.mp4"/></p></li>
<li><p>拿起手机唤醒屏幕，Face ID 完成面容识别，同时从屏幕底部向上轻扫进入系统：</p>
<p><img src="media/15086036845015/large%20-1-.mp4.gif" alt="large -1-.mp4"/></p></li>
<li><p>拿起手机唤醒屏幕，同时 Face ID 完成识别，系统显示通知的具体内容（需要配合 iOS 11 中「设置」-「通知」-「信息」-「显示预览」选项-「解锁时」）：</p>
<p><img src="media/15086036845015/large.mp4%201.gif" alt="large.mp4 1"/></p></li>
<li><p>识别 Face ID 后，使用 Apple Pay 付款：</p>
<p><img src="media/15086036845015/00FE1B9D-0D34-4B46-AD64-85CFF0792880.png" alt="00FE1B9D-0D34-4B46-AD64-85CFF0792880"/></p></li>
</ul></li>
<li><p>准确的定义授权方法：iPhone X 只支持 Face ID 授权，如果你的 app 使用了 Apple Pay 或者其他系统授权功能，不要在 iPhone X 上提及 Touch ID。与此相反，在只支持 Touch ID 的设备上不要提及 Face ID。</p></li>
</ul>

<blockquote>
<p>Apple 关于 iPhone X 的基本使用的指导视频：</p>

<iframe width="560" height="315" src="https://www.youtube-nocookie.com/embed/cJZoTqtwGzY?rel=0" frameborder="0" allowfullscreen></iframe>
</blockquote>

<h2 id="toc_14">键盘</h2>

<ul>
<li><p>不要重复系统提供的键盘功能：在 iPhone X 上，Emoji 和 Globe 按钮以及 Dictation 按钮会在键盘的下方自动出现，即使用户使用的是自定义键盘。你的 app 不能影响这些按钮，也要避免在你的 app 的键盘中重复这些而造成困惑。</p>
<p><img src="media/15086036845015/IMG_0242.png" alt="IMG_0242"/></p></li>
<li><p>在 iPhone X 中，全字母键盘的高度由 216pt 增加到了 291pt，在设计文字输入区域时要注意。</p>
<p><img src="media/15086036845015/BDE24521-5587-48B2-B827-562A0FF00DBE.png" alt="BDE24521-5587-48B2-B827-562A0FF00DBE"/><br/>
(图片来源：<a href="https://medium.com/uxabc/iphone-x-ui-design-specs-696fd4f262b6">UI 設計師需要知道的 iPhone X 細節 – UXabc – Medium</a>)</p></li>
</ul>

<h2 id="toc_15">适配</h2>

<h3 id="toc_16">App 的适配</h3>

<ul>
<li><p>大多数使用标准的、系统提供的 UI 元素（如 navigation bars、tables、collections）将会自动适配 iPhone X。背景将会延伸到屏幕的边界，UI 元素将会被合适的插入和放置。比如 navigation bar 的背景色会自动延伸到 status bar 中，tab bar 、tool bar 会被合适的放置在 Home Indicator 上面，其背景色也会延伸到屏幕底端。</p>
<p><img src="media/15086036845015/93CE9E1E-6D21-48AB-A58D-8B987D9171AC.png" alt="93CE9E1E-6D21-48AB-A58D-8B987D9171A"/></p></li>
<li><p>如果你的 app 使用了 Auto Layout，并且遵守了 Safe Area 和边界的布局规范，即使是使用了自定义布局，适配 iPhone X 也很简单。</p></li>
<li><p>要特别注意测试横屏下的界面：大多数的适配问题可能都来自于横屏界面。</p></li>
<li><p>对于没有适配 iPhone X 的 app 在 iPhone X 中可能不能全屏显示。在竖屏的情况下，顶部是 status bar，底部是 Home Indicator，中间部分以信箱 letterboxing 模式（即上下有黑条）显示未适配的 app，显示区域同 4.7 寸的 iPhone 8 一样大小。</p>
<p><img src="media/15086036845015/88A6CAC6-3B18-42D8-BC19-2C02CFC3691B.png" alt="88A6CAC6-3B18-42D8-BC19-2C02CFC3691B"/><br/>
(图片来源：<a href="https://medium.com/@hacknicity/how-ios-apps-adapt-to-the-iphone-x-screen-size-a00bd109bbb9">How iOS Apps Adapt to the iPhone X Screen Size – Geoff Hackworth – Medium</a>)</p></li>
<li><p>在横屏的情况下，会以邮筒 pillarboxing 模式（即左右有黑条）显示未适配的 app，同时屏幕底部会为 Home Indicator 留有一定的空间，整体上比 iPhone 8 的横屏模式还稍微小一点。</p>
<p><img src="media/15086036845015/15FB515C-9965-4A1C-9014-8F47DCDA3D4D.png" alt="15FB515C-9965-4A1C-9014-8F47DCDA3D4D"/><br/>
（图片来源：<a href="https://medium.com/@hacknicity/how-ios-apps-adapt-to-the-iphone-x-screen-size-a00bd109bbb9">How iOS Apps Adapt to the iPhone X Screen Size – Geoff Hackworth – Medium</a>）</p></li>
<li><p>从未适配的 app 在 iPhone X 上的显示可以很明显的看出，iPhone X 就是 4.7 寸的 iPhone 8 的拉长版，但是由于 iPhone X 使用的是 @3x 图片资源，再加上 OLED 屏幕的加成，未适配的 app 看上去的视觉效果可能更像是在一部屏幕高配版 iPhone 8 上看。</p></li>
<li><p>从 iPhone 8 到 iPhone X 的过渡就如同当年从 iPhone 4s 到 iPhone 5 的过渡，可以预见在 iPhone X 上市初期会有众多 app 还没有来得及或还没有找到合适的解决办法适配 iPhone X，抑或正在适配的路上苦苦摸索，最先使用 iPhone X 的用户在尝鲜的同时也会有一段混合使用已适配 app 和未适配 app 的痛苦期。从 app 市场的现状来看，对于一些紧密跟随 iOS 新技术、由独立开发者/小团队开发、有一定用户规模的 app （这类 app 反而会较多使用系统标准控件，响应用户、跟进新特性也比较及时😎）会较快适配 iPhone X，而对于一些逻辑复杂、牵一发而动全身、只追求能用不追求好用的 app（这类 app 使用系统标准控件较少，经常出现一些自以为很炫酷但实际很反人类的交互，而且修改 bug、适配新特性还不积极🙄，如银行 app、12306等），我们能做的只有慢慢等了。</p>
<p><img src="media/15086036845015/F3F09540-55D2-42BA-89A0-111F28078172.png" alt="F3F09540-55D2-42BA-89A0-111F28078172"/><br/>
注：<a href="http://t.cn/ROe0Uti">点此查看 iDaily App 适配 iPhone X 后的效果图</a>（由于目前 iPhone X 还没正式发售，Apple 暂不允许在 AppStore 中的 app 介绍中存在有关 iPhone X 的文字、图片、视频资源，已经上架的纯属巧合，其实就是看 Apple 的心情😴）</p></li>
<li><p>虽然前期痛苦，但是随着 iPhone X 用户数的上升，市场和 Apple 都会推着开发者去适配 iPhone X。待适配大潮逐渐稳定之后，那时候我们或许就能见到拉长版的 iPhone 8 Plus 了—— 名字该叫 iPhone X Plus 还是 iPhone XI Plus🤔？在这里大胆猜测下，拉长版的 iPhone 8 Plus 应该与 iPhone X 同一个屏幕比例，按照相对于 iPhone 8 Plus 宽不变高拉长的规律渲染分辨率应该是 1242px × 2688px，如果物理分辨率也是同样的话，再加上传闻的 6.4 寸屏幕，PPI 差不多是 463。等明年看看咯。</p>
<p><img src="media/15086036845015/52141B2B-366D-4945-8728-34F2DF4DFC4B.png" alt="52141B2B-366D-4945-8728-34F2DF4DFC4B"/><br/>
(图片来源：<a href="https://www.idropnews.com/rumors/iphone-x-plus/51494/">iPhone X Plus to Be Released in 2018 Reports Suggest</a>)</p></li>
<li><p><strong>Update：</strong>10 月 27 日，Apple 发布<a href="https://developer.apple.com/news/?id=10272017a">公告</a>提醒开发者现在可以开始在 iTunes Connect 中提交适配了 iPhone X 的 app、更新 app 的元数据信息了。有关于个人使用的一些 app 适配 iPhone X 的时间记录可以<a href="15091947537272.html">查看我的另一篇文章</a>。</p></li>
</ul>

<h3 id="toc_17">App 适配实例</h3>

<p>以适配 WWDC app 为例，说明在适配过程中遇到的布局问题和如何修复它们。</p>

<ul>
<li><p>WWDC app 的历史已经很长，好多工程师曾经为它贡献过代码。在其中，它使用了许多标准控件和 Auto Layout，它也有很多自定义的 view，甚至更老的部分是完全手动布局的。</p>
<p><img src="media/15086036845015/EAEA70A1-A84B-443D-BE1E-5C6607639F95.png" alt="EAEA70A1-A84B-443D-BE1E-5C6607639F95"/></p></li>
<li><p>在 Xcode 9 中配置 WWDC app 的 Base SDK 为 iOS 11。如果你没有看到 app 在 iPhone X 的屏幕上全屏显示，请确保你配置了一个正确的 Launch Storyboard。</p>
<p><img src="media/15086036845015/0C813B12-4846-4A44-B522-E437F6E71FF9.png" alt="0C813B12-4846-4A44-B522-E437F6E71FF9"/></p></li>
<li><p>News tab：全屏的照片查看器中的 page control 离屏幕底部太近了，与 Home Indicator 跑到了一起。这是因为 page control 是根据其父视图（也即整个屏幕）限定的底部的布局约束，我们需要根据 Safe Area Layout Guide 对 page control 的底部做出布局上的约束。</p>
<p><img src="media/15086036845015/1366529D-2C71-4077-9E49-6199495FBCD7.png" alt="1366529D-2C71-4077-9E49-6199495FBCD7"/></p>
<ol>
<li><p>在 xib 文件中打开 「Use Safe Area Layout Guides」（在 Xcode 9 之前创建的 xib 和 storyboard 不会自动打开此选项）。对于 iOS storyboard，打开这个选项后会自动把约束与屏幕的 top layout guide、bottom layout guide、leading edges、trailing edge 绑定，所以在开启后需要仔细检查确认 Auto Layout 的约束。</p>
<p><img src="media/15086036845015/84AA7EE1-1284-4FFF-8084-164ECF3AAC7D.png" alt="84AA7EE1-1284-4FFF-8084-164ECF3AAC7D"/></p></li>
<li><p>将 page control 的约束「Superview.Bottom = Page Control .Bottom」改为「Safe Area.Bottom = Page Control .Bottom」。</p>
<p><img src="media/15086036845015/B6B768DD-E34E-49F5-8BA7-19973DCEE783.png" alt="B6B768DD-E34E-49F5-8BA7-19973DCEE783"/></p></li>
<li><p>编译并运行，可以看到 page control 无论在竖屏还是横屏时均显示正常。</p>
<p><img src="media/15086036845015/C9891FD0-8CB0-4D25-9639-4C78DB7E6471.png" alt="C9891FD0-8CB0-4D25-9639-4C78DB7E6471"/></p></li>
</ol></li>
<li><p>Videos tab：进入搜索功能，与「通讯录」app 对比后可以发现 search bar 的背景颜色不对，其尺寸也有些问题。</p>
<p><img src="media/15086036845015/DED5E6C8-67F3-4088-931E-4D50C264C45B.png" alt="DED5E6C8-67F3-4088-931E-4D50C264C45B"/></p></li>
<li><p>当进入横屏时，问题更加明显。search field 和取消按钮都被屏幕的圆角切割了。由此也看出 Safe Area 的重要性。</p>
<p><img src="media/15086036845015/23A9C747-7024-4148-BA19-937E3B04D838.png" alt="23A9C747-7024-4148-BA19-937E3B04D838"/></p>
<ol>
<li><p>在 iOS 11 中，search bar 已经与 navigation bar 整合在了一起，而不再是一个单独的 UI search controller。在代码中做出如下变动：</p>
<p><img src="media/15086036845015/2B02BC22-0424-49E6-B287-FEE92FD01995.png" alt="2B02BC22-0424-49E6-B287-FEE92FD01995"/></p></li>
<li><p>在 navigation bar 接管 search bar 之后，剩下的工作就交给 Safe Area 就好了。编译并运行，可以看到 search bar 在竖屏与横屏下都显示正常了。</p></li>
</ol></li>
</ul>

<p><img src="media/15086036845015/5C5D601E-4F1C-4260-8227-03DB07F2A63D.png" alt="5C5D601E-4F1C-4260-8227-03DB07F2A63D"/></p>

<ul>
<li><p>Schedule tab：因为把 search bar 作为了 table view 的 header view，search bar 也有着与 Videos tab 同样的显示问题。只需像前面说的那样，把 search bar 交给 navigation bar 来处理就好了。在横屏时，如果仔细看会发现还有一个问题，table section 的背景颜色没有延伸到屏幕的左右边缘，这个颜色是我们设置的 header view 中的 <code>contenView</code> 的背景颜色。在除 iPhone X 以外的 iPhone 上这样配置都是没有问题的，那为什么会在 iPhone X 上出现问题呢？</p>
<p><img src="media/15086036845015/28285582-BE4C-426C-B19C-E781B4283F6C.png" alt="28285582-BE4C-426C-B19C-E781B4283F6"/></p></li>
<li><p>要想明白其中的原因，先来看下在 iPhone X 中 table view 的整体结构。从下图中可以看到 content view 是默认被嵌入 Safe Area 的，而 table cell 本身是从屏幕一端到另一端的，这就是问题所在。</p>
<p><img src="media/15086036845015/EF0D06BA-EB4F-4668-8DB9-BB512CF39F7F.png" alt="EF0D06BA-EB4F-4668-8DB9-BB512CF39F7F"/></p>
<ol>
<li><p>对于 content view 嵌入 Safe Area 这个行为是可以控制的，解除这个限制后 content view 就能从屏幕一端显示到屏幕另一端。有一点需要注意，不管 content view 如何布局，其 layout margin 都是默认与 Safe Area 相关的。所以解决问题的一个办法就是禁用 content view 嵌入 Safe Area 的行为，但这样一来就会影响 content view 中的其他内容，也没有办法再使用这项挺有用的默认行为。</p>
<p><img src="media/15086036845015/FBA93213-08FE-4292-92FD-41D47FAD5368.png" alt="FBA93213-08FE-4292-92FD-41D47FAD5368"/></p></li>
<li><p>最好的的解决办法就是设置 header 中 backgroundView 的 background color。</p>
<p><img src="media/15086036845015/CCD83434-A36E-4363-A74E-E51944846681.png" alt="CCD83434-A36E-4363-A74E-E51944846681"/></p></li>
<li><p>编译并运行，可以看到 table view 的 section 的背景颜色已经从屏幕的一边延伸到了另一边。</p>
<p><img src="media/15086036845015/3F541200-E05D-46E5-99A2-1CA8C4EC8081.png" alt="3F541200-E05D-46E5-99A2-1CA8C4EC8081"/></p></li>
</ol></li>
<li><p>总结</p>
<ul>
<li>基于 iOS 11 SDK 进行编译，确保有正确的 Launch Storyboard；</li>
<li>在两个屏幕方向都进行充足的测试，特别是横屏情况下；</li>
<li>遵守 Safe Area：
<ul>
<li>Auto Layout 时使用 <code>safeAreaLayoutGuide</code></li>
<li>手动计算时使用 <code>safeAreaInsets</code></li>
<li>避免 app 中的内容与控件与系统的 Home Indicator 发生冲突。</li>
</ul></li>
</ul>
<p><img src="media/15086036845015/01D6DCD6-8765-4ACB-921C-30195350F292.png" alt="01D6DCD6-8765-4ACB-921C-30195350F292"/></p></li>
</ul>

<h3 id="toc_18">网页的适配</h3>

<ul>
<li><p>因为 iPhone X 的显示屏的四个圆角、顶部的 Sensor Housing 特性，通过 Safari 打开的网页，iOS 也进行了自动的特殊处理。</p>
<ul>
<li><p>当设备处于竖屏情况下，网页的显示与其他设备没有什么差别，相比 iPhone 8 就是纵向上能看到更多内容。</p>
<p><img src="media/15086036845015/WechatIMG8.png" alt="WechatIMG8"/></p></li>
<li><p>当设备处于横屏情况下，为了确保网页上的内容不被屏幕圆角、Sensor Housing 遮挡，所有内容、控件会被限制在 Safe Area 中显示，而 Safe Area 左右两侧会被页面的 <code>background-color</code> (比如为 <code>&lt;body&gt;</code> 或 <code>&lt;html&gt;</code> 元素指定的背景颜色)填充。通常情况下我们看到的网页背景颜色都是白色，例如下图中在 iPhone X 的 Safari 中打开的 Medium 官网， 背景颜色是白色，整体上除了白色基本就是黑色的文字，这样看上去效果还不错。</p>
<p><img src="media/15086036845015/WechatIMG11.png" alt="WechatIMG11"/></p></li>
<li><p>再举一个例子，下图中在 iPhone X 的 Safari 中打开 Apple 官网，同样的页面背景色为白色，但由于横跨整个页面的灰色导航栏和非白色背景的近乎全屏的图片的存在，左右两边的白边看上去比较突兀，整体效果比较奇怪。（Update：Apple 官网首页目前已为 iPhone X 做了适配）</p>
<p><img src="media/15086036845015/WechatIMG5.png" alt="WechatIMG5"/></p></li>
</ul></li>
<li><p>iPhone X 的屏幕比例约为 9:19.5，不再是之前常见的 9:16，这对于靠「等比缩放」完成适配的 HTML5 活动页面来说，需要针对 iPhone X 调整页面布局结构。</p>
<p><img src="media/15086036845015/01ebae59b88fcea801212fb7faa9b0.jpg@800w_1l_2o_100sh.jpg" alt="01ebae59b88fcea801212fb7faa9b0.jpg@800w_1l_2o_100sh"/><br/>
(图片来源：<a href="http://www.zcool.com.cn/article/ZNTU1MTUy.html">三分钟弄懂iPhone X 设计尺寸和适配|UI|教程|海边来的设计师 - 原创文章 - 站酷 (ZCOOL)</a>)</p></li>
</ul>

<h3 id="toc_19">网页适配实例</h3>

<ul>
<li><p>下面这个<a href="https://webkit.org/demos/safe-area-insets/1-default.html">网页</a>，网页的背景颜色不是白色，整个页面背景色延伸到了屏幕边缘，但横跨整个页面宽度的上下两个导航栏被限制在了 Safe Area 中，视觉上看上去很奇怪。底部的导航栏还与 Home Indicator 发生了重叠，这会导致按钮很难点击。这样的网页就需要针对 iPhone X 进行调整。</p>
<p><img src="media/15086036845015/DEB0032B-BDCB-43AF-B018-ADE0C4FD6DDF.png" alt="DEB0032B-BDCB-43AF-B018-ADE0C4FD6DDF"/></p></li>
<li><p>一些必要的调整（由于不熟悉前端网页开发的一些具体实现，只在此说一下大概的原理）</p>
<ul>
<li><p>横屏状态下，iPhone X 的 Safari 中默认没有让内容和控件充满整个屏幕。要想使用整个屏幕，需要在 iOS 11 中改变 <code>viewport-fit</code>的值以关闭自动嵌入行为。<a href="https://webkit.org/wp-content/uploads/viewport-fit-cover.png">改变后的网页</a>显示如下图，虽然导航栏可以从屏幕一个边缘延伸到了另一边缘，但是这时内容和控件会被屏幕的圆角以及 Sensor Housing 遮挡。</p>
<p><img src="media/15086036845015/06BE16E7-5E89-4B42-8D93-E6D3033B5C7B.png" alt="06BE16E7-5E89-4B42-8D93-E6D3033B5C7B"/></p></li>
<li><p>想要既要利用整个屏幕，又要服从 Safe Area，需要给不想被遮挡的重要内容加上一个 padding。iOS 11 的 Webkit 预定义了 <a href="https://webkit.org/demos/safe-area-insets/safe-areas.html">Safe Area 上下左右四个方向的边距常量</a>，利用此为页面上的元素添加 padding 后网页上的重要内容就可以正常显示，<a href="https://webkit.org/demos/safe-area-insets/3-safe-area-constants.html">更改后网页</a>横屏下的效果图如下。</p>
<p><img src="media/15086036845015/319BE822-CC4A-4A9E-AA3C-2CC141C72776.png" alt="319BE822-CC4A-4A9E-AA3C-2CC141"/></p></li>
<li><p>iPhone X 在横屏下的 Safe Area 左右两边的间距都是 44pt，但是在竖屏下 Safe Area 左右两边的间距是 0pt。故通过上面的 padding 设置后，在竖屏下，页面会出现一些问题，文字内容会紧贴屏幕的左边缘。竖屏时对于这里的期望是文字能与屏幕左边缘有一些间距（比如 12px），要实现此，可以将文字部分的 padding-left 设置为取 12px 和 Safa Area 左边间距两者中较大的那个值，这样在横屏时 padding-left 即为 Safa Area 的左边距，在竖屏时 padding-left 即为 12px。（取较大值的这个特性将在以后版本的 iOS 11 中发布，目前已出现在 iOS 11.2 Beta 中）</p>
<p><img src="media/15086036845015/8952F200-830A-4EBA-973F-94F019E27CAC.png" alt="8952F200-830A-4EBA-973F-94F019E27CA"/></p></li>
<li><p>最终通过一系列的调整，<a href="https://webkit.org/demos/safe-area-insets/4-min-max.html">竖屏下的页面</a>效果如下图。</p>
<p><img src="media/15086036845015/396A96EA-48FA-469D-8D41-E3EE16FF3DE7.png" alt="396A96EA-48FA-469D-8D41-E3EE16FF3DE7"/></p></li>
</ul></li>
<li><p>前后整体框架对比：</p>
<p><img src="media/15086036845015/iPhoneX-Website.png" alt="iPhoneX-Website"/><br/>
(图片来源：<a href="https://designcode.io/ios11-iphone-x">Design+Code - Learn to design and code for iOS 11</a>)</p></li>
</ul>

<h2 id="toc_20">iOS 11 常用 UI 标准控件的尺寸对照</h2>

<p>对于不同设备，在横向和纵向时的 Size Class 是不同的。加之 iPhone X 引入 Sensor Housing 和 Home Indicator 造成的一些特殊性，这就使得在不同的 iPhone 上 UI 标准控件有着不同的尺寸。以下列出了三款典型 iPhone 的常见 iOS 11 UI 标准控件的尺寸。</p>

<h3 id="toc_21">iPhone 8</h3>

<ul>
<li>iPhone 8 的 Size Class：竖屏时——Compact width, Regular height，横屏时——Compact width, Compact height。
<ul>
<li>Status bar：20pt（电话、录音、位置记录时会变为 40pt）</li>
<li>竖屏 navigation bar（包括 status bar）：64（20+44）pt，竖屏下如果有 big title 就再加 52pt</li>
<li>竖屏 tab bar：49pt（竖屏下每个 tab：48pt × 49pt）</li>
<li>竖屏 toolbar：44pt</li>
<li>横屏 navigation bar、tool bar、tab bar：32pt</li>
<li>Glyph：28pt × 28pt</li>
<li>左右建议 Margin：竖屏时 16pt，横屏时 20pt</li>
</ul></li>
</ul>

<h3 id="toc_22">iPhone 8 Plus</h3>

<ul>
<li>iPhone 8 Plus 的 Size Class：竖屏时——Compact width, Regular height，横屏时——Regular width, Compact height。
<ul>
<li>Status bar：20pt（电话、录音、位置记录时会变为 40pt）</li>
<li>横竖屏 navigation bar（包括 status bar）：64（20+44）pt，竖屏下如果有 big title 就再加 52pt</li>
<li>横竖屏 tab bar：49pt（竖屏下每个 tab：48pt × 49pt）</li>
<li>横竖屏 toolbar：44pt</li>
<li>Glyph：28pt × 28pt</li>
<li>左右建议 Margin：竖屏时 16pt，横屏时 20pt</li>
</ul></li>
</ul>

<h3 id="toc_23">iPhone X</h3>

<ul>
<li><p>iPhone X 的 Size Class：竖屏时——Compact width, Regular height，横屏时——Compact width, Compact height。</p>
<ul>
<li>Status bar：44pt（电话、录音、位置记录时不变）</li>
<li>竖屏 navigation bar（包括 status bar）：88（44+44）pt，如果有 big title 就再加 52pt</li>
<li>竖屏 tab bar：49pt（每个 tab：48pt × 49pt）</li>
<li>竖屏 toolbar：49pt</li>
<li>横屏 navigation bar、tool bar、tab bar：32pt</li>
<li>Glyph：28pt × 28pt</li>
<li>Home Indictor Area：竖屏时 34pt，横屏时 21pt</li>
<li>左右建议 Margin：竖屏时到 Safe Area 左右两边 16pt，横屏时到 Safe Area 左右两边 20pt</li>
</ul>
<p><img src="media/15086036845015/iPhoneX-Portrait.jpg" alt="iPhoneX-Portrait"/><br/>
（图片来源：<a href="https://designcode.io/ios11-iphone-x">Design+Code - Learn to design and code for iOS 11</a>）</p>
<p><img src="media/15086036845015/C5A278D3-B23F-48B6-9D58-7CF217975FD1.png" alt="C5A278D3-B23F-48B6-9D58-7CF217975FD1"/><br/>
（图片来源：<a href="https://designcode.io/ios11-iphone-x">Design+Code - Learn to design and code for iOS 11</a>，图片有改动。关于 iPhone X 横屏下，tab bar 和 Home Indicator 区域经过查找资料我认为应该分别是 32pt 和 21pt，而不是原文中的 30pt 和 23pt。）</p></li>
</ul>

<blockquote>
<p>最后一起来欣赏下 Apple 为 iPhone X 制作的广告，十分精彩：</p>

<iframe width="560" height="315" src="https://www.youtube.com/embed/0S6pHex-KCo" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
</blockquote>

<h2 id="toc_24">Read More</h2>

<h3 id="toc_25">Apple 官方</h3>

<ul>
<li><a href="https://www.apple.com/cn/iphone-x">iPhone X 官方介绍页面</a></li>
<li><a href="https://developer.apple.com/ios/update-apps-for-iphone-x/">iPhone X 设计与开发介绍页面：Update your apps for iPhone X</a></li>
<li><a href="https://developer.apple.com/ios/human-interface-guidelines/overview/iphone-x/">iOS Human Interface Guidelines：iPhone X</a></li>
<li><a href="https://developer.apple.com/ios/human-interface-guidelines/visual-design/adaptivity-and-layout/">iOS Human Interface Guidelines：Adaptivity and Layout</a></li>
<li>Video：<a href="https://developer.apple.com/videos/play/fall2017/801/">Designing for iPhone X</a></li>
<li>Video：<a href="https://developer.apple.com/videos/play/fall2017/201/">Building Apps for iPhone X</a></li>
<li><a href="https://webkit.org/blog/7929/designing-websites-for-iphone-x/">Designing Websites for iPhone X</a></li>
<li><a href="https://developer.apple.com/design/resources/">Apple UI Design Resources：iPhone X</a></li>
</ul>

<h3 id="toc_26">非官方</h3>

<ul>
<li><a href="https://www.paintcodeapp.com/news/ultimate-guide-to-iphone-resolutions">The Ultimate Guide To iPhone Resolutions</a></li>
<li><p><a href="https://www.paintcodeapp.com/news/iphone-x-screen-demystified">iPhone X Screen Demystified</a></p></li>
<li><p><a href="https://blog.prototypr.io/designing-for-the-iphone-x-4239d5ac736c">Design for iPhone X – prototypr</a></p></li>
<li><p><a href="https://designcode.io/ios11-iphone-x">Design+Code - Learn to design and code for iOS 11</a></p></li>
<li><p><a href="https://medium.com/sketch-app-sources/things-to-keep-in-mind-when-designing-for-new-iphone-x-bfc19a7703ae">Things to keep in mind when designing for “new” iPhone X</a></p></li>
<li><p><a href="https://medium.com/uxabc/iphone-x-ui-design-specs-696fd4f262b6">UI 設計師需要知道的 iPhone X 細節 – UXabc – Medium</a></p></li>
<li><p><a href="https://medium.com/@hacknicity/how-ios-apps-adapt-to-the-iphone-x-screen-size-a00bd109bbb9">How iOS Apps Adapt to the iPhone X Screen Size – Geoff Hackworth – Medium</a></p></li>
<li><p><a href="https://useyourloaf.com/blog/supporting-iphone-x/">Supporting iPhone X</a></p></li>
<li><p><a href="http://blog.maxrudberg.com/post/165590234593/ui-design-for-iphone-x-bottom-elements">Max Rudberg - Visual &amp; User Interface Designer - UI Design for iPhone X: Bottom Elements</a></p></li>
<li><p><a href="http://blog.maxrudberg.com/post/166045445103/ui-design-for-iphone-x-top-elements-and-the-notch">Max Rudberg - Visual &amp; User Interface Designer - UI Design for iPhone X: Top Elements and the Notch</a></p></li>
<li><p><a href="https://medium.com/@bobtung/%E9%9D%A2%E5%B0%8Diphone-x-web%E8%A8%AD%E8%A8%88%E5%B8%AB%E9%9C%80%E8%A6%81%E7%9F%A5%E9%81%93%E7%9A%84%E5%B9%BE%E5%80%8Bcss%E5%B1%AC%E6%80%A7-b7c03b314c6a">面對iPhone X，Web設計師需要知道的幾個CSS屬性 – Bobby Tung – Medium</a></p></li>
<li><p><a href="http://stephenradford.me/removing-the-white-bars-in-safari-on-iphone-x/">Removing the White Bars in Safari on iPhone X</a></p></li>
<li><p><a href="https://medium.com/peachstudio/designing-responsive-webpages-for-the-iphone-x-c3fc55732409">Designing Responsive Webpages for the iPhone X – Peach Studio – Medium</a></p></li>
</ul>

<blockquote>
<p>如果你觉得这篇文章对你有所帮助，欢迎请我喝杯咖啡，感谢你的支持😁</p>

<p><img src="media/14625521742746/15088240400740.jpg" alt=""/></p>
</blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[深入了解 App Store in iOS 11]]></title>
    <link href="https://steppark.net/15038367340940.html"/>
    <updated>2017-08-27T20:25:34+08:00</updated>
    <id>https://steppark.net/15038367340940.html</id>
    <content type="html"><![CDATA[
<p>WWDC 2017 上 Apple 介绍了 iOS 11 中全新设计的 App Store，在随后的 Session 中也从设计、编辑等角度详细介绍了焕然一新的 App Store。按照其介绍的思路，结合一些其他相关资料，在 iOS 11 正式版即将发布之前，来一起深入了解下 iOS 11 的 App Store。</p>

<span id="more"></span><!-- more -->

<ul>
<li><p>Note：</p></li>
</ul>

<ol>
<li>iOS 11 App Store 的新功能、新设计介绍主要以 iPhone 设备为主；</li>
<li>有关 App Store 的细节以美区 App Store 为准；</li>
<li>由于大部分参考资料均为英语，所以部分词句没有翻译，即使翻译了的，可能也没有那么准确；</li>
<li>文章阅读对象针对于期望了解全新 App Store 的独立开发者、产品人、设计师、爱好者等；</li>
<li>成文时，iOS 11 正式版还未发布，新的 App Store 的功能和内容还在逐步增加。后续文章可能会有一些增删改。</li>
</ol>

<h2 id="toc_0">Overview 总览</h2>

<ul>
<li><p>App Store 在 2008 年 7 月诞生，那时只有 500 多个 app。</p>
<p><img src="media/15038367340940/1.jpg" alt="1"/></p></li>
<li><p>一直以来 App Store 的结构和布局并没有发生大的变化，只有一些细微的调整。</p>
<p><img src="media/15038367340940/2.jpg" alt="2"/></p></li>
<li><p>九年过去了，到 2017 年在 App Store 里已经有了 220 万个 app。App Store 改变了 app 的购买和分发方式，也影响了我们生活的方方面面。</p></li>
<li><p>在这个历史节点，我们停下来思考如何让 App Store 变得更好？如何从头开始设计一个崭新的 App Store？从以下几点考虑：</p>
<ul>
<li>Daily destination：希望用户每天能够回到这里，把 App Store 作为一个每天的基础；</li>
<li>Give a voice to our editors：把精力更多地放在从一开始就很出色的编辑策划上；</li>
<li>Focus on games：突出 App Store 中游戏所扮演的重要角色，给应用和游戏一份更加清晰的重点划分。</li>
</ul></li>
</ul>

<h2 id="toc_1">Design 设计</h2>

<p>在重新设计 App Store 时，我们考虑了两个问题：我们的设计目标是什么？如何做去满足这些设计目标？除了上面提到的这三个方面，在设计上再增加一条：Clarity and simplification，清晰简单，这一条对于设计来说十分重要。</p>

<h3 id="toc_2">Daily destination 每天的目的地、Give a voice to our editors 让编辑发声</h3>

<ul>
<li><p>Today：卡片式风格，每日更新，可查看最多七天的内容，目前每天会有六个内容更新。这些内容会在不同地区的 App Store 本地化，符合当地的文化习惯。Today 目前有十二种样式，各种样式穿插在一起，应用这些样式会呈现的内容会有：</p>
<ul>
<li>新 app 的发布、app 崭新版本的发布；</li>
<li>杰出 app 的介绍、app 背后的故事、开发者访谈；</li>
<li>有关 app 使用的 tips、tricks、guide；</li>
<li>与一个主题相关的 app 合集推荐；</li>
<li>App of the Day、Game of the Day；</li>
<li>App 中内购的介绍与推荐。</li>
</ul>
<p><img src="media/15038367340940/3.jpg" alt="3"/></p></li>
<li><p>每一个卡片的内容细节</p>
<ul>
<li>交互形式：卡片点击后会有一个自然的过渡从中心展开，点击屏幕右上角的叉号、从卡片顶部向下滑动卡片、从屏幕左侧向右滑动都可以将卡片关闭。</li>
<li>具体内容：每个卡片的内容形式非常丰富，图片、文字、引用、视频、应用穿插在一起，你还可以将这个卡片分享出去，每个卡片实际上都对应一个网址。</li>
</ul>
<p><img src="media/15038367340940/4.jpg" alt="4"/></p></li>
<li><p>每一个卡片的内容都可以在搜索中被搜索到，同时被这些卡片推荐的 app 的详情页上也会有这些卡片的入口（截止到 iOS 11.01 还未看到第二种形式）。</p>
<p><img src="media/15038367340940/1BF196F8-3421-40F1-84F3-B95B45F2BBCB.png" alt="1BF196F8-3421-40F1-84F3-B95B45F2BBCB"/></p></li>
<li><p>这些内容卡片模板的一些小细节：</p>
<ul>
<li>「Today」tab 中页面滚动到带有视频的卡片并停下时，视频会自动进行静音循环播放；</li>
<li>横向三排式的 app 合集卡片在显示时会有一个从右向左的展示动画；</li>
<li>当一个卡片中只推荐了一个 app 时，页面向下滚动且滚动过封面图片时，页面底部会悬浮这个 app 的详情页跳转入口。</li>
</ul>
<p><img src="media/15038367340940/EFDC65CA-301A-4CDA-B86C-B14BC688BD37.png" alt="EFDC65CA-301A-4CDA-B86C-B14BC688BD37"/></p></li>
</ul>

<h3 id="toc_3">Focus on games &amp; apps 聚焦游戏、应用</h3>

<ul>
<li>在以前，Games 和 Apps 是混在一起的，无论是其编辑推荐还是排行榜。对于游戏，可以细分为许多分类。意识到游戏的重要性和给 App Store 带来的巨大成功，我们为游戏单独设置了一个 tab—「Games」。</li>
<li><p>Games：在这里你能看到各种形式（单个 app、app 合集，视频、图片、文字介绍等）的游戏 app 的推荐，除了app 的推荐还包括内购的推荐、排行榜、分类等。「Apps」tab 亦是同样。在这里游戏 app 的细化分类可以被拿到顶层，用户可以直接找到自己想要的游戏。</p>
<p><img src="media/15038367340940/5D9C3C35-FA24-42D6-AA15-B389897523B3.png" alt="5D9C3C35-FA24-42D6-AA15-B389897523B3"/></p></li>
<li><p>用户在推荐页面可以得到有关 app 更多的信息：</p>
<ul>
<li>Subtitle：每个 app 都会有一个副标题（后有详细说明）；</li>
<li>来自编辑团队的推荐语。</li>
</ul>
<p><img src="media/15038367340940/65FC4A61-C27A-4C2D-91C3-94383D7B5E41.png" alt="65FC4A61-C27A-4C2D-91C3-94383D7B5E41"/></p></li>
<li><p>一个有意思的小细节：「Games」tab 的火箭图标形状取自于 Apple 标志的叶子。</p>
<p><img src="media/15038367340940/Games.png" alt="Games"/></p></li>
<li><p>内购的推荐：在新设计的 App Store 中可以把 app 的内容像推荐 app 一样推荐。为了表示这是一个内购，我们设计了一种专属的卡片样式来表示内购。内购的推荐会出现在「Today」、「Games」、「Apps」的推荐中，亦会出现在对应 app 的详情页面上，还可以通过「搜索」找到。</p>
<p><img src="media/15038367340940/12.jpg" alt="12"/></p>
<ul>
<li><p>App 内购的直接购买流程：对于一个 app 内购推荐，如果想直接购买，若你已安装这个 app，会直接打开这个 app 并显示购买确认页面，即可完成购买；若未安装这个 app，会提示你先购买/下载这个 app。</p>
<p><img src="media/15038367340940/BCB303D8-EDE0-481D-9D5B-89B70D2809CB.png" alt="BCB303D8-EDE0-481D-9D5B-89B70D2809CB"/></p></li>
<li><p>内购卡片的设计：内购卡片的设计关键一点是不能与 app 的样式混淆，当用户看到这个样式时应该知道这就是内购，这是来自于哪个应用的内购。</p>
<ul>
<li><p>内购卡片中圆角的弧度与 app 图标的圆角弧度是一致的，或者说内购就是 app 的四分之一，表示内购是 app 的一部分。</p>
<p><img src="media/15038367340940/17.jpg" alt="17"/></p></li>
<li><p>把 app 的内购图片加上一个统一的框架，在左下角放上 app 的图标即构成了这个内购卡片。所以提供的内购图片的左下角不应有重要的信息。只有在 app 产品详情页上的内购卡片的左下角没有 app 图标。</p>
<p><img src="media/15038367340940/18.jpg" alt="18"/></p></li>
<li><p>如果想让 app 的内购能够作为推荐呈现出来，需要为每个内购提供一张图片，这张图片需要与这个内购的具体内容有关，它不应是一个 app 的截图或者是 app 的图标。</p>
<p><img src="media/15038367340940/19.jpg" alt="19"/></p></li>
</ul></li>
</ul></li>
</ul>

<h3 id="toc_4">Clarity and simplification 清晰简单</h3>

<ul>
<li><p>Product Page：这里是每个 app 的家。随着时间的流逝，在 app 的详情页上有了越多的信息和功能。我们需要对这个页面做出简化，特别是页面的前半部分，因为这是用户打开产品详情页首先映入眼帘的部分。各种各样的信息都应该被清晰的传达给用户。</p>
<ul>
<li><p>App 图标、更加醒目的 App 名称、副标题（会先显示几秒的开发者名称再显示副标题，没有副标题则只显示开发者名称）、价格及购买按钮、更多/分享</p>
<ul>
<li>App Icon：这是用户会看到的第一个元素，对于给用户留下强烈的印象和传达 app 的品质和目的十分重要。App Icon 要做到简单、易识别。为了保证在不同尺寸下的 App Icon 都是清晰可见的，不要在 icon 中添加不必要的视觉细节。上传的 icon 图片要求 1024*1024 像素。</li>
<li>App Name：选取一个简单好记、易拼写、能表明 app 是做什么的来作为 app 名字。名字要与其他 app 区分开来，不要使用一些通用术语或与其他已有的 app 相似的名字。App Name 最多 30 个字符。</li>
<li>Subtitle：从 iOS 11 开始，Subtitle 将出现在 App Name 的下面，最多 30 个字符。推荐使用简练、吸引人的一句话来作为 Subtitle，避免如「世界最好」的这种通用描述，可以通过 Subtitle 来表明 app 的亮点、典型功能等。每次提交一个新版本的 app 时，可以改变一次 Subtitle。</li>
</ul>
<p><img src="media/15038367340940/3FAF9FD0-8188-49A9-A37A-38A64C7D1213.png" alt="3FAF9FD0-8188-49A9-A37A-38A64C7D1213"/></p></li>
<li><p>App 的评分（没有评分会直接写明评分信息不足）、编辑推荐（如有）、在 app 首要分类的排行榜中的名次、年龄评级信息 Age Rating 在一行呈现；</p>
<ul>
<li>分类 Categories：你可以给一个 app 设定两个分类，一个首要分类，一个次要分类。首要分类决定了 app 会出现在哪个分类目录下，影响搜索过滤结果，决定是出现在「Apps」tab 还是「Games」tab。首要分类应该符合你 app 的主要功能。
<ul>
<li>分类反映你 app 的目的、主要功能、主题；</li>
<li>想想用户在找你这样的 app 时会自然想到哪个分类；</li>
<li>看看同类 app 是怎么做的。</li>
</ul></li>
</ul></li>
<li><p>其他包含此 app 的 bundle（如有）；</p></li>
<li><p>更新了什么：包括了当前版本更新日志和进一步查看历史版本的更新日志；</p>
<ul>
<li>每次升级 app 时，都可以利用「What’s New」告诉用户发生了什么改变；</li>
<li>默认显示前三行信息，点击「more」展开查看全部；</li>
<li>只有你购买过的 app（无论现在是否已下载），「What’s New」才会显示在 App Icon 下面的部分，否则会放在「评分和评论」部分之下。因为对于购买过的 app，用户更关注这个 app 最近更新了什么；而对于还未购买过的 app，用户更关注这个 app 有什么特色，更需要从视频、截图、应用介绍中了解这些信息。「内购和订阅」部分的逻辑亦是如此。</li>
</ul></li>
<li><p>订阅和内购推荐；</p>
<ul>
<li>推荐的订阅和内购将被分成两个部分展示在产品详情页上；</li>
<li>开发者可以最多添加 20 个推荐条目；</li>
<li>每个条目都有它自己的名字（避免通用性名字，最多 30 个字符）、营销图片（1024*1024）、描述（最多 45 个字符），可以自定义条目的显示顺序；</li>
<li>可以被搜索到，同时会被推荐到「Today」、「Games」、「Apps」中；</li>
<li>在一个特定的设备上，开发者可以自定义用户会看到那些推荐的内购。比如用户已经购买的可以隐藏、根据用户的游戏等级推荐相关内购。</li>
<li>App 需要支持 SKPaymentTransactionObserver 方法才能实现上述功能。</li>
</ul>
<p><img src="media/15038367340940/A2B82A35-4D61-4B3B-8F38-0EFFA0AF30E8.png" alt="A2B82A35-4D61-4B3B-8F38-0EFFA0AF30E8"/></p></li>
<li><p>视频、app 截图、在其他设备上是否可用（默认收起），视频默认自动静音播放，并可以最多添加三个视频；</p>
<ul>
<li>视频预览：预览视频可以展示你 app 的特色、功能、UI，每段视频最长 30s，默认自动静音播放，确保第一段视频的前几秒能够快速抓住用户的心，最多可以添加三段视频。每一段视频都可以进行本地化，针对于每种 App Store 语言进行翻译。在「Preview」中首先会展示视频，截图会展示在视频之后。</li>
<li>在视频没有自动播放时，会显示 app preview poster frames，确保这张图片是足够吸引人的。</li>
<li>iOS 10.3 及之前版本的用户只能看到第一个预览视频。</li>
<li>截图：最多可以添加五张图片，前两张图片应该突出 app 的重要特色，因为在搜索结果中，如果在 app 有视频预览的前提下，通常情况（竖屏截图、iPhone）下这两张图片会被展示出来。横屏截图的条件下，搜索结果中只会显示第一章截图或第一个预览视频。</li>
</ul>
<p><img src="media/15038367340940/AEB8B962-CEB3-4A34-89D2-CD416DF705D1.png" alt="AEB8B962-CEB3-4A34-89D2-CD416DF705D1"/></p></li>
<li><p>App 介绍 App Description</p>
<ul>
<li>提供一段吸引人的、能够凸显 app 功能和特色的文字来作为 app 介绍。理想的 app 介绍应该是简洁有效，简洁地描述 app 是做什么的，之后每一个段落说明一个主要功能，在表达上使用用户看得懂的话。</li>
<li>介绍的第一句话十分重要，因为默认情况下会显示介绍的前三行。斟酌每一个字词，将最重要的功能放在第一句话中。有关于 app 获得的荣誉可以放到最后。</li>
<li>不要在介绍里放上一些没必要的关键词企图影响搜索结果，也避免在介绍中包括特定的价格信息。因为价格已在产品详情页上说明，且这些信息在不同国家和地区是不同的。</li>
<li>你只能在你提交 app 新版本时更新 app 介绍信息。</li>
</ul></li>
<li><p>营销信息 Promotional Text：最多 170 个字符，会出现在应用描述的上方。无需提交 app 新版本，即可更新这个信息。可用这个信息来分享 app 的最新消息，如最新促销、内购促销、即将上线的功能和内容、限时特价等。注意营销信息不能作为搜索的索引。</p></li>
<li><p>开发者入口：从这里可进入开发者页面，查看开发者的所有 app。</p>
<p><img src="media/15038367340940/809660D0-16BD-4869-AC5B-8345AF770183.png" alt="809660D0-16BD-4869-AC5B-8345AF770183"/></p></li>
<li><p>评分和评论 Ratings &amp; Reviews：评分在上，评论在下，评论从左向右排布，简化了其呈现形式，更加容易阅读，去除了当前版本和所有版本的区分，所以升级 app 并不会隐藏之前的评分；</p>
<ul>
<li>开发者可以在 iTunes Connect 回复用户的评论以解决用户的反馈、问题或关注。开发者回复后，用户可以收到被回复的提醒，并且可以选择更新评论。只有最新的评论和回复会被显示在产品详情页上。</li>
<li>当你提交 app 的新版本时，你可以重置你的评分，谨慎使用此功能。</li>
</ul></li>
<li><p>编辑推荐词（如有）。</p>
<p><img src="media/15038367340940/2D6D8E1B-48E4-4F62-9359-27A3E87B7906.png" alt="2D6D8E1B-48E4-4F62-9359-27A3E87B7906"/></p></li>
<li><p>更多信息：开发者、app 大小、分类、兼容性、语言、开发者网站、隐私政策、包含的内购等；</p></li>
<li><p>支持：如 Wallet、Family Sharing、Game Center 等.</p>
<p><img src="media/15038367340940/1CA2769A-0E1E-4B84-BE62-BCF3C54852C6.png" alt="1CA2769A-0E1E-4B84-BE62-BCF3C54852"/></p></li>
<li><p>Featured In：收录这个 app 的相关 Story，截止到 iOS 11.01 暂未找到实例，下图为效果图。</p></li>
<li><p>更多来自于这个开发者的 app 和根据这个 app 的推荐。</p>
<p><img src="media/15038367340940/C75EFCEF-FDC1-4B41-956F-1A566A260CCC.png" alt="C75EFCEF-FDC1-4B41-956F-1A566A260CC"/></p></li>
<li><p>导航栏：当页面向下滚动，滚过第一部分时，导航栏上就会显示这个 app 的 icon 和购买按钮，方便在浏览时随时完成购买下载动作。</p>
<p><img src="media/15038367340940/27.jpg" alt="27"/></p></li>
</ul></li>
<li><p>Product Page 纵览（点击下图查看完整图片）</p>
<p><ul class="clearing-thumbs small-block-grid-2" data-clearing><br/>
        <li><a href="media/15038367340940/IMG_3905.jpg"><img data-caption="Product Page" src="media/15038367340940/15039294296445.jpg"></a></li><br/>
        </ul></p></li>
</ul>

<h2 id="toc_5">Editorial 编辑</h2>

<h3 id="toc_6">Our principles 我们的原则</h3>

<ul>
<li><p>We celebrate apps 我们赞美 app：在这个更大的编辑平台中，我们有能力提供更多内容、更多观点、更多推荐，但这不意味着我们突然对 app 进行审核、批判，编辑团队应该是 app 的啦啦队，赞美应用和应用文化。</p></li>
<li><p>We are the voice of the App Store 我们是 App Store 的发声者：我们不仅思考要写什么，还在思考我们怎样去写？我们要做到真诚可靠、聪明有趣、谦恭友好、充满激情，我们要让内容有苹果范儿，斟酌每个字每个词，我们要尽力帮助用户参与其中。</p></li>
<li><p>We offer independent insights 我们要提供独立的见解：App Store 是一个付费应用商店，但用钱并不能让你的 app 被推荐。在新的 App Store 的「Today」、「Games」、「Apps」中没有广告，编辑希望把有独特角度、有个性的文章与你分享。我们希望用户能够基于此而完全信任我们的内容、我们的推荐，这样用户才会每天回来，在 App Store 中找到巨大的价值。</p></li>
<li><p>We tell interesting and important stories 我们讲述有趣、重要的故事：从有趣到十分有趣到既有趣又重要，这是我们的目标。在 App Store 不仅要告诉你这个 app 很厉害，还会告诉你我们为什么这样认为。在这里我们提供发人深省的观点和内容。</p></li>
<li><p>We deliver a fresh and unexpected take 我们传达一种清新且意想不到的观点：App 的世界发展迅速，我们要去反映那些创新文化。开发者通过 app 改变生活的方方面面，我们也要与你们并肩一起，跟上你们的步伐。</p></li>
</ul>

<h3 id="toc_7">New tabs 新的 Tab</h3>

<ul>
<li>Today：每天更新，在这里聚焦观点。用户可以在卡片上直接购买喜欢的应用和游戏，亦可以点击卡片了解应用和游戏的故事。</li>
<li><p>Games &amp; Apps：你可以看作这是包含排行榜、分类的「Feature」tab 的 2.0 进化版本。虽然不会像「Today」一样每天更新，目前会每周进行更新，以后会更加频繁。在这里用户会有更多的选择。</p></li>
<li><p>Every app has a story to tell. 每一个 app 都有一个故事可讲。我们要找到每一个 app 中的闪光点写成故事，关于这些故事，我们确定了四个主要的主题：</p>
<ul>
<li>Gaming——Apps are the future of gaming 大游戏、小游戏、汽车游戏、动作游戏、角色扮演游戏、跑酷游戏，应用是游戏的未来。</li>
<li>Lifestyle——Apps transform your life 社交、摄影、约会、健身、下厨、通勤应用，应用改变你的生活。</li>
<li>Culture and Entertainment——Apps shape culture 音乐、电影、时尚、电视应用，应用塑造文化。</li>
<li>New Tech and Innovation——Apps change everything 新服务、新想法、新能力，应用改变着一切。</li>
</ul>
<p><img src="media/15038367340940/22.jpg" alt="22"/></p></li>
<li><p>当把这些主题写成故事时，这里三个核心目的：</p>
<ul>
<li>Inform 告知：要及时，要告诉用户他们需要知道的信息，让他们知道世界发生了什么，比如 Netflix 上有了一个新节目；</li>
<li>Help 帮助：要指导，要动员，分享那些对我们很直观但对用户并不是的想法，让用户重温那些之前下载但可能已经闲置一旁的应用，给予全新的动力，比如如何最大化利用 Instagram 的功能；</li>
<li>Inspire 启发：应用于创造性内容、鼓舞人心的内容、独到见解的内容，这些令人鼓舞的内容可能会走向全世界。</li>
</ul>
<p><img src="media/15038367340940/23.jpg" alt="23"/></p></li>
</ul>

<h3 id="toc_8">More options</h3>

<ul>
<li><p>More ways to be featured than ever. 这里有比以前更多的各种各样的形式可以用来推荐 app。举几个例子（在 iOS 11 版本的 iPhone、iPad、iPod 的美区应用商店中才能打开以下链接）：</p>
<ul>
<li><a href="https://itunes.apple.com/us/story/id1245798920">WORLD PREMIERE 世界最佳：The Art of the Impossible——纪念碑谷 2</a></li>
<li><a href="https://itunes.apple.com/us/story/id1246363365">HOW TO 怎样做：5 Tips to Get More Out of VSCO——VSCO</a></li>
<li><a href="https://itunes.apple.com/us/story/id1246381517">DEEP DIVE 深入了解：It All Changes on Level 201——Causality</a></li>
<li><a href="https://itunes.apple.com/us/story/id1247678406">MEET THE DEVELOPER 开发者访谈：It&#39;s a Mom&#39;s Mom&#39;s Mom&#39;s World——Peanut</a></li>
</ul>
<ul class="clearing-thumbs small-block-grid-2" data-clearing>
  <li><a href="media/15038367340940/IMG_3819.jpg"><img data-caption="WORLD PREMIERE 世界最佳：The Art of the Impossible" src="media/15038367340940/IMG_3819-s.png"></a></li>
  <li><a href="media/15038367340940/IMG_3857.jpg"><img data-caption="HOW TO 怎样做：5 Tips to Get More Out of VSCO" src="media/15038367340940/IMG_3857-s.png"></a></li>
  <li><a href="media/15038367340940/IMG_3858.jpg"><img data-caption="DEEP DIVE 深入了解：It All Changes on Level 201" src="media/15038367340940/IMG_3858-s.png"></a></li>
  <li><a href="media/15038367340940/IMG_3859.jpg"><img data-caption="MEET THE DEVELOPER 开发者访谈：It's a Mom's Mom's Mom's World" src="media/15038367340940/IMG_3859-s.png"></a></li>
</ul>
<ul>
<li><a href="https://itunes.apple.com/us/story/id1254095375">APP OF THE DAY 每日应用：Day One Journal</a></li>
<li><a href="https://itunes.apple.com/us/story/id1273222333">GAME OF THE DAY 每日游戏: Pigeon Wings</a></li>
</ul>
<ul class="clearing-thumbs small-block-grid-2" data-clearing>
    <li><a href="media/15038367340940/IMG_3860.jpg"><img data-caption="APP OF THE DAY 每日应用：Day One Journal" src="media/15038367340940/IMG_3860-s.png"></a></li>
    <li><a href="media/15038367340940/IMG_3861.jpg"><img data-caption="GAME OF THE DAY 每日游戏: Pigeon Wings" src="media/15038367340940/IMG_3861-s.png"></a></li>
    </ul>
<ul>
<li><a href="https://itunes.apple.com/us/story/id1266801024">VIDEOS 视频：Go On, Save the Tiny Aliens——Splitter Critters</a></li>
<li><a href="https://itunes.apple.com/us/story/id1267735855">QUICK LOOK 快速浏览：Ride for a Cause</a></li>
<li><p>内购推荐：暂未找到实例</p>
<p><img src="media/15038367340940/E2CC05F2-23DF-4F15-8754-BC1CAAA3D22C.png" alt="E2CC05F2-23DF-4F15-8754-BC1CAAA3D22"/></p></li>
<li><p>COLLECTION &amp; LIST</p>
<ul>
<li><a href="https://itunes.apple.com/us/story/id1254076297">Tap Your Way to Victory</a></li>
<li><a href="https://itunes.apple.com/us/story/id1275104683">Not Your Normal Sports Games</a></li>
<li><a href="https://itunes.apple.com/us/story/id1273579171">One Thumb to Play</a></li>
</ul>
<p><img src="media/15038367340940/2FB40861-7FE2-4D98-88C9-1CED7370EEFC.png" alt="2FB40861-7FE2-4D98-88C9-1CED7370EEF"/></p></li>
</ul></li>
</ul>

<h3 id="toc_9">The big question</h3>

<ul>
<li>How do you reach us?：访问「<a href="http://AppStore.com/promote">Contact the App Store Team</a>」（需要开发者身份登录）
<ul>
<li>如果你即将发布一款新 app、新游戏，即将发布一项重要意义的升级，或者你关于 app 有一段独特的故事，希望在推出时被 App Store 推荐，你可以提前 6-8 周告知 Apple 你的故事。</li>
<li>基本的开发者信息（开发者名字、网站）、app 信息（app 的名字、ID、描述、版本号、版本亮点、发布平台、是否针对儿童、语言、地区、计划提交日期、计划发布日期）、相关链接（网站、demo 视频、其他展示等）、商业模型（Free、Paid、Freemium、Paymium）、市场推广计划、最重要的是你的故事（最多 1000 个字符）。</li>
</ul></li>
</ul>

<h2 id="toc_10">What now？</h2>

<p>iOS 11 的 App Store 发生了如此多的变化，从焕然一新的设计到独特角度的故事。除了 AppStore 本身对应用的推荐，每个开发者也应该特别注意以下这些变化，并且做出改变：</p>

<ul>
<li>In-App Purchases：内购和订阅现在可以被推荐、被搜索；</li>
<li>App Name &amp; Subtitle：App 名字被限制为 30 个字符，但增加了副标题；</li>
<li>Video App Preview ：自动播放、可以本地化的预览视频；</li>
<li><p>Promotional Text：最多 170 个字符，会出现在应用描述的上方；</p>
<p><img src="media/15038367340940/26.jpg" alt="26"/></p></li>
<li><p>Ratings and Reviews</p>
<ul>
<li>iOS 10.3 中加入了在应用内评分的功能，开发者可以回复用户的评论。开发者回复后，用户可以修改评论，通常用户都是把评论越改越好。</li>
<li>要使用应用内评分，需要调用 SKStoreReviewController API。在 365 天内最多请求用户评分 3 次。</li>
<li>每次提交 app 的新版本时，评分不再会被自动重置，不会再有当前版本和所有版本的区分。但开发者可以决定在提交时是否要主动重置评分，这要十分谨慎，三思而后行，毕竟用户非常看重这个数据。</li>
<li>强烈建议将回复用户评论作为日常事务之一。现在已经支持在 iTunes Connect 中分配用户角色为「客户支持」，该角色仅可以对评论进行回复。</li>
</ul></li>
<li><p>Search</p>
<ul>
<li><p>Search Ads：目前在美国、英国、澳大利亚、新西兰可用。转化率达到 50 %。从 2017 年 10 月 17 日开始，Search Ads 功能会在加拿大、墨西哥、瑞士上线。</p>
<p><img src="media/15038367340940/24.jpg" alt="24"/></p></li>
<li><p>Search Keywords：搜索关键词可以决定你的 app 在搜索结果中怎么呈现。仔细考虑当用户想搜索你这种 app 时会用到哪些词语，使用这些词语作为你的搜索关键词。</p>
<ul>
<li>过于笼统或过于具化的术语都不利于用户找到你的 app。</li>
<li>搜索关键词用逗号分隔，最多 100 个字符。</li>
<li>要避免的情况：1.有了单数形式的词再用复数形式；2.分类的名称或者词语「app」；3.重复的字词。</li>
<li>可能会被拒绝审核的关键词，不能使用的关键词：1.未授权的商标名称、名人的名字和其他受保护的字词；2.与 app 不相关的字词；3.竞品 app 的名字；4.不相关、不合适、无礼的、令人讨厌的字词。</li>
</ul></li>
<li><p>影响搜索结果的因素：</p>
<ul>
<li>搜索信息与 app 信息的匹配度；</li>
<li>用户的下载、评分、评论等行为；</li>
<li>App 的搜索关键词；</li>
<li>App 的 名字、副标题、描述；</li>
<li>App 设置的首要分类；</li>
<li>推荐的内购；</li>
<li>搜索广告。</li>
</ul></li>
<li><p>更强大的搜索：除了应用，搜索目前可以搜索到开发者、内购、分类、故事、技巧、合集等。</p>
<p><img src="media/15038367340940/15039279875875.jpg" alt=""/></p></li>
</ul></li>
</ul>

<p>至此，从「Today」到「Games」、「Apps」再到「Product Page」、<br/>
「Search」，App Store in iOS 11 已了解完毕。无论是从设计还是编辑角度，App Store 都是焕然一新。可以看出，从 iOS 11 开始 Apple 期望用户能够从 App Store 中发掘出更多内容，强化以人工推荐为主的内容，弱化排行榜、分类这些自动生成的数据。</p>

<p>目前，美区的 App Store 中的「Today」已经开始每天频率的内容更新，中区的 App Store 暂时还是一周一更新。期待 iOS 11 正式发布后，App Store 为应用带去的崭新的活力。</p>

<h2 id="toc_11">参考内容</h2>

<ul>
<li><a href="https://developer.apple.com/videos/play/wwdc2017/301">Introducing the New App Store - WWDC 2017</a></li>
<li><a href="https://www.apple.com/cn/ios/app-store/">App Store - Apple (中国)</a></li>
<li><a href="https://developer.apple.com/app-store/whats-new/">The All-New App Store - Apple Developer</a></li>
<li><a href="https://developer.apple.com/app-store/discoverability/">Discovery on the App Store - App Store - Apple Developer</a></li>
<li><a href="https://developer.apple.com/app-store/product-page/">App Store Product Page - App Store - Apple Developer</a></li>
<li><a href="https://developer.apple.com/app-store/app-previews/">App Previews - App Store - Apple Developer</a></li>
<li><a href="https://developer.apple.com/app-store/promoting-in-app-purchases/">Promoting Your In-App Purchases - App Store - Apple Developer</a></li>
<li><a href="https://developer.apple.com/app-store/search/">App Store Search - App Store - Apple Developer</a></li>
<li><a href="https://developer.apple.com/app-store/ratings-and-reviews/">Ratings, Reviews, and Responses - App Store - Apple Developer</a></li>
<li><a href="https://developer.apple.com/app-store/categories/">Choosing a Category - App Store - Apple Developer</a></li>
<li><a href="https://help.apple.com/itunes-connect/developer/">iTunes Connect 开发人员帮助</a></li>
</ul>

<blockquote>
<p>如果你觉得这篇文章对你有所帮助，欢迎请我喝杯咖啡，感谢你的支持😁</p>

<p><img src="media/14625521742746/15088240400740.jpg" alt=""/></p>
</blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[为订阅成功而设计 Designing for Subscription Success - WWDC 2017 Session 814]]></title>
    <link href="https://steppark.net/15036722610708.html"/>
    <updated>2017-08-25T22:44:21+08:00</updated>
    <id>https://steppark.net/15036722610708.html</id>
    <content type="html"><![CDATA[
<p>在订阅时提供一个轻松简单、透明易懂、吸引人的用户体验将会更好地传达订阅的价值、优化订阅的流程，更加容易获取新的订阅者。</p>

<span id="more"></span><!-- more -->

<h2 id="toc_0">Effortless 轻松</h2>

<ul>
<li><p>Be Visible：要让用户知道你的 app 里存在订阅功能，不要让用户到处寻找如何订阅/注册：</p>
<ul>
<li><p>方法一：在 app 的界面中一直显示一个「订阅」按钮，例如「The New York Times」app 中，每篇文章的导航栏上都有一个「订阅」按钮；</p>
<p><img src="media/15036722610708/1.jpg" alt="1"/></p></li>
<li><p>Note：Subscription ≠ Ad、Subscription ≠ Notification，不要把订阅以弹框或通知的形式呈现；</p></li>
<li><p>方法二：当用户对一部分内容或者功能表现出感兴趣时，展示订阅功能，例如「Her」app 中，当你在浏览每个人的介绍时，刚好错过了一个你感兴趣的人，当你想要回退时，app 会告诉你这是一个「订阅」后可使用的功能。并且在展示订阅的界面上有着漂亮的动画。</p>
<p><img src="media/15036722610708/B285906D-201B-426F-8B12-197437AA49A2.png" alt="B285906D-201B-426F-8B12-197437AA49A2"/></p></li>
<li><p>确保在「设置」或者「帐户」中有一个地方有订阅的入口，因为当一个用户想刻意寻找订阅时自然会想到这些位置。</p>
<p><img src="media/15036722610708/4.jpg" alt="4"/></p></li>
</ul></li>
<li><p>Remove Friction：减少麻烦，不要在注册/订阅过程中要求用户填写太多信息，不要有过多的步骤，不要让用户花过长的时间。下面是美国三大视频流媒体 app 一个月的数据，看下要求点击次数与转换率的关系。要求点击 9 次时转化率只有 7% 了。</p>
<p><img src="media/15036722610708/D1FBC39B-A78F-47F9-84E5-D82A496ECAE4.png" alt="D1FBC39B-A78F-47F9-84E5-D82A496ECAE4"/></p>
<ul>
<li>Less is more. 更少的点击，更少的麻烦就会有更高的转化率和更多的订阅者。先把焦点放在让用户先完成注册上。像爱好、个人介绍等细节可以放在注册之后再让用户补充。</li>
</ul></li>
</ul>

<h2 id="toc_1">Transparent 透明</h2>

<ul>
<li><p>Provide clear terms：提供清晰的订阅条款，让用户明白他们订阅了什么。看到订阅的界面，用户应该能快速了解订阅的是什么和怎样订阅。</p>
<ul>
<li><p>当提供订阅时，通常包括：简洁的价值主张、对订阅的号召、已订阅用户可登录、换了新设备的用户可恢复购买、提供不同层级的订阅选项（最多三到四种为佳）。尽可能的让界面保持简洁。</p>
<p><img src="media/15036722610708/5.jpg" alt="5"/></p></li>
</ul></li>
</ul>

<h2 id="toc_2">Engaging 吸引</h2>

<ul>
<li>Engage through experience：在订阅前，让用户能够体验你的 app 和 app 的内容。在当今，购买前能够体验和尝试是怎样做出购买决定的重要影响因素，如试衣服、看房、试驾等。对 app 的订阅是同样的道理。</li>
<li><p>吸引用户订阅有多种方法，决定用哪种方法时想想：用户当前的使用体验，你 app 里的内容类型，添加订阅后对于用户体验的影响。</p>
<ul>
<li><p>Free trial：适用于人们已经熟悉的品牌，人们想要在订阅前了解到底有什么内容。如 「HBO NOW」app。</p>
<p><img src="media/15036722610708/6.jpg" alt="6"/></p></li>
<li><p>Premium feature：App 的主体免费，但一部分高级功能作为订阅选项。例如「Sleep Cycle」app，将「趋势」功能作为订阅选项，模糊背景的形式作为一个预览。</p>
<p><img src="media/15036722610708/7.jpg" alt="7"/></p></li>
<li><p>Sample content：提供一部分示例内容。如「The New York Times」app，只允许未订阅的用户浏览十篇文章，这样可以让用户自己寻找和决定自己感兴趣的内容，从而决定是否要去订阅。</p>
<p><img src="media/15036722610708/8.jpg" alt="8"/></p></li>
</ul></li>
</ul>

<blockquote>
<p>Session 链接：<a href="https://developer.apple.com/videos/play/wwdc2017/814">Designing for Subscription Success - WWDC 2017 - Videos - Apple Developer</a>  </p>
</blockquote>

<p>📱💻📺</p>

<blockquote>
<p>如果你觉得这篇文章对你有所帮助，欢迎请我喝杯咖啡，感谢你的支持😁</p>

<p><img src="media/14625521742746/15088240400740.jpg" alt=""/></p>
</blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS 11 设计上的改变 What’s New in iOS 11 - WWDC 2017 Session 810]]></title>
    <link href="https://steppark.net/15028131788266.html"/>
    <updated>2017-08-16T00:06:18+08:00</updated>
    <id>https://steppark.net/15028131788266.html</id>
    <content type="html"><![CDATA[
<p>从寻路、排版层级、对比度三个方面介绍 iOS 11 设计上的一些变化，从而帮助你设计一个具有丰富的视觉层级、清晰的导航、易于使用和简单的交互的 app。</p>

<span id="more"></span><!-- more -->

<h2 id="toc_0">概述</h2>

<ul>
<li><strong>Wayfinding：</strong>在 iOS 11 中提供更加清晰的导航、贯彻整个系统的寻路；</li>
<li><strong>Typographic Hierarchy：</strong>通过排版的调整，聚焦整体的层级；</li>
<li><strong>Contrast：</strong>对于有用的信息，在 UI 上增加对比度。</li>
</ul>

<h2 id="toc_1">Wayfinding 寻路</h2>

<ul>
<li>通常意义下，寻路就是指导人们通过某个环境、在物理空间自我定位；</li>
<li><p>生活中常见的标识和信息系统：街道标识、机场、停车场。</p></li>
<li><p>在 UI 中寻路，可以增强使用体验，理解你所处的空间：</p>
<ul>
<li>首要目标：高亮/强调内容；</li>
<li>app 需要清晰的视觉层级；</li>
<li>UI 元素不应该与内容发生竞争，而应该帮助你更好的理解潜在的功能和交互。</li>
</ul></li>
<li><p>大标题导航栏：一种可选的方案，并没有替换掉标准的导航栏样式，页面往下滚动时可以切换为标准的导航栏样式；</p></li>
<li><p>在哪里应该使用大标题导航栏：</p>
<ul>
<li>app 每个 tab 的第一层级：让你理解你在 tab 的第一层级、你已经滚动到了页面顶部；</li>
<li>如果内容和层级众多，在某些二级页面也可以使用大标题导航栏，例如「音乐」app 中「浏览」tab 中的「最新音乐」、「歌单」、「排行榜」；</li>
</ul>
<p><img src="media/15028131788266/1.jpg" alt="1"/></p>
<ul>
<li>在布局相似的页面里也可使用大标题导航栏，例如「电话」app，每个 tab （个人收藏、最近通话、语音信箱）都是行式的文本内容，使用大标题导航栏可以让用户立即知道自己在哪里；</li>
</ul>
<p><img src="media/15028131788266/2.jpg" alt="2"/></p>
<ul>
<li>非常重要：在导航栏中使用大标题并不总是必要的，在某些场景下会阻碍其可用性，例如「时钟」app，虽然它有多个 tab，但是它没有复杂多样的内容，每一个 tab 的布局也十分容易区分，如果使用大标题导航栏，反而会使其与内容发生竞争。</li>
</ul>
<p><img src="media/15028131788266/3.jpg" alt="3"/></p></li>
</ul>

<h2 id="toc_2">Typographic Hierarchy 排版层级</h2>

<ul>
<li>通过排版上的层级变化，可以强调更加重要的内容，帮助内容成组；</li>
<li>减少认知负担，减少在寻找某些东西时所付出的精神努力。</li>
<li>建立排版层级的几个基本的方法：
<ul>
<li><strong>Position 位置：</strong>上面的会比下面的重要一些；</li>
<li><strong>Size 尺寸/字号：</strong>大尺寸的会比小尺寸的重要一些；</li>
<li><strong>Weight 字重：</strong>粗字重可以强调效果，细字重可以减弱效果；</li>
<li><strong>Color 颜色：</strong>如白色对比灰色，白色会有强调效果。</li>
<li>一次可能会用到多种方法。</li>
</ul></li>
</ul>

<p><img src="media/15028131788266/3EEAB629-094D-4391-9677-DC2CCC4C35A9.png" alt="3EEAB629-094D-4391-9677-DC2CCC4C35A9"/></p>

<ul>
<li><p>iOS 11 中的几个实例：</p>
<ul>
<li><strong>「照片」app：</strong>内容——你的照片是这个 app 中最重要的。导航照片的每部分的标题，在 iOS 10 中采用了两种字号来区分两种信息，但仍然显得有点小、有点轻，而在 iOS 11 中，让每部分的标题字号更大，地点信息增加了字重，日期信息采用了灰色文本。这些改变可以使你分离内容中的重点更简单了，让你更快地找到某张特别的照片。</li>
</ul>
<p><img src="media/15028131788266/1%201.jpg" alt="1 1"/></p>
<ul>
<li><strong>「日历」app：</strong>在 iOS 11 中为了强调增加了字重，有意地使用颜色指示当前的年月日。</li>
</ul>
<p><img src="media/15028131788266/2%201.jpg" alt="2 1"/></p>
<ul>
<li><strong>「天气」app：</strong>在 iOS 11 中，增加了文本字重，整体上增大了字号，使得内容更加容易阅读。</li>
</ul>
<p><img src="media/15028131788266/3%201.jpg" alt="3 1"/></p></li>
</ul>

<h2 id="toc_3">Contrast 对比度</h2>

<ul>
<li>在 UI 中，为了与更大、更粗的文本样式保持平衡，需要更新其他 UI 元素，增强其对比度，同时还要保持其功能性，保证最小化粒度的改变。</li>
<li><p>在 iOS 11 中由此带来的一些改变：</p>
<ul>
<li>填充按钮的形状，如数字键盘；</li>
</ul>
<p><img src="media/15028131788266/1%202.jpg" alt="1 2"/></p>
<ul>
<li>增加形状的尺寸，如搜索输入框；</li>
</ul>
<p><img src="media/15028131788266/A4F66E32-2ECC-49B6-873F-476C6599D916.png" alt="A4F66E32-2ECC-49B6-873F-476C6599D916"/></p>
<ul>
<li>Tab Bar：增加文本标签的字重（从 regular 到 medium），填充 icon 的形状、增加笔画的权重；</li>
</ul>
<p><img src="media/15028131788266/F913F827-1261-49A1-9990-864B983EC401.png" alt="F913F827-1261-49A1-9990-864B983EC401"/></p>
<ul>
<li>IPhone 横屏下的 Tab Bar：第一点，为了对空间更好地利用，把文本标签放在了 icon 的右边（iOS 10 中是一上一下），这样使得横屏下的 Tab Bar 更矮了，从而与导航栏、工具栏高度一致。第二点，相对于竖屏，横屏下的 icon 会稍小一些，文本会稍大一些，设计自己的 app 时需要考虑这些因素。</li>
</ul>
<p><img src="media/15028131788266/iPhone%20Tab%20Bar.png" alt="iPhone Tab Ba"/></p>
<ul>
<li>iPad 横屏下的 Tab Bar：更大的文本尺寸、icon 与竖屏时的大小一致。</li>
</ul>
<p><img src="media/15028131788266/6280686D-473F-41F3-AE7A-C9AD96D0EBF8.png" alt="6280686D-473F-41F3-AE7A-C9AD96D0EBF8"/></p>
<ul>
<li>Wallet app：在 iOS 10 中使用了模糊效果，似乎想要表明其位于底下的页面之上，但这个并不符合逻辑，也没有起到指示所处空间的作用，所以在 iOS 11 中移除了这种模糊效果。</li>
</ul>
<p><img src="media/15028131788266/4.jpg" alt="4"/></p></li>
<li><p>移除多余的、不必要的 UI 元素，减少复杂度以改善整个 app 的对比度。</p></li>
</ul>

<blockquote>
<p>Session 链接：<a href="https://developer.apple.com/videos/play/wwdc2017/810/">What’s New in iOS 11 - WWDC 2017 - Videos - Apple Developer</a>  </p>
</blockquote>

<p>📱</p>

<blockquote>
<p>如果你觉得这篇文章对你有所帮助，欢迎请我喝杯咖啡，感谢你的支持😁</p>

<p><img src="media/14625521742746/15088240400740.jpg" alt=""/></p>
</blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[WWDC Session 学习笔记总览]]></title>
    <link href="https://steppark.net/15028149583661.html"/>
    <updated>2017-08-16T00:35:58+08:00</updated>
    <id>https://steppark.net/15028149583661.html</id>
    <content type="html"><![CDATA[
<p>每年 6 月份的 Apple WWDC，除了揭晓 iOS、macOS、watchOS、tvOS 四大新系统的功能亮点的 Keynote 外，在之后还会有众多的针对不同角色、不同目的的开发者、设计师等准备的 Session。虽然有些很简短、有些所讲述的主题非常垂直，但从这些 Session 中说不定就能了解到系统设计背后的故事、未来新功能发展的走向、深入简出的设计/开发方法等。</p>

<p>「好记性不如烂笔头」，我把我看过的 Session 的精华整理成简短的笔记记录下来，笔记中的一些翻译不求准确，但重在理解其所说即可。这篇文章作为这些学习笔记的分类汇总，以方便日后查找。</p>

<p>与设计相关、功能介绍类的 Session 居多，比较简单、能看懂的与开发相关的 Session 也会有一些。</p>

<span id="more"></span><!-- more -->

<p><strong>分类标注：</strong></p>

<ul>
<li>iOS：📱</li>
<li>macOS：💻</li>
<li>watchOS：⌚️</li>
<li>tvOS：📺</li>
</ul>

<h2 id="toc_0">Design🎨</h2>

<h3 id="toc_1">WWDC 2018</h3>

<ul>
<li><a href="15416957498069.html">设计流畅的界面 Designing Fluid Interfaces - WWDC 2018 Session 803</a> 📱</li>
</ul>

<h3 id="toc_2">WWDC 2017</h3>

<ul>
<li><a href="15028131788266.html">iOS 11 设计上的改变 What’s New in iOS 11 - WWDC 2017 Session 810</a>📱</li>
<li><a href="15171487371271.html">尺寸级别和核心要素 Size Classes and Core Components - WWDC 2017 Session 812</a> 📱</li>
<li><a href="15036722610708.html">为订阅成功而设计 Designing for Subscription Success - WWDC 2017 Session 814</a>📱💻📺</li>
<li><a href="15416970661320.html">内容丰富的通知 Rich Notifications - WWDC 2017 Session 817</a> 📱</li>
</ul>

<h3 id="toc_3">WWDC 2016</h3>

<ul>
<li><a href="15030704996885.html">包容性 App 设计 Inclusive App Design - WWDC 2016 Session 801</a>📱💻</li>
<li><a href="15029504785442.html">排版和字体 Typography and Fonts - WWDC 2016 Session 803</a>📱💻⌚️📺</li>
<li>迭代的 UI 设计 Iteractive UI Design - WWDC 2016 Session 805📱</li>
</ul>

<h3 id="toc_4">WWDC 2015</h3>

<ul>
<li><a href="15028584576994.html">新的系统字体 Introducing the New System Fonts - WWDC 2015 Session 804</a>📱💻⌚️📺</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[从设计出发认识 UIAlertController]]></title>
    <link href="https://steppark.net/14994455522628.html"/>
    <updated>2017-07-08T00:39:12+08:00</updated>
    <id>https://steppark.net/14994455522628.html</id>
    <content type="html"><![CDATA[
<p>Apple 在 <a href="https://developer.apple.com/ios/human-interface-guidelines/ui-views/alerts/">iOS Human Interface Guidelines</a> 中提到了两种 View：Alert 和 Action Sheet。如果对 iOS 系统很熟悉的话，在各种 app 里都会看见这两种 View 的身影。两种 View 都会打断用户的操作，覆盖掉当前界面，在界面上以模态窗口的形式呈现，一般是向用户传达重要的信息并期望用户能够做出反馈。</p>

<span id="more"></span><!-- more -->

<h2 id="toc_0">初见 Alert 和 Action Sheet</h2>

<p>通常的 Alert 由标题、描述、一个或一个以上的操作组成，还可能有文本输入框。Alert 会直接显示在界面的中央，必须点击某个操作后才能使其关闭，一般在 app 请求系统权限、确认删除某些内容、输入 Apple ID 等情景时会出现。当然也有一些特殊的 Alert 样式，比如 Touch ID 授权、iOS 10.3 才引入的在应用内评分。</p>

<p><img src="media/14994455522628/Alert.png" alt="Alert " class="mw_img_center" style="display: block; clear:both; margin: 0 auto;"/></p>

<p>Action Sheet 由标题、描述、一个或一个以上的操作组成，在 iPhone 上通常情况下在最底部还会有一个表示「取消」意义的操作。Action Sheet 在 iPhone 上是从底部滑出的一种形式，在 iPad 上是 Popover 的形式。它可以展示较多的操作，且在呈现形式上比 Alert 更圆滑一些，没有那么强硬，一般在一些用户主动操作之后才会出现。在系统里也发现了一个特殊定制化的 Action Sheet，就是音乐 app 里针对一首歌的操作。</p>

<p><img src="media/14994455522628/Action%20Sheet.png" alt="Action Sheet " class="mw_img_center" style="display: block; clear:both; margin: 0 auto;"/></p>

<p>从设计角度来说，Apple 定义了这两种 View 的具体规则，希望 iOS app 的设计师和开发者们都能遵从这套设计规范，这样一方面节省了设计成本，另一方面对于使用 app 的用户来说降低了学习成本，各个 app 的 Alert 和 ActionSheet 的操作逻辑是一样的，各个 iOS app 在不同中又有相同。</p>

<p>当然有的 app 认为原生的样式与自己 app 的设计风格不协调，加之有足够的设计&amp;开发资源，于是根据自己 app 的设计风格设计了一套完全自定义的 Alert 和 Action Sheet。但万变不离其宗，以微信&amp;微博举例，其操作逻辑与原生的是一模一样的，毕竟这样对于用户来说没有什么学习成本，用户也不会觉得很奇怪。</p>

<p><img src="media/14994455522628/Custom%20Alert%20-%20Action%20Sheet.png" alt="Custom Alert - Action Sheet " class="mw_img_center" style="display: block; clear:both; margin: 0 auto;"/></p>

<p>Apple 在设计上对两种 View 进行了规范，那具体在开发上又是怎么去服从这套设计规范的呢？从代码里还能看到这两种 View 的什么细节呢？</p>

<h2 id="toc_1">UIAlertController 是什么？</h2>

<p>Apple 在设计规范中对 Alert 和 Action Sheet 进行了定义，这两种 View 其实也被从代码层级定义好了，使用时直接在 Xcode 中调用就可以。在 iOS 8 时代以前，要想展示 Alert 需要调用 UIAlertView ，想展示 Action Sheet 需要调用 UIActionSheet，且调用的逻辑较为复杂。自 iOS 8 之后，Apple 废弃了之前的调用方法，将上述两个统一成了 UIAlertController，具体呈现哪种样式，由属性「preferredStyle」来决定。</p>

<p>在使用时，整体的思路可以分为三步，1.定义 AlertController 本身，包括其标题、描述、是 Alert 还是 Action Sheet 等；2.定义在 AlertController 中要添加的动作，每个动作又有自己的属性，比如样式、显示文字、执行操作等；3.在页面上展示这个 AlertController。</p>

<p>下面用具体的例子分别说明下各种情景的 AlertController 应该怎么使用，且从这些代码的逻辑中发现那些没有在设计规范中说明的细节。</p>

<h2 id="toc_2">Alert 在代码中的实现</h2>

<h3 id="toc_3">一个操作按钮的 Alert</h3>

<p>最简单的 Alert 自然是只有一个操作按钮，以点击一个按钮弹出 Alert 为例说明：</p>

<pre class="line-numbers"><code class="language-text">@IBAction func showAlertViewWithOneAction(sender: UIButton){
    
    // 创建 alertController，定义其显示的标题和描述文字，确定其类型为 Alert
    let alertController = UIAlertController(title: &quot;Hello World！&quot;, message: &quot;This is the most simple alert view.&quot;, preferredStyle: UIAlertControllerStyle.alert)
    
    // 定义要添加到 alertController 中的动作，包括每个动作的标题和样式
    let okAction = UIAlertAction(title: &quot;OK&quot;, style: .default, handler: nil)
    
    // 向 alertController 中添加定义好的动作
    alertController.addAction(okAction)
    
    // 在界面上显示已经配置好的 alertController
    self.present(alertController, animated: true, completion: nil)
    
  }
</code></pre>

<p>对这段代码做一个简单的解析：</p>

<ul>
<li>创建 alertController 时有一个属性「preferredStyle」，当其为「UIAlertControllerStyle.alert」时则为创建一个 Alert View，当其为「UIAlertControllerStyle.actionSheet」时则为创建一个 Action Sheet。</li>
<li>创建一个 action 时，它也有一个属性「style」，这个属性的值有三个：「.default」、「.destructive」、「.cancel」，他们之间有一些区别：
<ul>
<li>「.default」：默认的样式，视觉上是正常字重、蓝色的文字；</li>
<li>「.destructive」：从名字上就可以看出，用在那些具有破坏性、不可恢复的操作上，比如删除、注销、清除等，视觉上是正常字重、红色的文字；</li>
<li>「.cancel」：iOS 开发中特意择出来的一种样式，特别用在取消、不操作、仅关闭 Alert 的这种操作上，视觉上是半加粗（Semibold）的字重、蓝色的文字。 无论在 Alert Controller 中添加取消样式的动作排在第几个，在显示上都会放到所有操作的最后一个，只有两个操作时会放在左边，这是系统定义好的。<strong>注意一个 alertController 里只能有一个样式为「.cancel」的 action，如果代码中写了大于等于两个，app 会直接 crash。</strong></li>
</ul></li>
<li>action 中的 handler 属性是用来描述点击这个操作后会发生的动作，一般情况下会写作一个闭包函数。而对于像取消这种操作，自然就是什么也不执行，即可写成「nil」。文章仅针对 UIAlertController 进行讨论，这部分就不展开详述了。</li>
</ul>

<p>上面这段代码的运行效果如下图，这种只有一个操作按钮的 Alert 多用于提示/告知用户某些信息，起到一个通知的作用。</p>

<p><img src="media/14994455522628/Simulator%20Screen%20Shot%202017%E5%B9%B47%E6%9C%889%E6%97%A5%20%E4%B8%8B%E5%8D%888.43.15.png" alt="Simulator Screen Shot 2017年7月9日 下午8.43.15 " class="mw_img_center" style="display: block; clear:both; margin: 0 auto;"/></p>

<h3 id="toc_4">两个操作按钮的 Alert</h3>

<p>当然如果想增加更多操作按钮，只需在代码中创建更多动作并添加到 alertController 即可。如下面的代码建立一个两个操作按钮的 AlertView：</p>

<pre class="line-numbers"><code class="language-text">@IBAction func showAlertViewWithTwoActions(sender: UIButton){
    let alertController = UIAlertController(title: &quot;你确定要退出当前登录帐号吗？&quot;, message: &quot;退出后你的帐户数据不会清除，你可以再次登录&quot;, preferredStyle: .alert)
    
    let exitAction = UIAlertAction(title: &quot;退出&quot;, style: .default, handler: nil)
    let cancelAciton = UIAlertAction(title: &quot;取消&quot;, style: .cancel, handler: nil)
    
    alertController.addAction(exitAction)
    alertController.addAction(cancelAciton)
    
    // 定义 alertController 中的哪个动作需要 highlight
    alertController.preferredAction = alertController.actions[0]
    
    self.present(alertController, animated: true, completion: nil)
    
  }
</code></pre>

<p>下图是这段代码的运行效果。但这里有个问题，「取消」按钮并没有如期显示为半粗体字重，反而「退出」按钮显示为了半粗体字重。这个的原因是在代码里对创建的 alertController 的「preferredAction」属性进行了定义，将 alertController 里的第一个动作设置为了「preferredAction」，在显示效果上使这个 action highlight，也即应用了半粗体字重。因此原本使用了「.cancel」样式的操作按钮恢复成了正常字重。只能有一个动作可以被设置为「preferredAction」，且当设备有外接键盘时，按回车键等于直接点击这个操作。这个逻辑也是系统内置的。</p>

<p><img src="media/14994455522628/Simulator%20Screen%20Shot%202017%E5%B9%B47%E6%9C%889%E6%97%A5%20%E4%B8%8B%E5%8D%888.59.34.png" alt="Simulator Screen Shot 2017年7月9日 下午8.59.34 " class="mw_img_center" style="display: block; clear:both; margin: 0 auto;"/></p>

<p>在使用「preferredAction」这个属性时有几点需要注意，1.必须在创建完 alertController 且添加完动作后才能定义；2.这个属性只能应用于 Alert，不能应用于 Action Sheet。</p>

<h3 id="toc_5">三个操作按钮的 Alert</h3>

<p>当一个 Alert 中出现了大于两个操作时，按钮的排布方式就不能再左右排布了，而是改为由上至下排布，具体代码如下：</p>

<pre class="line-numbers"><code class="language-text">@IBAction func showAlertViewWithThreeAcitons(sender: UIButton){
    let alertController = UIAlertController(title: &quot;你确定要注销此帐户吗？&quot;, message: nil, preferredStyle: .alert)
    
    let destructAction = UIAlertAction(title: &quot;注销帐户&quot;, style: .destructive, handler: nil)
    let exitAction = UIAlertAction(title: &quot;仅退出帐户&quot;, style: .default, handler: nil)
    let cancelAction = UIAlertAction(title: &quot;取消&quot;, style: .cancel, handler: nil)
    
    alertController.addAction(destructAction)
    alertController.addAction(exitAction)
    alertController.addAction(cancelAction)
    
    self.present(alertController, animated: true, completion: nil)
    
  }
</code></pre>

<p>以上运行结果为下图，可以看到这个 Alert 只有标题，没有具体的描述信息，这个是被允许的。如果你代码写成只有描述，没有标题，系统会自动把描述作为标题；<strong>但如果你代码中标题和描述都没有，app 会 crash。</strong>如果只有标题和描述，但没有添加任何动作的 alertController 也是可以创建并显示的，但你无法关闭这个 alert。不过这个在实际中也不可能出现这种情况。</p>

<p><img src="media/14994455522628/Simulator%20Screen%20Shot%202017%E5%B9%B47%E6%9C%8810%E6%97%A5%20%E4%B8%8A%E5%8D%8812.56.33.png" alt="Simulator Screen Shot 2017年7月10日 上午12.56.33 " class="mw_img_center" style="display: block; clear:both; margin: 0 auto;"/></p>

<p>当一个 Alert 中有 n 个操作按钮时又会怎样呢？这个 Alert 会自动可上下滚动，并且打开时默认显示最下面的几个按钮操作。Alert 本身就是希望用户对某些操作做出判断并反馈的一个模态窗口，如果有太多的操作，会让用户感觉十分困惑，无法选择，而且交互体验也是非常差的，所以应极力避免这种情况。然而在 iOS 系统中，Airdrop 接收文件选择用什么 app 打开时就会出现这种情况，看上去十分糟糕🙃。</p>

<p><img src="media/14994455522628/%E5%8F%AF%E7%BF%BB%E9%A1%B5%E7%9A%84%20Action%20Sheet.png" alt="可翻页的 Action Sheet " class="mw_img_center" style="display: block; clear:both; margin: 0 auto;"/></p>

<h3 id="toc_6">带文本输入框的 Alert</h3>

<p>一个 Alert 中可以加入文本输入框以获取用户的某些信息，但文本输入框的数量、输入的字符量都应适度，在这么小一个窗口下输入文字的体验不会太好。系统中比较常见的就是购买 app 时输入 Apple ID 密码。以下以输入账户登录名和密码为例说明：</p>

<pre class="line-numbers"><code class="language-text">@IBAction func showAlertViewWithTextField(sender: UIButton){
    let alertController = UIAlertController(title:  &quot;请输入你的帐户名和密码&quot;, message: nil, preferredStyle: .alert)
    
    // 在 alertController 中增加两个文本输入框
    alertController.addTextField(configurationHandler: {(textField: UITextField!) -&gt; Void in
      // 为文本输入框添加占位符，也即输入提示
      textField.placeholder = &quot;帐户名&quot;
    })
    
    alertController.addTextField(configurationHandler: {(textField: UITextField!) -&gt; Void in
      textField.placeholder = &quot;密码&quot;
      // 改变文本输入框的属性为安全输入模式
      textField.isSecureTextEntry = true
    })
    
    let loginAction = UIAlertAction(title: &quot;登录&quot;, style: .default, handler: {
      (action:UIAlertAction!) -&gt; Void in
      let firstTextField = alertController.textFields![0] as UITextField
      let secondTextField = alertController.textFields![1] as UITextField
      
      print(&quot;Name \(String(describing: firstTextField.text)), Password \(String(describing: secondTextField.text))&quot;)
    })
    let cancelAction = UIAlertAction(title: &quot;取消&quot;, style: .cancel, handler: nil)

    alertController.addAction(loginAction)
    alertController.addAction(cancelAction)
    
    self.present(alertController, animated: true, completion: nil)
    
  }
</code></pre>

<p>这段代码与之前的不同就是为创建的 alertController 增加了两个文本输入框。在第二个密码输入框中还用到了 textField 的「isSecureTextEntry」属性，当其值「true」时即为安全输入模式，一般用来输入密码。上面这段代码中还细化了点击「登录」按钮时的动作，系统会在控制台中以「Name XXX，Password XXX」的格式输出输入的帐户名和密码。下图是运行效果：</p>

<p><img src="media/14994455522628/Simulator%20Screen%20Shot%202017%E5%B9%B47%E6%9C%889%E6%97%A5%20%E4%B8%8B%E5%8D%889.52.11.png" alt="Simulator Screen Shot 2017年7月9日 下午9.52.11 " class="mw_img_center" style="display: block; clear:both; margin: 0 auto;"/></p>

<p>每个输入框中的文字属性可以自定义，但以默认为佳。另一般情况下这种帐户名+密码输入框会有一些字符判断，比如判断输入值不为空时，「登录」按钮才会可点击。Action 的「isEnabled」属性可以控制按钮是否可点击，「true」为可点击，「false」为不可点。</p>

<h3 id="toc_7">Alert 小结</h3>

<p>从以上实例中小结一下发现的 Alert 的设计细节：</p>

<ul>
<li>Alert 必须要有标题，可以没有描述；只有描述没有标题时，描述会自动变为标题的样式；</li>
<li>Alert 可以有一个或多个操作按钮，当大于两个按钮时会由上至下排列，过多时可以滚动；</li>
<li>Alert 的每个操作有「默认」、「破坏」、「取消」三种样式，显示效果不同。一个 Alert 中只能有一个「取消」样式的操作，且会显示在所有操作之后；</li>
<li>Alert 中有操作（只能有一个）被 highlight 时，「取消」样式的操作会恢复为与「默认」样式相同；</li>
<li>Alert 中的操作可以被控制是否可点击；</li>
<li>Alert 中可以添加文本输入框。</li>
</ul>

<h2 id="toc_8">Action Sheet 在代码中的实现</h2>

<h3 id="toc_9">通常情况下的 Action Sheet</h3>

<p>通常情况下的 Action Sheet 包括其标题、描述、选择的动作和取消动作，以下为具体举例：</p>

<pre class="line-numbers"><code class="language-text">  @IBAction func showActionSheetWithThreeActions(sender: UIButton){
    let alertController = UIAlertController(title: &quot;请选择你想要的语言&quot;, message: &quot;选择的语言将在下次 app 打开时生效&quot;, preferredStyle: .actionSheet)
    
    // 定义动作和添加动作到 alertController 两步可以合为一步
    alertController.addAction(UIAlertAction(title: &quot;中文简体&quot;, style: .default, handler: nil))
    alertController.addAction(UIAlertAction(title: &quot;中文繁体&quot;, style: .default, handler: nil))
    alertController.addAction(UIAlertAction(title: &quot;英语&quot;, style: .default, handler: nil))
    alertController.addAction(UIAlertAction(title: &quot;取消&quot;, style: .cancel, handler: nil))
    
    // 设置在 iPad 上 Action Sheet 以 Popover 形式呈现时显示的位置
    let popover = alertController.popoverPresentationController
    if (popover != nil){
      popover?.sourceView = sender
      popover?.sourceRect = sender.bounds
    }
    
    self.present(alertController, animated: true, completion: nil)
    
  }
</code></pre>

<p>说下与之前创建 Alert 时明显的几点不同：</p>

<ul>
<li>Alert 不管在 iPhone 上还是 iPad 上都会显示在屏幕中央，这个位置是系统已经确定好的，无需自己定义；但对于 Action Sheet 来说，在 iPhone 上会从屏幕底部滑出，但对于 iPad 来说要以 Popover 形式展现，就需要定义显示的位置。故上述代码中定义了在 iPad 显示的位置。还有一点，在 iPad 上取消样式的操作按钮是被自动隐藏的。</li>
<li>创建 Action Sheet 后，其中的操作是不可以自定义 highlight 的。</li>
<li>Action Sheet 中是不能有文本输入框的。</li>
</ul>

<p>与 Alert 相同的是：</p>

<ul>
<li>Action Sheet 的操作也是有三种样式，取消样式的操作会显示在最后，且取消样式操作只能有一个；</li>
<li>Action Sheet 的操作过多时会支持滚动；</li>
<li>Action Sheet 只有描述没有标题时，描述会自动变为标题的样式。</li>
</ul>

<p>具体显示效果见下图。</p>

<p><img src="media/14994455522628/Simulator%20Screen%20Shot%202017%E5%B9%B47%E6%9C%889%E6%97%A5%20%E4%B8%8B%E5%8D%889.52.49.png" alt="Simulator Screen Shot 2017年7月9日 下午9.52.49 " class="mw_img_center" style="display: block; clear:both; margin: 0 auto;"/></p>

<p>需要注意的一点是，在显示创建的 alertController 时，「animated」也即是否有过渡动画一般设置为「true」显示。Alert 的过渡动画是一个渐现渐隐的过程，没有的话不会很突兀，但 Action Sheet 如果没有从下而上进入或从上而下退出的过渡动画就会感觉很突然。当然既然系统已经定义好了，两者都显示过渡动画是最好的。</p>

<h3 id="toc_10">没有「取消」操作的 Action Sheet</h3>

<p>如果一个 Action Sheet 没有了「取消」样式的按钮会有什么特别呢？具体代码如下：</p>

<pre class="line-numbers"><code class="language-text">@IBAction func showActionSheetWithTwoActions(sender: UIButton){
    let alertController = UIAlertController(title: nil, message: nil, preferredStyle: .actionSheet)
    
    alertController.addAction(UIAlertAction(title: &quot;新建网页&quot;, style: .default, handler: nil))
    alertController.addAction(UIAlertAction(title: &quot;关闭所有网页&quot;, style: .destructive, handler: nil))
    
    self.present(alertController, animated: true, completion: nil)
    
  }
</code></pre>

<p>显示效果见下图。与前面的 Action Sheet 对比就会发现，当一个 Action Sheet 有取消样式操作时，点击这个取消样式的操作按钮或者按页面空白处都可以关闭这个 Action Sheet；但当一个 Action Sheet 没有操作按钮时，点击空白处是没有任何作用的，必须点击操作按钮中的一个才能使其关闭。</p>

<p><img src="media/14994455522628/Simulator%20Screen%20Shot%202017%E5%B9%B47%E6%9C%889%E6%97%A5%20%E4%B8%8B%E5%8D%889.52.53.png" alt="Simulator Screen Shot 2017年7月9日 下午9.52.53 " class="mw_img_center" style="display: block; clear:both; margin: 0 auto;"/></p>

<p>对于 Action Sheet，标题和描述都是可以为空的，这也是与 Alert 不同的一个地方。</p>

<h3 id="toc_11">带有 icon 的 Action Sheet</h3>

<p>99% 的原生 Action Sheet 的操作按钮上都只有文字没有 icon，但在 iOS 系统的系统功能中，在选择输出音频源时显示的 Action Sheet，出现了 icon，如下图。</p>

<p><img src="media/14994455522628/%E5%B8%A6%20Icon%20%E7%9A%84%20Action%20Sheet.png" alt="带 Icon 的 Action Sheet " class="mw_img_center" style="display: block; clear:both; margin: 0 auto;"/></p>

<p>这是一个非常特殊的例子。具体实现方式如下：</p>

<pre class="line-numbers"><code class="language-text">@IBAction func showActionSheetWithFourActions(sender: UIButton){
    let alertController = UIAlertController(title: nil, message: nil, preferredStyle: .actionSheet)
    
    let twitterAction = UIAlertAction(title: &quot;Twitter&quot;, style: .default, handler: nil)
    // 为这个动作添加一个 icon
    twitterAction.setValue(UIImage(named:&quot;twitter&quot;), forKey: &quot;image&quot;)
    
    let spotifyAction = UIAlertAction(title: &quot;Spotify&quot;, style: .default, handler: nil)
    spotifyAction.setValue(UIImage(named:&quot;spotify&quot;), forKey: &quot;image&quot;)
    
    let pinterestAction = UIAlertAction(title: &quot;Pinterest&quot;, style: .default, handler: nil)
    pinterestAction.setValue(UIImage(named:&quot;pinterest&quot;), forKey: &quot;image&quot;)
    
    alertController.addAction(twitterAction)
    alertController.addAction(spotifyAction)
    alertController.addAction(pinterestAction)
    alertController.addAction(UIAlertAction(title: &quot;Cancel&quot;, style: .cancel, handler: nil))
    
    self.present(alertController, animated: true, completion: nil)
    
  }
</code></pre>

<p>上述代码运行效果如下图。可以看到添加的 icon 图片默认显示在了每个 action 的最左边，很难再进行进一步的自定义。在 Action Sheet 中显示 icon 不能说不可以，但这种在原生基础上对 AlertController 进行自定义，从设计上来说，一定程度上破坏了统一性。</p>

<p><img src="media/14994455522628/Simulator%20Screen%20Shot%202017%E5%B9%B47%E6%9C%889%E6%97%A5%20%E4%B8%8B%E5%8D%889.52.57.png" alt="Simulator Screen Shot 2017年7月9日 下午9.52.57 " class="mw_img_center" style="display: block; clear:both; margin: 0 auto;"/></p>

<h3 id="toc_12">Action Sheet 小结</h3>

<p>从以上实例中小结一下发现的 Action Sheet 的设计细节：</p>

<ul>
<li>Action Sheet 可以既没有标题，又没有描述；只有描述没有标题时，描述会自动变为标题的样式；</li>
<li>Action Sheet  可以有一个或多个操作按钮，过多时可以滚动，适配 iPad 时要定义在 iPad 上显示的位置，并以 Popover 的形式展现，且取消样式的操作按钮在 iPad 上是被自动隐藏的；</li>
<li>Action Sheet  的每个操作有「默认」、「破坏」、「取消」三种样式，显示效果不同。一个 Alert 中只能有一个「取消」样式的操作，且会显示在所有操作之后；</li>
<li>Action Sheet 有「取消」样式的操作按钮时，可以点击空白处关闭 Action Sheet；但当没有「取消」样式的操作按钮时，不可以点击空白处关闭；</li>
<li>Action Sheet 中的操作不能被自定义 highlight ；</li>
<li>Action Sheet  中的操作可以被控制是否可点击；</li>
<li>Action Sheet 中不可以添加文本输入框；</li>
<li>Action Sheet 的每个操作可以添加 icon，但不推荐。</li>
</ul>

<h2 id="toc_13">自定义 AlertController ？</h2>

<p>iOS 系统提供给了设计师和开发者定义好的 Alert 和 Action Sheet，那这两个 View 还能不能进一步进行自定义视觉显示样式呢？</p>

<p>如果直接回答，答案当然是能。上文中提到的给 action 添加 icon 其实就是一种。再比如改变字体颜色只需要在创建 UIAlertController 后改变其 view 的 「tintcolor」属性，代码如下：</p>

<pre class="line-numbers"><code class="language-text">@IBAction func showActionSheetWithTwoActions(sender: UIButton){
    let alertController = UIAlertController(title: nil, message: &quot;选择你想要的操作&quot;, preferredStyle: .actionSheet)
    
    // 更改 alertController 的字体颜色
    alertController.view.tintColor = UIColor.black
    
    // 下面的代码同上文提到的没有「取消」操作的 Action Sheet，不再重复，以……表示
    ……
  }
</code></pre>

<p>运行效果如下图，可以看到默认样式操作的字体已被改为黑色，但破坏样式的操作的字体颜色没有变化。</p>

<p><img src="media/14994455522628/Simulator%20Screen%20Shot%202017%E5%B9%B47%E6%9C%889%E6%97%A5%20%E4%B8%8B%E5%8D%8810.10.45.png" alt="Simulator Screen Shot 2017年7月9日 下午10.10.45 " class="mw_img_center" style="display: block; clear:both; margin: 0 auto;"/></p>

<p>在 Apple 的 <a href="https://developer.apple.com/documentation/uikit/uialertcontroller">UIAlertController 开发文档</a> 中有这样一段话：</p>

<blockquote>
<p>The UIAlertController class is intended to be used as-is and does not support subclassing. The view hierarchy for this class is private and must not be modified.  </p>
</blockquote>

<p>故从 Apple 官网的角度来看，是完全不推荐或者说不允许自定义 UIAlertController 样式的。从设计角度来看亦是如此。原生定义的这两种 View 如果被任意的局部自定义，那么就会有各种奇形怪状的 Alert 和 Action Sheet 出现在用户面前，体验上差劲，整体性大打折扣。网络上有很多文章讲怎么自定义这两个 View 的某些样式，定义后的效果如下：🙄🙄🙄</p>

<p><img src="media/14994455522628/%E5%A5%87%E6%80%AA%E7%9A%84%20Alert%20and%20Action%20Sheet.png" alt="奇怪的 Alert and Action Sheet " class="mw_img_center" style="display: block; clear:both; margin: 0 auto;"/></p>

<p>个人觉得把这些自定义作为开发研究还好，但如果真应用于实际 app 中，就真的……如果觉得系统的原生 Alert 和 Action Sheet 不能满足自己的需求，还是建议重新设计一套有视觉规范的符合自己需求的 Alert 和 Action Sheet。</p>

<h2 id="toc_14">设计 Alert 和 Action Sheet 时还要注意什么</h2>

<p>有关于 Alert 和 Action Sheet 的设计，Apple 在 <a href="https://developer.apple.com/ios/human-interface-guidelines/ui-views/alerts/">iOS Human Interface Guidelines</a> 中还提到了几点：</p>

<ul>
<li>Alert 会打断用户的当前操作，所以在显示 Alert 应该足够谨慎，只在非常必要时显示 Alert，并确保每个操作按钮的必要性和易读性，这样才能确保当真正发生问题时，一个 Alert 能够立即引起用户重视并作出正确的选择。</li>
<li>在横屏和竖屏下的 Alert 显示的标题、描述文本排列是不同的，在测试时应确保在两种角度下文本显示均是最优的。</li>
<li>在 Action Sheet 中，一个表示取消意义的「取消」按钮是十分有必要的，对用户的使用也是友好的。</li>
<li>确保 Action Sheet 中的破坏性操作始终在最上面显示。</li>
</ul>

<p>以上就是从设计出发从设计和开发两方面去研究的 Alert 和 Action Sheet，也即 UIAlertController。希望可以帮助设计师更好的明白其中的诸多细节逻辑，帮助工程师更好的了解这两个 View 的作用。</p>

<blockquote>
<p>如果你觉得这篇文章对你有所帮助，欢迎请我喝杯咖啡，感谢你的支持😁</p>

<p><img src="media/14625521742746/15088240400740.jpg" alt=""/></p>
</blockquote>

]]></content>
  </entry>
  
</feed>
