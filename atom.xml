<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[向远公园 | Step Park]]></title>
  <link href="https://steppark.net/atom.xml" rel="self"/>
  <link href="https://steppark.net/"/>
  <updated>2020-03-20T12:58:32+08:00</updated>
  <id>https://steppark.net/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://www.mweb.im/">MWeb</generator>
  
  <entry>
    <title type="html"><![CDATA[订阅 Apple Music 该选哪个区？——中美坡港日五大地区全对比]]></title>
    <link href="https://steppark.net/15844652241485.html"/>
    <updated>2020-03-18T01:13:44+08:00</updated>
    <id>https://steppark.net/15844652241485.html</id>
    <content type="html"><![CDATA[
<p>2015 年 6 月 30 日 Apple 正式推出「Apple Music」音乐流媒体服务。9 月 30 日，Apple Music 在中国大陆地区上线。相比于美国地区个人订阅每月 14.99 美元的价格，中国大陆地区的个人订阅价格为每月 10 人民币，可以说几乎是全球最低。但喜欢听音乐的人很多不愿意选择价格如此低廉的国区 Apple Music，反而在重重困难下选择订阅其他地区的 Apple Music，这是为什么呢？<br/>
这篇文章选取了常见的美国区、香港区、新加坡区、日本区，与中国大陆区的 Apple Music 在曲库数量、功能差异、内容展示、多平台使用、多 Apple ID 使用、订阅付费等多个方面进行对比，并附带介绍了一些容易被忽略的相关功能，以期让你在选择 Apple Music 地区时能有一个明确的方向。</p>

<span id="more"></span><!-- more -->

<blockquote>
<p>本篇文章亦发布在少数派，<a href="https://sspai.com/post/59546">点此访问↗︎</a></p>
</blockquote>

<h2 id="toc_0">目录</h2>

<ul>
<li>
<a href="#toc_0">目录</a>
</li>
<li>
<a href="#toc_1">在线曲库</a>
<ul>
<li>
<a href="#toc_2">版权分割</a>
</li>
<li>
<a href="#toc_3">儿童不宜内容？</a>
</li>
<li>
<a href="#toc_4">法律法规影响</a>
</li>
</ul>
</li>
<li>
<a href="#toc_5">功能差异</a>
<ul>
<li>
<a href="#toc_6">电台</a>
</li>
<li>
<a href="#toc_7">朋友</a>
</li>
<li>
<a href="#toc_8">全球 Top 100 歌单</a>
</li>
<li>
<a href="#toc_9">电视与影片</a>
</li>
<li>
<a href="#toc_10">iTunes Store &amp; iTunes Match</a>
</li>
<li>
<a href="#toc_11">类似艺人</a>
</li>
<li>
<a href="#toc_12">音乐向导</a>
</li>
</ul>
</li>
<li>
<a href="#toc_13">内容展示</a>
<ul>
<li>
<a href="#toc_14">曲库语言逻辑</a>
</li>
<li>
<a href="#toc_15">内容推荐</a>
</li>
</ul>
</li>
<li>
<a href="#toc_16">多平台使用</a>
</li>
<li>
<a href="#toc_17">多 Apple ID 使用</a>
</li>
<li>
<a href="#toc_18">订阅付费</a>
<ul>
<li>
<a href="#toc_19">价格对比</a>
</li>
<li>
<a href="#toc_20">付款方式</a>
</li>
</ul>
</li>
<li>
<a href="#toc_21">顺畅使用</a>
</li>
<li>
<a href="#toc_22">总结</a>
</li>
</ul>


<h2 id="toc_1">在线曲库</h2>

<ul>
<li>相信选择非中国大陆区的朋友，最大的原因就是曲库。在 Apple 官网上的 Apple Music 介绍中，<a href="https://www.apple.com.cn/apple-music/">中国大陆地区</a>的描述是「上千万首歌曲」，<a href="https://www.apple.com/apple-music/">美区</a>的描述是「60 million songs」，即「六千万歌曲」，差距不言自明。</li>
</ul>

<p><img src="media/15844652241485/9477BF5E-70BC-41BD-B863-D56EAFBB2202.png" alt="" class="mw_img_center" style="display: block; clear:both; margin: 0 auto;"/></p>

<p><img src="media/15844652241485/C16A12DE-B3D2-48CC-B0D3-C119189175E6.png" alt="" class="mw_img_center" style="display: block; clear:both; margin: 0 auto;"/></p>

<ul>
<li>其他非中区的曲库数量和美区相当，但因为不同区上架的歌曲一般都是根据不同区的用户喜好、歌手发展区域等，最终由版权授权决定，所以还是会有些差别，<strong>不存在某个地区所有的歌都有的情况</strong>。在线曲库没有的歌曲，可以自己上传到 iCloud 音乐资料库，并同步到所有设备。</li>
<li>如果想知道确切的某首歌、某张专辑、某个歌手在某个地区的 Apple Music 上有没有上架，可以通过 Apple 官方的「<a href="https://tools.applemusic.com/">Apple Music 营销工具</a>」查询，全球所有上线 Apple Music 的地区均可查询，建议电脑端访问。如果查询不到则说明没有在那个地区上架。</li>
</ul>

<p>一个上千万，一个六千万，大到六倍的差别，到底具体差在哪呢，中国大陆的曲库到底少了什么？通过几个例子来看下：</p>

<h3 id="toc_2">版权分割</h3>

<p>曲库差异最基本的原因就是版权，在中国大陆地区尤其明显。众所周知，中国大陆地区的主流音乐播放软件是 QQ 音乐、网易云音乐、虾米音乐……Apple Music 并不是主流，某些歌曲的版权自然争不过主流平台，特别是腾讯这个龙头老大。</p>

<ul>
<li>例如，<a href="https://music.apple.com/sg/artist/tfboys/1146683407">TFBOYS</a> 的歌曲在新加坡区和中国大陆区的上线情况如下图：</li>
</ul>

<p><img src="media/15844652241485/2DCF44D5-EBF3-4DD4-8CDB-1D4B67152E79.png" alt="" class="mw_img_center" style="display: block; clear:both; margin: 0 auto;"/></p>

<ul>
<li>除了版权分割导致的数量差异，还存在不同区上线时间不一致的情况。歌手「Eminem」于 2020 年 1 月 17 日推出全新专辑《<a href="https://music.apple.com/us/album/music-to-be-murdered-by/1495267282">Music To Be Murdered By</a>》。当时美区正常上架，中区不见其踪影，一段时间后才姗姗来迟。</li>
</ul>

<h3 id="toc_3">儿童不宜内容？</h3>

<p>含有性描述、暴力、脏话、毒品等这些儿童不宜内容的歌曲在 Apple Music 会被打上 E 标（E 在此指英文单词「EXPLICIT」），也俗称「脏标」。这类歌曲在中区会被进一步处理，处理的方式五花八门。</p>

<ul>
<li>还是上面提到的歌手「Eminem」的这张专辑《<a href="https://music.apple.com/us/album/music-to-be-murdered-by/1495267282">Music To Be Murdered By</a>》，在中区，<a href="https://music.apple.com/cn/album/music-to-be-murdered-by/1495267282">脏标版本</a>只上架了歌曲序号为 4、20 的这两首歌，<a href="https://music.apple.com/cn/album/music-to-be-murdered-by/1495269622">非脏标版本</a>上架了全部的 20 首歌曲，但脏话在歌曲和歌词中均被和谐。</li>
</ul>

<p><img src="media/15844652241485/792E4986-FFC9-49AA-8AC2-AA5329EA1047.png" alt="" class="mw_img_center" style="display: block; clear:both; margin: 0 auto;"/></p>

<ul>
<li>歌手「Enrique Iglesias」的《<a href="https://music.apple.com/us/album/sex-and-love/1443206473">SEX AND LOVE</a>》这张专辑，由于在专辑封面和专辑名字中含有「SEX」这个词语，在中区得到了特别处理。</li>
</ul>

<p><img src="media/15844652241485/3439E163-E3FC-4554-8F1E-4346A854436A.png" alt="" class="mw_img_center" style="display: block; clear:both; margin: 0 auto;"/></p>

<ul>
<li>歌手「Nicki Minaj」的《<a href="https://music.apple.com/cn/album/queen/1446336310">Queen</a>》这张专辑，其专辑封面在中区得到了特殊处理。</li>
</ul>

<p><img src="media/15844652241485/8F33247D-4262-4C8F-9DA1-7CBF05B44FFA.png" alt="" class="mw_img_center" style="display: block; clear:both; margin: 0 auto;"/></p>

<ul>
<li>歌手「Lauv」的《<a href="https://music.apple.com/us/album/how-im-feeling/1480846311">~how i’m feeling~</a>》这张专辑，前两首歌的歌名中包含了「drugs」和「fuck」这两个词语，在中国区未上架。</li>
</ul>

<p><img src="media/15844652241485/9FDF0295-4C06-486B-898D-1D3D2029037F.png" alt="" class="mw_img_center" style="display: block; clear:both; margin: 0 auto;"/></p>

<h3 id="toc_4">法律法规影响</h3>

<p>根据不同地区的法律法规，部分歌手的歌曲不能在某些地区上架或上架一段时间后被下架，例如<a href="https://music.apple.com/us/artist/li-zhi/855182890">下图中的歌手 Li Zhi</a>。</p>

<p><img src="media/15844652241485/877B8BE3-076F-4C7D-87F3-6FB90568B276.png" alt="" class="mw_img_center" style="display: block; clear:both; margin: 0 auto;"/></p>

<h2 id="toc_5">功能差异</h2>

<p>相比于曲库的差异，不同地区 Apple Music 功能上的差异似乎讨论的不多。实际情况是，根据不同地区对音乐内容的政策不同，相关功能也就会不同，而且差异还不小。</p>

<h3 id="toc_6">电台</h3>

<p>电台功能应该是功能差异中最容易发现的，如果你进入 Apple Music 「广播/Radio」栏目，相比非中区，中区的内容十分单薄，只有根据歌曲类型由机器自动生成的一些电台。</p>

<ul>
<li>这主要是因为中区 Apple Music 没有「Beats 1」电台功能，根据 <a href="https://support.apple.com/zh-cn/HT204944">Apple 的描述</a>，「Beats 1 是一个 24 小时直播电台，由 Apple 的 DJ 在洛杉矶、纽约和伦敦进行广播。在 Beats 1 收听由著名艺人和 DJ 主持的直播节目和独家采访，并发现来自世界各地的新音乐。」Beats 1 除了包括实时广播以外，在 Apple Music 中还可以听到往期的 Beats 1 直播回放，看到 Beats 1 的相关视频，如与歌手的访谈。Apple Music 也会根据 Beats 1 的内容，将相关歌手、专辑、单曲、播放列表打包成组，推荐给用户。</li>
</ul>

<p><img src="media/15844652241485/42650981-F413-45B6-8655-81C381E41658.png" alt="" class="mw_img_center" style="display: block; clear:both; margin: 0 auto;"/></p>

<ul>
<li>除了 Beats 1 电台，非中区的 Apple Music 还包括本地或其他地区与音乐有关的实时直播电台。</li>
</ul>

<p><img src="media/15844652241485/60E0B115-40B5-42C9-AFCB-3B69C979FD67.png" alt="" class="mw_img_center" style="display: block; clear:both; margin: 0 auto;"/></p>

<ul>
<li>下面这张图几乎在同一时刻截取了五大地区 Apple Music 「广播/Radio」模块下的展示内容，供参考。</li>
</ul>

<p><img src="media/15844652241485/Apple%20Music-Radio.png" alt="" class="mw_img_center" style="display: block; clear:both; margin: 0 auto;"/></p>

<ul>
<li>值得注意的是，即使你没有订阅 Apple Music，你也可以收听 Beats 1 直播电台和其他直播电台。</li>
</ul>

<h3 id="toc_7">朋友</h3>

<p>朋友功能算是 Apple Music 在音乐轻度社交上的一些探索，随着 2017 年的 iOS 11 开始推出，其主要目的是可以与朋友更好地分享正在收听的内容。以下所有功能均未在中国大陆区上线。</p>

<ul>
<li><strong>个人主页&amp;关注朋友</strong>：每一个使用 Apple Music 的用户都可以建立自己的个人主页，在主页中可以看到正在听的音乐、分享的自己创建的播放列表以及关注和被关注的用户，这项功能没有地区隔离，也就是说你可以关注全世界任何一个地区的使用此功能的 Apple Music 用户。当然，个人主页是否公开、正在听的音乐是否展示、自己创建的播放列表是私密还是公开完全由你自己控制。</li>
</ul>

<p><img src="media/15844652241485/F21FBF82-1D40-4F70-9815-4B56CDB60E35.png" alt="" class="mw_img_center" style="display: block; clear:both; margin: 0 auto;"/></p>

<ul>
<li><strong>「朋友们正在听」列表和「Friends Mix」 智能歌单</strong>：当你关注了其他人后，就可以在「为你推荐/For You」模块下看到「朋友正在听」列表，同时在 Apple Music 的各个地方（如专辑封面、播放列表封面、专辑详情页面、播放列表详情页面）可以看到正在听的朋友的头像。当关注的朋友足够多时，Apple 会自动生成「Friends Mix」智能歌单，结合你的喜好，收录近期朋友听的歌，每周更新。你可以通过链接访问其他人的 Friends Mix 歌单，中区用户也可以。</li>
</ul>

<p><img src="media/15844652241485/B0F07884-804D-40E7-9780-C06038531D2B.png" alt="" class="mw_img_center" style="display: block; clear:both; margin: 0 auto;"/></p>

<ul>
<li><strong>搜索别人公开分享的播放列表</strong>：当用户创建的播放列表设置为公开时，你可以通过搜索功能搜索到这些播放列表。中国区仅支持通过链接查看，不支持搜索。</li>
</ul>

<p><img src="media/15844652241485/85F9A28B-FD59-4173-B97A-78A08E8633B0.png" alt="" class="mw_img_center" style="display: block; clear:both; margin: 0 auto;"/></p>

<h3 id="toc_8">全球 Top 100 歌单</h3>

<ul>
<li>2018 年 Apple Music 推出了每日更新的全球及各个地区的 Top 100 歌单，例如<a href="https://music.apple.com/us/playlist/top-100-usa/pl.606afcbb70264d2eb2b51d8dbcfa6a12">「Top 100: USA」歌单</a>，一般固定在「浏览/Browse」模块下展示。该功能在美区、新加坡区、日区已上线，港区、中区未上线。</li>
</ul>

<p><img src="media/15844652241485/4AAE3BD0-C356-4483-BFD7-BD15565245DC.png" alt="" class="mw_img_center" style="display: block; clear:both; margin: 0 auto;"/></p>

<ul>
<li>在 2019 年年末，Apple Music 又推出了全球和各地区的年度 Top 100 歌单，例如<a href="https://music.apple.com/us/playlist/top-100-songs-of-2019-global/pl.bac7a2721408451da9c08c53e00b5de1">「Top 100 Songs of 2019: Global」歌单</a>。当时在有每日 Top 100 歌单的地区的「浏览/Browse」模块下做过推荐展示。这些歌单现在可以通过搜索或链接访问。</li>
</ul>

<p><img src="media/15844652241485/423CED4B-4849-4605-86FE-99984C80C4DF.png" alt="" class="mw_img_center" style="display: block; clear:both; margin: 0 auto;"/></p>

<h3 id="toc_9">电视与影片</h3>

<ul>
<li>Apple Music 中的「电视与影片」大部分是自制的与音乐有关的电视节目，如 Apple Music 曾经主推的《<a href="https://itunes.apple.com/sg/show/carpool-karaoke/1219046821">Carpool Karaoke</a>》、《<a href="https://itunes.apple.com/us/show/planet-of-the-apps/1235839922">Planets of the Apps</a>》、「Up Next 系列」（如《<a href="https://itunes.apple.com/sg/show/up-next-billie-eilish/1271486673">Up Next: Billie Eilish</a>》，最近上线的音乐纪录片《<a href="https://itunes.apple.com/sg/music-movie/changes-%E4%B8%93%E8%BE%91%E4%B8%93%E8%AE%BF/1498657123">The Changes Interview</a>》，一般均自带中文字幕。电视与影片可以和歌手、歌曲、专辑、播放列表，甚至是 App Store 中的内容、iTunes Store 中的内容打包到一起做内容推荐。该功能未在中国大陆区上线。</li>
</ul>

<p><img src="media/15844652241485/D900BDBA-F9AA-418E-830D-13FF6929D0F2.png" alt="" class="mw_img_center" style="display: block; clear:both; margin: 0 auto;"/></p>

<ul>
<li>在 Apple Music 中，曾经有专门的入口进入「电视与影片/TV&amp;Movies」模块，目前该入口在几次改版后下线，该模块被弱化，但未停止更新。电视与影片目前可以通过搜索、链接或者编辑内容推荐访问。</li>
</ul>

<h3 id="toc_10">iTunes Store &amp; iTunes Match</h3>

<ul>
<li>在 Apple Music 音乐流媒体推出之前，全球许多个国家或地区（不包括中国大陆地区）一直可以通过 iTunes Store 付费购买歌曲或专辑。Apple Music 中的歌曲会随着版权的变化发生变化，一首歌现在可以听，并不代表你永远可以听，它属于音乐流媒体；iTunes Store 中的歌曲只要你购买了，那就属于你自己，它属于电子音乐购买。</li>
<li>根据版权的授权，部分歌曲可能存在在 Apple Music 中没有上架，但在 iTunes Store 中上架的情况，例如「Justin Biber」的专辑<a href="https://music.apple.com/us/album/purpose-deluxe/1440829460">《Purpose (Deluxe)》</a>中的第 11 首歌《Where Are Ü Now》未在 Apple Music 中上架（灰色不可播放状态），但可以在 iTunes Store 中通过购买整张专辑的方式获得。</li>
</ul>

<p><img src="media/15844652241485/0B4CDEAB-8BE2-4BB3-9A73-929368669B03.png" alt="" class="mw_img_center" style="display: block; clear:both; margin: 0 auto;"/></p>

<ul>
<li>同一个 Apple ID 下，在 iTunes Store 中购买的音乐会自动进入 Apple Music 的 iCloud 音乐资料库。</li>
<li>iTunes Match 是 Apple 于 2011 年推出的一项服务，如 <a href="https://support.apple.com/zh-cn/HT204146">Apple 官方描述</a>，「通过 iTunes Match，您可以在自己的所有设备上访问您的所有音乐，甚至还可以访问您从 CD 等其他来源导入的歌曲。」简而言之，iTunes Match 的功能主要是「匹配（不等于上传）用户导入的音乐」和「在设备间同步音乐资料库」，可以说是「iCloud 音乐资料库」的前身。该服务未在中国大陆地区上线。</li>
</ul>

<p><img src="media/15844652241485/066A80D1-CEF3-441B-9BEF-B954DBBE5C25.png" alt="" class="mw_img_center" style="display: block; clear:both; margin: 0 auto;"/></p>

<ul>
<li>Apple Music 推出后，涵盖了 iTunes Match 的所有功能。iTunes Match 不再推广，但并没有停止运营，现在你仍可以通过 iTunes Store 的边栏找到入口，按年订阅 iTunes Match。</li>
<li>由于早期中国大陆地区没有 iTunes Store 功能，也就没有推出过 iTunes Match，现在的 Apple Music 也就不包括 iTunes Match，以上是<a href="https://support.apple.com/zh-cn/HT204956">官方描述</a>。但在实际情况中，中国大陆地区的 Apple Music 在使用 iCloud 音乐资料库上传歌曲后，某些歌曲可以呈现「已匹配」状态。2019 年 1 月<a href="https://www.v2ex.com/t/526383">有网友在 V2EX 发帖</a>称，原来上传后状态为「已匹配」的无压缩、无 DRM 保护的歌曲变成了「已匹配」的有压缩、有 DRM 保护的歌曲，而非中区不存在这种情况。2019 年 2 月<a href="https://www.v2ex.com/t/532944">又有网友在 V2EX 发帖</a>称，自己上传的歌曲不仅存在上述问题，歌曲还出现了不明杂音，不知此情况是否为个别现象或是 bug。故此功能在中国大陆区的具体规则十分模糊。</li>
</ul>

<h3 id="toc_11">类似艺人</h3>

<p>「类似艺人」是指在 Apple Music 的歌手页面的最底部，会推荐其他相似的艺人/歌手。非中区都包含此功能，中区没有显示此模块，不显示原因未知，很迷惑。例如，下图中歌手「<a href="https://music.apple.com/sg/artist/%E5%91%A8%E6%9D%B0%E4%BC%A6/300117743">周杰伦</a>」的页面：</p>

<p><img src="media/15844652241485/EAC586D3-61A9-49FA-8E4C-68CB5BDB5ADE.png" alt="" class="mw_img_center" style="display: block; clear:both; margin: 0 auto;"/></p>

<h3 id="toc_12">音乐向导</h3>

<p>「音乐向导」可以理解为 Apple Music 中某些官方机构、组织创建的播放列表合集，这个功能随着 Apple Music 改版被弱化，从之前的专门入口演变到现在只能通过搜索或链接访问，但并没有停止更新。非中区的音乐向导基本一致，但中区只包含部分，其他即使通过链接也无法访问，如音乐向导「<a href="https://music.apple.com/sg/curator/disney-music/1111371904">Disney Music</a>」。例如，以「music」为搜索关键字搜索音乐向导：</p>

<p><img src="media/15844652241485/8CEA454A-09C1-42D2-B8AA-E788D05D415E.png" alt="" class="mw_img_center" style="display: block; clear:both; margin: 0 auto;"/></p>

<h2 id="toc_13">内容展示</h2>

<h3 id="toc_14">曲库语言逻辑</h3>

<ul>
<li>Apple Music 的曲库显示语言是指除歌曲本身之外的文字的显示语言，如专辑介绍、歌单推荐语、歌单封面、歌手名字等。一般情况下，专辑和歌曲的名字在各个地区都是一样的，但根据专辑在全球的发行情况的不同，也存在专辑和歌曲名字被翻译成当地语言的情况，比如部分中文歌曲在美区是以英文名呈现的。</li>
<li>各个地区的 Apple Music 支持的显示语言是不同的，一个地区并不会支持全球所有语言，会根据对应地区的用户的常用语言来决定，且不止一种，并一定包括英文，但只有一种会被作为「主要显示语言」。</li>
<li>以 iPhone 为例，如果 iOS 系统的语言设置为 Apple Music 在本地区支持的显示语言的某一种，那么 Apple Music 就会以系统设置的语言展示；如果 iOS 系统的语言设置为 Apple Music 在本地区不支持的显示语言，那么 Apple Music 就会以「主要显示语言」展示。</li>
<li>为了更好地理解上述逻辑，把五个地区的 Apple Music 在不同系统语言下展示情况列举如下：</li>
</ul>

<p><img src="media/15844652241485/A6CD500A-F098-48C7-9997-EB7BDE2BBFA2.png" alt="" class="mw_img_center" style="display: block; clear:both; margin: 0 auto;"/></p>

<ul>
<li>由上表可以看出，美区在表中所列五种语言的系统设置下均显示为英语；新加坡区可以在系统设置为简体中文时显示为简体中文；港区在除英文系统下均显示为繁体中文；日本区只有在系统设置为英语时显示英语，其他情况下均显示为日语，包括简体中文系统设置下。</li>
<li>值得特别提及的一点是，日语歌曲的歌曲信息在日区非日语系统环境下和其他区所有语言环境下一般都以「罗马音」形式展示，这是许多人吐槽的一点。</li>
</ul>

<p><img src="media/15844652241485/08FF3B74-47D1-410F-9DE4-3F7FC00EAD0B.png" alt="" class="mw_img_center" style="display: block; clear:both; margin: 0 auto;"/></p>

<h3 id="toc_15">内容推荐</h3>

<ul>
<li>除了自己搜索发现或者通过外部链接访问以及机器智能推荐，在音乐软件中发现音乐的另一种途径是人工内容推荐，这一部分也是 Apple Music 在推出时强调的亮点之一。人工内容推荐在 Apple Music 中占据了较大的篇幅，整个「浏览/Browse」模块几乎都是人工内容推荐，比如带有推荐语的最新专辑推荐、根据时间/节日/时事等编排的歌单列表推荐、本地特别发行专辑推荐、近期本地热门影视原声歌曲推荐、热门艺人 MV 推荐、即将发布专辑推荐等。</li>
<li>根据各地区用户对音乐的偏好不同，即使在曲库差不多（除中区）的情况下，Apple Music 推荐的内容也会不同。概括来看，中区内容推荐以华语音乐（偏国语）和欧美音乐为主，美区内容推荐以欧美音乐为主，新加坡区内容推荐以华语音乐（偏国语）和欧美音乐为主，港区内容推荐以华语音乐（偏粤语）和欧美音乐为主，日区内容推荐以日语音乐和欧美音乐为主。</li>
<li>下面这张图几乎在同一时刻截取了五大地区 Apple Music 「浏览/Browse」模块下的展示内容，供参考。</li>
</ul>

<p><img src="media/15844652241485/Apple%20Music-Browse.png" alt="" class="mw_img_center" style="display: block; clear:both; margin: 0 auto;"/></p>

<h2 id="toc_16">多平台使用</h2>

<p>Apple Music 是支持多平台的音乐流媒体服务，除了 iPhone、Android 手机，你还可以在 iPad、Mac、Windows、网页端、Apple TV、Apple Watch、HomePod、第三方智能音箱、CarPlay 、第三方网页端和 app 上使用。</p>

<ul>
<li><strong>iPhone、iPad、Apple Watch、HomePod、Mac</strong>：苹果常见的自家产品系列自然不用多说，系统原生支持，所有地区帐号均可在上述设备正常使用。2019 年从 macOS Catalina 开始，Apple Music 和 iTunes Music Store 从 iTunes app 中分拆成了独立的「音乐/Music」app；即使在 HomePod 上登录未发售地区的 Apple ID，也可以正常使用 Apple Music。</li>
</ul>

<p><img src="media/15844652241485/6F9E92EE-5F04-4C9D-9E2E-CC64B7BA849D.png" alt="" class="mw_img_center" style="display: block; clear:both; margin: 0 auto;"/></p>

<ul>
<li><strong>Android 手机、Windows</strong>：2015 年 11 月，Apple Music 正式上线五个月后，Apple Music Android app 正式发布，你可以通过 <a href="https://play.google.com/store/apps/details?id=com.apple.android.music">Google Play</a> 或者<a href="https://www.apple.com.cn/apple-music/android-download/">从 Apple 网站直接下载 Apple Music Android app</a>。通过 Apple Music Android app 你可以<a href="https://support.apple.com/zh-cn/HT210412">将其与 Chromecast、Android Auto 结合使用</a>。在 Windows 中，你需要通过安装 <a href="https://www.apple.com.cn/itunes/">iTunes app</a> 使用 Apple Music 相关服务。所有地区帐号均可在上述设备正常使用。</li>
</ul>

<p><img src="media/15844652241485/D8D2D54C-8F4A-41EE-BFCC-9E86F0D862EC.png" alt="" class="mw_img_center" style="display: block; clear:both; margin: 0 auto;"/></p>

<ul>
<li><strong>网页端</strong>：2019 年 9 月 Apple 上线了<a href="https://beta.music.apple.com/">网页端的 beta 版 Apple Music</a>，用户可以在浏览器中使用 Apple Music，其访问地址是：<a href="https://beta.music.apple.com/%E3%80%82%E7%94%B1%E4%BA%8E%E6%98%AF">https://beta.music.apple.com/。由于是</a> beta 版，部分功能暂时不可用，例如 Beats 1 直播电台、Apple 原创音乐视频、智能播放列表，并且你不能在网站中开启 Apple Music 的订阅。值得注意的是，在笔者的上海电信网络环境下，直接访问网页端 Apple Music 会自动跳转至 <a href="https://www.apple.com.cn/apple-music/">Apple Music 苹果官网</a>，<strong>导致网页端 Apple Music 服务无法正常使用</strong>，若使用非大陆地区网络访问则是正常的，其他地区和运营商网络访问情况未知，导致这个问题的原因未知。</li>
</ul>

<p><img src="media/15844652241485/applemusicweb.0.png.jpg" alt="" class="mw_img_center" style="display: block; clear:both; margin: 0 auto;"/></p>

<ul>
<li><strong>Apple TV</strong>:Apple Music 同样在 Apple TV 上提供服务。由于 Apple TV 未在中国大陆地区发售，使用国区 Apple ID 登录 Apple TV，没有「音乐/Music」服务，无法正常使用 Apple Music，其他四个地区的 Apple ID 可正常使用。</li>
</ul>

<p><img src="media/15844652241485/AE374604-7DA7-4549-9977-E8774472B345.png" alt="" class="mw_img_center" style="display: block; clear:both; margin: 0 auto;"/></p>

<p><img src="media/15844652241485/2927A469-1CA6-4472-BE9C-51EC73F75D39.png" alt="" class="mw_img_center" style="display: block; clear:both; margin: 0 auto;"/></p>

<ul>
<li><strong>CarPlay</strong>：你可以将 iPhone 与你的 Apple CarPlay 车载连接，从而在汽车的中控界面中使用 Apple Music。支持 CarPlay 的车型可<a href="https://www.apple.com.cn/ios/carplay/available-models/">前往 Apple 官网查看</a>，所有地区的 Apple ID 都可以在 CarPlay 中使用 Apple Music。</li>
</ul>

<p><img src="media/15844652241485/carplay__c83mgc2l01aq_large_2x.png" alt="" class="mw_img_center" style="display: block; clear:both; margin: 0 auto;"/></p>

<ul>
<li><strong>第三方智能音箱</strong>：你可以在 Amazon Echo、Amazon Fire TV、Sonos 上连接 Apple Music 帐户以使用 Apple Music 服务，具体可<a href="https://support.apple.com/zh-cn/HT209250">查看官方说明文档</a>。在 Amazon 设备上使用 Apple Music 可能需要 Amazon 设备销售地区的 Apple Music 帐户。</li>
</ul>

<p><img src="media/15844652241485/FFBB5EEC-5081-431F-BCFA-87F117A66E90.png" alt="" class="mw_img_center" style="display: block; clear:both; margin: 0 auto;"/></p>

<ul>
<li><strong>第三方网页端和 app</strong>：利用 <a href="https://developer.apple.com/musickit/">Apple 提供的 MusicKit</a>，开发者可以在自己的 iOS app、Android app、网页端接入 Apple Music 服务，可以是部分功能接入，可以是全功能接入，即作为一个第三方 Apple Music 客户端，iOS 端 app 通过请求「媒体与 Apple Music」权限访问 Apple Music 内容，Web 端 app 通过 Apple ID 授权第三方登录的方式登录使用。例如：
<ul>
<li>第三方网页端：<a href="https://musi.sh/browse">Musish</a>、<a href="https://naveedgol.github.io/music-web-player/browse">Apple Music Web Player From Naveed Golafshani</a>、<a href="https://www.fevertunes.com/home">feverTunes</a>、<a href="https://music.zacharyseguin.ca/">Zachary Seguin Music</a>、<a href="https://maevemusic.app/">Maeve</a>。</li>
<li>网页中嵌入自定义 Apple Music 内容：<a href="https://steppark.net/music.html">我的个人博客的「Music」页面</a> - 未登录时歌曲只可以试听，登录订阅帐号后可完整播放。</li>
<li>第三方 iOS app： <a href="https://apps.apple.com/us/app/marvis-pro/id1447768809">Marvis Pro</a>、<a href="https://apps.apple.com/us/app/soor/id1439731526">Soor ▹</a>、<a href="https://apps.apple.com/us/app/songowl/id1492630850">SongOwl</a>、<a href="https://apps.apple.com/us/app/soundshare/id437060737">SoundShare</a>。</li>
<li>接入 MusicKit 的工具型 iOS app：<a href="https://apps.apple.com/us/app/shazam/id284993459">Shazam</a>（歌曲识别）、<a href="https://apps.apple.com/us/app/musixmatch-lyrics-finder/id448278467">MusixMatch</a>（歌词）、<a href="https://apps.apple.com/us/app/songshift/id1097974566">SongShift</a>（歌曲迁移）、<a href="https://apps.apple.com/us/app/miximum/id1456153507">Miximum</a>（自定义歌单）、<a href="https://apps.apple.com/us/app/musicharbor-track-new-music/id1440405750">MusicHarbor</a>（歌手关注）。</li>
</ul></li>
</ul>

<p><img src="media/15844652241485/hero-lockup-large.png" alt="" class="mw_img_center" style="display: block; clear:both; margin: 0 auto;"/></p>

<h2 id="toc_17">多 Apple ID 使用</h2>

<p>该部分主要适应于 Apple 设备，非 Apple 设备一般不存在多 Apple ID 使用的情况。</p>

<ul>
<li>以 iPhone 为例，系统中的 Apple ID 帐号分为「<strong>iCloud 帐号</strong>」和「<strong>iTunes Store 与 App Store 帐号</strong>」：
<ul>
<li>iCloud 帐号负责管控与云同步相关的功能，例如同步照片、通讯录、日历、备忘录、Safari 收藏夹、钥匙串以及 iCloud 云盘功能；</li>
<li>iTunes Store 与 App Store 帐号可简称为 Apple 媒体帐号，负责管控系统中所有与内容媒体相关的功能，例如 App Store、Apple Music、iTunes Store、Apple TV、Podcast、Books、TestFlight、Apple Store。</li>
</ul></li>
<li>同一台设备上登录的 iCloud 帐号和 Apple 媒体帐号可以相同，也可以不同，默认相同。</li>
<li>其他 Apple 设备的逻辑大体相似。</li>
</ul>

<p><img src="media/15844652241485/3E76C3AD-EFB4-4317-8272-81F24430B198.png" alt="" class="mw_img_center" style="display: block; clear:both; margin: 0 auto;"/></p>

<ul>
<li>由于非中区 Apple ID 付款方式终归不如中区便利，在中国大陆使用非中区 Apple Music 的用户一般还同时拥有一个中区 Apple ID，常用于 App Store 的付费应用和服务的购买和订阅或者下载只在中区上架的 app（如 Bilibili）。但基于上述逻辑，你无法在同一台设备上让 Apple Music 登录 A 帐号，App Store 登录 B 帐号，iTunes Store 登录 C 帐号……于是你就不得不有切换 Apple 媒体帐号的需求。</li>
<li>在 iOS 设备、HomePod 上切换 Apple 媒体帐号时可借助系统自带 iCloud钥匙串、1Password 等工具自动填充密码，减少输入，简化流程；在 watchOS 设备上，Apple 媒体帐号与配对的 iPhone 保持同步；在 macOS 设备上切换 Apple 媒体帐号时可借助 1Password 等工具填充密码；由于 Apple TV 定位于家庭中多用户使用的设备，在 Apple TV 中可登录多个 Apple ID，从 tvOS 13 开始，需要切换 Apple 媒体帐号时可一键切换，无需输入密码。</li>
</ul>

<p><img src="media/15844652241485/58BEB754-F64A-4E51-80F1-16158A1F4190.png" alt="" class="mw_img_center" style="display: block; clear:both; margin: 0 auto;"/></p>

<ul>
<li>第一点值得特别注意的是，在 iOS 设备和 macOS 设备上切换 Apple 媒体帐号时，iCloud 音乐资料库里<strong>已下载的内容中</strong>，属于 Apple Music 的内容会被从<strong>设备本地</strong>移除，属于用户自己上传的内容不会被移除。重新登录此 Apple ID 后，需在开启 iCloud 音乐资料库后重新下载（系统内也可能保留有上次下载内容的缓存，若有可快速加载）。</li>
</ul>

<p><img src="media/15844652241485/EE99FB0E-1784-44AF-9C99-03ADC10B7A1D.png" alt="" class="mw_img_center" style="display: block; clear:both; margin: 0 auto;"/></p>

<ul>
<li>第二点值得特别注意的是， Apple 媒体服务设有 <strong>90 天帐号与设备绑定逻辑</strong>，具体如下：当在一台设备上<strong>使用不同的 Apple ID</strong> 启动 Apple 媒体下载功能（如开启 iCloud 音乐资料库，下载 iTunes Store 购买的音乐、电影、电视剧）时，系统会提示你需要将此设备与当前登录的 Apple 媒体帐号绑定，90 天内不能使用其他 Apple ID 的 Apple 媒体下载功能。绑定后若再使用其他 Apple ID 开启 Apple 媒体内容下载功能时，系统会提示此设备已与其他 Apple ID 绑定，并告知还剩余多少时间。若不小心错误地触发绑定，可联系 Apple 官方客服，有一定几率可以提前解绑。以上适应于 iOS、Android、Mac、Windows 设备。</li>
</ul>

<p><img src="media/15844652241485/659DE1C3-60EB-4388-8494-BF1B4139E8A0.png" alt="" class="mw_img_center" style="display: block; clear:both; margin: 0 auto;"/></p>

<ul>
<li>关于 app 的下载，对于从 A 帐号下载的 app，在登录 B 帐号的情况下，只要 B 帐号所在地区的 App Store 有上架此 app，无需切换回 A 帐号就可检测到该 app 的更新，并可以正常更新，第一次更新时可能要求输入 A 帐号的登录密码。</li>
<li>关于 app 的内购和订阅，对于 A 帐号购买的 app 的内购和订阅，一般情况下只能在登录 A 帐号的情况下才能恢复购买；在使用 A 帐号下载的 app 中，不能在登录 B 帐号时进行内购和订阅的付费。</li>
<li>对于只在中区或者只在某一个地区上架的应用需要更新时，可以通过这个<a href="http://switchr.imagility.io">小工具</a>快速切换当前设备 Apple 媒体服务到对应的地区，检查 app 更新并完成下载更新。注意该工具仅是通过一个链接跳转到了其他区的 Apple 媒体服务，并没有修改 Apple ID 的地区，你也不能购买/播放其他地区的应用/音乐。你也可以利用这个工具查看任一地区的 Apple Music、App Store、iTunes Store 内容。若不能正常跳转可尝试通过代理访问。</li>
</ul>

<p><img src="media/15844652241485/8C01205F-5DB4-4E8E-B4DB-9C75273A0770.png" alt="" class="mw_img_center" style="display: block; clear:both; margin: 0 auto;"/></p>

<ul>
<li>除了 App Store 和 Apple Music，Apple 媒体服务还包括 iTunes Store（影片、电视节目、音乐、铃声和提示音）、Apple Arcade、Apple TV+、Apple TV Channel、Apple Books（图书、有声书）、Apple 播客、Apple News（含 Apple News+）。根据政策和版权的限制，<a href="https://support.apple.com/zh-cn/HT204411">不同地区提供的 Apple 媒体服务不同</a>。在使用某一个地区的 Apple ID 时，你可能也会用到其他 Apple 媒体服务，故将五个地区的 Apple 媒体服务的提供情况列表对比如下：</li>
</ul>

<p><img src="media/15844652241485/AF3F6BE8-F7A1-4111-89C8-3AAE3EB4D09D.png" alt="" class="mw_img_center" style="display: block; clear:both; margin: 0 auto;"/></p>

<ul>
<li>其中 Apple TV app 即使不支持某个第三方 app 作为一个频道订阅，但还可以支持搜索、展示第三方 app 的内容，如 Disney+、Amazon Prime Video，该功能目前在美区帐号中提供，具体支持列表<a href="https://support.apple.com/zh-cn/HT208083">参见 Apple 官方网站</a>。</li>
<li>当然，即使某项功能提供服务，在不同的地区提供的内容也是不同的。例如所有未经允许的含有 VPN 功能的 app（如 <a href="https://apps.apple.com/us/app/speedtest-by-ookla/id300704847">Speedtest</a>、<a href="https://apps.apple.com/us/app/adguard-adblock-privacy/id1047223162">Adguard</a>）都无法上架中区、未在中国大陆地区提供服务的 app（如 <a href="https://apps.apple.com/us/app/netflix/id363590051">Netflix</a>、<a href="https://apps.apple.com/us/app/spotify-music-and-podcasts/id324684580">Spotify</a>） 没有上架中区、因各种原因被屏蔽的 app（如 <a href="https://apps.apple.com/us/app/skype-for-iphone/id304878510">Skype</a>、<a href="https://apps.apple.com/us/app/pinterest/id429047995">Pinterest</a>）无法上架或主动不上架中区、某些中区上架的 app 为中区特供版（如<a href="https://apps.apple.com/cn/app/%E5%85%89-%E9%81%87/id1344733855">中区 Sky 光·遇</a>、<a href="https://apps.apple.com/us/app/sky%E5%85%89-%E9%81%87/id1462117269">非中区 Sky 光·遇</a>，<a href="https://apps.apple.com/cn/app/flipboard%E7%BA%A2%E6%9D%BF%E6%8A%A5-%E7%B2%BE%E9%80%89%E5%85%A8%E7%90%83%E6%96%B0%E9%97%BB%E6%9D%82%E5%BF%97%E7%A4%BE%E5%8C%BA/id483323919">中区 Flipboard</a>、<a href="https://apps.apple.com/us/app/flipboard-latest-stories/id358801284">非中区 Flipboard</a>）、Apple 播客中的节目在中区经过筛选（如 <a href="https://podcasts.apple.com/us/podcast/drake-freestyle/id1502174990?l=zh">《Drake Freestyle》</a> 未上架中区）。</li>
<li><p>总的来看，美区的 Apple 媒体资源最丰富，功能最齐全，其次是日区、新加坡区、港区。</p></li>
<li><p>真心期望 Apple 能在未来的版本中将各个媒体服务的 Apple ID 独立，不过希望渺茫🙃。</p></li>
</ul>

<h2 id="toc_18">订阅付费</h2>

<h3 id="toc_19">价格对比</h3>

<ul>
<li>Apple Music 包括个人订阅、学生订阅（需定期验证学生身份）、家庭订阅（可与其他同一地区的五个人组成家庭组）三种，在不同地区的价格也不一样。五大地区的具体订阅价格如下：</li>
</ul>

<p><img src="media/15844652241485/6553E0F1-95B9-4B10-B281-050487F4706E.png" alt="" class="mw_img_center" style="display: block; clear:both; margin: 0 auto;"/></p>

<ul>
<li>从上表中可以看出，中区比其他地区便宜数倍，美区最高，其次是日区，港区和新加坡区价格相当。</li>
</ul>

<h3 id="toc_20">付款方式</h3>

<ul>
<li>付款方式可能是使用非中区 Apple ID 除注册过程之外的另一个重大障碍。根据 <a href="https://support.apple.com/zh-cn/HT202631">Apple 官方的描述</a>，五个地区的 Apple ID 支持的付款方式如下表：</li>
</ul>

<p><img src="media/15844652241485/EA575668-6404-4C1F-BB3C-CF2F9D1CB3BB.png" alt="" class="mw_img_center" style="display: block; clear:both; margin: 0 auto;"/></p>

<ul>
<li>因为 Apple ID 支持的付款方式中的信用卡和借记卡严格限制为本地区发行，所以除中区外一般情况下各个地区最便捷的付款方式还是通过礼品卡。对于中国大陆用户，礼品卡最方便购买的是美区，其次是港区、日区，再次是新加坡区，通过第三方购买礼品卡一般都会比正常汇率高一些，越方便购买的溢价越少。</li>
<li>目前只有美区礼品卡可<a href="https://www.apple.com/shop/gift-cards/itunes-electronic">通过 Apple 官方网站购买</a>，20 美元起售，通过 Email 发送，可使用中国大陆发行的 Visa/Master 银行卡支付。</li>
<li><p>对于除礼品卡外，中国大陆用户常用的一些付款方式，在此简要说明，不做详述：</p>
<ul>
<li>美区：美区 Paypal 绑定中国大陆发行的 Visa/Master 银行卡再绑定 Apple ID（绑定成功率低，易风控）；</li>
<li>港区：香港地区发行的 Visa/Master 虚拟储值卡，如拍住赏、八达通 O! ePay（开卡可能需要香港手机号，需验证护照/港澳通行证，充值不方便）、AliPay HK（开通帐户需要香港手机号，需验证护照/港澳通行证，充值不方便）；</li>
<li>日区：中国大陆地区发行的部分 JCB 信用卡。</li>
</ul></li>
<li><p>想要曲库丰富&amp;功能齐全，订阅价格就高；想要订阅价格低，曲库就不丰富，功能就不齐全。那曲库丰富&amp;功能齐全、价格低廉就不能两全其美吗？能，来看印度区：</p>
<ul>
<li>印度区同样是六千万的曲库，功能齐全；</li>
<li>个人订阅价格为 99 卢比每月，折合人民币约 9.37 元；学生订阅价格为 49 卢比每月，折合人民币约 4.64 元；家庭订阅价格为 149 卢比每月，折合人民币约 14.1 元，平均每人折合人民币约 2.35 元；</li>
<li>但是，印度 Apple ID 的付款方式仅支持印度发行的银行卡和通过印度银行卡充值 Apple ID 余额，没有礼品卡，想要付款难上加难；</li>
<li>另外，印度区的 Apple Music 内容推荐面向印度本土用户，咖喱味十足。</li>
</ul></li>
<li><p>所以即使价格低廉、曲库丰富、功能齐全也并不推荐印度区，除非你搞定付款方式以及不在乎咖喱味的内容推荐。</p></li>
</ul>

<h2 id="toc_21">顺畅使用</h2>

<p>Apple Music 作为一项全球音乐流媒体服务，在全球都有布置服务器，但在中国大陆地区使用 Apple Music，因为地域、运营商网络等因素，可能在访问某些服务/功能时加载速度过慢或无法加载。下表列出了 Apple Music 各个功能模块的<strong>主要访问域名</strong>，其他非主要访问域名（如图片加载、服务器判断等）未列出，若相应服务加载存在问题（特别是播放缓冲问题）可考虑通过代理访问（可能有遗漏）：</p>

<p><img src="media/15844652241485/15845107551150.jpg" alt="" class="mw_img_center" style="display: block; clear:both; margin: 0 auto;"/></p>

<h2 id="toc_22">总结</h2>

<p>综上，文章从在线曲库、包含功能（电台、朋友、Top 100 歌单、电视与影片、iTunes Store、类似艺人、音乐向导）、曲库语言、内容推荐、多平台使用、多 Apple ID 使用、订阅价格、付款方式多个方面对五个常见地区的 Apple Music 及其相关功能进行了对比阐述，来看下面这张总结性表格：</p>

<p><img src="media/15844652241485/93E6FBCD-8EC2-4AF1-9B21-9A6100E5C4F3.png" alt="" class="mw_img_center" style="display: block; clear:both; margin: 0 auto;"/></p>

<p>一句话总结：</p>

<ul>
<li>中区：曲库阉割，功能缺失，简体中文界面，Apple 媒体资源匮乏，价格低廉，适合对曲库没有强烈需求的你；</li>
<li>美区：曲库丰富，功能齐全，英文界面，Apple 媒体资源丰富，礼品卡容易购买，适合听欧美歌曲的你；</li>
<li>港区：曲库丰富，功能齐全，繁体中文界面，礼品卡购买难度中等，适合听华语歌曲（偏粤语）和欧美歌曲的你；</li>
<li>新加坡区：曲库丰富，功能齐全，简体中文界面，礼品卡购买难度较大，适合听华语歌曲（偏国语）和欧美歌曲的你；</li>
<li>日区：曲库丰富，功能齐全，英文/日语界面，礼品卡购买难度中等，适合听日语歌曲和欧美歌曲的你。</li>
</ul>

<p>看到这里的你，根据自己的需求心里有做出选择了吗？</p>

<blockquote>
<p>如果你觉得这篇文章对你有所帮助，欢迎请我喝杯咖啡，感谢你的支持😁</p>

<p><img src="media/14625521742746/15088240400740.jpg" alt="" class="mw_img_center" style="display: block; clear:both; margin: 0 auto;"/></p>
</blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[核心设计原理（下）]]></title>
    <link href="https://steppark.net/15703570206973.html"/>
    <updated>2019-10-06T18:17:00+08:00</updated>
    <id>https://steppark.net/15703570206973.html</id>
    <content type="html"><![CDATA[
<p><a href="15702878227518.html">核心设计原理的上半部分</a>通过一个去夏威夷旅游的经历中的所见所闻所想讲述了导向、反馈、可见性、一致性、心智模型几个设计原理，旅程还没有结束，这是核心设计原理的下半部分。</p>

<span id="more"></span><!-- more -->

<h2 id="toc_0">目录</h2>

<ul>
<li>
<a href="#toc_0">目录</a>
</li>
<li>
<a href="#toc_1">接近性 Proximity</a>
</li>
<li>
<a href="#toc_2">分组 Grouping</a>
</li>
<li>
<a href="#toc_3">映像 Mapping</a>
</li>
<li>
<a href="#toc_4">可供性 Affordance</a>
</li>
<li>
<a href="#toc_5">渐进展开 Progressive Disclosure</a>
</li>
<li>
<a href="#toc_6">八二原则 80/20 Rule</a>
</li>
<li>
<a href="#toc_7">对称性 Symmetry</a>
</li>
<li>
<a href="#toc_8">总结</a>
</li>
<li>
<a href="#toc_9">参考链接</a>
</li>
</ul>


<h2 id="toc_1">接近性 Proximity</h2>

<p>你按了一下开关关掉浴室的灯走出来，太阳落山了，屋子里有些暗，所以你打开了走廊的灯。接着你走进卧室，按下开关打开了另外几盏灯。这概括来说就是设计原理「接近性」。接近性是有关于控件和它控制的对象之间的距离。</p>

<p><img src="media/15703570206973/690DFA49-5F84-47A2-B491-2630EDDFC7D1.png" alt=""/></p>

<p>一个控件离那个对象越接近，两者之间的关联就可能越大，浴室的灯的开关在浴室里，走廊的灯的开关在走廊里，卧室的灯的开关也当然在卧室里。好的接近性也是符合人体工程学的。通常情况下，你离物体或者感兴趣的区域越近，你越可能与它进行交互或者控制它，人们认为走进浴室时可以打开浴室灯的开关。所以把灯的开关放在门的旁边，需要的时候伸一下胳膊就能够到。</p>

<p><img src="media/15703570206973/3299350E-15E6-43F5-952A-8FD7EDC1CB23.png" alt=""/></p>

<p>接近性对表现控件之间的关系也有用。例如，如果你在墙上看到一些开关，你知道其中一个可以控制灯的开关，然后你就可以假设其他开关也是灯的开关。</p>

<p><img src="media/15703570206973/A9A6FD92-8348-45F4-8285-562592104492.png" alt=""/></p>

<p>如果其中一个是控制灯的亮度，那最好把它与其他分隔开来。这种设置让人们更容易记住哪个开关是控制灯的亮度，哪个开关是控制灯的开关。</p>

<p><img src="media/15703570206973/31EE0827-65B8-4063-99CD-A82AAA21F3A4.png" alt=""/></p>

<h2 id="toc_2">分组 Grouping</h2>

<p>上面说的这种设置和安排就是「分组」。分组是一个非常基础和重要的设计原理。分组可以帮助人们理解元素之间的关系，它是确定设计结构的关键核心。<br/>
虽然我们理解这个，但许多 app 没有有效地利用分组，它很容易被忽视。现在来看一些接近性和分组如何构建设计的结构、建立控件和它影响的对象或视图的例子。<br/>
在「Keynote」app 中，接近性帮助我们把显示菜单与幻灯片导航器和画布区域联系在了一起。几个对象创建工具放置在了画布的上方，创建后这些对象将会在画布上出现。格式和文稿选项的切换位于这些面板显示的正上方。</p>

<p><img src="media/15703570206973/E4612CB0-D77A-46B8-BE36-526AC25B78F0.png" alt=""/></p>

<p>在「Sketch」 app 中，你可以看到分组如何被用于将彼此相关的控件聚在一起，像是成组/取消成组控件、转换和编辑工具控件、路径操作控件、图层排序控件。</p>

<p><img src="media/15703570206973/E0E68BB6-43E1-494C-9A3C-CB6458F8B4B8.png" alt=""/></p>

<p>你的界面越大，对接近性和分组的需求绝对会越高，但这个设计原理对 iPhone、iPad 甚至 Apple Watch 这样的小屏幕也很重要。</p>

<h2 id="toc_3">映像 Mapping</h2>

<p>现在回过头来再来看下调整灯的亮度的开关。看看这个开关，你现在可能并不能知道开关是开着还是关着，但当把开关改成滑动条的样式的时候，你就知道它是关着的了。这就是映像，映像让你知道它是开着还是关着，映像是指控件的设计能象征它所控制的对象，向上就是调亮灯光，向下就是调暗灯光，用一个可以上下移动的控件在这里是可以讲清楚的，对于如何调整亮度没有模糊。</p>

<p><img src="media/15703570206973/44D089CF-E37A-4AE8-B1F0-8FAEDE7ED37F.png" alt=""/></p>

<p>映像也与控件之间是如何排列的有关。它们的顺序应该象征着被控制对象的配置。对于卧室的多盏灯与多个开关来说，良好的映像就是让灯的开关镜像安排成灯的布局。通过专注于映像，会更容易做出在哪里放置控件、如何排序它们甚至该使用哪个控件的选择。</p>

<p><img src="media/15703570206973/E2A19BC5-00F6-4E30-A7F6-BE9111708743.png" alt=""/></p>

<p><img src="media/15703570206973/2C336FDA-C8EC-4E66-BEA9-26BC0605CBBB.png" alt=""/></p>

<p>当映像不够清楚的时候，你会发现文字标签的出现，这有作用，但不是一个好的解决方案。阅读需要花费时间，对人们记住控件的位置或者如何与它们进行交互没有帮助。</p>

<p><img src="media/15703570206973/55F8DA0A-12A8-4276-B566-A0F3D7FAD96E.png" alt=""/></p>

<p>在界面的场景中，使用一个水平的滑块调整一个水平属性更加直观，类似的，使用一个拨号盘调整旋转角度比滑块或者步进器的效果更好。</p>

<p><img src="media/15703570206973/9B98638D-592B-4EB5-BC0F-2C22161837A9.png" alt=""/></p>

<p><img src="media/15703570206973/44534FE2-40D4-454B-8B97-913B05F0AD8B.png" alt=""/></p>

<p>当然，最好的映像是最直接的映像，可以让人们直接能操纵对象，这更直观、更精确，例如在 macOS 上的鼠标指针或者 iOS 上的手势。</p>

<p><img src="media/15703570206973/1EA49C6A-9182-4537-8078-3094A22AEFA3.png" alt=""/></p>

<h2 id="toc_4">可供性 Affordance</h2>

<p><img src="media/15703570206973/AE21ABFD-441C-4706-B70F-1D01AA6851D5.png" alt=""/></p>

<p>接下来要去餐厅吃晚饭。当你坐下来时，你会在你面前看到一个空盘子。用这个空盘子可以做什么呢？你可以用来装食物，你也可以用它来做其他事。盘子很光滑，很容易转起来，盘子有一个边缘，很容易像飞碟一样抓住并扔出去，开个玩笑了。我们对如何与这个盘子进行交互的见解就是「可供性」。换句话说，一个盘子的物理特性提供了关于这个盘子可以提供给我们什么交互的视觉和触觉提示。</p>

<p><img src="media/15703570206973/40818154-E12E-40EE-8322-193DE7636FE2.png" alt=""/></p>

<p>我们看着盘子思考，我们把食物放进去，或者我考虑用这个盘子把我的食物运到另一个地方，我们不会考虑用这个盘子去装水。可供性不是对象本身的属性，它更多的是人和对象之间的关系。可供性基于一个人的身体能力而不同，因此可供性对每一个人都不一样。例如，一个飞碟提供了我可以抓住和扔出去的能力，但对于我的狗，一个飞碟只提供了狗抓住的能力，没有扔出去的能力。一个盘子提供了我用它吃饭的能力，我的狗也能感知得到这个可供性。</p>

<p><img src="media/15703570206973/E941AE35-18DA-4718-8CCD-E59DD9B78304.png" alt=""/></p>

<p>因为可供性是主观的，一个人能感知到的可供性其他人可能感知不到。当与一个可能进行的动作相关时，人会更可能地感知到可供性。例如，虽然我可以把这个盘子当做茶托，但这是一个几乎不可能的动作，所以我不能容易地感知到一个盘子可以做茶托的可供性。我很可能把事物放在里面，所以我容易感知到一个盘子可以装食物的可供性。</p>

<p><img src="media/15703570206973/3845274A-9885-495D-841E-376DCA2DADFC.png" alt=""/></p>

<p>这种可供性的感知与每个环境、每个你交互的对象都有关系。当你走进一家餐馆时，你经过了一道提供给你可以穿过的可供性的门，门比人高比人宽，你可以想到你的身体可以轻松穿过去，地面平坦连续，你可以想到你自己可以没有障碍地走过去，不会被绊倒。</p>

<p><img src="media/15703570206973/54F0DBBB-CA34-4C31-A4DA-9DE0CA5BEB6F.png" alt=""/></p>

<p>你坐的椅子提供了可以坐的可供性，你面前的桌子提供了可以把东西放在上面的可供性，你脚下的地面提供了可以让你歇歇脚的可供性。</p>

<p><img src="media/15703570206973/581F84BC-95C8-4C0B-BE22-75032BAB21B2.png" alt=""/></p>

<p>人制造的产品都会通过提示提供可供性，它让人们知道哪些操作是可以进行的，这些提示的明显程度和可见性帮助人们知道交互的正确或倾向方式。</p>

<p><img src="media/15703570206973/49836ACC-5276-4C9A-8A27-2070032E09FE.png" alt=""/></p>

<p>app 同样也是这样。滑块可以让人在轨道上拖动小圆点，拨盘让人旋转，按钮让人可以点击。在每一个这样的例子中，可供性都在用最大的效率传达。事实上，随着时间推移，我们会更加习惯于抽象事物。按钮就是物理真实世界按钮的一个高度抽象，两者之间的关联就是圆角弧度。</p>

<p><img src="media/15703570206973/EF39D203-0B52-42DB-8007-7A18E79591DF.png" alt=""/></p>

<p>在滑块小圆点周围微弱的阴影把它与轨道分开，这表明它可以被独立移动。甚至是这个视觉提示都不是完全必要的。多余大多数人来说，看到一条直线上有一个填充的圆形就足以感知到它的滑块可供性。</p>

<p><img src="media/15703570206973/7D8CE625-069A-4F3C-AD19-AA873389B711.png" alt=""/></p>

<p><img src="media/15703570206973/72A57B5E-C5FC-4D9F-9079-B609D22184BC.png" alt=""/></p>

<p>有时可供性通过动画来传达。在「天气」app 中轻点，会看到画面滑上去一点，这表明内容区域可以被滚动。不管你用了什么技术，你的 app 的界面必须清晰的表现它提供了什么行为能力。如果没有的话，人们就不知道如何合适地与其进行交互，他们会用你 app 不提供的方式与其进行交互，他们会对不可交互的控件感到困惑。</p>

<p><img src="media/15703570206973/03C5F949-A39A-4944-BECD-1A800E98DAA4.png" alt=""/></p>

<h2 id="toc_5">渐进展开 Progressive Disclosure</h2>

<p>现在我们知道了食物应该去哪儿，现在该点菜了。我想要一个芝士汉堡，我跟服务员说了我要的菜，服务员问我几分熟，我说七分熟；他问我要哪种芝士，Cheddar/Swiss/Jack/Gruyere/Cottage，我说要 Cheddar；他问我是否要加点培根、鸡蛋、牛油果，我说不需要；他问我是否需要薯条、输啦或者洋葱圈，我说要洋葱圈。上面说的这个过程就是「渐进展开」设计原理。</p>

<p><img src="media/15703570206973/A81240A5-5276-40BA-8073-4ECCCF74C11B.png" alt=""/></p>

<p>渐进展开是用来管理复杂度的技术，这个术语只用于交互设计的场景中。渐进展开可以让人们在由简单到复杂的过程放松。</p>

<p><img src="media/15703570206973/447E9A38-CACF-4633-B1A1-0A5F32788411.png" alt=""/></p>

<p>渐进展开也与隐藏复杂度有关，人们只需要简单可用的界面就能完成基本的任务。</p>

<p><img src="media/15703570206973/BFBDD5C7-0CC9-41E3-927D-EC1018DD2E01.png" alt=""/></p>

<p>订芝士汉堡时如果你需要考虑所有的选项，那将是复杂且令人怯步的。当有人带着你通过这个过程作出决定，你自己定制芝士汉堡就会更容易。某些在之前你清楚做出的选择可能会需要你之后做出其他选择。例如，如果我需要薯条，服务员会问我需要哪种薯条，因为我说不需要薯条所以我就不关心有哪几种薯条，告诉我有什么薯条将会浪费我的时间和精力。</p>

<h2 id="toc_6">八二原则 80/20 Rule</h2>

<p>渐进展开是管理复杂度和简化做决定的过程的有必要、有帮助的技术。但是这个技术会淹没信息和功能，讲到如何合适地使用渐进展开总是会提到八二原则。八二原则就是说系统 80% 的影响都是由 20% 的变量造成。对于一个 app 来说，这意味着 80% 的效益来自于它显示的 20% 的操作，或者说 80% 的使用 app 的人只会使用 20% 的功能。当然，确认的数字是不同的，但基本原理是有效的。</p>

<p><img src="media/15703570206973/770E763E-6419-4309-838E-0EA345A3EA9A.png" alt=""/></p>

<p>并不是所有的信息和功能都是平等的，有一些更重要。所以为了减少杂乱，简化做决定的过程，使用渐进展开隐藏不重要的事情是一个好方法。换句话说，如果你的 app 很复杂，让最常用的 20% 的功能更容易被发现，其余 80% 隐藏起来是可行的。一个典型的例子就是打印对话框，大多数时候，人们只关心基本参数，使用哪个打印机，打印几份，打印哪几页，屏幕上显示的只有不到 20% 的功能，但却超过了 80% 用户想要的功能。如果需要更多功能，通过点击一下既可以展开。渐进式展开不仅减少了视觉杂乱、让打印更简单，而且也不会让人感到困惑。</p>

<p><img src="media/15703570206973/2A046303-4F79-4452-9EEC-2393F21A5A32.png" alt=""/></p>

<p><img src="media/15703570206973/9AD9D213-18DB-4FF5-A117-B0B46E743B3F.png" alt=""/></p>

<p>通过让事情保持简单，人们会更少地感到被威胁、被淹没或者让自己陷入麻烦，而更有经验的用户可以快速找到他们想要的操作和选项。</p>

<h2 id="toc_7">对称性 Symmetry</h2>

<p><img src="media/15703570206973/C4F7FBF6-FE38-42A6-BF52-E1A763432055.png" alt=""/></p>

<p>经过了一晚上的好好休息后，今天我们要去海边潜水了。到达海滩，你戴上护目镜，穿上潜水服，调整好通气管，进入大海，你能看到很多热带鱼。海底的景色很美，为什么呢？这就要说道最后一个设计原理，对称性。对称性我们都很熟悉，当我们想到对称性时，我们通常会想到镜面对称或者两面对称。实际上还有更多对称方式，还有放射旋转对称、平移对称。这三种对称在自然中是普遍存在的。</p>

<p><img src="media/15703570206973/9D01FAA9-BF3E-4016-82CB-F8CC4A1DE804.png" alt=""/></p>

<p>对称形式是一种有效的形式，我们会把它与健康、稳定、平衡、有序联系在一起，我们感觉它赏心悦目，也许还有进化的理由。即使没有物理上相互连接的对称元素感觉上也是有关联的。当我们看到一个中括号时，我们的大脑就不会无意识地把它们看做一个整体。</p>

<p><img src="media/15703570206973/371EACED-C032-49D6-A901-83D39876C0D6.png" alt=""/></p>

<p>当你在海中游时，你会看到各种对称。实际上不管是哪种植物或动物，不管是海里游的、地上跑的、天上飞的，都可能会包含一两种对称。大多数的人造物体也是这样。</p>

<p><img src="media/15703570206973/07FE523E-E276-400E-B692-B5CBC2D5166C.png" alt=""/></p>

<p>一个开关是水平竖直中心对称的，水龙头是对称的，车也是对称的。</p>

<p><img src="media/15703570206973/65F73869-3FB7-45ED-8749-6557238511AA.png" alt=""/></p>

<p>有吸引力的界面倾向于混合使用镜面对称和平移对称。在「天气」app 中，镜面对称提供了一种平衡感，核心元素沿着一条中线对齐，而其他元素也几乎呈平衡分布。</p>

<p><img src="media/15703570206973/9AE76AE2-E2CB-4BB6-9CB1-B16376674E6D.png" alt=""/></p>

<p><img src="media/15703570206973/908C4FE0-6160-4E81-A6F3-FAA173D219D9.png" alt=""/></p>

<p>同样的模式在「相机」、「时钟」、「电话」等等其他 app 中也有出现。</p>

<p><img src="media/15703570206973/CF2B51E4-35F6-4EDE-8D6A-A4E5CB4167CF.png" alt=""/></p>

<p><img src="media/15703570206973/C67FBB95-088A-4C23-8ABD-946FEC222274.png" alt=""/></p>

<p><img src="media/15703570206973/0E481A83-7A58-4074-AB97-9F7C8A7E8606.png" alt=""/></p>

<p>平移对称给界面一种结构感，重复使用相似的元素。</p>

<p><img src="media/15703570206973/390B3097-48C3-4A9A-B3F3-357B30BB4695.png" alt=""/></p>

<p>你可以在「时钟」app 中的城市和时间排列中看到平移对称，在「天气」app 中的城市列表中看到平移对称。当为你的 app 界面进行布局时，寻找机会使用对称以提供平衡感、有序感。</p>

<p><img src="media/15703570206973/C828F0D9-A8BD-4D34-8D47-D68A19E4B37D.png" alt=""/></p>

<p><img src="media/15703570206973/28780E1A-AB84-420F-A989-EDAAF0D62B41.png" alt=""/></p>

<h2 id="toc_8">总结</h2>

<p><img src="media/15703570206973/23DDAAAC-105E-4ED4-9D73-934FC58572FC.png" alt=""/></p>

<p>以上所展现的设计原理展示了人类认知的基本原理，它们简单而强有力地提醒了你设计的本质和目的，它们提供一种理解的框架，一种表述设计优劣的语言。通过这些设计原理，你会更清晰地知道你的 app 设计该如何帮助满足人们的需求，对安全的需求，对理解的需求，对实现目标的需求，对体验美丽和快乐的需求。</p>

<p><img src="media/15703570206973/18302496-86D2-4AAE-A171-60B581B50EAD.png" alt=""/></p>

<p>这些设计原理看上去很简单，但应用到实际工作中并不简单。</p>

<ul>
<li>每一个设计原理都指向不同的方向，告诉你的 app 的设计该怎么做。设计通常就是解决这些分歧，即使是一名有经验的设计设计师也要面临这些困难。</li>
<li>也有可能有太多好东西可以用，但太多的反馈会令人烦恼，太多的可见性会让人分心，太多的渐进展开会让工作流没有效率。所以你必须要自己衡量，谨慎判断，周全考虑。</li>
<li>哪些设计原理更适合，取决于你设计的 app 类型、平台、屏幕尺寸、用例、目标用户经验水平等等。种种因素都会影响某个时间点、某个设计原理的适应性。</li>
</ul>

<p><img src="media/15703570206973/212A8CF4-699A-4FE0-A8D9-55E629CC817A.png" alt=""/></p>

<p>设计是一个有挑战的工作，没有人说设计是简单的，但当你理解了基础，设计会更简单，让这些设计原理做你的北斗星，指引你做出更好的 app 服务于你的目标用户，这才是重中之重。相对的，你的目标用户也会意识到你的努力工作，他们会感激你的周全和体贴，他们会感知到 app 中的人文关怀。</p>

<h2 id="toc_9">参考链接</h2>

<ul>
<li><a href="https://developer.apple.com/videos/play/wwdc2017/802">Essential Design Principles - WWDC 2017 - Videos - Apple Developer</a></li>
</ul>

<blockquote>
<p>如果你觉得这篇文章对你有所帮助，欢迎请我喝杯咖啡，感谢你的支持😁</p>

<p><img src="media/14625521742746/15088240400740.jpg" alt=""/></p>
</blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[核心设计原理（上）]]></title>
    <link href="https://steppark.net/15702878227518.html"/>
    <updated>2019-10-05T23:03:42+08:00</updated>
    <id>https://steppark.net/15702878227518.html</id>
    <content type="html"><![CDATA[
<p>当我们谈论设计时，我们总是聚焦于设计的技术和过程。虽然这些考虑很重要，但是它们不会成就好的设计，至少它们本身不能。好的设计是在一个更基础、更人性的层级上由有关于设计是什么的更深的理解所指导。这就是设计原理所告诉我们的。它们会传达出我们如何感知到周围世界的核心事实，还有我们如何处理信息、我们如何做决定、我们如何交流。这些事实是永恒的、通用的。它们可以应用于各种图形设计、建筑设计、室内设计、零售店设计、风景设计、汽车设计等等。设计的原理不是告诉我们在设计中如何做出特定的事情，而是告诉我们为什么要做这些事情。这是好的设计建设的基础。</p>

<span id="more"></span><!-- more -->

<p>在 Apple 总是使用术语「human interface 人机交互」来描述其他人称之为「user interface 用户交互」的东西。人机交互这个说法并不普遍，没有被广泛使用，但它在 Apple 中有很长的历史。我们的设计指导文档被称为「HIG」，也就是「Human Interface Guidelines 人机交互规范」。这个文档可以追溯到 1978 年。</p>

<p><img src="media/15702878227518/1C26D84A-C504-4A0E-9D81-8569699C48E3.png" alt=""/></p>

<p>「用户」这个词语有一种冷冰冰的效果，它勉强定义了人和界面之间的关系。而「人类」这个词语更能凸显我们在为谁所设计。如果说我只是人类，那表明我会有不完美的地方，会有缺点，可能达不到你的期望。另一方面，「人类」这个词语也用来表达我们最好最高尚的品质。当你承认一个人的人性（humanity）时，你就在承认他们的善良、同情、慷慨、友好。</p>

<p>设计一个界面从根本上讲就是服务其他人。设计的目标不是做一个漂亮的 app 、一个有条理的 app、一个简单或者专注的 app。这些事情当然也十分重要，但它们不是真正的目标。真正的目标是为人服务或者说积极地影响使用你的 app 的人的生活。<br/>
真正重要的唯一一件事就是你的 app 怎样很好的满足你的目标用户的情感和实际需求。我们有保证安全和可预测未来的需求；我们有了解知识、理解含义的需求；我们有完成任务、实现我们的个人和专业目标的需求；我们也有体验美丽和快乐的需求。</p>

<p><img src="media/15702878227518/8CDA02C0-1832-4360-8D92-11DE225B1BE5.png" alt=""/></p>

<p>设计绝佳的 app 应该提供这些东西，这样的 app 让用户更容易预测未来动作的结果，用户会感到稳定、坚固、值得信任；通过提供清晰有帮助的信息帮助用户做出见多识广的选择；它们流线化和简化了工作流，因此人们可以有效率的、有作用的完成他们的任务；它们也应该有审美上的快乐、享受、优美的体验。使用具备这些品质的 app 会让人感到愉悦、满意，你可以告诉人们是谁创造了完全考虑他们需求的 app，你会感知到为了让事情快速成功完成所付出的所有的时间和所有的努力。每一个事情都是有目的的，每一个事情都是可理解的，这会让人感觉到很人性。</p>

<p><img src="media/15702878227518/15F6F775-139A-4C32-AADF-B903183D9A9D.png" alt=""/></p>

<p>这篇文章分享的一些设计原理可能是显而易见或者是很基础的。但大多数意义深远的东西都是最简单的。因为这些设计原理是通用的，所以我们可以看看它们是如何在现实世界构建我们的体验的，接下来会通过一个「去夏威夷旅行」的实际例子来讲讲这些设计原理。</p>

<h2 id="toc_0">目录</h2>

<ul>
<li>
<a href="#toc_0">目录</a>
</li>
<li>
<a href="#toc_1">导向 Wayfinding</a>
</li>
<li>
<a href="#toc_2">反馈 Feedback</a>
</li>
<li>
<a href="#toc_3">可视性 Visibility</a>
</li>
<li>
<a href="#toc_4">一致性 Consistency</a>
</li>
<li>
<a href="#toc_5">心智模型 Mental Model</a>
</li>
<li>
<a href="#toc_6">继续阅读</a>
</li>
<li>
<a href="#toc_7">参考链接</a>
</li>
</ul>


<h2 id="toc_1">导向 Wayfinding</h2>

<p><img src="media/15702878227518/C96704E4-3ECE-4104-B579-BF8838B258EB.png" alt=""/></p>

<p>旅行的第一站是「机场」。在我们去机场的路上，会看到各种标识，告诉我们如何去机场的路、每一个航站楼的具体信息、去登机口的方向。、</p>

<p><img src="media/15702878227518/9E0C1974-CA95-4FE3-8AEA-7F0D3FF14746.png" alt=""/></p>

<p><img src="media/15702878227518/1345513D-AE3F-4F20-862A-71B40E4A98DF.png" alt=""/></p>

<p><img src="media/15702878227518/92986F62-CB84-4967-BF35-7BC291E94269.png" alt=""/></p>

<p>当到达登机口时，我们会通过标识知道我们已经到达正确的位置。如果我们到达了错误的位置或者登机口变更，我们可以获得去往附近登机口的方向。为防止有紧急情况或者我们需要离开，标识会清晰地指出出口的位置。</p>

<p><img src="media/15702878227518/BA45D23C-7E84-4936-A2FA-68FB83F505BF.png" alt=""/></p>

<p><img src="media/15702878227518/F6F3F3BE-D03C-4530-8DE5-9BDF70FD4BB5.png" alt=""/></p>

<p>这些引导我们的标识系统我们称之为「导向系统」。导向系统帮助人们在复杂的环境中快速成功地导航。这对让人们感到有方向感和安全十分重要。人们在机场很疲惫，他们有时差，他们在赶路，他们很紧张，所以机场需要仔细深入的考虑导向系统。好的导向系统提供了人们通常会去到的地方的一个全面易懂的列表，它们提供了在这些地方的需要的细节，它们是完全与情景相关的。当我们进入的系统越来越深，它们就会变得更加特定。它们通过清晰的告知人们的当前位置和相关其他位置帮助人们弄清方向，而且它们提供了一条清晰的退出的道路。知道你可以回到一个你熟悉的地方或者开始的地方是令人欣慰的。<br/>
导向通过回答一些基本的问题帮助我们感到安全：我在哪？我可以去哪？当我到那时可以找到什么？周围有什么？我如何出去？没有这些问题的答案，我们就会迷路。</p>

<p><img src="media/15702878227518/30AB2D4B-978A-4CA5-B871-7DDB551E8247.png" alt=""/></p>

<p>你的 app 的界面也是一个巨大的古老的导向系统。导航栏、内容区域、标签栏，它们都是你 app 里提供导向的工具。导航栏标题和选中的标签栏条目让人们知道他们在哪儿，内容区域的标签栏让人们知道他们可以去哪儿、周围有什么，简单着色和可识别的标签栏图标、易懂的文字标签告诉人们当他们到那里时可以发现什么，后退按钮提供了一条退出路径，可以帮助人们识别他们进入的 app 区域。你的 app 的每一个屏幕都应该这些问题，否则用户就会迷路。</p>

<p><img src="media/15702878227518/99BD8D8F-034C-446C-ADAF-BA8B1D8B7B95.png" alt=""/></p>

<p><img src="media/15702878227518/FB058C11-9952-49EF-9CF0-1BFDEB9E7151.png" alt=""/></p>

<p><img src="media/15702878227518/57E34351-8003-467F-88D2-C0C30F74B73D.png" alt=""/></p>

<p>所以，彻底检查你的 app，每次到达一个屏幕，问问自己是否很好地回答了这些问题，每一个屏幕是否帮助人们知道他们在哪儿，每一个屏幕是否帮助提供选项给人们以告诉他们还可以去哪儿？如果有些屏幕不能清楚地回答这些问题，那就有一些工作需要做。</p>

<h2 id="toc_2">反馈 Feedback</h2>

<p><img src="media/15702878227518/E12FBFA5-FCC1-4787-94EB-99E12605E817.png" alt=""/></p>

<p>到达目的地，我们要去租一辆车前往酒店。让人们以高速度驾驶两吨重的物体行驶在路上这件事有些滑稽，特别是当人们可能很疲惫或者要去不熟悉的地方时。现在，因为驾驶车辆的潜在危险，汽车制造商必须认真思考车辆的内部设计。安全是考虑的第一位。所以，对我们来说这是一个学习反馈设计原理的好方式。<br/>
反馈帮助我们有信心地、安全地操纵车辆，反馈帮助我们预料到可能让某些功能不能运转或者让车辆不能动的问题。对于汽车来说，它提供了许多种类型的反馈。</p>

<ul>
<li>状态反馈：让我们知道车辆现在是怎样的；</li>
<li>完成反馈：让我们知道我们执行的动作是否成功完成或者失败了；</li>
<li>警告反馈：告诉我们潜在的问题；</li>
<li>错误反馈：告诉我们尝试的操作造成了错误。</li>
</ul>

<p><img src="media/15702878227518/625E63E0-E277-4EC7-9AA0-1B637DC199F2.png" alt=""/></p>

<p>为了我们的安全、其他乘客和行人的安全，汽车提供的反馈必须是清晰、及时、易懂的。具体来看下，车辆是如何与我们沟通的。<br/>
第一个来看状态反馈。当我们上了车准备走时，看看档位，它告诉我们处于停车状态。知道现在车辆处于哪个档位状态十分重要，重要到在档位和仪表盘上两个地方都有展示。仪表盘上的其他状态让我知道燃料状态，我可以在补充燃料前预估到可以走多远；让我知道当前的速度，帮助我避免拿到超速罚单。这对驾驶者来说是两个很重要的信息。</p>

<p><img src="media/15702878227518/8930E498-9F5A-4EB5-A6EC-9ABECA7A95E3.png" alt=""/></p>

<p><img src="media/15702878227518/B89A9E33-579E-49F4-9F01-43A54288C9A3.png" alt=""/></p>

<p>app 中的状态信息应该一样清楚。例如在「邮件」app 中，未读状态指示标记帮助人们知道该优先读哪些邮件；在「日历」app 中，状态指示标记帮助人们看到什么时间有人不能参加会议，以进一步帮助人们决定是否要调整会议时间；在「相机」app 中，红点、一点点增加的时间、录制按钮的状态三个元素可以让人们知道正在录制视频，它们都让人们知道珍贵但转瞬即逝的时刻正在被记录。清晰直接地展示状态对节约人们时间和帮助他们避免犯错非常重要。</p>

<p><img src="media/15702878227518/BCE1ECBD-F5F6-4405-9FD7-BA29E0082A32.png" alt=""/></p>

<p><img src="media/15702878227518/B91B1BE8-DBDE-4943-8AB9-C0C720E823F9.png" alt=""/></p>

<p><img src="media/15702878227518/C211A607-CF65-4319-BD47-F3CD5D4335EA.png" alt=""/></p>

<p>第二个来看完成反馈。我们准备出发，所以我发动了汽车引擎。我们可以听到引擎发动的声音，可以感觉到发动机的震动，可以看到仪表盘上的数字活跃了起来，毫无疑问这表示我们可以出发了。当我从停车档位变换到行驶档位，我可以获得触觉反馈让我知道我已经变换了档位。当我驶离停车点时，我可以听到车门锁定的声音。这一切都是自动发生的，我们获得这些反馈非常重要，这些反馈是可靠的，是用汽车的方式告诉我们一切正常，一切如你所期待的那样发生，这让驾驶者更能专注于其他认知任务，如确定驶离停车点是否安全。</p>

<p><img src="media/15702878227518/8122FD1A-5ACB-4944-9352-A8F59CFBDEB8.png" alt=""/></p>

<p><img src="media/15702878227518/722398C0-5FB8-46BB-A282-0B21DE219A61%202.png" alt=""/></p>

<p><img src="media/15702878227518/DEC5872E-71BE-4AAB-B9F6-C2E778A4C9F4.png" alt=""/></p>

<p>在 app 中的完成反馈有着同样的目的，例如锁定 iPhone 的声音，一个邮件被标记为未读时的动画或者邮件被删除时的动画，这些提示是谨慎的、没有攻击性的，但它们很难被忽视，它们告知我们设备如期望的所运行。<br/>
当然，确认反馈可以更加明显，Apple Pay 交易成功的动画和声音-触感就是一个例子，这很难被忽视。每一个在你 app 中的操作都应该提供某种形式的确认反馈，因为这让人们知道动作执行成功很有必要。</p>

<p><img src="media/15702878227518/C03D3B57-8121-436D-9D82-7614C53D55A0.png" alt=""/></p>

<p>第三个来看警告反馈。警告可以帮助人们提前知道潜在的错误，比如低机油、低制动液、低燃油。警告可以通过状态指示标记、信息、仪表盘、内建显示器、声音或者以上所有来告知人们。这些警告很重要，它们让给我们保持安全，保护我们的车不受伤害。</p>

<p><img src="media/15702878227518/EC8EC93F-C7C4-494D-8859-D0DD39CEFBAD.png" alt=""/></p>

<p>最后一个来看错误反馈。在车上，错误反馈非常关键。如果你打算启动一辆没有燃料的车，你将会得到一条错误信息。</p>

<p><img src="media/15702878227518/36D95C68-6EC1-4261-982B-C2503D68BDF9.png" alt=""/></p>

<p>错误状态总是让人失望和沮丧，最好是在一开始就帮助人们避免犯错误。警告和确认反馈就对此有帮助。例如，检查表格内每行信息的有效性就是让人们知道哪些值是被接受的，哪些是不被接受的好方法。实时反馈可以帮助人们修正信息，在之后就不会遇到错误。</p>

<p><img src="media/15702878227518/DED58C2E-B4CF-4258-95A0-37F8135D14DC.png" alt=""/></p>

<p>你也可以尝试猜测人们打算做什么或者犯错误时会做什么，并做出一些合理的事情。例如，在「Things 3」app 中，如果你在日期中输入 6 月 31 日这个不存在的日期，这对人们来说是一个常见的错误，这时 app 不会显示错误或警告，而是自动修正为日期 7 月 1 日。如此小的一个调整，但很聪明、很人性化。</p>

<p><img src="media/15702878227518/015C1621-2C32-4627-8244-3EF55E8DDFCE.png" alt=""/></p>

<p>正如你在前面所看到的，清晰、及时、易懂和提供信息的反馈很关键，反馈解答了极为重要的问题：我能做什么？刚刚发生了什么？现在正在发生什么？将来会发生什么？许多 app 在提供反馈上没有做的很好。</p>

<p><img src="media/15702878227518/D07E6390-75DB-41CF-A2CE-3E7E5A72C407.png" alt=""/></p>

<p>没做好的原因可能是在设计时，容易只想到固定的屏幕，而忘记随着时间不断前进、后退可交互的这种体验。好的反馈就像是与设计它的人进行对话。作为一个设计师，反馈就是你让 app 回答人们没有说出来的问题的方式，让人们知道他们该怎么做以及给他们提供有帮助的指导。所以，当你设计你的 app 时，想象你与使用 app 的人有一个对话。如果你在一个房间里跟他们对话你会说什么？你怎样说？一个简单但有效的方法是寻求没有用过你的 app 的人的建议，让他们告诉你他们在想什么，什么地方是不清楚的，他们认为什么东西是困惑的，接着向他们解释你的 app 是如何实际工作的。引导他们，向他们解释正在发生什么，他们应该注意什么。之后回过头来，考虑你说的和 app 表达的有何不同。当有人要向我解释他的 app 的设计，通常会比设计本身更清晰，人们对我说的东西填补了设计中忽视的部分。</p>

<p><img src="media/15702878227518/83E39A62-FADE-4D8E-98B3-06A5DE2CD092.png" alt=""/></p>

<h2 id="toc_3">可视性 Visibility</h2>

<p>如果人们看不见，好的反馈也没用。可视性捕捉的是十分明显的东西，当控件和信息是清晰可见的时候，一个设计的可用性会被很好地改善。仔细思考下可视性在你的车里是多么重要。仪表盘在你面前直接的呈现了状态信息和警告指示标记，仪表盘看上去很乱，有很多文本、数字、移动的计量器、闪烁的灯和状态指示标记，但这对于操控一辆车来说都是有必要的，需要被一下子看见，而不必移动你的头和身体才能看到。隐藏一部分信息或者把一部分放到车的其他地方将会损失可用性。</p>

<p><img src="media/15702878227518/722398C0-5FB8-46BB-A282-0B21DE219A61%202.png" alt=""/></p>

<p>关键的反馈会被忽视，app 也是同样的道理。在「邮件」app 中，小蓝点提供了有关于邮件消息的有帮助的状态信息，移除掉它可以减少杂乱、会更干净，但却极大地降低了可用性。人们必须要进入每条邮件消息才能获得那个信息，这是低效冗长的。所以，尽可能地让关键状态信息浮出水面很重要。</p>

<p><img src="media/15702878227518/BCE1ECBD-F5F6-4405-9FD7-BA29E0082A32.png" alt=""/></p>

<p>再来看下「时钟」app，如果把底部的「世界时钟、闹钟、就寝、秒表、计时器」隐藏到一个汉堡包菜单中，人们就要花更多的时间寻找 app 提供了什么其他功能。</p>

<p><img src="media/15702878227518/22FBEC4C-5489-48D8-B90F-24DF55A7AF6E.png" alt=""/></p>

<p><img src="media/15702878227518/EDBC591F-6899-4E8C-B8C6-782A2AB98CC9.png" alt=""/></p>

<p>当然，这里有一个平衡，界面过于密集会淹没人们，让人们特别是那些新用户做决定缓慢。所以可视性必须与其他元素进行权衡。</p>

<h2 id="toc_4">一致性 Consistency</h2>

<p>一致性原则是关于用相似的方式表示相似的设计特性。如果你以前开过车，有些标识和术语你一定很熟悉。你会认出下面的标识是锁门、车窗、加油、机油、电池、前灯，你也会知道停车、驾驶、倒车这些词语在操控车辆时的意思。</p>

<p><img src="media/15702878227518/CC311A74-73C4-4256-928D-A3F029436018.png" alt=""/></p>

<p><img src="media/15702878227518/54DACA20-642E-4AE3-B491-A1357F5EFA35.png" alt=""/></p>

<p>一致性也应用于位置和控件的配置。我们都希望刹车在左边，油门在右边。一致性很好地改善了车辆的可用性，或者反过来说不一致会破坏可用性。所有的车都共享了一份普遍的针对于标识和术语的设计词典。所有的车的位置控制也都差不多，得益于一致性，当每次开一辆新车时不需要重新学习如何驾驶。</p>

<p><img src="media/15702878227518/5857973A-E73A-4663-B72C-EBE2687B7C5B.png" alt=""/></p>

<p>这是显而易见的，但一致性实际上很难实现。你必须有意识地保持一致性，你必须正确使用一致性，你要全面考虑当人们使用你的 app 时人们会有什么期待，这些期待可能大多数来源于他们使用其他 app 的经验。你可能不知道他们使用如何使用其他 app，但你可以做出一些有用的推测，也许他们使用其他和你 app 做的事情差不多的 app，很可能他们在一个平台上使用其他 app。所以你需要关注平台惯例，像是图形、术语、导航机制甚至是典型任务的普遍工作流。</p>

<p><img src="media/15702878227518/6D5A4042-3835-4D36-B195-D4BE8E43457E.png" alt=""/></p>

<p>下面用一个具象的例子来说明。在 iOS 上，这个用来表示动作概念的图形是一个从盒子里出来的向上的箭头，因为这个图形会普遍地与分享动作结合在一起，我们可以称之为「sharrow」。有些 app 使用了另一个不同的图形表示相似的概念，这个图形在网站和其他平台很普遍，这个图形没有任何问题，但是这不是 iOS 用户熟悉的图形。从你的目标用户的角度，最好与他们最熟悉的图形保持一致。</p>

<p><img src="media/15702878227518/C28EB126-4BD4-4CF3-A312-1090A240FFA6.png" alt=""/></p>

<p>保持一致性会让你的 app 更方便使用。但有时我们总想做一点不一样的事情，当然那是好事情，你应该尝试新的想法，创新可能也会因此诞生。但像图标和文字标签这样简单的事情的不一致会让人们困惑。所以最好是保持一致，除非你有很坚定的理由。</p>

<p><img src="media/15702878227518/3077FE65-28F5-4EEC-8DE7-D2CD4E31D27A.png" alt=""/></p>

<p>关于一致性还有很重要的一点是内部一致性。内部一致性有关于设计相似样式的控件，你的 app 的图形应该有一个一致的视觉样式，你 app 中的文本应该只有几种字体、字号、颜色等等。内部一致性有助于使 app 具有内部凝聚力和整体性。当一切相互匹配，一切正好合适，人们就会对产品的完整性有更深的感受，我们会本能地认为这个设计是经过深思熟虑的，并且十分合理。保持一致需要自我控制和约束。</p>

<p><img src="media/15702878227518/2ACB9535-8AC4-4599-A3B4-BA251C2CD49A.png" alt=""/></p>

<h2 id="toc_5">心智模型 Mental Model</h2>

<p><img src="media/15702878227518/6B9FBE9E-F84D-4E49-B1A6-55E260B70943.png" alt=""/></p>

<p>到达酒店，你从不太透气的车上下来，进入房间走向浴室，打开水龙头的把手开关让水流出来。过了一会儿，你把手指放在水下面检查水温。水还有点凉，所以你让热水开大了一点。你又等了一会儿，水热了，你开始洗脸。</p>

<p><img src="media/15702878227518/5D5DEFF3-27FF-45A7-8FAB-9141B926FA98.png" alt=""/></p>

<p>相比于一辆汽车，一个水龙头更加基础。但是在某些方面，你必须学习如何使用一个水龙头，你通过适应不同水龙头的控制开关和观察结果去学习。例如，你怎么知道哪个把手是控制热水的？因为你知道是大多数热水都由左边的把手控制。为什么你要等一会儿才去检查水温？因为你知道在调整水温和水变热之间会有延迟。单纯只看水的样子，你很难知道是冷是热，我们都有在水龙头下被烫伤的经历。现在当你每次使用水龙头时，你没有思考这么多事情，你从直觉上期待是那样。</p>

<p><img src="media/15702878227518/CCBD4855-726E-4F5B-BF21-556CDD7F0091.png" alt=""/></p>

<p>在你的大脑中，有一个小小的可爱的水龙头模型，这个模型代表水龙头是含有不同部分和一系列功能和行为的系统，有一个喷口可以出水，有把手控制温度和流量。这些部分都有特定的配置，你的那个模型会有特定的行为，比如在调整热水和水温增加之间会有延迟。这个模型就是心智模型。你交互的每一个系统都有一个心智模型，这些心智模型十分简化，它们没有全面获取系统内部的运作。然而你使用这个系统的经验越多，你的模型就会变得越全面。</p>

<p><img src="media/15702878227518/F9EDF834-F471-4C02-A968-CE07E4509C18.png" alt=""/></p>

<p>心智模型是根据个人经验建立的，并且基于不完整的事实，所以每个人的心智模型都是独一无二的。心智模型可以分为两个部分去理解。<br/>
一个是系统模型。系统模型是关于一个系统是如何工作的。对于水龙头的系统模型，它包括对两个独立的一热一冷的水源的思考。系统允许输入混合以创造一个温度范围。系统没有立即响应，改变温度可能要花一点时间，特别是刚打开水龙头时。系统模型包括对延迟和温度的理解。</p>

<p><img src="media/15702878227518/7D79F0F9-DA26-43CD-BC04-601C2B8B16FA.png" alt=""/></p>

<p>另一个是交互模型。交互模型是关于如何与系统交互的。对于水龙头的交互模型就是我们用把手调整温度和水流量。<br/>
那这一切与我们的关系是怎样的？当像水龙头这样的系统匹配了我们的心智模型，我们对系统的期待就会被满足。事实发生时我们不会意识到我们的期望，我们对这个系统的认知是本能的。相反，当一个系统不符合我们的心智模型时，它就打破了我们的期待，我们就认为它不是本能的。</p>

<p><img src="media/15702878227518/F3916929-064C-4F94-947F-46D7D5D0901D.png" alt=""/></p>

<p>心智模型这个概念对于设计非常重要。在此用一个水龙头设计师的小故事来进一步说说这个设计原理。有一天水龙头设计师灵光一现，有个一个水龙头设计的新想法，不是用一个把手控制热水另一个把手控制冷水，而是用一个把手控制温度另一个控制水流量，这样当人们想调整水流量的时候就不会不小心改变温度了。现在，对于水龙头设计师，有了一个新的心智模型。但对于其他人来说，他们的心智模型与设计师的不匹配。当人们使用设计师的水龙头时，不能满足人们的期待，人们会认为是不直观的。更糟糕的是，新的水龙头的外观跟以前的太像了，但是实际行为却完全不一样。当人们以为打开了热水时，却没有水出来。期待的行为和体验到的事实间形成的落差造成了主要的可用性问题。</p>

<p><img src="media/15702878227518/D4385477-67CA-471E-9127-5DF739E0D0B4.png" alt=""/></p>

<p>也许对把手样式进行改变可以表示它有了新的交互模型，或者添加一个文字说明，但这还是有问题。文字说明和微小的变化是很容易被忽视的设计线索，特别是人们对于一个系统的运作和如何操作它已经有了根深蒂固的认知时。这也是设计中的一个大问题，尝试让人们改变 app 如何运作的心智模型是很冒险的，人们越熟悉越严重，对已长期使用的产品做出改变都会让人感觉难以适应，不管这些改变有多么好多么必要。当考虑对已有 app 要做出改变时，你必须有 100% 的把握这些改变让应用的使用者用着更舒服。为了改变而改变不是一个好的理由。仔细地测试你的设计，在怀疑之下证明你的创新更好。如果你做到了，那就可以推动，人们最终会被吸引。</p>

<p><img src="media/15702878227518/47372CE4-3F77-42F9-A831-B0CB84D22B81.png" alt=""/></p>

<h2 id="toc_6">继续阅读</h2>

<p>出发机场，坐上飞机，到达夏威夷，向酒店开去，到达酒店好好休息，旅程还没有结束，<a href="15703570206973.html">继续阅读核心设计原理的下半部分……</a></p>

<h2 id="toc_7">参考链接</h2>

<ul>
<li><a href="https://developer.apple.com/videos/play/wwdc2017/802">Essential Design Principles - WWDC 2017 - Videos - Apple Developer</a></li>
</ul>

<blockquote>
<p>如果你觉得这篇文章对你有所帮助，欢迎请我喝杯咖啡，感谢你的支持😁</p>

<p><img src="media/14625521742746/15088240400740.jpg" alt=""/></p>
</blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在 iOS 和 watchOS 上设计优雅的声音-触感体验]]></title>
    <link href="https://steppark.net/15701233791157.html"/>
    <updated>2019-10-04T01:22:59+08:00</updated>
    <id>https://steppark.net/15701233791157.html</id>
    <content type="html"><![CDATA[
<p>触感（Haptics）吸引人们的触觉以增强与屏幕上界面交互的体验。例如，当一个 Apple Pay 交易确认时，在视觉和声音反馈之外，系统还会有一个触感反馈。触感也可以增强触摸手势和交互，如滚动一个picker/选择器或者打开一个 switch/开关。</p>

<span id="more"></span><!-- more -->

<h2 id="toc_0">目录</h2>

<ul>
<li>
<a href="#toc_0">目录</a>
</li>
<li>
<a href="#toc_1">iOS 上的触感</a>
</li>
<li>
<a href="#toc_2">设计 iOS 上的触感</a>
</li>
<li>
<a href="#toc_3">在 iOS 13 中创建自定义的触感模式</a>
</li>
<li>
<a href="#toc_4">watchOS 上的触感</a>
</li>
<li>
<a href="#toc_5">设计 watchOS 上的触感</a>
</li>
<li>
<a href="#toc_6">什么是声音触感体验？</a>
</li>
<li>
<a href="#toc_7">设计指导原则</a>
<ul>
<li>
<a href="#toc_8">因果性 Causality</a>
</li>
<li>
<a href="#toc_9">和谐 Harmony</a>
</li>
<li>
<a href="#toc_10">实用 Utility</a>
</li>
</ul>
</li>
<li>
<a href="#toc_11">实践建议</a>
</li>
<li>
<a href="#toc_12">参考链接</a>
</li>
</ul>


<h2 id="toc_1">iOS 上的触感</h2>

<p>在支持此功能的 iPhone 设备上，你可以通过几种方式在 app 中增加触感：</p>

<ul>
<li>使用那些由 Apple 设计的默认系统触感的标准的 UI 元素，如 switch 开关、滑条 slider、选择器 picker；</li>
<li>当讲得通的时候，使用一个反馈发生器（feedback generator）弹奏通知（notification）、影响（impact）、选择（selection）分类里的预置触感模式中的一个。</li>
<li>在需要更多控制的场景中，创作并弹奏你自己的触感模式。</li>
</ul>

<p>当你使用系统触感时，iOS 会管理反馈的力度和行为。例如，一个开关会发出一个微弱的敲击，一个通知分类里的「success」反馈发生器会像下图一样发出触感，<a href="https://developer.apple.com/design/human-interface-guidelines/ios/images/haptics/success.mp4">点击这里聆听用声音模拟的效果</a>。</p>

<p><img src="media/15701233791157/A5348715-3F32-4403-B404-FCE647EFBD8B.png" alt=""/></p>

<p>系统反馈发生器内置了下面几种触感模式：</p>

<ul>
<li><p>Notification 通知</p>
<ul>
<li><a href="https://developer.apple.com/design/human-interface-guidelines/ios/images/haptics/success.mp4">Success（成功）</a>：表明一个任务或者一个动作（例如打对勾或者锁定汽车）完成。</li>
<li><a href="https://developer.apple.com/design/human-interface-guidelines/ios/images/haptics/warning.mp4">Warning（警告）</a>：表明一个任务或者一个动作（例如打对勾或者锁定汽车）发出了一个警告。</li>
<li><a href="https://developer.apple.com/design/human-interface-guidelines/ios/images/haptics/error.mp4">Failure（失败）</a>：表明一个任务或者一个动作（例如打对勾或者锁定汽车）失败。</li>
</ul></li>
<li><p>Impact 影响</p>
<ul>
<li><a href="https://developer.apple.com/design/human-interface-guidelines/ios/images/haptics/impact_light.mp4">Light（轻）</a>：提供一个物理替代以补充视觉体验。例如，当一个界面划进来并到位或者两个对象发生碰撞时，人们可能会有砰的一下那种感觉。</li>
<li><a href="https://developer.apple.com/design/human-interface-guidelines/ios/images/haptics/impact_medium.mp4">Medium（中）</a>：提供一个物理替代以补充视觉体验，比上面的更重一些。例如，当一个界面划进来并到位或者两个对象发生碰撞时，人们可能会有砰的一下那种感觉。</li>
<li><a href="https://developer.apple.com/design/human-interface-guidelines/ios/images/haptics/impact_heavy.mp4">Heavy（重）</a>：提供一个物理替代以补充视觉体验，比上面的再重一些。例如，当一个界面划进来并到位或者两个对象发生碰撞时，人们可能会有砰的一下那种感觉。</li>
<li><a href="https://developer.apple.com/design/human-interface-guidelines/ios/images/haptics/impact_rigid_sound.mp4">Rigid（僵硬）</a>：提供一个物理替代以补充视觉体验，比上面的清脆一些。例如，当一个界面划进来并到位或者两个对象发生碰撞时，人们可能会有砰的一下那种感觉。</li>
<li><a href="https://developer.apple.com/design/human-interface-guidelines/ios/images/haptics/impact_soft_sound.mp4">Soft（柔软）</a>：提供一个物理替代以补充视觉体验，比上面的沉重一些。例如，当一个界面划进来并到位或者两个对象发生碰撞时，人们可能会有砰的一下那种感觉。</li>
</ul></li>
<li><p>Selection 选择</p>
<ul>
<li><a href="https://developer.apple.com/design/human-interface-guidelines/ios/images/haptics/retarget.mp4">Selection（选择）</a>：表明被选中对象发生了变化。例如，当滚动一个选择器 picker 的滚轮时，用户会感到轻轻的点击。这种反馈是为了通过一连串分离的值表现移动，不是做出或者确认一个选择。</li>
</ul></li>
</ul>

<p>无论你是否使用系统提供的触感还是自己创建，使用触感增强用户体验而不是让用户从他们的目标中分散注意力是十分重要的。</p>

<h2 id="toc_2">设计 iOS 上的触感</h2>

<p>设计吸引人们触觉的界面可以把他们在物理世界熟悉的感觉带到 app 中。无论你怎样在你的 app 中产生触感，下面这些设计规范都可以帮助你给用户一个统一的和扣人心弦的体验。</p>

<ul>
<li>在每个触感和触发器之间构建一种清晰的、有因果的关系：理想情况下，人们总是知道为什么你的 app 要产生一种触感模式。如果触感不能增强一个因果关系，那将是令人困惑的，看上去没有必要。</li>
<li>在你的 app 中使用触感补充其他的反馈效果：当你的 app 的视觉、听觉、触觉反馈就像物理世界那样和谐的时候，用户体验就会更加连贯一致，一切才很自然。</li>
<li>审慎地使用触感：例如，在提供持久价值时使用触感，如果为了增强新奇感而使用触感会让人们觉得你的 app 在耍花招。只在一小部分重要的、反映结果的交互上使用触感，在很多微不足道的交互上产生触感会淹没用户。</li>
<li>使用触感要保持一致性：触感反馈中的一致性可以帮助人们在某个触感模式和某个体验间形成触觉关联。例如，当一个游戏角色没能完成任何时，如果你的 app 产生了一种特定的触感模式，人们就会把那种触感模式与消极的结果关联在一起。如果你在一个积极的结果中（如完成一个关卡）使用了那种触感模式，人们会感到困惑。</li>
<li>避免过度使用触感：有时当触感偶尔被触发时，这种体验会刚刚好，但是当经常发生时，体验就会令人厌倦。通常情况下，避免设计那种产生太长或者重复的触感反馈的体验。最好的触感体验是开启时不会意识到，但是关闭后会想念的那种。</li>
<li>确保好好测试 app 中的触感：不同的人有不同的偏好设置、不同的对触感的灵敏级别感知，所以你需要在尽可能多的人身上测试触感效果。</li>
<li>让触感是可选的：如果用户需要的话可以让他们关闭触感，关闭后，确保人们仍然可以正常使用、享受 app。</li>
<li>在游戏中，考虑一种使用自定义触感增强玩家体验的方式：除了当玩家与某个控件发生交互时产生触感，你可能想要通过产生触感传达游戏内的事件。例如，触感可以增强真实体验，像是碰撞或者敲击，也可以产生微妙的体验，像是脚步的临近或者逼近的危险。</li>
<li>要意识到产生触感可能会影响其他的用户体验：通过设计，触感会对人们产生产生足够的物理力度，让他们感觉到设备的震动。确保触感不会扰乱相机、陀螺仪、麦克风等的用户体验。</li>
</ul>

<h2 id="toc_3">在 iOS 13 中创建自定义的触感模式</h2>

<p>自定义触感模式可以表现像是射出弹弓、在崎岖的小路上行驶这种事情。自定义模式可以基于用户的输入和情景动态变化。例如，当一个游戏角色从树中跳出来时玩家会感觉比角色跳入一个地方更强烈。</p>

<p>在 iOS 13 和之后的版本中，Core Haptics 提供了两种基本的建设模式用来生成自定义触感模式：</p>

<ul>
<li>像是感到轻敲、脉冲这种短暂紧凑体验的短暂事件，例如在主屏幕上点击闪光灯按钮时的体验；</li>
<li>会感到不断震动的持续性事件，例如信息中的激光效果。</li>
</ul>

<p>无论你选择哪种模式去产生自定义触感，你都需要控制它的锐度（sharpness）和它的强度（intensity）。</p>

<p><img src="media/15701233791157/6A374FA8-DB40-4CCC-B721-5B8C2554EDE8.png" alt=""/></p>

<p>你可以把锐度当作是将触感体验抽象成能产生相符物理感觉的波形的一种方式。特定的锐度可以让你把体验的意图传达给系统。例如，你可能使用锐度值去传达一种柔软、圆滑、有机的体验，或者是一种松脆、清晰、机器驱动的体验。而强度如字面意思表示触感的力度。</p>

<p>通过对短暂事件和持续性事件的组合，变化锐度和强度，加入可选的听觉内容，你可以创建非常多的不同的触感体验。</p>

<h2 id="toc_4">watchOS 上的触感</h2>

<p>在 Apple Watch 上，由 Taptic Engine 产生的每一个触感都会搭配一段声音，这两者在一起工作可以用连贯一致的方法传达相同的信息。</p>

<p><img src="media/15701233791157/D402016D-3073-4A6E-B45F-5C189FA2806E.png" alt="D402016D-3073-4A6E-B45F-5C189FA2806E"/></p>

<p>Apple Watch 根据一些特定的目的定义了一些触感，每一个触感类型都传达了特定的含义，而且只应该被传达那个含义：</p>

<ul>
<li><a href="https://developer.apple.com/design/human-interface-guidelines/watchos/images/haptics-notification.mp4">Notification（通知）</a>：告诉用户有一些重要的事情或者是不普通的事情发生了，需要引起用户的注意。当一个本机或者远程通知到达时，这个触感就会由系统发出。</li>
<li><a href="https://developer.apple.com/design/human-interface-guidelines/watchos/images/haptics-levelup.mp4">Up（增加）</a>：告诉用户有一个重要的值增加到了一个重要的门槛之上。</li>
<li><a href="https://developer.apple.com/design/human-interface-guidelines/watchos/images/haptics-leveldown.mp4">Down（减少）</a>：告诉用户有一个重要的值减少到了 一个重要的门槛之下。</li>
<li><a href="https://developer.apple.com/design/human-interface-guidelines/watchos/images/haptics-success.mp4">Success（成功）</a>：告诉用户一个动作成功完成。</li>
<li><a href="https://developer.apple.com/design/human-interface-guidelines/watchos/images/haptics-failure.mp4">Failure（失败）</a>：告诉用户一个动作失败了。</li>
<li><a href="https://developer.apple.com/design/human-interface-guidelines/watchos/images/haptics-retry.mp4">Retry（重试）</a>：告诉用户一个动作失败了但可能需要重试。</li>
<li><a href="https://developer.apple.com/design/human-interface-guidelines/watchos/images/haptics-start.mp4">Start（开始）</a>：告诉用户一个活动开始了。当开启一个计时器或者任何其他有准确起点和终点的活动时使用这个触感。这个触感之后一般都会有一个相对应的停止触感。</li>
<li><a href="https://developer.apple.com/design/human-interface-guidelines/watchos/images/haptics-stop.mp4">Stop（停止）</a>：告诉用户一个活动结束了。当停止一个计时器或者其他已经开始的活动时使用这个触感。</li>
<li><a href="https://developer.apple.com/design/human-interface-guidelines/watchos/images/haptics-click.mp4">Click（点击）</a>：提供一种拨号盘点击或者有预置增量/间隔的进程的感觉。较少地使用这个触感。过度使用点击触感会削弱它的实用性，而当点击相互覆盖时会让人困惑。</li>
</ul>

<h2 id="toc_5">设计 watchOS 上的触感</h2>

<p>Apple Watch 上的触感不应该被 app 频繁使用，系统会阻止两个触感同时产生。</p>

<ul>
<li>使用触感时要克制：只在为了引起对那些重要事件的注意力时使用触感。过度使用触感反馈会造成困惑或者削弱那个反馈的用处。</li>
<li>只为了它本来的目的使用每一个触感：每一个触感和声音都是根据状态目标而设计的。如果因为不同的目的使用了那个触感会让用户对表达的意思感到困惑。</li>
<li>提供视觉提示以匹配触感：更新你的界面的视觉样式或者内容以强化触发触感所表达的含义。同时提供视觉和触感反馈可以在用户的动作和结果间创造更深的连接。</li>
<li>在合适的时间产生触感：通常情况下，播放触感会有一段等待期。因此，最好是在执行相关任务时的第一步而不是最后一步产生触感。如果你在任务的最后一步产生触感，触感就会来得太晚，在触感和任务之间形成一种没关联的感觉。</li>
</ul>

<h2 id="toc_6">什么是声音触感体验？</h2>

<p>当声音的频率很低很低时，你的耳朵就无法听到，但当你把手放在扬声器上时，你还能感觉到。因此我们设计了 Taptic Engine 用来播放那些只有你自己能感受到的低频声音。在 iPhone 中，Tapic Engine 旁边就是扬声器模块。Tapic Engine 产生的触感会与扬声器发出的声音同步，得到的结果，我们就称之为声音触感体验。</p>

<p><img src="media/15701233791157/003CC7E8-F276-401C-AD86-5B261C244CA4.png" alt=""/></p>

<p>因为触感意味着需要被感知，但因为这是一篇文章，所以你需要通过视觉化的触感和一些模拟的声音来想象出下面会提到的触感体验。</p>

<p>iOS 13 介绍的可以自定义触感体验的 Core Haptics 可以让开发者在 iPhone 上完全自由使用 Taptic Engine。你可以通过它产生自定义的震动，像下图所示的波形这样。</p>

<p><img src="media/15701233791157/41AC468E-3677-4C10-90C0-D9881C2CCF13.png" alt=""/></p>

<p>我们也可以创建更短更紧凑的触感，像下图这样，只有一个循环，这种我们称之为短暂事件（transient），它更加瞬时性，感觉就像一个瞬时的撞击、敲击、点击。</p>

<p><img src="media/15701233791157/4DE86B7B-BC9A-4419-BE2F-D8AA9B9F5FF0.png" alt=""/></p>

<p>我们可以进一步精炼它，可以使用基本的形状来表示不同模式的触感。所以这个短暂事件就可以变成一个简单的矩形，我们可以使用 Taptic Engine 通过不同的方式调整触感体验。</p>

<p><img src="media/15701233791157/21E770D1-F3CE-45D8-B29E-03DDF4A938ED.png" alt=""/></p>

<p>首先可以调整强度或者说振幅，可以让它更加圆滑、柔软。另一个角度，可以让它更加精确、松脆。这些都可以通过 Taptic Engine 来实现。</p>

<p><img src="media/15701233791157/175F0ECE-8FB9-46B9-94AA-422E5F082DFE.png" alt=""/></p>

<p>总结下，我们可以调整强度，也可以调整另一个设计维度-锐度，从而控制两种类型的事件，一种是持续性的，一种是短暂性的。</p>

<p><img src="media/15701233791157/2C1DC148-CC6A-4615-8510-D2A54614697C.png" alt=""/></p>

<h2 id="toc_7">设计指导原则</h2>

<p>对于设计绝佳的声音触感体验，有三个设计指导原则：</p>

<ul>
<li>因果性</li>
<li>和谐</li>
<li>实用</li>
</ul>

<p><img src="media/15701233791157/89E27213-972C-4619-AC57-26A0B4B34D7D.png" alt=""/></p>

<p>这些概念或者方法被贯彻使用在 Apple 产品的工作中，它们也可以帮助提升你的 app 体验。下面具体来看。</p>

<h3 id="toc_8">因果性 Causality</h3>

<p>第一个是因果性，因果性是有有关于声音触感必须有用，造成它的体验必须是明显的。想象一个足球运动员踢球，在原因—脚踢球和结果-撞击的声音和感觉之间就有一个明显或者清晰的关系。</p>

<p><img src="media/15701233791157/2D0367BC-4649-4CCA-AE86-4CF3C2CEF1E6.png" alt=""/></p>

<p>这个体验听上去和感受如何取决于交互对象的品质（鞋子的材料、足球的材料）、动作的范围（用力踢还是轻轻踢）以及环境（露天体育场或者足球场）。</p>

<p><img src="media/15701233791157/75988E6A-A9E8-4709-AB6F-084AF6472518.png" alt=""/></p>

<p>因为我们太熟悉这个事情了，所以如果声音有一点不同，就会讲不通。所以当设计你的 app 的声音体验时，如果你的交互对象是一个物理对象，仔细考虑下它会是是什么感觉、听上去怎样。举个例子，设计 Apple Pay 确认时的声音-触感体验。我们希望声音和触感能够完美匹配屏幕上的动画，那个对勾。首先考虑下，你会把什么声音与付钱关联在一起，钱是什么声音，使用 Apple Pay 付钱的交互是什么？屏幕上的确认付款成功的动画是积极的。</p>

<p><img src="media/15701233791157/B2ABB9D0-D9F1-42B7-9941-6B35FA1190DA.png" alt=""/></p>

<p>我们从众多声音中进行了挑选，不能太轻浮、太刺耳、不严肃，要表明一个清晰的确认的感觉，最终选择了你们现在听到的那个声音。声音确定之后就是确定触感。首先想到的是模仿声音的波形，因为可以完美匹配。</p>

<p><img src="media/15701233791157/8EE99BF1-1507-434F-9BB3-FE58A6BBCF67.png" alt=""/></p>

<p>但仔细体验之后，其实两个简单的点击更好。这就像两个乐器一样，一个你可以听到，一个你可以感知到，两个乐器没有必要总是弹奏相同的东西，但至少节奏是相同的。</p>

<p><img src="media/15701233791157/767ED677-3538-4471-A8DF-AF59586E9296.png" alt=""/></p>

<h3 id="toc_9">和谐 Harmony</h3>

<p>第二个是和谐，和谐是有关于事物通过视觉、通过声音应该感觉到的方式。在真实世界中，声音、触感、视觉是自然和谐的，因为它们有清晰的因果关系。在数字世界，我们需要手动地实现这个工作，输入和输出需要由开发者进行特别的设计。<br/>
来试着创建一个简单的模型，这里有一个小球从空中掉落并与屏幕底部发生碰撞。先来添加声音反馈，找一个与物理冲撞相匹配的声音，它需要短、精确、清晰，还需要基于撞击的速率调整声音的振幅。接下来添加添加触感，想象一下球撞到你手里的感觉，与小球撞击屏幕底部保持同步，所以我们可以选择一个高锐度的短暂事件，同时需要根据速率调整强度。最后，非常重要的是，让视觉、听觉、触觉达到同步。之后，魔法就发生了，就像是一个真的球与墙壁发生了碰撞。但当我们不让三者同步，感觉就完全不对了。所以「和谐」需要你仔细考虑、多加注意，当完成时就可以创造完美的令人愉悦的体验。</p>

<p><img src="media/15701233791157/6D267AA4-EAF6-42EC-9FA2-DC105D6290EA.png" alt=""/></p>

<p>再来看 Apple Watch 数码表冠的声音触感设计在和谐上的应用。Apple Watch 上第一次出现 Taptic Engine，实现了声音和触感的精准同步。在 S4 上，触感和一个微弱的声音被添加到了表冠的旋转中，你会在手指上感受到那个尖锐、精确的触感。对于声音，我们从世界上传统手表制造商中寻找灵感，从真实世界的机器对象中寻找灵感。最后你听到了现在的那个在手腕上安静的声音。声音和触感的完美结合打造了一种机械表冠的错觉。为了匹配这种机械感觉，动画也做了调整以匹配声音和触感。</p>

<p><img src="media/15701233791157/592400C0-92FA-4FA9-B495-035344104231.png" alt=""/></p>

<p><img src="media/15701233791157/63002678-D238-4C8D-ACBD-7B8B362A0389.png" alt=""/></p>

<h3 id="toc_10">实用 Utility</h3>

<p>第三个是实用，实用是只在你对 app 体验可以提供清晰的价值和好处时才添加声音触感反馈。要使用克制，不要因为你可以而添加声音触感。</p>

<p>来看一个使用了 ARKit 的 app 实例。在这个 app 中，我们在环境中放置了一个虚拟的计时器，交互会取决于和虚拟计时器的距离，通过声音触感体验以完善 AR 交互，增强用户体验中最重要的备份。靠近计时器、远离计时器会调整声音触感体验。</p>

<p><img src="media/15701233791157/F23A146B-4A10-4B25-875C-658A3EDEB07F.png" alt=""/></p>

<p>针对不同的元素或者 app 中的小交互克制地添加声音触感反馈，有时候只有触感没有声音也是一个好主意。寻找 app 中可能需要声音触感反馈的地方，聚焦于可以增强用户体验或者传达什么重要事情的元素，尽量保持简单。<br/>
但如果你添加的太多，这很有可能淹没用户，削弱真正重要事情的价值。</p>

<h2 id="toc_11">实践建议</h2>

<p>先回顾下 Core Haptics 提供的两个建设组件，一个是短暂事件，它是敏捷的、紧凑的触感体验，像是一个点击、一个敲击。另一个是持续的触感体验，可以维持很长时间。你可以指定持续时间。</p>

<p><img src="media/15701233791157/F3DF933E-EABE-4ED9-B096-1861F8522994.png" alt=""/></p>

<p>对于短暂事件，有两个设计维度你可以控制：强度和锐度，可以使用较低的锐度值创建更圆滑、柔软的体验，使用较高的锐度值创建更精确、机械化、松脆的体验。而强度改变了体验的振幅。</p>

<p><img src="media/15701233791157/A74E2EE7-AB49-41CF-9169-28123CA3BB79.png" alt=""/></p>

<p>对于持续性事件，也有这两个设计维度，可以创建随着时间更有机的、隆隆作响的体验，或者是使用更高的锐度创建更精确、更机械化的体验。</p>

<p><img src="media/15701233791157/1C6F0ACF-35C1-49C5-8C45-0B6EA78627AD.png" alt=""/></p>

<p>设计声音时，记住什么样的可以与这些触感完美工作。对于一个尖锐的短暂事件，一个尖锐的鸣响可能可以完美匹配。但如果你有一个声音更顺畅，使用相同的触感与之匹配就不是好主意，一个持续性的上上下下的触感可能更合适。但这些都不是绝对的，有很多空间去探索试验。</p>

<p><img src="media/15701233791157/A378A17B-5FF7-4F50-8426-2E7897535B8A.png" alt=""/></p>

<p><img src="media/15701233791157/DFE7FA02-D4F7-4FC1-8011-27A112097762.png" alt=""/></p>

<p>有时你可能会发现你思考的相反一面会工作的更好，例如 Apple Watch 闹钟的例子，当声音与触感同步时是不错，但当将触感反过来，并调整时间轴，先来一段向上走的触感，然后立即切断并开始播放声音，这样形成了清晰的先有动作后有反应，声音作为触感的应答。</p>

<p><img src="media/15701233791157/C0509165-740B-429C-B4D1-E226E965A344.png" alt=""/></p>

<p>通过一系列的相对立的事件去传达不同类型的体验也很普遍。下面这个例子里有四个短暂事件，但人们感受后会发现通常不会感觉到第一个触感，四下点击变成了三下点击，出现了影子效果。这是一个问题也是一个机会，我们可以利用这个影响。</p>

<p><img src="media/15701233791157/2576B6A8-3E07-4416-89DF-A62CFA253D49.png" alt=""/></p>

<p>来看 Apple Watch 上第三方通知的声音触感实例。这是一个非常重要的通知，我们希望用户能够清晰的感知到。这就可以利用影子效果去唤醒皮肤并准备好感知接下来要发生的。在正常通知的触感前增加一个短暂的触感。</p>

<p><img src="media/15701233791157/9921D4E2-307D-480E-802B-B96550B3BB99.png" alt=""/></p>

<p>我们也可以在相似的体验之间创建完全相反的功能。在 Apple Watch 上导航向左转是下图这样，是一连串的双重敲击。</p>

<p><img src="media/15701233791157/845BD720-FCD2-4A23-835B-68714FBA3791.png" alt=""/></p>

<p>如果是导航向右转，则是下图这样，声音有点相似，但不完全相同。此时如果还是按照波形设计触感的话，那触感就没有了区别。在这个例子中，我们可以增加触感，加倍双重敲击为四重敲击。</p>

<p><img src="media/15701233791157/40EF54BB-2179-4ACE-B7D3-BBF71475B868.png" alt=""/></p>

<p>信息中的烟花发送效果也是一个非常好的将视觉动画、声音、触感完美和谐地结合在一起的好例子，你可以去实际感受下。</p>

<p>除了上面的这些指导原则，还有一些思考。最好的结果会在亲手听到、看到、感受到时产生。如果你是一名动画师，要与声音或者交互设计师紧密合作，反之亦然。那是创造统一体验的最好方式。想象你第一次使用你的 app，你会想听到什么、感受到什么？然后想象你使用了 100 多次，那些声音触感体验还能帮助你听到或感受到那些东西吗？或者是已经被淹没了。尽管体验它，去掉那些不引人注目或者没用的东西。不要害怕试验，尽管尝试。</p>

<h2 id="toc_12">参考链接</h2>

<ul>
<li><a href="https://developer.apple.com/design/human-interface-guidelines/ios/user-interaction/haptics/">Haptics - User Interaction - iOS - Human Interface Guidelines - Apple Developer</a></li>
<li><a href="https://developer.apple.com/videos/play/wwdc2019/810/">Designing Audio-Haptic Experiences - WWDC 2019 - Videos - Apple Developer</a></li>
<li><a href="https://developer.apple.com/videos/play/wwdc2019/520/">Introducing Core Haptics - WWDC 2019 - Videos - Apple Developer</a></li>
<li><a href="https://developer.apple.com/design/human-interface-guidelines/watchos/user-interaction/haptic-feedback/">Haptic Feedback - User Interaction - watchOS - Human Interface Guidelines - Apple Developer</a></li>
</ul>

<blockquote>
<p>如果你觉得这篇文章对你有所帮助，欢迎请我喝杯咖啡，感谢你的支持😁</p>

<p><img src="media/14625521742746/15088240400740.jpg" alt=""/></p>
</blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何设计和实现 iPad app 的多窗口功能]]></title>
    <link href="https://steppark.net/15699939059941.html"/>
    <updated>2019-10-02T13:25:05+08:00</updated>
    <id>https://steppark.net/15699939059941.html</id>
    <content type="html"><![CDATA[
<p>在 iOS 13 及之后的版本中，iPad app 可以支持多窗口功能。例如，在一个具有文档创建功能的 iPad app 中，人们可以同时打开多个文档窗口。这篇文章会从设计和实现层面讲述 iPad 多窗口功能的触发方法、样式以及功能等主题。</p>

<span id="more"></span><!-- more -->

<p><img src="media/15699939059941/E590DF33-C0BC-471B-9BE1-9D1903DD7208.png" alt=""/></p>

<p>注意：如果你想把你的 iPad app 带到 Mac 中去，想让 Mac 版本支持多窗口功能，那就必须在 iPad app 中支持多窗口功能。有关于把 iPad app 带到 Mac 中去，参见 <a href="15681304209417.html">「把 iPad 上的 app 带到 Mac 中去（上）」</a>和 <a href="15699505035288.html">「把 iPad 上的 app 带到 Mac 中去（下）」</a> 。</p>

<h2 id="toc_0">目录</h2>

<ul>
<li>
<a href="#toc_0">目录</a>
</li>
<li>
<a href="#toc_1">设计意图</a>
</li>
<li>
<a href="#toc_2">UIScene 生命周期</a>
</li>
<li>
<a href="#toc_3">进一步实现</a>
</li>
<li>
<a href="#toc_4">最佳实践</a>
</li>
<li>
<a href="#toc_5">调试建议</a>
</li>
<li>
<a href="#toc_6">参考链接</a>
</li>
</ul>


<p>人们可以好多种方式打开一个新的窗口，例如：</p>

<ul>
<li>从 Dock 栏拖拽 app 的图标到屏幕的一边，选择一个当前的窗口或者创建一个新的窗口；</li>
<li>拖拽一个对象到屏幕的一边，把它释放到系统提供的可供释放的目标上；</li>
<li>长按 Dock 栏上或者首页上一个 app 的图标，点击情景菜单中出现的「显示所有窗口」，再点击添加按钮；</li>
<li>长按一个对象直到出现一个情景菜单，其中包括在新窗口中查看对象的选项。</li>
</ul>

<p>通常情况下，iPad app 使用两种类型的窗口。「Primary window 主要窗口」包括了多个 app 对象以及与之相关的动作，通常人们会一直与「primary window」保持交互。「Auxiliary window 辅助窗口」包含了一个对象以及与之相关联的动作，人们在关闭辅助窗口前通常会与其只交互一次。例如，在「邮件」app 中，主要窗口包括了邮箱，而一条单独的信息会展示在辅助窗口中。</p>

<ul>
<li>支持主要窗口和辅助窗口的多窗口体验：因为主要窗口总是包含高层级的对象，人们会从打开展示了不同区域内容的多窗口中受益。例如，人们可能想要首要邮件窗口一个展示他们的收件箱，另一个展示草稿箱。正如你所期待的，多个辅助窗口让用户更容易浏览和在多个条目间工作，例如多条邮件信息。</li>
<li>确保一个辅助窗口自己是有用的：辅助窗口应该给人们 app 的内容和功能的额外视图。避免只是使用辅助窗口去提供主要窗口内容的选项或工具。</li>
<li>在辅助窗口使用一个「Done 完成」或者「Close 关闭」按钮：因为辅助窗口只包含了一个任务或对象的内容和动作，人们期望在完成时能够关闭它。不要在按钮中使用「Back 后退」来关闭窗口。你可以在按钮中使用「Back 后退」去帮助人们返回窗口中的上一个视图。</li>
</ul>

<h2 id="toc_1">设计意图</h2>

<p>在 iOS 12 和之前的版本中，如果你进入切换 app 界面，你会看到下面这种 app 的网格布局，你可以点击其中一个进入那个 app。</p>

<p><img src="media/15699939059941/D4133C79-53E1-41C9-BCA0-8C36642583EF.png" alt=""/></p>

<p>在 iOS 13 中，一切看上去还跟以前一样，但在这个界面中，不再全是一个个的应用，而是一个个的窗口。</p>

<p><img src="media/15699939059941/EE434B28-A3F2-404B-8F9E-F8A99406E934.png" alt=""/></p>

<p>首先来看下多窗口功能在 app 中是什么样子的，从中解答两个问题，我的 app 应该支持多窗口功能吗？如果需要支持，这些多窗口应该是怎样的？具体的我应该在哪里添加多窗口功能？它们应该怎么表现？用户是如何思考它们的？我们将通过看几个 Apple 原生应用的例子来回答上面的问题。<br/>
先来看「Safari 浏览器」，Safari 是多窗口功能的早产儿，因为在 iOS 13 之前的版本就已经基本具备了多窗口功能，下图中展示了在 iOS 12 中，Safari 通过分隔视图实现了多窗口功能。</p>

<p><img src="media/15699939059941/3A79C899-4DBE-471C-A450-1F82643D30C4.png" alt=""/></p>

<p>在 iOS 13 或者 iPadOS 13 中，是下面这个样式，实际上看起来和之前没有什么不同。因为在之前，在 Safari 中能使用多窗口功能打开多个网页就已经非常重要，现在我们将多窗口功能带到了整个系统中。</p>

<p><img src="media/15699939059941/C7CE7D8F-1643-407C-A8F4-384DFB769782.png" alt=""/></p>

<p>具体来看，Safari 的每个窗口都是完全一样的，它们就像是另一个界面的克隆。每一个窗口都可以做 app 所有的事情，这很重要，因为在 iPad 上用户应该在他们想要的那个窗口中做任何的事情。如果人们觉得需要，还可以创建更多的窗口。但是需要注意，如果你的 app 必须依赖多窗口功能才能工作，那就有些问题了。所以说每一个窗口都是另一个窗口的克隆并不是必须的，但用户打开的第一个窗口应该可以完成所有的事情更加重要。而在 Safari 的这个例子中，每一个窗口都是一样的，在大多数的 app 中也是这样。<br/>
在 iOS 13 的 Safari 中，你可以随时从多窗口的 Split View 模式转换到 Slide Over 模式，并将屏幕边缘的窗口滑出去，以进行一会儿更加专注的工作。</p>

<p>第二个例子是一个基于文档的 app，Pages。在任何基于文档的 app 中，用户都会希望能够同时在不同的窗口中查看多个文档。所以你很有必要支持多窗口功能。但有一个点你需要注意，在每个窗口的左上角，有一个「文档」按钮，你可以通过这个按钮访问你想要的其他文档。这也跟 Safari 一样，每一个窗口都是一样的。当然，并不是每一个基于文档的 app 都要做成这样，但在这里，这是讲得通的。</p>

<p><img src="media/15699939059941/E1D6E2B9-4F52-4A39-950F-AF052F0513C7.png" alt=""/></p>

<p>第三个例子是「Maps 地图」，它也是只有一种多窗口类型的 app，要在这里提这个 app 的原因，是它更可以展示需要支持多窗口功能的必要性。通常情况下，你打开地图，去到某个地方然后关闭它。但当你计划你的晚上安排时，你可能想要先去吃晚饭，晚饭后再去看一个演出，在此时使用多窗口功能就很有帮助，你可以在两者之间思考并改变它们。所以我们不能确保在任何时候多窗口功能都是有用的，但我们知道有时候会用上它。</p>

<p><img src="media/15699939059941/0594EE13-1A6E-4CA1-B661-A2C921C87F60.png" alt=""/></p>

<p>同时，多窗口功能是系统级别的。当你已经确定了要去哪里吃晚饭后，你可以关闭右边的地图，将其替换成「Notes 备忘录」app，从而去完成其他事情。</p>

<p><img src="media/15699939059941/BB1AACC9-14FC-4608-9ED2-FFF247CFEAF5.png" alt=""/></p>

<p>第四个例子是「Mail 邮件」，这是第一个有不同类型多窗口功能的 app。当你回复一条消息时，你可以把这个模态窗口变成一个单独的窗口，以 Slide Over 或者 Split View 的方式展示。你可以看到在单独的这个信息窗口中有一个发送按钮和一个取消按钮，你不能在这个窗口中回到上一级的邮件列表中，这种窗口是经过特殊设计的，当你点击发送或者取消按钮时，这个窗口就会关闭，关闭时会有一个过渡动画，这也可以应用在你的 app 中。</p>

<p><img src="media/15699939059941/C44B091D-63B4-443A-8FF1-494E46F8E92F.png" alt=""/></p>

<p>你可以通过滑动窗口底部的知识条在多个 Slide  Over 的窗口中切换。</p>

<p><img src="media/15699939059941/62C254A4-8EDE-434A-8A81-BB3442F7CAF3.png" alt=""/></p>

<p>第五个例子是「Messages 信息」，它也有不同类型的多窗口。当你把一条消息拖动到屏幕边缘时，就可以开启一个单独的窗口，一个只属于那个对话的窗口。你会在窗口顶部看到一个完成按钮，点击就可以完成这个任务。在浏览一条信息时可以同时查看另一条信息作为参考是非常有帮助的。所以在这种需要另一个页面同时作为参考时，就需要支持多窗口功能。</p>

<p><img src="media/15699939059941/D55AB27D-5996-4A85-B5CA-FF524CE42B27.png" alt=""/></p>

<p>最后一个例子是「Calendar 日历」，日历已经支持了拖放功能，但现在通过多窗口功能，你可以在不同的窗口中同时查看两个不同周的事项，你还可以从一边拖拽一个事项到另一边。所以如果你的 app 支持了多窗口的拖放功能，你也可以获得上面这个功能的强大能力。</p>

<p><img src="media/15699939059941/6D99F23A-9EBD-49AC-B909-70DFC3D01A29.png" alt=""/></p>

<p>今年我们介绍了将 iPad app 带到 Mac 上去，Mac app 都有多个窗口，如果没有多窗口功能，Mac app 会非常奇怪。但现在有了 iOS 13 的多窗口功能，这件事就变得更加顺理成章了。</p>

<p><img src="media/15699939059941/96580663-31FF-456C-B2F6-89192004EF60.png" alt=""/></p>

<p>那具体用户可以通过什么样的交互打开多窗口功能呢？<br/>
首先来看下系统提供了哪些交互。在 App Expose 中，右上角会有一个小按钮用来打开新的窗口，这是系统自带的功能。</p>

<p><img src="media/15699939059941/9266CF13-187E-4B40-B72F-114F88622740.png" alt=""/></p>

<p>另外一个就是可以通过拖拽 app 的图标到屏幕的边缘开启多窗口功能，因为当你那样操作时，就像是确切的在说我要在这里开启一个新的窗口。</p>

<p><img src="media/15699939059941/39F2B13C-3B1E-46A2-B91A-8C09BA28AF67.png" alt=""/></p>

<p>再来看下用户会根据已有的东西做出哪些动作来想开启多窗口功能。用户可以直接拖拽 Safari 的某个 tab 到屏幕边缘来开启多窗口功能，这种交互系统不能自动帮你实现，但你可以通过 API 适配实现这个交互。</p>

<p><img src="media/15699939059941/08E6BC04-6DE3-4EA9-9324-0A39102D7F47.png" alt=""/></p>

<p>如果用户可以拖拽起某个对象，并且打开一个新的窗口可以讲得通的话，那用户就期望有这么一个功能，你应该去实现他。比较普遍的例子就是任何形式的「master-detail view 主要-详情视图」，比如在「Mail 邮件」中，左侧主视图中的每一个 cell 都代表着一条消息，如果点击一条消息，那就可以在详情视图中看到完整的消息。所以用户就会期望当拖起 table view 中的一条消息到屏幕边缘时可以打开一个新的窗口。</p>

<p><img src="media/15699939059941/C33A5ED6-FA6A-43AB-BAA8-D8BF87DEE71C.png" alt=""/></p>

<p>你也可以通过一个确切的动作创建一个新的窗口。在像 Safari 这样有链接的应用中，可以通过长按一个链接显示一个弹窗，在弹窗中有一个按钮，通过点击这个按钮可以在新窗口中打开链接。</p>

<p><img src="media/15699939059941/5F8FE4F9-D4CD-4063-89A0-1E6F11197EBB.png" alt=""/></p>

<p>用户不应该被强制使用多窗口功能，应该需要一个用户触发的确切的动作才能开启多窗口功能。</p>

<h2 id="toc_2">UIScene 生命周期</h2>

<p>要在 iPadOS 中实现多窗口功能，你需要特别关注两个类：UIWindowScene 和 UISceneSession。你可能在之前已经熟悉了在 UIKit 中的 UI 是如何构建的。你有一个 Screen，然后有多个 Window，每个 Window 下又有不同的 View。</p>

<p><img src="media/15699939059941/5BF5DA59-13FD-4583-BEEB-2CE49557F651.png" alt=""/></p>

<p>而现在，UIWindowScene 插入到了 Screen 和 Window 之间，这可以让多个 Window 属于用户界面的一个单独的实例，而不需要强制改变应用或用户界面结构太多。</p>

<p><img src="media/15699939059941/DE569067-8DFA-452E-AB30-06C7E2E0253A.png" alt=""/></p>

<p>从基本上来看，一个 Scene 包括了根据你的需要由系统创建的用户界面。无论用户在什么时候执行了一个拖拽动作，都会根据你的用户界面请求一个新的窗口打开。之后，如果那个 Scene 应该进入后台，不再与其发生交互，那么系统就可以决定挂起它、不再需要它、销毁这个 Scene。</p>

<p><img src="media/15699939059941/4B2B0410-3C28-448E-9C8C-F5602DFD2854.png" alt=""/></p>

<p>当我们不需要那个 Scene 时，我们可以将其移到后台，但在 switcher 中用户知道它还在。你需要一种方法去理解什么东西实际上还在 switcher 中。那就是 UISceneSession 该出现的地方。UISceneSession 代表了一种存留的用户状态，表示用户最后进行操作的那个状态。现在，它们有了一个清晰的系统角色，这可能是一个你可以在真实的设备上与其进行交互的标准的应用界面，也可能是一个外部显示器界面。每次系统上创建一个新的窗口，你的应用就会被软件代理通知有一个新的 session 被创建。无论是通过 API 交互还是用户在 switcher 中上划，每当用户销毁/关闭掉一个窗口时，你也会被通知那个 session 被销毁。UIScene 通过你的应用的生命周期与这些 session 相连接或断开连接。</p>

<p><img src="media/15699939059941/F04301AE-94FF-421F-8861-458C191B08DF.png" alt=""/></p>

<p>为了更好地了解这对一个 app 的生命周期的影响，这里用一个图表进一步说明。在应用中有三个 Session，它们代表着系统中三种不同的空间，在这些空间中应用正在展示它们的界面。现在，三个 session 都断开了连接，它们处于后台线之下，而此时整个 app 的状态也是在后台中，如图所示。</p>

<p><img src="media/15699939059941/43BD048A-5BF6-43DB-ACCB-DABD7D058E7D.png" alt=""/></p>

<p>现在，如果我激活一个空间，一个 Session 也被激活，整个 app 也会随那个连接在一起的 Scene 进入前台活跃状态。</p>

<p><img src="media/15699939059941/DDF95A41-8083-4733-9CDD-6FCC0C0CA896.png" alt=""/></p>

<p>当我让一个 Scene 回到后台中，整个应用的状态也会随之进入后台。而如果我切换到另外两个 Scene，我的应用状态就会变成前台活跃状态。</p>

<p><img src="media/15699939059941/1DD846A3-0352-4F95-BF3F-9E473D21E0C5.png" alt=""/></p>

<p>说到 UIApplication 和 UIApplicationDelegate 两个类，我们习惯于把系统的其他界面、ApplicationDelegate 中的生命周期和 Application 对象组合在一起，现在如果还是这样就会有些不清楚。</p>

<p><img src="media/15699939059941/16EFB43C-6112-4F5B-94B7-B9BB6DEDC23E.png" alt=""/></p>

<p>所以我们进行进一步的拆分。Application 继续表示作为一个系统进程的系统状态，ApplicationDelegate 可以获得事件和有关于进程、事件、运行、中断的代理通知。而现在 Scene 概括了 UI 状态，SceneDelegate 可以得到在特定场景打开 URL、从后台返回到前台等等这样的通知。SceneSession 代表存留的 UI 状态。</p>

<p><img src="media/15699939059941/7AD092B2-2857-4AAC-8842-8748EEDBEB94.png" alt=""/></p>

<p>由于上面概念上的变化，许多 API 需要进行修改，但大部分都是相似的，基本上都是从 application 到 scene 的变化。</p>

<p><img src="media/15699939059941/63E86F91-C8E8-4B2D-8BFF-882F5EF8DD59.png" alt=""/></p>

<p><img src="media/15699939059941/227F8660-822B-430F-8DC6-94933624323A.png" alt=""/></p>

<h2 id="toc_3">进一步实现</h2>

<p>之前，用户在 swticher 中会看到一个 app 的四个窗口，这也是用户自然想到的。但作为开发者，我们鼓励你把他们直接看做是 scene 和 scene session。这之间的区别是很重要的，因为用户看到的窗口只是一张截图，应用的 scene 可能并没有在你的 app 中加载，它们可以根据需要出现和关闭，而 session 对你来说是总是可用的。正因如此，我们使用 session 在程序上控制窗口。</p>

<p><img src="media/15699939059941/3DE96D64-16CE-42A0-AF70-B6BC52657125.png" alt=""/></p>

<p>因为多窗口功能，我们增加了新的 API，可以通过这些 API 在程序上创建新窗口、更新 app switcher 中的截图、响应用户手势或者某个文档过期等事件而关闭窗口。</p>

<p><img src="media/15699939059941/AD255690-3B5F-483B-A606-EFF3C1269CA6.png" alt=""/></p>

<p>下面看一些代码实例。<br/>
第一个是 <code>requestSceneSessionActivation</code> API，这可以让你在前台打开已有的 scene 或者创建一个新的 scene。在下面的这个例子中是打开一个新的文档。首先检查应用中是否有存在的 scene，如果有打开它，如果没有，就创建一个新的。</p>

<pre class="line-numbers"><code class="language-swift">// Open a New Window

@IBAction func handleLongPress(forDocumentAt url: URL) {

    if let existingSession = findSession(for: url) {
        UIApplication.shared.requestSceneSessionActivation(existingSession, userActivity: nil,
options: nil)
    } else {
        let activity = NSUserActivity(activityType: “com.example.MyApp.EditDocument”)
        activity.userInfo[“url”] = url

        UIApplication.shared.requestSceneSessionActivation(nil, userActivity: activity,
options: nil)
        }

}
</code></pre>

<p>第二个是 <code>requestSceneSessionRefresh</code> API，你可以在你接到一个信息的推送通知的地方或者在像日历这样的 app 中当一个事件发生改变时使用这个 API。当你调起这个方法，UIKit 会安排一个在未来时间点的更新，那时候会连接上后台中的 scene。你将有机会更新 UI，一个新的截图被截取并且保存到之后的 app switcher 中。</p>

<pre class="line-numbers"><code class="language-swift">// Update App Switcher Snapshot

func application(_ application: UIApplication,
    didReceiveRemoteNotification userInfo: [AnyHashable:Any],
    fetchCompletionHandler completionHandler: @escaping (UIBackgroundFetchResult) -&gt; Void) {

    let session = findSession(for: userInfo)
    application.requestSceneSessionRefresh(session)

}
</code></pre>

<p>最后一个是 <code>requestSceneSessionDestruction</code>API，你可以使用它关闭 scene，并且可以根据语义定义关闭时的动画过渡效果。你可以在「邮件」应用中的写邮件窗口看到这个实例，当用户发送一条消息时，窗口会从上面滑出屏幕，而当用户保存所写内容为草稿时，窗口会从下面滑出并提醒用户已经保存。你也可以在你的 app 的 scene 中使用相同的动画过渡效果。</p>

<pre class="line-numbers"><code class="language-swift">// Close a Window
func closeWindow(and action: DraftAction) {
    let options = UIWindowScene.DestructionRequestOptions()

    switch action {
    case .send: options.windowDismissalAnimation = .commit
    case .save: options.windowDismissalAnimation = .decline
    case .delete: options.windowDismissalAnimation = .standard
    }
    let session = view.window!.windowScene!.session
    UIApplication.shared.requestSceneSessionDestruction(session, options: options)

}
</code></pre>

<h2 id="toc_4">最佳实践</h2>

<p>正如前面所说，我们已经从 UIApplicationDelegate 中拆分了用户界面状态和进程的生命周期责任，也拆分了 UIApplication。你可以同时看到应用的多个 scene，你可能会有一个浅色的状态栏内容，还有一个深色的状态栏内容。如果对于状态栏还是只返回一个值那就讲不通了。所以，原有基于应用的状态栏 API 被舍弃，引入了新的基于 window scene 的状态栏 API。<br/>
其他类似的 API 也是这样。<br/>
即使你现在不准备适配多窗口功能，我们也鼓励你现在就开始直接使用新的 API，因为如果你之后需要适配这个功能，就不用再花更多的功夫了。</p>

<p><img src="media/15699939059941/90B6E0B4-9564-4671-9FBB-7C3F53E42130.png" alt=""/></p>

<p><img src="media/15699939059941/9A3386FB-71C1-4870-B716-BCECC00B1AAC.png" alt=""/></p>

<h2 id="toc_5">调试建议</h2>

<ul>
<li>每一个 app 都有独一无二的挑战：你的 app 中会有许多自定义的代码，虽然已经有许多系统框架帮助你，但我们无法预测你需要做出多少改变，但一定会有。</li>
<li>做出改变：仔细思考过去写下的代码，适配新的生命周期，特别是适配多个 scene 的情景。</li>
<li>一遍一遍的测试：如果你有自动化测试，那很好，但即使通过，用户可能也会遇到 bug。找出问题最好的方式就是把玩你的 app，同时观察 app 的两个界面，快速找出问题。</li>
<li>更加注意多个 scene 的情景：因为现在不再只是一个界面，不再只有一个 view controller 的实例。</li>
</ul>

<p><img src="media/15699939059941/BE02A923-E955-4B4B-BF91-70399AFFCB89.png" alt=""/></p>

<h2 id="toc_6">参考链接</h2>

<ul>
<li><a href="https://developer.apple.com/videos/play/wwdc2019/212/?time=452">Introducing Multiple Windows on iPad - WWDC 2019 - Videos - Apple Developer</a></li>
<li><a href="https://developer.apple.com/design/human-interface-guidelines/ios/system-capabilities/multiple-windows/">Multiple Windows - System Capabilities - iOS - Human Interface Guidelines - Apple Developer</a></li>
</ul>

<blockquote>
<p>如果你觉得这篇文章对你有所帮助，欢迎请我喝杯咖啡，感谢你的支持😁</p>

<p><img src="media/14625521742746/15088240400740.jpg" alt=""/></p>
</blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[把 iPad 上的 app 带到 Mac 中去（下）]]></title>
    <link href="https://steppark.net/15699505035288.html"/>
    <updated>2019-10-02T01:21:43+08:00</updated>
    <id>https://steppark.net/15699505035288.html</id>
    <content type="html"><![CDATA[
<p><a href="15681304209417.html">把 iPad 上的 app 带到 Mac 中去的上篇</a>取材于 iOS HIG，从大的层面讲述了移植 app 到 Mac 中去的一些设计规范，取材于 WWDC session 的下篇将用更多的示例和图片主要围绕架构、工具栏、布局、排版、颜色、手势、触控栏、app 图标、情景化菜单、菜单栏菜单十个部分讲述更多移植的细节。</p>

<span id="more"></span><!-- more -->

<h2 id="toc_0">目录</h2>

<ul>
<li>
<a href="#toc_0">目录</a>
</li>
<li>
<a href="#toc_1">第一步：提供一个可靠的基础</a>
</li>
<li>
<a href="#toc_2">轻松实现</a>
</li>
<li>
<a href="#toc_3">交互模型和设计模式</a>
<ul>
<li>
<a href="#toc_4">架构</a>
</li>
<li>
<a href="#toc_5">工具栏</a>
</li>
<li>
<a href="#toc_6">布局</a>
</li>
<li>
<a href="#toc_7">排版</a>
</li>
<li>
<a href="#toc_8">颜色</a>
</li>
<li>
<a href="#toc_9">手势</a>
</li>
<li>
<a href="#toc_10">触控栏 Touch Bar</a>
</li>
<li>
<a href="#toc_11">App 图标</a>
</li>
<li>
<a href="#toc_12">情景化菜单</a>
</li>
<li>
<a href="#toc_13">菜单栏菜单</a>
</li>
</ul>
</li>
<li>
<a href="#toc_14">小结</a>
</li>
<li>
<a href="#toc_15">参考链接</a>
</li>
</ul>


<h2 id="toc_1">第一步：提供一个可靠的基础</h2>

<ul>
<li>你的 iPad app 应该支持自动布局功能，因为正如我们所知道的，Mac 的窗口可以被随意调整大小。</li>
</ul>

<p><img src="media/15699505035288/3E0EF2EE-1B7F-477B-94AB-93A04A11AC40.png" alt=""/></p>

<p><img src="media/15699505035288/7AE985AF-8E43-4DFA-B1CF-F2CF460000DD.png" alt=""/></p>

<ul>
<li>类似的，如果你的 app 支持拖放，你离出色的 Mac app 就更近了一步。我们期望 Mac 上的每一个东西都是可拖拽、可释放的。</li>
</ul>

<p><img src="media/15699505035288/1C1DBD6D-7BB2-4394-9527-1A77A8DECC27.png" alt=""/></p>

<ul>
<li>像拖放功能一样，iPad app 在独自的窗口可以打开文档的这种多窗口能力也期望在 Mac 中实现。如果你的 iPad app 支持多窗口功能，你将会在 Mac app 中自动获得这项能力。</li>
</ul>

<p><img src="media/15699505035288/DCFF1C21-15CB-4407-B810-262E094294D6.png" alt=""/></p>

<h2 id="toc_2">轻松实现</h2>

<p>为了把 iPad app 带到 Mac 上更简单，许多 iOS 的界面和交互会自动适配成等价的 macOS 的样式。</p>

<ul>
<li>iOS 的分隔视图（split view）会被绘制成 Mac 上的分隔视图（split view）；</li>
<li>系统提供的 UI 像是文件浏览器（file browser）和活动视图（activity view）会被映射到等价的样式；</li>
<li>iOS 上的编辑菜单（edit menu）和情景菜单（contextual menu）会被自动变成 Mac 上的情景菜单（contextual menu）；</li>
<li>复制和粘贴（copy and paste）、富文本编辑（text editing）、按键焦点（key focus）也同样轻松地转化到 Mac 上。</li>
</ul>

<p><img src="media/15699505035288/7EAFFD9A-D7AA-48D2-9484-D8883CC7F802.png" alt=""/></p>

<p>在上面这些例子中，iOS 和 macOS 之间的映射都是很直接的。然而，在 macOS 和 iOS 之间会有一些核心区别。设计一个适合每个平台的 app 需要理解和考虑到这些区别。最大、最关键的区别是 iOS 是根据触控来设计的，而 Mac 是根据键盘和鼠标输入来设计的。</p>

<p><img src="media/15699505035288/363C28FE-F2A1-4900-887D-E87865C8C0CD.png" alt=""/></p>

<p>为触控而设计包括提供一个更大、更容易操作到的触控目标，特别是在你到处走动时。在 Mac 上，使用触控板或者鼠标可以提供物理稳定性和更好的控制。因为光标很小，人们可以用更好的精确度瞄准和控制交互对象。</p>

<p><img src="media/15699505035288/A606DC32-0E90-4796-9512-1252677CD95D.png" alt=""/></p>

<p>更小的控件也允许 Mac 的 UI 拥有更大的信息密度、更好的控制密度。所有的 iOS 设备都支持像是拖动（pan）、旋转（rotate）、pinch（捏合）这些的多点触控手势。有一些 Mac 的配置没有多点触控输入方式。<br/>
所以如果你的 app 中的任何交互或者任何动作需要依赖手势输入才能被执行，你就必须为 Mac 寻找替代解决方案。</p>

<p><img src="media/15699505035288/EC3D9F6C-6E5C-4A85-A201-43D2E21C891D.png" alt=""/></p>

<p>当 iPhone 以竖直方向被我在手中时，把控件放在屏幕中间或者底部会让人们更容易触及到，对于横屏模式下的 iPad 也是这样。</p>

<p><img src="media/15699505035288/7599F2B0-B677-4C55-A33C-D5599A4AEA4E.png" alt=""/></p>

<p><img src="media/15699505035288/43E82221-2217-43A0-8A80-80EC82F88FCB.png" alt=""/></p>

<p>人们倾向于紧握住一边，所以把控件放在左边或者右边会让人们更容易操作到那里。明显的，人们在使用 Mac 时不会用手拿着设备，把控件放在屏幕底部或者左右边缘没有任何人体工程学的益处。屏幕的每一块区域都和其他区域一样容易被操作到。</p>

<p><img src="media/15699505035288/88CFF321-2DA0-4AA2-88B6-ED45552FD376.png" alt=""/></p>

<p>说到屏幕，你需要考虑你的 app 在 1x 非视网膜屏幕上的显示效果。特别关注那些文本中的图形，让它们看上去清晰可读。</p>

<p><img src="media/15699505035288/15AF0240-3617-48A0-AA01-E0F3FA4FBC41.png" alt=""/></p>

<h2 id="toc_3">交互模型和设计模式</h2>

<p>通过以上，可以基本理解触控设备和桌面电脑的不同。但不清楚的是在 iOS 和 macOS 之间的交互模型和设计模式具体有何不同。这些不同是成功把你的 iPad app 的设计转换到 macOS 上去的关键。</p>

<p><img src="media/15699505035288/3D91A241-345A-4BF8-B091-6723F028DB62.png" alt=""/></p>

<h3 id="toc_4">架构</h3>

<p>对于 app 的设计来说，没有什么比它的架构是怎样的还重要。一个有逻辑的、直观的 app 结构可以帮助人们发现他们寻找的，并且让导航更顺畅。iOS app 倾向于通过三种方式来组织结构。<br/>
有一些 app 使用 tab 来让信息分隔成几个一级的 tab；</p>

<p><img src="media/15699505035288/0B5ADA5B-C2FC-47B6-9207-3EB819AE9790.png" alt=""/></p>

<p>有一些 app 在 table view 中展示一个一级的列表；</p>

<p><img src="media/15699505035288/37DF3438-CE06-42B3-BBFC-237199ADFCC8.png" alt=""/></p>

<p>有一些基于文档的 app 在一级使用文档浏览器的 UI 样式。</p>

<p><img src="media/15699505035288/1C681933-1542-4EB3-8096-7B768A0CBC3B.png" alt=""/></p>

<p>你的 app 可以选中其中一种。简单的方法就是寻找最接近的 macOS 等价样式并使用它。<br/>
对于使用 tab 的 app，你可以在 Mac 的工具栏上使用分段控件（segmented control）。</p>

<p><img src="media/15699505035288/B18CA03F-506A-4972-A39E-897FAC569C32.png" alt=""/></p>

<p>如果你的一级导航是一个主列表，你什么都不用做，它将以同样的方式出现在 Mac 上。</p>

<p><img src="media/15699505035288/4B7AD3F3-D118-4B88-886E-648074AAC10C.png" alt=""/></p>

<p>文档浏览器 UI 样式的 app 也是同样如此。</p>

<p><img src="media/15699505035288/3F4315A1-0A82-49EE-A365-52AF569BFA68.png" alt=""/></p>

<p>从 iOS 到 macOS 上这种 app 结构的直接转换可能是正确的方法。它可以提供一个核心好处，对于那些已经熟悉你的 iOS app 的人们来说，你的 Mac 版本的 app 他们也会马上熟悉。<br/>
另一方面，你可能会错过一个简化导航的重要机会。在 Mac 上，边栏（sidebar）是一个重要的导航工具。它更容易承载大量的选项，这些选项可以被分组、被标签以帮助提供额外的情景信息、让它们更容易被用户看到。所以，如果你现在有一个 tab 样式的 app，你可以通过分段控件呈现这些 tab，也可以把它们放到边栏中。</p>

<p><img src="media/15699505035288/ECD95073-C476-4F4C-87A5-3E71787BB27A.png" alt=""/></p>

<p>下面这个 app 的转换看上去不太合适，因为只展示了四个选项，没有有效利用屏幕空间。但如果这四个 tab 有次级 tab，你可以把他们直接展示出来。这极大地扁平化了 app 的层级，允许人们可以直接在次级 tab 间移动。甚至可以允许用户根据需要自定义这些条目。</p>

<p><img src="media/15699505035288/CF8CDD74-751E-4940-9E85-52DA4F6FC54E.png" alt=""/></p>

<p><img src="media/15699505035288/311F9C30-859C-4D12-AFCE-B3BC51566B8A.png" alt=""/></p>

<p>如前面所看到的，如果你的 app 有一个一级的列表或者 table view 用来在不同部分间导航，直接转换它。分隔视图是在 Mac 上获得边栏的方式。你只需要开启半透明的背景就好。</p>

<p><img src="media/15699505035288/598E72D4-6D3B-4E46-A96A-56BF38288590.png" alt=""/></p>

<p>如果你的 app 在一级中展示了一个文档浏览的 UI 样式，你可以使用一个边栏提供对文件夹的永久访问或者展示已保存的搜索结果。</p>

<p><img src="media/15699505035288/1905ECCA-0BE3-4DBE-A434-95408735353E.png" alt=""/></p>

<p>如果你使用了边栏，这里有两点需要记住。第一点，边栏让人们可以访问 app 中或者文档集合中的某些位置，但并不意味着直接展示文档或者其它类型的内容。</p>

<p><img src="media/15699505035288/E9973874-84B7-4F53-A119-1EEC0EF0F14B.png" alt=""/></p>

<p>第二点，边栏在帮助用户理解哪个窗口或者哪个 app 拥有核心焦点时扮演了重要的角色。当当前窗口是活跃状态时，图形、选项高亮、边栏背景看上去是半透明的。当窗口变成不活跃时，这个效果就会消失。</p>

<p><img src="media/15699505035288/34FA6D83-1BA0-4F72-A7D1-EB0BDC9C803A.png" alt=""/></p>

<p>知道哪个窗口会响应键盘输入是非常重要的，为了支持这个效果，使用一个半透明的背景。</p>

<p><img src="media/15699505035288/9816F646-AEB6-447C-A67D-263B34933844.png" alt=""/></p>

<p>不要用固定的颜色或者图片填充边栏。对于选项高亮状态，使用系统选择的颜色而不是一个自定义的颜色或者 app 的主题色。</p>

<p><img src="media/15699505035288/258B58D3-2BE2-482B-A55A-F7C62358E7A8.png" alt=""/></p>

<p>通常情况下，你应该使用有虚化效果的模板图片（template image）而不是全色图片，除非真的有必要。</p>

<p><img src="media/15699505035288/16FE8C26-E25C-4409-AF15-F8F580872A5B.png" alt=""/></p>

<h3 id="toc_5">工具栏</h3>

<p>工具栏（tool bar）是 Mac app 中非常常见的地方，你可能想要在你的 app 中使用一个工具栏。把控件放在工具栏上可以让它们更容易被发现。也会创造一个更稳定的用户体验。</p>

<p><img src="media/15699505035288/CDB5C12A-92B3-4371-AA57-51129DC76359.png" alt=""/></p>

<p>工具栏可以创造一个从上到下的信息流，这也是 Mac app 的规范。</p>

<p><img src="media/15699505035288/026C5855-440A-40DE-B69D-7B90D5982596.png" alt=""/></p>

<p>如果你的 iPad app 有任何的操作始终位于屏幕底部，如果在 Mac 上也这样做就会有问题。Mac 的窗口是可拖动的，Mac 窗口的底部可能会拖到屏幕外部或者 Dock 下面，因此这会导致一些可用性问题。</p>

<p><img src="media/15699505035288/8C4BAE25-C92E-4244-9C60-2267700071B2.png" alt=""/></p>

<p><img src="media/15699505035288/2AA007FA-30E5-4244-B574-04349A7FCECB.png" alt=""/></p>

<p>当把操作放置在工具栏上时，记住一个工具栏的内容不会基于 app 现在处于的位置而发生变化。如果在 app 的某个位置某个动作不可用，它们可以被置于禁用状态。如果没有任何东西被选中而被可执行，那工具栏上的操作就是被禁用的。</p>

<p><img src="media/15699505035288/DBCF18DC-51E5-477B-ABE7-0117881AA8CC.png" alt=""/></p>

<p>如果某些动作只与 app 中的某些动作相关，它们可能不适合放在工具栏上。你可以在一个操作菜单（action menu）里提供情景化相关的操作，操作菜单里的操作可以基于当前视图或者选中项动态变化。</p>

<p><img src="media/15699505035288/92302C80-1970-4743-AED8-F19F33BF8774.png" alt=""/></p>

<p>例如，在 Finder 窗口中文件被选中，操作菜单会包括那些可以操作文件的操作；什么都没有选中时，操作菜单会包括那些操作当前文件夹的操作。操作菜单并不意味着包罗万象，所以选择好该放进哪些操作进去。</p>

<p><img src="media/15699505035288/E50D1441-26B5-4ECD-B027-140916DCB430.png" alt=""/></p>

<p><img src="media/15699505035288/B34FC50C-0A0F-47A3-AE1C-DC8EC884A7E2.png" alt=""/></p>

<h3 id="toc_6">布局</h3>

<p>Mac 的窗口比 iPad 大得多，你会拥有更大的空间进行发挥，特别是在全屏下。但要利用好所有的空间需要一个为 iPad 最优化的布局。</p>

<p><img src="media/15699505035288/F16E4FDC-F092-40AC-A1B2-647EF46DC814.png" alt=""/></p>

<p>一些 iPad app 的布局直接放大了 iPhone 的界面，在 iPad 上看上去很糟糕，在 Mac 上特别是在全屏下看上去更糟糕。</p>

<p><img src="media/15699505035288/D78650B6-17E6-4F3C-A8BE-B3EB2D771918.png" alt=""/></p>

<p><img src="media/15699505035288/714C40EE-CB4F-4631-BDAB-416189506F2D.png" alt=""/></p>

<p>为 iPad 和 Mac 最优化布局需要一些特别的考虑。对于两边的设备，可读内容边界可以让每一行文本不会太长以保持可读性。</p>

<p><img src="media/15699505035288/E588EC6F-8EF1-44E5-86DD-437CA11117CC.png" alt=""/></p>

<p>把内容切分成多列可能是最大化信息密度的一个好方法。</p>

<p><img src="media/15699505035288/DF3B3497-AC21-4AF0-9030-90A8FF90D880.png" alt=""/></p>

<p>使用分隔视图或者主要-详情视图是利用好更宽屏幕的好方法。分隔视图通过同步展示一系列对象和选中对象的详情来简化导航，这可以减少在 app 层级间不断进去出来的需要。如果在你的 app 中有一个分隔视图，不需要任何修改就可以在 Mac 中工作的很好。</p>

<p><img src="media/15699505035288/51F7A37D-ED1F-4935-A822-51368F74BF37.png" alt=""/></p>

<p><img src="media/15699505035288/D27038B1-E685-4CE3-A404-2CE52CB779CC.png" alt=""/></p>

<p>让你的 app 的布局在 Mac 上工作的很好可能是为 Mac 和 iPad 识别和解决布局问题的最好方式。</p>

<h3 id="toc_7">排版</h3>

<p>在 macOS 中，基准字体字号是 13pt，大多数的控件和文字标签都会是这个大小。而在 iOS 上，基准字体字号是 17pt。在 Mac 上展示一个 17pt 字号的 iOS app 会看上去不合适，文本会显得太大了。</p>

<p><img src="media/15699505035288/7A3673CC-9BF2-4663-B15C-AE0AA317B421.png" alt=""/></p>

<p>为了保持 Mac  app 之间的一致性，系统会缩放内容区域到原来的 77%。这意味着你不需要重新设计或者重新编码 Mac app。</p>

<p><img src="media/15699505035288/FFD152A4-07B0-4D28-AC01-A376206C902B.png" alt=""/></p>

<p>但是这样也会在设计上带来一些复杂度。当创建 iPad app 的原型时，你会想要重新创建 77% 缩放的样式。例如在 Photoshop 中，你可以把整个内容区域放进一个智能对象，并缩放到原来的 77%。同样的处理方式也可以在 Sketch、Adobe XD 或其他设计工具中实现。</p>

<p><img src="media/15699505035288/B92EBE77-3FEF-41B3-9A11-1CFD2613C2EB.png" alt=""/></p>

<p>在 macOS 中，app 倾向于只使用几个不同的字体字号。而在 iOS 中，文本样式更加动态多变。文本样式（text style）提供了非常多的字号选项。使用最小的字号如「footnote」、「caption one」、「caption two」会让文本在 Mac 上不易读。即使是 Mac 上的「mini」字体样式的字号也总是很小。所以你可能需要增大一些文本的字号以让其可在 Mac 上可读。</p>

<p><img src="media/15699505035288/9CD4A720-D260-48D4-9BF6-4ADDDB8428E8.png" alt=""/></p>

<p>还有最好一点需要注意，Mac 并不支持动态类型（dynamic type），Mac 会直接使用 iOS 上的「Large」样式，并将其缩放到 77%。</p>

<p><img src="media/15699505035288/5B61DF75-ED79-4E69-8A96-FBB9E70F4605.png" alt=""/></p>

<h3 id="toc_8">颜色</h3>

<p>在 iOS 中，颜色会被用来表示元素是可交互的或者高亮选中的条目，一些 app 还会用颜色绘制内容区域和栏的背景色。而在 Mac 上，事情有一点点不同。</p>

<p><img src="media/15699505035288/12CCA7D8-9B94-4C8C-84F8-2DADA49391B8.png" alt=""/></p>

<p>对于用户来说，同时打开有多个内容的多个窗口或者在桌面上打开多个文件或文件夹是非常普遍的。如果 macOS app 像 iOS app 一样大幅度使用颜色的话，用户体验就会支离破碎。</p>

<p><img src="media/15699505035288/D9122428-3FDB-47CF-AA65-316CB8C3B01C.png" alt=""/></p>

<p>Mac 的界面应该是更加中性的。它们不应该与呈现给人们的内容相竞争。同时半透明效果会让你的 app 与 Mac 生态系统融为一体。人们很喜欢自定义自己的 Mac 桌面壁纸，半透明效果会影响这些 app 的显示效果，给用户带去一种紧密结合的体验。类似的，在 Mac 上高亮颜色也是用户的一个偏好设置。如果你的 app 使用了一个不同的颜色去高亮选中的条目，这将会很不合适，并且对用户造成困惑。</p>

<p><img src="media/15699505035288/B2D1AE51-97C8-4B17-8D89-A42BA56DD001.png" alt=""/></p>

<p>在颜色使用上，iOS 其实也正在逐渐变得像 macOS 一样。通过多任务，多个 app 同时展示会变得越来越平常。一个一致的视觉外观可以提供一种统一的用户体验。通过深色模式，人们希望更好地控制 app 在设备上的显示样式。如果 app 不能相应用户的偏好设置，这会让用户觉得 app 离群了。</p>

<p><img src="media/15699505035288/D9B83CDA-BDE6-4A1E-A9AD-F45CDADB6ABA.png" alt=""/></p>

<p>描边颜色也在发挥着一部分作用，以前习惯于有一个描边颜色的 stepper 和 segemented control 在 iOS 13 中也变得更加中性。</p>

<p><img src="media/15699505035288/1810F930-21B8-4DAA-AC53-E67445D1CE47.png" alt=""/></p>

<p>你可能已经知道，iOS 13 上的系统颜色已经焕然一新（如果你还不知道，可以<a href="15681308995404.html#toc_2">点击这里查看 iOS 13 的系统颜色新变化</a>）。如果你在 iOS app 中使用这些颜色，它们会在 macOS 中的浅色和深色模式中被映射到对应的等价样式。</p>

<p><img src="media/15699505035288/39E6344F-127E-46B9-938F-CCEF5F5CC03F.png" alt=""/></p>

<h3 id="toc_9">手势</h3>

<p>iOS UIKit 中的手势将会自动映射成对应的鼠标或触控板事件。轻点会被映射成鼠标点击，长按会被映射成鼠标点击并按住，拖动会被映射成用鼠标拖动。滑动手势会被映射成在合适的方向拖动。在触控板上，可以实现捏合和旋转，但有一些小小的不同。在 iPad 上，捏合和旋转会使用触控点之间的中间点去控制对象或者旋转以及缩放。在 Mac 上，光标的位置会被用来达成这个目的。屏幕边缘滑动不会被映射到 Mac 上去。</p>

<p><img src="media/15699505035288/E9E17C4C-61CD-47D9-A12E-E373170D3B91.png" alt=""/></p>

<p>一些手势不会被转换到 Mac 中去，例如下拉滚动视图完成刷新的这个手势就不会很好地被转换到 Mac 中去。</p>

<p><img src="media/15699505035288/DAE4479A-77DA-4600-B7AA-3F1F1290B6C1.png" alt=""/></p>

<p>对于任何由手势输入触发的操作，你需要找到一个替代解决方案从而去执行相应操作，你可以使用许多栏菜单、情景化菜单或者工具栏上的按钮，抑或是上面的所有方法。<br/>
在 Mac 上你可以接收到鼠标 hover 事件，你可以利用这个去展示光标所在处的额外信息。例如，在「股票」app 中，你可以在 iOS 上通过长按股票图表显示特定时间点的价格，而在 macOS 中，鼠标悬浮在上面并滚动就可以查看不同时间点的价格。你应该利用好 hover 状态，这是一种对于人们很有用的不需要改变选择状态就可以获得信息的方式。</p>

<p><img src="media/15699505035288/55626D53-14BC-48C9-BA3F-3D4B0FD9B7B9.png" alt=""/></p>

<h3 id="toc_10">触控栏 Touch Bar</h3>

<p>你可以为你的 iPad app 在 Mac 上创建触控栏功能。触控栏是一个非常好的方式用于展示情景化信息，你可以基于人们在 app 的不同区域或者选择的对象显示不同的触控栏。大多数的触控栏组件和控件都可以使用。</p>

<p><img src="media/15699505035288/49F82C07-4B26-44AC-93F0-6C4FBAFC8A58.png" alt=""/></p>

<p>可以<a href="https://developer.apple.com/design/human-interface-guidelines/macos/touch-bar/touch-bar-overview/">在 macOS HIG 中查看触控栏的更多内容</a>。</p>

<h3 id="toc_11">App 图标</h3>

<p>Mac app 的图标是 app 的门面。它们帮助人们分清安装的成百上千的 App，它们会出现在许多地方，dock 栏、app switcher、Launchpad、应用程序文件夹等等。默认情况下，你的 iOS app 的图标是由一个一致的圆角矩形包裹着。在 Mac 上，一个微弱的投影会被应用到图标上以保持与其他 Mac app 图标的一致。你可以阻止这个行为或者重新创建一个新图标。</p>

<p><img src="media/15699505035288/9DBB1EB8-2525-40EA-BAEF-C86D324902B1.png" alt=""/></p>

<p>我鼓励你的重新创建一个新图标。因为 Mac app 的图标如此随处可见，它值得你重新创建一个。相比于 iOS app 图标，Mac app 图标有着更多的个性。它们不是简单的用圆角矩形包裹，Mac app 的图标有着独一无二的轮廓以和其他图标区分开来。即使在很小的尺寸下，这个轮廓也可以帮助用户区分不同的 app。</p>

<p><img src="media/15699505035288/743579BC-858D-494E-8104-563553347492.png" alt=""/></p>

<p>在 1x 显示器上，在 Finder 中的 app 图标只有 16 像素高和宽。在这个尺寸下，每一个像素都应该斟酌使用。在最小的 app 图标尺寸创建一个像素提示性图标是一个好主意。</p>

<p><img src="media/15699505035288/33CA7812-88FE-44D6-BB30-FE303BFE577C.png" alt=""/></p>

<p>Mac app 的图标会被创建的更像物理真实世界的物体，许多 Mac app 图标使用 3D 软件渲染而成，所以它们有着现实的光线效果和材料质地。</p>

<p><img src="media/15699505035288/6CD9367B-95DE-4BE1-B040-EBC058153E95.png" alt=""/></p>

<p>如果你想往这方面考虑，，可以<a href="https://developer.apple.com/design/human-interface-guidelines/macos/icons-and-images/app-icon/">在 macOS HIG 中查看关于相机角度和光源的更多指导</a>。</p>

<h3 id="toc_12">情景化菜单</h3>

<p>情景化菜单是 Mac 界面的无名英雄。它让人们知道一个对象可以执行什么操作。在 Mac 上，人们期望情景化菜单无处不在。所以从逻辑上来说，你应该将情景化菜单添加到各个地方。你 app 中的任何对象都应该有一个相关的情景化菜单，包括用户最常使用的操作。</p>

<p><img src="media/15699505035288/C61DC912-1D42-4185-B487-1464B9C05830.png" alt=""/></p>

<p>如果你为你的 iOS app 已经添加了情景化菜单，它将会自动转化为 Mac 的情景化菜单。对于编辑菜单也是这样。</p>

<p><img src="media/15699505035288/B23309D2-1B61-4EF2-8C98-9FF687480053.png" alt=""/></p>

<p>无论是为 iOS 还是 macOS 设计情景化菜单，你需要遵守下面这些基本准则。</p>

<ul>
<li>避免用太多选项淹没用户：太多的选项会让用户很难找到他想要找的操作，导致花很长时间去浏览，要将焦点放在最情景化、最相关的功能上；</li>
<li>保持简洁：一个单词的文字标签通常会很简洁。</li>
</ul>

<p><img src="media/15699505035288/C231B65F-96F2-433B-8ECC-1D4604B36799.png" alt=""/></p>

<ul>
<li>传达动作：当给文字标签命名时，使用动词或者动词词组表明操作被执行后的结果；</li>
<li>仔细排序：命令的顺序也很重要，把最重要的放在最上面，把相关的成组摆在一起；</li>
<li>使用分隔线成组：使用分隔线让命令间的关系更确切，把命令分组可以帮助人们快速跳过一系列与想要做的事不相关的命令；</li>
</ul>

<p><img src="media/15699505035288/AE1B8E42-089C-4329-9EED-EFFC62FD3FF5.png" alt=""/></p>

<ul>
<li>使用次级菜单管理菜单的复杂度：使用次级菜单可以控制菜单的长度、隐藏不相关的操作。次级菜单用一个箭头来表示。</li>
</ul>

<p><img src="media/15699505035288/EB608BD0-6EED-4B57-986B-D65D8A7A1ED4.png" alt=""/></p>

<h3 id="toc_13">菜单栏菜单</h3>

<p>每一个 Mac app 都有菜单栏，菜单栏是 Mac 体验的核心，可以追溯到 1984 年。菜单栏是让电脑容易使用的核心。你可以通过下面的练习来开始设计 app 的菜单栏：写下人们在你的 app 中可以执行的所有操作，记下哪些对象会被这些操作影响到。</p>

<p><img src="media/15699505035288/BA3C2D1C-CCF4-4A5F-AB11-B012B082FA2B.png" alt=""/></p>

<p>每一个在你 app 中的操作都应该出现在菜单栏中，这让人们更容易发现和给菜单选项分配键盘快捷方式。一旦你把所有的操作分好类，你需要找一个地方承载它们。macOS 包含一系列标准化菜单栏，如 app 菜单可以控制 app，文件菜单可以操作文件，编辑菜单可以操作内容或者文件中的对象，格式菜单可以对文本修改格式，查看菜单可以自定义窗口的外观，窗口菜单可以控制窗口，帮助菜单可以获取帮助。对于许多 app ，这些标准化菜单很有用。</p>

<p><img src="media/15699505035288/88D00C01-C823-4835-ACFD-EC9EAFD191FD.png" alt=""/></p>

<p>然而，有时候也需要提供额外的自定义菜单。如果在你的 app 中有一系列核心对象对应一系列操作，你应该考虑在一级添加一到两个自定义菜单。例如在「邮件」app 中，有两个主要的对象类型，邮箱和邮件，对于这俩对象有一系列对应的会被执行的操作，这些操作不会在其他对象上被执行，所以可以为这些对象添加对应的菜单栏菜单。</p>

<p><img src="media/15699505035288/0335D3BA-F5E9-492D-A44F-8E744E02BE2F.png" alt=""/></p>

<p><img src="media/15699505035288/F086DFF9-72B6-4E02-AFF9-0BE755ADC69E.png" alt=""/></p>

<p>另一方面，通过一系列工作流去组织操作也是很有帮助的。在 Keynote 中，有一系列不同的对象类型可以被添加到幻灯片中，对于它们可以执行一系列操作，如对齐、分布、锁定、成组、向前或向后移动。因为所有的这些操作影响这些对象的方式差不多，所以可以基于工作流把它们放在一个菜单中。</p>

<p><img src="media/15699505035288/C130D021-CCC8-41E2-890C-FDEAB004636B.png" alt=""/></p>

<p>一旦你决定了菜单栏中包含了哪些自定义菜单，你需要在其中创建菜单。上面讲到的关于情景化菜单的设计规范同样适用于设计菜单栏菜单。<br/>
补充一点，菜单栏菜单的结构应该是稳定的，在 app 运行后不应该再添加或删除菜单。像工具栏上的菜单一样，当菜单不可执行时可以设置为禁用状态。一个稳定的菜单栏系统会帮助人们搞清楚命令在哪里，即使这些命令现在不可用。当看到一个命令不可用时，这对人们来说也提供了有用的信息。</p>

<p><img src="media/15699505035288/87644479-1DAA-4A25-90F7-D668EF103B78.png" alt=""/></p>

<p>关于菜单栏还有一点，为常用命令分配键盘快捷方式。重度键盘用户会因此感谢你，在 iPad 和 Mac 上键盘快捷方式都可使用。当分配键盘快捷方式时，总是跟随惯例。你可以在 macOS HIG 中找到一个长长的列表写明标准键盘快捷方式。当使用一个从未用过的新 app 时，可以使用你早已熟悉的键盘快捷方式得到期望的结果。</p>

<p><img src="media/15699505035288/C486C364-7F63-4131-A5EE-B6CD16142A71.png" alt=""/></p>

<h2 id="toc_14">小结</h2>

<p>Mac 提供给你一个机会，让你的 app 更加强大、更加实用、更加有效率，但是这个机会同时也包含着一些需要深思的设计抉择，并且需要一些努力。</p>

<h2 id="toc_15">参考链接</h2>

<ul>
<li><a href="https://developer.apple.com/videos/play/wwdc2019/809/?time=1347">Designing iPad Apps for Mac - WWDC 2019 - Videos - Apple Developer</a></li>
<li><a href="https://developer.apple.com/design/human-interface-guidelines/ios/overview/ipad-apps-for-mac/#visual-design-considerations">iPad Apps for Mac - iOS - Human Interface Guidelines - Apple Developer</a></li>
</ul>

<blockquote>
<p>如果你觉得这篇文章对你有所帮助，欢迎请我喝杯咖啡，感谢你的支持😁</p>

<p><img src="media/14625521742746/15088240400740.jpg" alt=""/></p>
</blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[再说 iOS 和 macOS 深色模式]]></title>
    <link href="https://steppark.net/15681308995404.html"/>
    <updated>2019-09-10T23:54:59+08:00</updated>
    <id>https://steppark.net/15681308995404.html</id>
    <content type="html"><![CDATA[
<p>在 iOS 13 及之后的版本中，人们可以选择使用一种全局深色的外观，它就是深色模式（Dark Mode），这也是 <a href="15674389801268.html">iOS 13 设计最大的变化</a>。在深色模式中，系统对于所有的界面、菜单、控件都使用了深色色盘，也使用了更多的虚化效果（vibrancy）以使得与更暗的背景内容相比，前景内容能够更加显眼明亮。深色模式支持所有的辅助功能。</p>

<span id="more"></span><!-- more -->

<p>人们可以选择使用深色模式作为系统的默认界面样式，他们可以通过设置使设备在周围的灯光变暗时自动转换到深色模式。</p>

<ul>
<li>将焦点放在内容上：深色模式会把焦点放在你界面的内容区域，以让内容能够显眼，而周围的 UI 能够沉浸到背景中去。</li>
<li>在浅色模式和深色模式下都测试你的设计：观察你的 app 的界面在两种模式下是什么样子，根据需要调整设计。在一个模式下表现良好的设计在另一个模式下可能就会有问题。</li>
<li>当你调整对比度和透明度等辅助功能设置使，确保你 app 的内容可以在深色模式下保持舒服的可读性：在深色模式下，你应该测试在开启增强对比度和降低透明度功能时 app 的内容，包括单独开启时的测试和都开启时的测试。你可能会发现在一些深色背景上，深色的文本可读性会比较低。你也可能发现在深色模式下打开增强对比度会导致深色文本和深色背景之间的对比度。虽然具备正常视力的人们仍然能够阅读低对比度的文本，但这样的文本可能对于视力有损伤的人们就是不可读的。</li>
</ul>

<h2 id="toc_0">目录</h2>

<ul>
<li>
<a href="#toc_0">目录</a>
</li>
<li>
<a href="#toc_1">颜色</a>
<ul>
<li>
<a href="#toc_2">系统颜色</a>
</li>
<li>
<a href="#toc_3">动态系统颜色</a>
</li>
<li>
<a href="#toc_4">图片、图标、标志颜色</a>
</li>
<li>
<a href="#toc_5">文本颜色</a>
</li>
</ul>
</li>
<li>
<a href="#toc_6">材料</a>
<ul>
<li>
<a href="#toc_7">系统定义的材料和虚化效果</a>
</li>
</ul>
</li>
<li>
<a href="#toc_8">在 iOS 上实现 Dark Mode</a>
<ul>
<li>
<a href="#toc_9">颜色</a>
</li>
<li>
<a href="#toc_10">材料</a>
</li>
</ul>
</li>
<li>
<a href="#toc_11">iOS 的深色模式如何工作？</a>
<ul>
<li>
<a href="#toc_12">颜色</a>
</li>
<li>
<a href="#toc_13">图片</a>
</li>
<li>
<a href="#toc_14">Trait Collection</a>
</li>
<li>
<a href="#toc_15">深色模式 API 更新</a>
</li>
</ul>
</li>
<li>
<a href="#toc_16">在 macOS 上实现 Dark Mode</a>
</li>
<li>
<a href="#toc_17">参考链接</a>
</li>
</ul>


<h2 id="toc_1">颜色</h2>

<p>在深色模式的色盘中包括了更深的背景颜色和更浅的前景颜色，他们都经过了仔细的筛选，在保持两个模式下的一致性的前提下，也确保了良好的对比度。</p>

<ul>
<li>使用适配当前外观的颜色：语义化颜色，像是「背景颜色」，可以自动适配当前的外观。当你需要一个自定义颜色时，添加一个颜色集合（Color Set）资源到你 app 的资源目录中，指定浅色和深色模式下的颜色变种，这样就可以适配当前的外观模式。避免使用硬编码的颜色值或者不能适配的颜色。</li>
<li>在所有的外观下确保充足的颜色对比度：使用系统定义的颜色确保前景和背景内容间有合适的对比度比值。对于自定义颜色，以达到 7:1 的对比度比值为目标，特别是对于小的文本。</li>
<li>软化白色背景的颜色：如果你必须在深色模式中对于内容使用白色背景，选择一个稍微深一点的白色，以避免背景会打亮周围的深色内容。</li>
</ul>

<h3 id="toc_2">系统颜色</h3>

<p>iOS 根据深色模式或者浅色模式定义了以下系统颜色，这些颜色值可能随着不断的版本迭代发生变化，所以使用系统 API 去调用这些系统颜色。</p>

<p><img src="media/15681308995404/8BFF358A-9711-4A7B-A28E-3D7E8DF4961D.png" alt=""/></p>

<p>为增强可读性，系统颜色还有下面这些变种：</p>

<p><img src="media/15681308995404/AD034246-06F9-4778-A8B2-3CD176AAF6A0.png" alt=""/></p>

<p>iOS 13 还引入了六种不透明的灰色值，虽然会用到的地方很少，但可以方便你在半透明效果不好的地方使用。比如在元素相交或者重叠时，像是网格中的线或者 bar，这些地方使用不透明的颜色更好。通常情况下还是应该使用系统颜色。</p>

<p><img src="media/15681308995404/DD3BD49D-6045-41EE-B028-DCAD45AE2525.png" alt=""/></p>

<p>同样地，为增强可读性，有下列变种：</p>

<p><img src="media/15681308995404/593D3082-2E51-48A2-B12E-B7809DAE3343.png" alt=""/></p>

<h3 id="toc_3">动态系统颜色</h3>

<p>除了描边颜色，iOS 也根据语义对背景区域和前景内容提供了定义好的系统颜色，比如文本标签、分隔线、填充。这些颜色可以自动适配深色模式和浅色模式。<br/>
iOS 定义了两个系列的背景颜色：一个系列是「系统背景颜色」，另一个系列是「成组背景颜色」。每一个系列都包含了四个等级的变种以帮助传达信息的层级。通常情况下，在成组的 table view 上使用「成组背景颜色」，否则就使用「系统背景颜色」。</p>

<p>使用这两个系列的背景颜色，你可以通过下面这些方式使用不同的等级变种表现层级：</p>

<ul>
<li>在总体视图使用一级；</li>
<li>在位于总体视图上的成组的内容和元素上使用二级；</li>
<li>在位于二级元素上的成组的内容和元素上使用三级。</li>
</ul>

<p>对于前景内容，iOS 系统定义了下面这些颜色：</p>

<p><img src="media/15681308995404/6712CB33-87BD-47C8-8232-1F6BC110A11A.png" alt=""/></p>

<ul>
<li>不要重新定义动态系统颜色的语义化定义：为了给人们创造一致化的体验，确保你的 app 的界面在不同的情景下都表现得没问题，应该倾向于使用动态系统颜色。</li>
<li>不要尝试复制动态系统颜色：动态系统颜色可能基于不同的环境变量，随着版本的迭代发生波动。使用动态系统颜色去搭配系统颜色，而是创造自定义颜色去搭配系统颜色。</li>
</ul>

<h3 id="toc_4">图片、图标、标志颜色</h3>

<p>iOS 13 的系统使用了 SF Symbols，它可以在深色模式下保持美观。系统也使用了经过对浅色模式和深色模式都优化了的全颜色图片。</p>

<ul>
<li>在任何可能的地方使用 SF Symbols：使用了 SF Symbols 后，当你使用了动态颜色去给标志着色或者是增加了一层虚化效果时，标志都可以在两种模式下保持美观。</li>
<li>必要时，为浅色和深色模式分别设计独立的图形元素：在浅色模式中，图形使用中空的描边，而在深色模式中，图形使用实心填充的形状样式可能会更好。</li>
<li>确保全颜色的图片和图标显示没问题：如果在两种模式下看起来都不错，那就可以使用相同的资源。如果一个资源只在某个模式中显示没问题，那就修改资源或者为两种模式创建分别的资源。使用资源目录把两个资源组合成一个，命名成一张图片。</li>
</ul>

<h3 id="toc_5">文本颜色</h3>

<p>虚化效果可以使得深色背景上的文本保持良好的对比度。</p>

<ul>
<li>对于文本使用系统提供的文本颜色：系统提供的一级、二级、三级、四级文本颜色可以自动适配浅色和深色模式。</li>
<li>使用系统视图绘制文本输入框和文本视图：系统视图和控件可以使你 app 的文本在所有的背景下看起来都没问题，并且可以根据虚化效果的有无自动调整适配。当你可以使用系统提供的视图去展示文本时就不要自己单独绘制文本视图。</li>
</ul>

<h2 id="toc_6">材料</h2>

<p>iOS 提供了材料效果（materials，也可叫 blur effects）以通过一种半透明的效果在 app 中创造深度的感觉。材料效果可以让视图和控件既暗示了背景上的内容，又不分散前景内容的注意力。为了制造这种效果，材料允许背景颜色信息穿过前景的视图，同时也会模糊背景的情景以保持可读性。</p>

<p>当你使用系统定义的材料效果时，你的 app 的元素会在各个情景中看起来都很好，因为这些效果可以自动适配系统的浅色模式和深色模式。</p>

<ul>
<li>以系统使用的材料效果为指导：在任何可能的时候，比较具备相似功能的你的 app 的自定义视图和系统提供的视图，对其使用相同的材料效果。</li>
<li>利用好系统提供的文本、填充、图形、分隔线颜色：系统提供的颜色可以让这些元素在半透明的背景上看起来不错。</li>
<li>在任何可能的时候，使用 SF Symbols：当你使用动态系统颜色去给一个标志着色或者应用一个虚化效果时，标志可以在任何情景中都看起来不错。与之相对比，全颜色的图片可能不能与背景形成足够的对比度，在用在一个半透明背景的视图上时也可能不合时宜。</li>
</ul>

<h3 id="toc_7">系统定义的材料和虚化效果</h3>

<p>iOS 定义了你可以在指定的区域使用的多种材料，以控制前景内容和背景的视觉分隔。系统提供的材料包括浅色和深色两种变种，可以很好地匹配大多数背景。</p>

<p>为了让材料用在内容容器中，iOS 13 定义了四种不同透明度的材料：</p>

<ul>
<li>SystemUltraThinMaterial</li>
<li>SystemThinMaterial</li>
<li>SystemMaterial （默认）</li>
<li>SystemThickMaterial</li>
</ul>

<p>注意以下几点：</p>

<ul>
<li>在选择材料时考虑对比度和视觉分隔：在选择使用哪种材料与虚化效果组合时，没有绝对的规则。在做出选择时考虑下面这些方面：
<ul>
<li>更厚的材料可以在文本和其他元素间提供更好的对比度；</li>
<li>通过在背景中提供一个内容的可见提醒，不透明度可以帮助人们记住当前的场景。</li>
</ul></li>
</ul>

<p>iOS 13 也为文本、填充、分隔定义了虚化值，可以与每一种材料匹配良好。通过从背景颜色中抽样、修改饱和度，虚化使 UI 元素更亮或更暗。虚化的 UI 元素可以与材料融合得更好，并增强半透明效果。</p>

<p>文本和填充都提供了几种等级的虚化效果，分隔线只有一个等级。等级的名字表明了元素和背景间的相对对比度，默认层级有着最高的对比度，第四等级有最低的对比度。</p>

<p>除了第四等级，你可以在任何材料上对文本使用下面的虚化效果值。不推荐在薄和超薄材料上使用第四等级，因为对比度太低。</p>

<ul>
<li>label（默认）</li>
<li>secondaryLabel</li>
<li>tertiaryLabel</li>
<li>quaternaryLabel</li>
</ul>

<p>你可以在任何材料上对填充使用下面的虚化效果值：</p>

<ul>
<li>fill（默认）</li>
<li>secondaryFill</li>
<li>tertiaryFill</li>
</ul>

<p>iOS 为分隔线定义了一个默认的虚化效果值，它可以与任何材料上都匹配地很好。</p>

<ul>
<li>基于语义化含义选择虚化效果：避免混用这些效果，例如，不要给分隔符使用文本的虚化效果。</li>
</ul>

<h2 id="toc_8">在 iOS 上实现 Dark Mode</h2>

<ul>
<li>使用 iOS 13 SDK 以实现对深色模式的支持；</li>
<li>在系统提供的功能之外，自定义 app 的外表。</li>
</ul>

<h3 id="toc_9">颜色</h3>

<p>在过去，每一个 UI 颜色都只有一个值，现在 UI 颜色变成了动态的。当你在一个视图上使用动态颜色作为背景颜色或者文本颜色时，UIKit 会自动地使用正确的值，当模式发生变化时，会自动更新，所以你只需要设置颜色一次就好了。</p>

<p><img src="media/15681308995404/6648FFDF-7939-41CF-81E8-D228B1C466E5.png" alt="6648FFDF-7939-41CF-81E8-D228B1C466E5"/></p>

<h3 id="toc_10">材料</h3>

<p>在下面的例子中，背景中有一张图片，我想在上面添加一些模糊效果。首先创建一个 <code>UIBlurEffect</code>，并且指定样式为系统材料。然后创建一个 <code>UIVisualEffectView</code> ，并在这个 view 中使用前面创建好的样式。进一步确定这个 view 的尺寸和位置，把它放到背景图片上。</p>

<p><img src="media/15681308995404/F319C8FE-E980-4DA4-94E7-DA4344988C97.png" alt="F319C8FE-E980-4DA4-94E7-DA4344988"/></p>

<p>接下来可以在这个材料上添加一些虚化内容，虚化效果（vibrancy effect）可以让背景材料的一部分穿过。过去，这种效果只有一种样式，但现在有了多种样式：四种文本样式、三种填充区域样式、分隔线样式。我们创建一个 <code>UIVibrancyEffect</code> 并指定它的样式为「fill」，为了展示这个样式，我们创建另一个 <code>UIVisualEffectView</code> ，然后把它放进前面创建的 <code>UIVisualEffectView</code> 的「contenView」中。</p>

<p><img src="media/15681308995404/8F145E74-4C23-44A5-BC53-007BF0280B0D.png" alt="8F145E74-4C23-44A5-BC53-007BF0280B0D"/></p>

<h2 id="toc_11">iOS 的深色模式如何工作？</h2>

<h3 id="toc_12">颜色</h3>

<p>动态颜色可以在不同模式间自动切换，那颜色是怎么知道它是浅色还是深色的呢？这是通过「trait collections」来实现的。每一个 view 和 view controller 都有一个 trait collection，它可以帮助决定 view 的外观。</p>

<p><img src="media/15681308995404/44254C8A-15B2-431A-A523-525804C0C0C9.png" alt="44254C8A-15B2-431A-A523-525804C0C0"/></p>

<p>如果我们想解析某个特定的颜色，可以通过下面的代码实现：</p>

<pre class="line-numbers"><code class="language-swift">let dynamicColor = UIColor.systemBackground
let traitCollection = view.traitCollection
let resolvedColor = dynamicColor.resolvedColor(with: traitCollection)
</code></pre>

<p>当然你也可以通过代码创建自定义的动态颜色，具体代码如下：</p>

<pre class="line-numbers"><code class="language-swift">let dynamicColor = UIColor { (traitCollection: UITraitCollection) -&gt; UIColor in if traitCollection.userInterfaceStyle == .dark {
return .black } else {
return .white }
}
</code></pre>

<p>动态颜色可以直接像其他颜色一样被直接调用，它是怎样自动解析的？如果有一个动态颜色，我请求他的 RGB 值，它就会返回一个结果。这是通过 「UITrait Collection」 的「current」属性来实现的。</p>

<p><img src="media/15681308995404/6BD138EB-41BD-49CA-8FC9-47F4324197F7.png" alt="6BD138EB-41BD-49CA-8FC9-47F4324197F7"/></p>

<p>注意在 UIKit 之外，「current trait collection」不会有一个特定值，你需要自己去解析颜色。例如在像「CA Layer」、「CG Color」这种低等级的类就无法直接理解动态颜色。下面是示例代码：</p>

<pre class="line-numbers"><code class="language-swift"> let layer = CALayer()
 let traitCollection = view.traitCollection

// Option 1

let resolvedColor = UIColor.label.resolvedColor(with: traitCollection)
layer.borderColor = resolvedColor.cgColor
</code></pre>

<p>当需要调用的颜色比较多时，可以使用下面这种代码写法：</p>

<pre class="line-numbers"><code class="language-swift">let layer = CALayer()
let traitCollection = view.traitCollection

// Option 2
traitCollection.performAsCurrent { 
    layer.borderColor = UIColor.label.cgColor 
}
</code></pre>

<p>还有第三种写法，注意 trait 会发生变化的情况：</p>

<pre class="line-numbers"><code class="language-swift">let layer = CALayer()
let traitCollection = view.traitCollection

// Option 3 
let savedTraitCollection = UITraitCollection.current 

UITraitCollection.current = traitCollection 
layer.borderColor = UIColor.label.cgColor 

UITraitCollection.current = savedTraitCollection 

</code></pre>

<p><img src="media/15681308995404/8ED899D8-DC37-4D03-98D3-9156BDE0B5A6.png" alt="8ED899D8-DC37-4D03-98D3-9156BDE0B5A6"/></p>

<h3 id="toc_13">图片</h3>

<p>UIImageView 和 UIColor 一样会根据当前的 trait collection 决定显示哪一张图片。</p>

<p><img src="media/15681308995404/FC6F50C9-76EE-4265-92F2-E313C37659B8.png" alt="FC6F50C9-76EE-4265-92F2-E313C37659B8"/></p>

<p>但 UIImage 不会关注当前的 trait collection。如果你想自己解析某张图片，你可以通过下面的代码实现：</p>

<pre class="line-numbers"><code class="language-swift">let image = UIImage(named: “HeaderImage”)
let asset = image?.imageAsset
let resolvedImage = asset?.image(with: traitCollection)
</code></pre>

<h3 id="toc_14">Trait Collection</h3>

<p>来总结一下 trait collection 是如何工作的？它在深色模式中扮演着核心的角色。记住最重要的一点，trait collection 在你的 app 中不止一个。<br/>
Trait collection 贯穿了你的整个 app，从屏幕的根层级一直到窗口屏幕。当模式发生变化时，贯穿整个 app 的 trait collection 都会发生变化。</p>

<p><img src="media/15681308995404/355BBA61-A06A-488A-867D-F9F9C9655744.png" alt="355BBA61-A06A-488A-867D-F9F9"/></p>

<p>当 app 处于浅色模式时，你只想让 app 的某部分 UIView 或 UIViewController 处于深色模式，你可以通过下面的代码实现。</p>

<p><img src="media/15681308995404/4947BB9D-1BFB-4488-86BF-ED0D88173614.png" alt="4947BB9D-1BFB-4488-86BF-ED0D88173614"/></p>

<ul>
<li>UIViewController：</li>
</ul>

<pre class="line-numbers"><code class="language-swift">class UIViewController {
var overrideUserInterfaceStyle: UIUserInterfaceStyle
}
</code></pre>

<ul>
<li>UIView：</li>
</ul>

<pre class="line-numbers"><code class="language-swift">class UIView {
var overrideUserInterfaceStyle: UIUserInterfaceStyle
}
</code></pre>

<p>如果你想让整个 app 保持一种模式，你可以通过「Info.plist」的「UIUserInterfaceStyle 」去设置。</p>

<h3 id="toc_15">深色模式 API 更新</h3>

<p>在 iOS 13 之前的版本中，有两种样式的状态栏：「default」和「lightContent」；而在 iOS 13 中「default」样式会根据系统外观自动变化。同样的，「UIScroll」视图的「indicator」样式也发生了同样的变化。</p>

<p><img src="media/15681308995404/35D4E68F-037B-48AE-B8FD-BFC73F8F5677.png" alt="35D4E68F-037B-48AE-B8FD-BFC73F8F5677"/></p>

<p>对于 「UIActivityIndicatorView」原有的几种样式都被废弃。现在它们根据尺寸分成两种样式，颜色默认是灰色，在两种模式下都可以显示的很好，当然你也可以自定义颜色。</p>

<p><img src="media/15681308995404/01E17013-97BB-490A-BF71-359F9B37BEF2.png" alt="01E17013-97BB-490A-BF71-359F9B37BEF2"/></p>

<p><img src="media/15681308995404/93EBB456-8674-4891-A586-7322EC0EE0F2.png" alt="93EBB456-8674-4891-A586-7322EC0EE0F2"/></p>

<p>在绘制文本时，如果你是使用了「UILabel」、「UITextField」、「UITextView」，你只需要设置其中的文本颜色为「label color」就可以良好地适配不同外观。但如果你使用了属性字符串，那需要特别指定一个前景颜色。</p>

<pre class="line-numbers"><code class="language-swift">let attributes: [NSAttributedString.Key: Any] = [ 
    .font: UIFont.systemFont(ofSize: 36.0) 
    .foregroundColor: UIColor.label
]
</code></pre>

<p>对于 app 中出现的 web 内容，同样可以适配不同外观模式。</p>

<p><img src="media/15681308995404/C15FE592-0DA9-402B-A1E0-57A4B1962DA5.png" alt="C15FE592-0DA9-402B-A1E0-57A4B1962DA5"/></p>

<p>对于 tvOS 适配深色模式和将适配了深色模式的 iPad app 带到 Mac 上去：</p>

<p><img src="media/15681308995404/00C5F632-98DD-4233-973A-2B45BA6099AD.png" alt="00C5F632-98DD-4233-973A-2B45BA6099AD"/></p>

<p><img src="media/15681308995404/CB2740E2-9046-41DC-B866-02F7C42F3513.png" alt="CB2740E2-9046-41DC-B866-02F7C42F3513"/></p>

<h2 id="toc_16">在 macOS 上实现 Dark Mode</h2>

<p>待补充...</p>

<h2 id="toc_17">参考链接</h2>

<ul>
<li><a href="https://developer.apple.com/design/human-interface-guidelines/ios/visual-design/dark-mode/">Dark Mode - Visual Design - iOS - Human Interface Guidelines - Apple Developer</a></li>
<li><a href="https://developer.apple.com/design/human-interface-guidelines/ios/visual-design/color/#dynamic-system-colors">Color - Visual Design - iOS - Human Interface Guidelines - Apple Developer</a></li>
<li><a href="https://developer.apple.com/design/human-interface-guidelines/ios/visual-design/materials/">Materials - Visual Design - iOS - Human Interface Guidelines - Apple Developer</a></li>
<li><a href="https://developer.apple.com/design/human-interface-guidelines/sf-symbols/">SF Symbols - SF Symbols - Human Interface Guidelines - Apple Developer</a></li>
<li><a href="https://developer.apple.com/design/human-interface-guidelines/ios/visual-design/typography/">Typography - Visual Design - iOS - Human Interface Guidelines - Apple Developer</a></li>
<li><a href="https://developer.apple.com/design/human-interface-guidelines/accessibility/overview/color-and-contrast/">Color and Contrast - Accessibility - Human Interface Guidelines - Apple Developer</a></li>
<li><a href="https://developer.apple.com/videos/play/wwdc2019/214/">Implementing Dark Mode on iOS - WWDC 2019 - Videos - Apple Developer</a></li>
<li><a href="https://developer.apple.com/documentation/uikit/appearance_customization/adopting_ios_dark_mode">Adopting iOS Dark Mode | Apple Developer Documentation</a></li>
<li><a href="https://developer.apple.com/documentation/xcode/supporting_dark_mode_in_your_interface">Supporting Dark Mode in Your Interface | Apple Developer Documentation</a></li>
</ul>

<blockquote>
<p>如果你觉得这篇文章对你有所帮助，欢迎请我喝杯咖啡，感谢你的支持😁</p>

<p><img src="media/14625521742746/15088240400740.jpg" alt=""/></p>
</blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[把 iPad 上的 app 带到 Mac 中去（上）]]></title>
    <link href="https://steppark.net/15681304209417.html"/>
    <updated>2019-09-10T23:47:00+08:00</updated>
    <id>https://steppark.net/15681304209417.html</id>
    <content type="html"><![CDATA[
<p>当你把你的 iPad 上打造的 app 带到 Mac 中去时，你就给了人们一个机会可以在具备宽大的屏幕、杰出的原生表现和充足的本地存储的 Mac 上享受你的 app。</p>

<span id="more"></span><!-- more -->

<h2 id="toc_0">目录</h2>

<ul>
<li>
<a href="#toc_0">目录</a>
</li>
<li>
<a href="#toc_1">开始之前的准备</a>
</li>
<li>
<a href="#toc_2">针对 Mac app 考虑一些增强功能</a>
</li>
<li>
<a href="#toc_3">适配 macOS app 结构和导航惯例</a>
</li>
<li>
<a href="#toc_4">支持 macOS 的用户交互</a>
<ul>
<li>
<a href="#toc_5">键盘输入</a>
</li>
<li>
<a href="#toc_6">手势</a>
</li>
</ul>
</li>
<li>
<a href="#toc_7">把 app 的所有命令放到菜单中去</a>
<ul>
<li>
<a href="#toc_8">情景化菜单</a>
</li>
</ul>
</li>
<li>
<a href="#toc_9">视觉设计考量</a>
<ul>
<li>
<a href="#toc_10">布局</a>
</li>
<li>
<a href="#toc_11">颜色</a>
</li>
<li>
<a href="#toc_12">文字排版</a>
</li>
<li>
<a href="#toc_13">自定义图标和图形</a>
</li>
</ul>
</li>
<li>
<a href="#toc_14">偏好</a>
</li>
<li>
<a href="#toc_15">继续阅读</a>
</li>
<li>
<a href="#toc_16">参考链接</a>
</li>
</ul>


<h2 id="toc_1">开始之前的准备</h2>

<p>大多数的 iPad app 都适合这种改造，但是一些依赖 Mac 上没有的 iPad 功能的 app 可能就会有些问题。例如，如果你的 app 的核心功能是需要 iPad 的陀螺仪、加速剂或者是后置摄像头，亦或是想 HeathKIt、ARKit 这种 iOS 框架，又或者是 app 的主要功能是一些有关导航的事情，那这种 app 就不适合 Mac。</p>

<p>对于那些没有要求只在 iPad 上才有的功能的 app，确保你的 app 可以良好运行在 Mac 上的最佳方法就是确保这些 app 也可以在 iPad 上运行良好。特别地，你的 app 应该：</p>

<ul>
<li>支持多任务功能（multitasking）：那些运行良好的 app 在 iPad 上都会支持 Split View、Slide Over、Picture in Picture 功能以改变界面的大小，对这些功能的支持也使得 app 能够接近 Mac 用户期待的窗口可以随意调整大小的终极目标。</li>
<li>支持拖放（drag and drop）：当你在你的 iPad app 上支持拖放功能时，你的 app 就在 Mac 上自动获得了这项功能。</li>
<li>可以对键盘快捷方式，包括 macOS 通用的键盘快捷方式作出响应：即使一个键盘并不总是能操控你的 iPad app，但 iOS 和 macOS 用户会很希望使用键盘快捷方式来提供与 app 交互的效率。</li>
</ul>

<h2 id="toc_2">针对 Mac app 考虑一些增强功能</h2>

<p>当你使用 Mac Catalyst 去为 macOS 构建 iPad app 时，你可以自动获得 Mac 基础功能的支持，例如：</p>

<ul>
<li>系统偏好设置；</li>
<li>键盘、触控板、鼠标和触控栏的输入，包括按键对焦和键盘导航；</li>
<li>窗口管理；</li>
<li>富文本交互，包括复制、粘贴、情景化编辑菜单；</li>
<li>文件管理。</li>
</ul>

<p>额外的，许多系统提供的 UI 元素会从 iOS 自动地转移到 macOS。例如，你可以获得下面这些 iOS 项目的适合的 macOS 版本：</p>

<ul>
<li>Split view 分隔视图</li>
<li>File browser 文件浏览器</li>
<li>Activity view 活动视图</li>
<li>Form sheet 表单</li>
<li>Contextual actions 情景化操作</li>
</ul>

<p>为了确保你的 app 可以给用户一个丰富的 Mac 使用体验，增强这些基础，不仅仅是简单地在 macOS 窗口中展示 iOS UI 是非常重要的。在你深入下去更新这些特定的视图和控件之前，先熟悉平台之间的主要不同点，这样你就可以在 Mac 上创造十分合适的 app。</p>

<p>iOS 和 macOS 系统都根据用户使用设备的不同方式分别定义了设计模式和用户交互的惯例。例如，在 iOS 上有轻扫删除的管理，有在手持设备上为触摸屏最优化的 action sheet 命令和控件都会出现在屏幕底部的惯例。相似的，在 macOS 上有键盘快捷方式的惯例，有为键盘、鼠标、触控板交互和单独显示器最优化的菜单命令和控件都会出现在窗口顶部的惯例。</p>

<p>这些对适配有着最大影响的惯例和设计模式可以归纳为下面四个核心区域：</p>

<ul>
<li>导航：许多 iOS 和 macOS 的 app 通过相似的方式组织数据，但它们使用不同的控件和视觉标记帮助人们理解和在数据间导航。</li>
<li>用户输入和交互：虽然 iPad 和 Mac 都可以通过许多设备接收输入信息，例如屏幕多点触控、键盘、鼠标、触控板，但是可触摸的交互形成了 iOS 的惯例，而键盘和鼠标的交互形成了 macOS 的惯例。</li>
<li>菜单：Mac 用户对常驻的菜单栏非常熟悉，并且期望在菜单栏的菜单中找到所有的 app 命令。另一方面，iOS 并没有一个常驻的菜单栏，iOS 用户只会在 app 的 UI 中找到 app 的命令。</li>
<li>内容大小：在 iPad app 的 macOS 版本中的文本看上去会跟 iOS 一样，因为 SF 字体可以在所有的平台上使用。然而，在 iOS 上的基线字体尺寸是 17pt，而在 macOS 上最通用的字体尺寸是 13pt。为了确保你的 app 的文本和交互元素可以与 macOS 环境一致，iOS 视图会自动缩小到原来的 77%。</li>
</ul>

<p>除了适配 macOS 的交互和设计惯例，你还需要更新你的 app 的视觉设计和布局以利用好 Mac 更宽大的屏幕，并给 macOS 用户一个良好的使用体验。例如，你可能需要：</p>

<ul>
<li>把一列内容或者操作变成多列；</li>
<li>在主要内容旁边展示一个查看器 UI，而不是一个 popover；</li>
<li>同步展示你的 app 层级中的两个层级或者更多层级。</li>
</ul>

<p>理想情况下，从 macOS 设计惯例的角度查看 iPad app 也是一种改进 iOS 版本的方法。如果你想确保每一个版本都能与它的平台惯例保持正确，那就用这个机会重新审查你的 app 的设计。特别是如果你的 iPad  app 是从 iPhone app 发展而来的，重新仔细考虑你放置视图和控件的方法，看看这里是不是有地方可以更好地利用好 iPad 的大屏幕。</p>

<h2 id="toc_3">适配 macOS app 结构和导航惯例</h2>

<p>设计良好的 app 导航通过遵循平台的惯例反映数据的结构，为 app 的首要目标提供支持。为了帮助 macOS 用户在使用你的 app 时不会陌生，你需要把 iOS 的导航惯例翻译成 macOS 的等价惯例。</p>

<p>大多数的 iPad app 使用扁平的导航或者层级导航，有些 app 两种组合使用。扁平导航把功能区域或者数据分类作为同一等级的组展示，它们每一组都是始终可用的。例如，「音乐」和「应用商店」app 使用了扁平导航让用户可以始终访问最高层级的区域，例如资料库、为你推荐、浏览、今天、游戏。层级导航把信息以树状结构呈现，用户通过在每个视图中选择一个条目，直到抵达目的地。例如，在设置中人们可以通过「通用」→「键盘」→「文本替换」来自定义文本替换。</p>

<p>通常情况下，iPad app 使用下面这些 UIKit 控件来实现导航：</p>

<ul>
<li>Tab bar 标签栏：Tab bar 通过在屏幕底部的 bar 上始终展示一个最高层级的目录来支持扁平导航；</li>
<li>Page control 页码控件：一个 page control 通过在屏幕底部展示一系列的圆点来表明在多个扁平页面组成的列表中当前页面的位置。</li>
<li>Split view 分隔视图：一个 split view 可以通过在一级视图（或者叫主视图 master view）和二级视图（或者叫详情视图 detail view）展示条目或者功能来实现层级导航。当人们在一级视图中选择一个条目，分隔视图就可以在二级视图中展示与这个条目相关联的内容。</li>
</ul>

<p>将 iOS 上的 tab bar 转化成 macOS 的控件时需注意：</p>

<ul>
<li>如果你在 iPad app 中使用了 tab bar，考虑使用一个 segmented control 分段控件或者在一个分隔视图控制器中使用边栏背景样式：这两种样式与 Mac 上的窗口样式有着相似的导航惯例。为了在这些条目中选择，考虑下面这些要点：
<ul>
<li>一个分段控件和一个标签栏可以提供相似的交互，例如互相排斥的选择，所以一个分段控件可以作为直接适配的替换选择。一个分段控件对于在每个 tab 中没有很多层级的 iPad app 是理想的，因为它可以在一个 tab 中与一个边栏搭配发挥导航的作用。</li>
<li>一个边栏展示了一个顶级条目的列表，每一个条目可以包括一个子条目的列表。使用边栏可以让导航更流畅，因为你可以让用户在边栏中看到每个 tab 的内容。边栏对于展示不会经常改变的 app 特定的或者用户特定的分类是一个好的选择。例如，在「News」 app 的边栏中，即使人们可以改变每个分类列出的条目，但「订阅中」和「建议」分类就不会经常改变。</li>
</ul></li>
<li>你也可以在 app 中把分段控件和边栏组合使用。例如，你可能需要分段控件去容纳 tab，需要边栏去展示每个 tab 的内容。不管你怎么适配你的 tab bar，确保让用户可以通过 macOS 的查看菜单内，快速访问每个 tab 的内容。</li>
</ul>

<p>将 iOS 上的 split view 转化成 macOS 的控件时需注意：</p>

<ul>
<li>如果你在 iPad app 上使用了分隔视图，macOS 会自动将其转化成 Mac 版本的分隔视图：在两个平台上，主视图是呈现各种条目列表的好选择，例如在「邮件」应用中的邮箱列表，因为它可以既包含文本又包含图标，还支持排序和过滤功能。然而，如果你的内容层级超过两个层级，在主视图和当前详情视图之间的中间层级就会在 Mac 样式的窗口中看不见。为了确保人们可以沿路径返回，在工具栏上要包括一个后退按钮。</li>
</ul>

<p>将 iOS 上的 page control 转化成 macOS 的控件时需注意：</p>

<ul>
<li>如果你通过使用页码控件或者另一种方式来实现横向导航，给用户一个特定的控件可以查看页面：如果你支持这种样式的水平导航，你可以在 Mac 样式的窗口中通过在工具栏上展示一个「下一页/上一页」按钮或者在菜单栏的菜单中添加导航命令来帮助人们在页面间导航。例如，macOS 上的「股票」应用既在工具栏上展示了一个后退按钮，也在查看菜单中展示了下一个和上一个命令。</li>
</ul>

<p>对于多窗口要注意的点：</p>

<ul>
<li>如果你在你的 iPad app 中支持多窗口功能，那在 macOS 的版本中也会获得多窗口功能的支持。另外，许多 macOS app 让人们可以在新 tab 中打开新的文档或其他内容，而不是在新窗口中打开。例如，人们可以在 Safari 的窗口中的每个 tab 中打开不同的网页，在一个 Finder 窗口中的每个 tab 中打开不同系统路径的文件系统。当人们使用系统偏好设置去设定更喜欢 tab 而不是窗口时，系统会把相关的菜单条目动态地添加到 app 的菜单中去，例如「视图」→「显示标签栏和窗口」→「显示下一个标签」。</li>
</ul>

<h2 id="toc_4">支持 macOS 的用户交互</h2>

<p>「Selection persistence 持续保持选择状态」是 iOS 和 macOS 用户交互的基本不同。因为许多 macOS 用户期望只通过使用键盘来控制 app 和系统，对象的选择状态必须一直保持，人们才可以通过一连串的键盘敲击去选择一个对象，再通过一连串的敲击去执行对象。相对比的，iOS 用户期望执行一个对象时不需要选中它，所以对象没有必要一直保持选中状态。众所周知，iOS app 并不是为最优化的键盘交互而生的。</p>

<p>这里有一些方式，在这些方式中不同的交互惯例会影响用户体验：</p>

<ul>
<li> macOS 用户总是会想要「下一个」和「上一个」按钮来取代 iPad或者触控板的手势，例如在页面之间轻扫。</li>
<li>在一个 Mac 上，人们期望使用删除键和在菜单中选择删除命令，所以在 UI 中展示一个删除按钮通常是没必要的。</li>
<li>iOS 用户习惯于下拉页面刷新内容，相比的，Mac 用户期望使用一个菜单命令，例如「检查新内容」。</li>
</ul>

<p>当你把 iPad 的用户交互模式翻译成 Mac 的交互时，将聚焦点放在让用户通过遵循平台惯例的方式操作对象上。</p>

<h3 id="toc_5">键盘输入</h3>

<p>为支持键盘惯例做好准备，让用户可以通过使用方向按键或者按一个字母/数字按键来改变选择对象。<br/>
如果在你的 app 中可以实现，那就利用好 Mac 用户可以同时轻松使用键盘和鼠标或者触控板这一事实。<br/>
如果你在你的 iPad app 中通过实现 <code>UIKeyCommand</code> 去定义命令的键盘快捷方式，你 app 的 macOS 版本会把这些快捷方式翻译成菜单。例如，你应该把每一个主要的内容显示区域都映射成键盘快捷方式，例如每一个 tab 的键盘快捷方式就是「⌘1」、「⌘2」……并把这些快捷方式展示在你 app 的 macOS 版本中的查看菜单中。</p>

<p>如果在你的 iPad app 的 UI 中有一个删除按钮，那就考虑从 macOS 版本中移除这个按钮，让用户可以通过删除按键或者「编辑」→「删除」菜单完成删除操作。</p>

<h3 id="toc_6">手势</h3>

<p>当你的 iPad app 运行在 macOS 上时，大多数的手势可以被自动转换，例如：</p>

<p><img src="media/15681304209417/ED86E27E-3EFB-4525-89CB-768CBE116F96.png" alt="ED86E27E-3EFB-4525-89CB-768CBE116F96"/></p>

<p><img src="media/15681304209417/FF88D1DF-5D30-483B-A58B-618AE2FE4960.png" alt="FF88D1DF-5D30-483B-A58B-618AE2FE4960"/></p>

<p>注意：在 pinch 和 rotate 手势中的两个触摸点会被传送给光标下面的视图，而不是每个触摸点下面的视图。</p>

<h2 id="toc_7">把 app 的所有命令放到菜单中去</h2>

<p>在一个 Mac 上，屏幕顶部的菜单栏可以让那些控制 app 和系统的命令给用户一个始终如一的位置。除了 Apple 菜单列出的总是可用的系统层级的命令，菜单栏还包含由当前 app 提供的标准菜单和自定义菜单。Mac 用户期望每一个 macOS app 可以在菜单栏中显示所有的命令。</p>

<p>开发手记：你必须使用 <code>UICommand</code> 去代表 iPad app 上的每一个命令，因此这些命令才会被放进 macOS 的菜单栏的菜单中。为了让命令支持键盘快捷方式，使用 <code>UIKeyCommand</code>。</p>

<p>因为 iPad app 在主要的 UI 中使用控件去展示命令，为每一个 app 的命令找到一个有逻辑的、直观的菜单栏位置是适配过程的核心部分。</p>

<p>为了设计你的 macOS 版本的 app 的菜单栏菜单，从列出人们可以执行的所有动作开始，并把它们根据标准菜单栏菜单定义的分类分组。例如：</p>

<ul>
<li>app 名字；</li>
<li>文件 File；</li>
<li>编辑 Edit；</li>
<li>查看 View；</li>
<li>窗口 Window；</li>
<li>帮助 Help。</li>
</ul>

<p>注意：大多数的 macOS app 都包含「查看」和「窗口」菜单。虽然这俩菜单会有些相似，但是它们都有不同的目的。人们使用「查看」菜单去自定义 app 窗口的外观、在不同的功能区域之间移动；使用「窗口」菜单在 app 中的一系列窗口间导航、组织和管理这些窗口。</p>

<p>如果你的清单中某些动作放在标准菜单栏中的菜单中讲不通的话，你可能需要添加一个自定义菜单。Mac app 总是会为那些与核心 app 对象或者核心 app 工作流相关联的命令添加一个自定义菜单栏菜单。例如，在 macOS 中的「邮件」app 中，使用了「信息」和「邮箱」菜单列出了那些操作 app 基础对象的命令。同样的，「Keynote」app 使用了「排列」菜单列出了在幻灯片上与排列对象核心工作流相关的所有命令。</p>

<p>在你把 app 的所有动作都分组到菜单中后，你需要用一种讲得清楚的方法在每个菜单中排列这些动作。每一个标准菜单都定义了一个推荐动作排序，所以对你支持的动作按照这个顺序排列非常重要。例如，Mac 用户期望「文件」菜单会按下面这个顺序呈现：</p>

<ul>
<li>新建…</li>
<li>打开…</li>
<li>打开最近的文档</li>
<li>关闭</li>
</ul>

<p>在一个自定义菜单栏的菜单中，你应该根据重要性、使用频率或者你 app 中讲得清楚的其他机制排序这些动作。菜单栏菜单也可能包含子菜单和分隔线，以让动作按逻辑方式被分组。</p>

<p>当然，对于你的菜单中所有的常见命令支持键盘快捷方式也很重要，这样使用键盘的 Mac 用户和 iPad 用户都可以从中受益。除了为标准菜单条目创建键盘快捷方式，你也可以为自定义条目创建快捷方式。</p>

<h3 id="toc_8">情景化菜单</h3>

<p>情景化菜单可以帮助人们发现那些不需要打开菜单栏菜单就能在某个对象上执行的动作。如果你在 iPad app 上支持情景化菜单，系统会自动把它们转化为 macOS 版本的情景化菜单。</p>

<p>为了给 Mac 用户创造最佳用户体验，为支持情景化菜单寻找额外的空间。例如，如果人们可以在 app 中对一个对象执行一些常用的动作，那就添加一个列出这些动作的情景化菜单。你也可以对代表一个对象的视图添加情景化菜单，例如，在「Finder」中的文件夹对象就支持情景化菜单，其提供了像是「在新标签中打开」、「重命名」、「复制」这些动作。</p>

<h2 id="toc_9">视觉设计考量</h2>

<p>当运行到 macOS 上时，为了让你的 iPad app 也会看起来运行良好，仔细在下面这些视觉设计领域考虑平台间的不同。</p>

<h3 id="toc_10">布局</h3>

<p>Mac 用户期望将 app 的窗口大小从全屏一直调整到 app 允许的最小尺寸。为了支持这种无限可调整大小的类型，也是为了利用好 Mac 宽带的屏幕，那就使用「regular width」和「regular height」的 size class 尺寸等级，必要时考虑把窗口内容区域中的元素重新排列成并排排列。</p>

<ul>
<li>尽可能地适配一个从上到下的布局：macOS app 会把最重要的动作和内容放到靠近窗口顶部的地方。如果你的 iPad app 在工具栏或者导航栏上有控件，那么把这些控件放到 app 的 macOS 版本中的窗口工具栏上。</li>
<li>考虑把 iPad app 主要 UI 中的控件移动到 macOS 窗口中的工具栏上：当然，也把与这些控件相关联的命令列在 macOS app 的菜单栏的菜单中。</li>
<li>特别注意：在 macOS 中，工具栏上的按钮总是可见的，但当前的情景可能使这些按钮不可用。而在 iOS 中，工具栏上的按钮总是可用的，但当前情景可能没有工具栏。例如，如果你的 iPad app 只在一个 tab 中有工具栏按钮，那 macOS 版本的 app 中应在其他的 app 中也展示这个按钮，只不过要将其设置为不可用状态。为了避免让用户疑惑，在工具栏上使用一个「齿轮」按钮会更好，因为在尺寸按钮的菜单中的条目会根据当前 app 的选择发生变化。</li>
<li>从屏幕左边或者右边，重新放置按钮：在 iPad 上，把按钮放在屏幕的居中靠左或者居中靠右的位置上会帮助用户可以更容易点击，但是在 Mac 上，工程效率学的考虑不需要了。你可能想要把控件重新放在内容区域的顶部或底部，抑或是放在你 macOS app 窗口的工具栏上。</li>
</ul>

<h3 id="toc_11">颜色</h3>

<ul>
<li>在两个平台上使用系统的选中颜色：通常情况下，iOS 用颜色去给按钮描边着色、表明被选中状态，但是在 macOS 中，人们期望使用系统偏好设置去选择他们想要的被选中颜色和按钮颜色。</li>
</ul>

<p>为 iOS 背景所设计的动态系统颜色会自动映射成合适的 macOS 等价颜色，如下表所示：</p>

<p><img src="media/15681304209417/949C9F3A-A172-450C-8C05-4B9CDB62D23C.png" alt="949C9F3A-A172-450C-8C05-4B9CDB62D23"/></p>

<p>其他定义的语义化颜色，如系统颜色、文字标签颜色、分隔线颜色，会映射到相似名字的 macOS 颜色。</p>

<ul>
<li>不要在 tab rows 中给按钮着色：在你的 iPad app 中，你会通过着色表明那个在 tab rows 中的按钮是活跃状态，但是在 macOS 中，在 tab rows 中被着色的按钮会看上去不到位不合适。</li>
</ul>

<h3 id="toc_12">文字排版</h3>

<p>虽然系统提供的自动缩放功能可以让你在所有的平台上不需要指定不同的字体大小值，这个功能一般都有一个不错的结果，但在每一种情况下你可能不会得到最好的结果。</p>

<ul>
<li>确保 small 类型在 Mac 上是可读的：为在 iPad 上使用的一些最小字体尺寸做出增加做好准备，在 macOS 上的所有文本都应该保持可读性。当然，需要注意在 macOS 上不支持动态类型。</li>
</ul>

<h3 id="toc_13">自定义图标和图形</h3>

<ul>
<li>创建一个 macOS 版本的 app 图标：好的 macOS app 图标明显与好的 iOS app 图标不同。例如，macOS app 图标可以是非矩形形状，图标可以被歪曲或者旋转。默认情况下，macOS 会在 iOS app 的图标上增加一层投影，让其在 Mac 上更合适，但是最好是设计一个特定的 Mac app 图标。</li>
<li>如果有必要的话，创建平台特定的图形：如果你的 iPad app 使用了以某种方式提及了操作平台的自定义图形，那就需要创造一个新的适合于 Mac 的图形。Xcode 提供了一个分离的资源目录，你可以在 iPad app 中使用它存放特定的 macOS 图形。</li>
</ul>

<h2 id="toc_14">偏好</h2>

<p>如果你的 app 在 iOS 的「设置」中提供了 app 的设置选项，macOS 会自动在 app Mac 版本的偏好设置窗口中显示这些选项。默认情况下，macOS 会在偏好设置窗口中为 iOS 设置中的每个条目添加一个工具栏按钮，所以要给这些条目匹配一个标准的系统偏好设置按钮和标题。</p>

<p>正如 Mac 用户所期望的，当用户在你 app 的菜单中选择「偏好设置」菜单时你的偏好设置窗口就会出现。然而，这里有一些方法可以改进 app 设置条目的展示，让 app 的偏好设置体验更像 Mac：</p>

<ul>
<li>自定义每个条目的工具栏图标：因为 macOS 会对你的 app 的设置条目自动使用标准的系统偏好设置图标，人们就必须阅读每个工具栏按钮的标题以区分多个条目。为了改进这个体验，为每个设置条目提供一个自定义的图标。</li>
<li>让macOS 用户更容易理解开关控件：不像 iPad app，当用户在系统偏好设置中使用一个开关做出改变时，一个 macOS app 总是会展示一个确认弹窗。另外，在 iOS 设置中的开关可以展示一小部分的文本信息以告诉用户这个开关会如何影响用户体验。在 app 的 Mac 版本中，你可以与 macOS 开关一起提供一段简短的描述，你可以在用户使用开关改变设置时在确认弹窗中指定一段内容去展示。</li>
</ul>

<h2 id="toc_15">继续阅读</h2>

<p>本篇文章主要取材于 iOS HIG，从大的层面讲述了移植 app 到 Mac 中去的一些设计规范，<a href="15699505035288.html">点击这里继续阅读把 iPad 上的 app 带到 Mac 中去（下）</a>，下篇取材于 WWDC session，将用更多的示例和图片主要围绕架构、工具栏、布局、排版、颜色、手势、触控栏、app 图标、情景化菜单、菜单栏菜单十个部分讲述更多移植的细节。</p>

<h2 id="toc_16">参考链接</h2>

<ul>
<li><a href="https://developer.apple.com/design/human-interface-guidelines/ios/overview/ipad-apps-for-mac/#visual-design-considerations">iPad Apps for Mac - iOS - Human Interface Guidelines - Apple Developer</a></li>
<li><a href="https://developer.apple.com/videos/play/wwdc2019/809/?time=1347">Designing iPad Apps for Mac - WWDC 2019 - Videos - Apple Developer</a></li>
</ul>

<blockquote>
<p>如果你觉得这篇文章对你有所帮助，欢迎请我喝杯咖啡，感谢你的支持😁</p>

<p><img src="media/14625521742746/15088240400740.jpg" alt=""/></p>
</blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sign In with Apple 的设计准则和功能实现]]></title>
    <link href="https://steppark.net/15676959360699.html"/>
    <updated>2019-09-05T23:05:36+08:00</updated>
    <id>https://steppark.net/15676959360699.html</id>
    <content type="html"><![CDATA[
<p>在你的 app 或者网站上展示一个「Sign In with Apple」按钮意味着人们可以只通过他们已经拥有的 Apple ID 进行登录或注册，跳过填写个人信息、确认电子邮箱和选择密码的部分。Sign In with Apple 通过给用户一个一致的、他们可以信任的登录体验提供了一个全新的、更加隐私的方式以简化和加快登录 app 和网站的过程，也方便了用户不需要记住多个账户和密码。在你需要请求用户的名字和电子邮箱的地方，用户可以选择对他们的真实电子邮箱进行保密，而提供一个独一无二的、随机的、可收发邮件的电子邮箱地址。</p>

<span id="more"></span><!-- more -->

<p><img src="media/15676959360699/hero-lockup-large_2x.png" alt="" class="mw_img_center" style="display: block; clear:both; margin: 0 auto;"/></p>

<p>Sign In with Apple 让人们通过 Face ID 或者 Touch ID 完成授权变得简单，并且内建了两步验证以增加安全层级。Apple 不会通过 Sign In with Apple 的活动在 app 中收集用户的个性化资料和他们的具体活动。<br/>
Sign In with Apple 提供了反欺骗的特性，它可以通过机器学习和其他信息提供给开发者一个新用户是真实人类还是需要进一步观察的标志。</p>

<h2 id="toc_0">目录</h2>

<ul>
<li>
<a href="#toc_0">目录</a>
</li>
<li>
<a href="#toc_1">设计帐户注册和登录流程</a>
</li>
<li>
<a href="#toc_2">Sign In with Apple 按钮</a>
<ul>
<li>
<a href="#toc_3">白色</a>
</li>
<li>
<a href="#toc_4">带描边的白色</a>
</li>
<li>
<a href="#toc_5">黑色</a>
</li>
<li>
<a href="#toc_6">按钮尺寸和位置</a>
</li>
</ul>
</li>
<li>
<a href="#toc_7">实现 Sign In with Apple</a>
<ul>
<li>
<a href="#toc_8">纵览</a>
</li>
<li>
<a href="#toc_9">让 Sign In with Apple 与你的 app 结合</a>
<ul>
<li>
<a href="#toc_10">Button 按钮</a>
</li>
<li>
<a href="#toc_11">Authorization 授权</a>
</li>
<li>
<a href="#toc_12">Verification 鉴权</a>
</li>
<li>
<a href="#toc_13">Handling Changes 处理变动</a>
</li>
</ul>
</li>
<li>
<a href="#toc_14">跨平台</a>
</li>
<li>
<a href="#toc_15">Best Practices</a>
</li>
</ul>
</li>
<li>
<a href="#toc_16">Sign in with Apple 新的审核规范</a>
<ul>
<li>
<a href="#toc_17">App Store 审核规范</a>
</li>
<li>
<a href="#toc_18">网站和其他平台上的使用规范</a>
</li>
</ul>
</li>
<li>
<a href="#toc_19">参考链接</a>
</li>
</ul>


<h2 id="toc_1">设计帐户注册和登录流程</h2>

<ul>
<li>让用户登录只为了交互有价值的信息：例如，人们可能需要创建一个账户来让 app 可以提供个性化的体验、在 app 中访问额外的功能或者同步数据，如果你的 app 不需要基于账户的功能，那就不需要让用户登录。</li>
<li>在你的所有 app 和网站中考虑使用 Sign In with Apple：为了一个一致性的登录体验，推荐你在你 app 覆盖的所有苹果平台和网站上使用 Sign In with Apple。</li>
<li>登录的请求越往后越好：当用户还没做什么有用的事情就被强制登录时，人们可能会放弃使用 app。在向用户发出请求并让用户提供信息前给用户一个熟悉你 app 的机会。例如，一个流媒体播放 app 在需要登录播放内容前可以先让用户看看 app 提供了什么内容。</li>
<li>在任何可能的时候，直到用户要做出购买决定时再让用户创建账户：如果你的服务支持访客结算系统，在交易完成之后处理好结算过程，并可以给用户一个快速创建账户的机会。</li>
<li>向用户解释清楚登录的好处以及如何注册你的服务：如果你的 app 需要登录账户，那就在登录界面上给用户展示一个清晰友好的说明，描述清楚为什么需要登录以及登录的好处。还有，记住并不是每一个使用你 app 的人在一开始就有一个账户。</li>
<li>注册账户时只收集必要的信息：如果只是为了创建一个独一无二的用户标识符，那就不需要收集用户的名字和电子邮箱信息。</li>
</ul>

<h2 id="toc_2">Sign In with Apple 按钮</h2>

<p>为了帮助人们注册一个账户和登录账户，最好使用 Apple 为 Sign In with Apple 功能提供的熟悉的按钮。当你使用系统 API 创建 Sign In with Apple 按钮时，你可以获得下面这些好处：</p>

<ul>
<li>一个确保使用了 Apple 提供的标题、字体、颜色、样式的按钮；</li>
<li>确保了当你改变按钮样式时，按钮的内容可以保持合适的比例；</li>
<li>自动翻译按钮上的标题到用户设备设置的语言；</li>
<li>为了与你的 UI 样式匹配，对按钮圆角半径的调整的功能支持。</li>
</ul>

<p>Sign In with Apple 提供了两种按钮样式变种：「Sign In with Apple」 和 「Continue with Apple」。根据需要，选择最适合你的服务的登录场景的那种样式。</p>

<p><img src="media/15676959360699/1DE720CE-AB70-420C-821A-6854256DF6B2.png" alt=""/></p>

<p>对于 Sign In with Apple 按钮有三种外观：白色（White）、带描边的白色（White with Outline Rule）、黑色（Black）。根据你要展示按钮处的 UI 背景选择最适合的外观。</p>

<h3 id="toc_3">白色</h3>

<p>在可以提供足够对比度的深色或者彩色背景上使用白色外观。</p>

<p><img src="media/15676959360699/EDA18A96-D998-47A8-9813-3B599C3F32E5.png" alt=""/></p>

<h3 id="toc_4">带描边的白色</h3>

<p>在白色或者不能提供足够对比度的浅色背景上使用带描边的白色外观。不要在黑色或者太饱和颜色的背景上使用。</p>

<p><img src="media/15676959360699/9C16E913-90B5-40C0-8890-C91679BE5341.png" alt=""/></p>

<h3 id="toc_5">黑色</h3>

<p>在白色或者可以提供足够对比度的浅色背景上使用黑色外观。不要在黑色或者深色的背景上使用。</p>

<p><img src="media/15676959360699/15676962891072.jpg" alt=""/></p>

<h3 id="toc_6">按钮尺寸和位置</h3>

<ul>
<li>让 Sign In with Apple 按钮展示的显眼一些：让 Sign In with Apple 按钮和其他登录按钮具有相同的尺寸，避免人们需要滚动屏幕才能看到按钮的情况。</li>
<li>调整圆角半径以与 app 中的其他登录按钮样式相匹配：默认情况下，Sign In with Apple 有一个圆角半径。你可通过改变这个半径值让按钮变成矩形或者药丸形状的按钮。</li>
</ul>

<p><img src="media/15676959360699/FC92B3C7-DF00-48A7-8945-22ADEBFD921E.png" alt=""/></p>

<ul>
<li>保证最小按钮尺寸和按钮周围的边距：取决于不同的地区，按钮的标题长度可能会发生变化。使用下面推荐的指导值。</li>
</ul>

<p><img src="media/15676959360699/0E89E6BB-771B-4BA0-8E9D-87E545211E43.png" alt=""/></p>

<h2 id="toc_7">实现 Sign In with Apple</h2>

<h3 id="toc_8">纵览</h3>

<p>当用户点击 Sign In with Apple 按钮后，用户会看到一个根据你 app 要求提供的信息而填好了信息的表单显示在屏幕上，像是名字和电子邮箱。用户可以在提供原始电子邮箱或者一个新的由 Apple 提供的邮箱之间做出选择。当用户点击继续按钮后，就完成了登录。你的 app 也会获得一个独一无二、固定 ID、用户的名字以及一个可以让用户收到邮件的电子邮件地址，不再需要用户做收取验证邮件、点击验证链接这样的事。</p>

<p><img src="media/15676959360699/6295E671-AC96-4AC1-A3E1-FB19680E2845.png" alt=""/></p>

<p>当用户在一台新的设备上登录时，一个轻轻的点击就可以登录之前的用户并开始使用你的 app。</p>

<p><img src="media/15676959360699/CEF1061B-D667-459E-9C01-92E1A7AFF629.png" alt=""/></p>

<p>Sign In with Apple 为你的 app 提供了一套流线化的账户设置体验，不需要填写复杂的表格，只需要轻轻一点。用户从 App Store 使用他的 Apple ID 下载了 app，在 app 中也顺其自然地通过 Sign In with Apple 完成登录。开发者也获得了一个已验证并且可以让用户收到邮件的邮箱，即使用户隐藏了自己的真实邮箱，提供的新的邮箱收取的邮件也可以通过 Apple 的转发服务转到用户的真实邮箱，同样用户也可以使用这个新的邮箱进行邮件回复。</p>

<p><img src="media/15676959360699/FFFF6FC2-C3E9-4BCF-87D4-72D2B0037494.png" alt=""/></p>

<p>Apple 也可以在使用 Sign In with Apple 登录时，通过机器学习和其他获取的信息告诉开发者这个用户是真实的还是未知的。如果是真实的，你就不需要再判断，尽管给这个用户良好的使用体验，如果是未知的，那可能是一个真人用户，也可能是一个机器人。</p>

<p><img src="media/15676959360699/41E3B437-F2CF-4AD7-AB44-C8ADB1A1CD7E.png" alt=""/></p>

<p>Sign In with Apple 也是跨平台的，不仅可以在所有苹果平台上使用，也可以通过 JS API 在网站、Windows、Android 上使用。</p>

<p><img src="media/15676959360699/AC333E4F-9AEB-4AFE-A3BB-FBBB376EC0D9.png" alt=""/></p>

<h3 id="toc_9">让 Sign In with Apple 与你的 app 结合</h3>

<p>分成下图的四个部分：按钮、授权、鉴权、处理变动。先展示 Sign In with Apple 按钮，接着配置和执行授权的请求，在用户看到 Sign In with Apple 按钮并通过 Face ID/Touch ID 完成确认后，授权的结果会返回给 app。这时你需要与 Apple ID 服务器确认结果并在你的 app 中创建一个新用户。最后，凭据状态可能会发生变化，你的 app 需要处理处理好这些变化状态。</p>

<p><img src="media/15676959360699/28AD43B3-2C45-47AA-BCB9-5D98DE69EC5C.png" alt=""/></p>

<h4 id="toc_10">Button 按钮</h4>

<p>只需要几行代码，你就可以把 <code>AuthorizationAppleIDButton</code>  添加到你的 app 中。具体代码如下：</p>

<pre class="line-numbers"><code class="language-swift">// Add “Sign In with Apple” button to your login view

func setUpProviderLoginView() {
 let button = ASAuthorizationAppleIDButton()
 button.addTarget(self, action: #selector(handleAuthorizationAppleIDButtonPress),for: .touchUpInside)
 self.loginProviderStackView.addArrangedSubview(button)
}
</code></pre>

<h4 id="toc_11">Authorization 授权</h4>

<p>利用几行代码，你就可以初始化一个 Apple ID 授权请求。具体的代码如下：</p>

<pre class="line-numbers"><code class="language-swift">// Configure request, setup delegates and perform authorization request

@objc func handleAuthorizationButtonPress() {
 let request = ASAuthorizationAppleIDProvider().createRequest()
 request.requestedScopes = [.fullName, .email]

 let controller = ASAuthorizationController(authorizationRequests: [request])

 controller.delegate = self
 controller.presentationContextProvider = self

 controller.performRequests()
}
</code></pre>

<h4 id="toc_12">Verification 鉴权</h4>

<p>在授权后，app 如果鉴权成功会从凭据中获得一系列信息，如果用户中断了过程或者发生了错误需要有错误处理的逻辑。具体的代码如下：</p>

<pre class="line-numbers"><code class="language-swift">func authorizationController(controller _: ASAuthorizationController, didCompleteWithAuthorization authorization: ASAuthorization) {
 if let credential = authorization.credential as? ASAuthorizationAppleIDCredential {
 let userIdentifier = credential.user
 let identityToken = credential.identityToken
 let authCode = credential.authorizationCode
 let realUserStatus = credential.realUserStatus

 // Create account in your system
 }
}

func authorizationController(_: ASAuthorizationController, didCompleteWithError error: Error) {
 // Handle error
} 
</code></pre>

<p>对于凭据中的信息，userID 是一个独一无二、稳定的、团队范围内的用户识别符，你可以在不同的平台中使用它获取用户信息，它是与你的开发者账户绑定的。鉴权数据包括身份 token 和授权 code，token 的生命周期很短，可以与 Apple ID 服务器交换新的 token。可选的，系统还会返回你请求的账户信息，比如名字和电子邮箱。最后是一个之前提到的真实用户指示标志。</p>

<p><img src="media/15676959360699/59379B20-8BF4-4099-9581-36EC3EBA55F2.png" alt=""/></p>

<h4 id="toc_13">Handling Changes 处理变动</h4>

<p>你的用户可能会在你的 app 中停止使用 Apple ID 登录，可能会在设备中登出。授权服务框架提供了一个快速 API 供开发者获取相关状态。具体的代码如下：</p>

<pre class="line-numbers"><code class="language-swift">let provider = ASAuthorizationAppleIDProvider()
provider.getCredentialState(forUserID: &quot;currentUserIdentifier&quot;) { (credentialState, error) in
 switch(credentialState){
 case .authorized:
     // Apple ID Credential is valid
 case .revoked:
     // Apple ID Credential revoked, handle unlink
 case .notFound:
     // Credential not found, show login UI
 default: break
 }
}
</code></pre>

<p>NotificationCenter 也可以发出通知，告诉 app 用户的凭据状态已经失效。当失效时，在设备上退出登录，进一步可以引导用户重新登录。具体代码如下：</p>

<pre class="line-numbers"><code class="language-swift">// Register for revocation notification
let center = NotificationCenter.default
let name = NSNotification.Name.ASAuthorizationAppleIDProviderCredentialRevoked
let observer = center.addObserver(forName: name, object: nil, queue: nil) { (Notification) in
 // Sign the user out, optionally guide them to sign in again
}
</code></pre>

<p>用户使用 Sign In with Apple 在你的 app 中注册了用户，他可能还会在其他设备上使用你的 app 或者需要重新登录。当第一次进入 app 时，系统会告诉用户曾经使用 Apple ID 注册了用户，经过 Face ID 检查后就可以完成登录。</p>

<p><img src="media/15676959360699/06CFB432-1493-4EE4-82A7-C290BAE26ED2.png" alt=""/></p>

<p>同时，通过相同的 API，iCloud 钥匙串也可以实现此功能。你需要同时支持这两种登录请求。</p>

<p><img src="media/15676959360699/CD86686F-FB8D-4446-8966-DB9A2DD2309E.png" alt=""/></p>

<p>当用户已存在时，具体的代码如下：</p>

<pre class="line-numbers"><code class="language-swift">///Prompts the user if an existing iCloud Keychain credential or Apple ID credential exists.

func performExistingAccountSetupFlows() {
 // Prepare requests for both Apple ID and password providers.
 let requests = [ASAuthorizationAppleIDProvider().createRequest(),
 ASAuthorizationPasswordProvider().createRequest()]

 // Create an authorization controller with the given requests.
 let authorizationController = ASAuthorizationController(authorizationRequests: requests)
 authorizationController.delegate = self
 authorizationController.presentationContextProvider = self
 authorizationController.performRequests()
 } 
</code></pre>

<p>判断是通过 Apple ID 凭据登录还是 iCloud 钥匙串登录的具体代码如下：</p>

<pre class="line-numbers"><code class="language-swift">func authorizationController(controller _: ASAuthorizationController, didCompleteWithAuthorization authorization: ASAuthorization) {
 switch authorization.credential {
 case let credential as ASAuthorizationAppleIDCredential:
     let userIdentifier = credential.user
     // Sign the user in using the Apple ID credential
case let credential as ASPasswordCredential:
     // Sign the user in using their existing password credential
 default: break
 }
}
</code></pre>

<h3 id="toc_14">跨平台</h3>

<p>在浏览器中，你也可以通过 JS SDK 实现用户熟悉的登录窗口，通过输入 Apple ID 和密码完成登录。其 API 与原生的相似。</p>

<p><img src="media/15676959360699/BE69DE27-DFDC-4CAE-9C9B-792C936B1C0E.png" alt=""/></p>

<p>特别的，在 Safari 浏览器上，点击网页上的 Sign In with Apple 按钮会直接定向到一个原生的像 Apple Pay 一样的表单，用户可以通过 Touch ID 授权快速完成登录。</p>

<p><img src="media/15676959360699/C7FB9A8F-6382-4E42-9DB5-6609B56DF3B3.png" alt=""/></p>

<h3 id="toc_15">Best Practices</h3>

<p><img src="media/15676959360699/751B01C9-1E19-4A80-B841-B9332F298918.png" alt=""/></p>

<h2 id="toc_16">Sign in with Apple 新的审核规范</h2>

<p>2019 年 9 月 12 日 Apple 针对 Sign in with Apple 发出<a href="https://developer.apple.com/news/?id=09122019b">通知</a>，更新了 App Store 审核规范，提供了 app 什么时候该使用 Sign in with Apple 的标准。从现在开始，所有的新 app 必须遵守这个规范，对于已经存在的 app 和 app 更新的最后期限是 2020 年 4 月。对于在 web 上和其他平台上使用，Apple 也提供了相应规范。</p>

<h3 id="toc_17">App Store 审核规范</h3>

<p>对于仅使用了第三方登录或者社交登录服务（例如 Facebook 登录、Google 登录、Twitter 登录、LinkedIn 登录、Amazon 登录、微信登录）设置或者授权用户的主要账户的 app，必须也提供「Sign in with Apple」作为一个同等的选项。用户的主要账户是指他们在 app 中建立的用来识别他们自己、登录、访问某些功能和相关服务的账户。</p>

<p>Sign in with Apple 在下面这些情况中不是必须的：</p>

<ul>
<li>你的 app 只使用了你公司自己的账户设置和登录系统；</li>
<li>你的 app 是一个要求用户使用已有的教育或企业账户登录的教育、企业、商业 app；</li>
<li>你的 app 通过政府或者行业支持的公民身份识别系统或者电子 ID 来授权用户；</li>
<li>你的 app 是特定的第三方服务的客户，用户被要求登录他们的电子邮件、社交媒体或其他第三方账户才能访问他们的内容。</li>
</ul>

<h3 id="toc_18">网站和其他平台上的使用规范</h3>

<p>如果在你的已上架 App Store 的 app 中使用了 Sign in with Apple，我们推荐在任何相关的网站或者其他平台的 app 上通过调用 Apple JS 来提供 Sign in with Apple 功能。</p>

<p>在下面这些情况下，网站或者 app 可能不适合使用 Sign in with Apple：</p>

<ul>
<li>违反任何法律或者是在其他方面不能遵守任何法律要求的；</li>
<li>提供下面的服务或交易的：
<ul>
<li>香烟和烟草产品；</li>
<li>枪、武器或者弹药；</li>
<li>非法药品或者不合法的处方药品；</li>
<li>给用户造成安全风险的项目；</li>
<li>被用于参加非法活动的项目；</li>
<li>色情作品；</li>
<li>假冒或失窃商品。</li>
</ul></li>
<li>主要提供或出售毒品用具或者面向性的用品和服务；</li>
<li>宣扬基于种族、年龄、性别、性别认同、族裔、宗教信仰或性取向的仇恨、暴力或排斥；</li>
<li>参与任何类型的诈骗；</li>
<li>侵犯他人的知识产权、宣传权、隐私权；</li>
<li>以虚假或贬损的方式展示 Apple 和它的产品。</li>
</ul>

<p>除了允许用户自愿地设置一个账户和登录你的 app 或服务，不得通过 Apple API 为了其他目的使用 Sign in with Apple。</p>

<h2 id="toc_19">参考链接</h2>

<ul>
<li><a href="https://developer.apple.com/design/human-interface-guidelines/sign-in-with-apple/overview/">Sign In with Apple - Sign In with Apple - Human Interface Guidelines - Apple Developer</a></li>
<li><a href="https://developer.apple.com/videos/play/wwdc2019/706/">Introducing Sign In with Apple - WWDC 2019 - Videos - Apple Developer</a></li>
<li><a href="https://developer.apple.com/app-store/review/guidelines/#sign-in-with-apple">App Store Review Guidelines - Apple Developer</a></li>
<li><a href="https://developer.apple.com/sign-in-with-apple/usage-guidelines-for-websites-and-other-platforms/">Usage Guidelines for Website and Other Platforms - Sign in with Apple - Apple Developer</a></li>
</ul>

<blockquote>
<p>如果你觉得这篇文章对你有所帮助，欢迎请我喝杯咖啡，感谢你的支持😁</p>

<p><img src="media/14625521742746/15088240400740.jpg" alt=""/></p>
</blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[设计绝佳的 Siri 捷径 - Siri 捷径从设计到构建（中）]]></title>
    <link href="https://steppark.net/15707295333245.html"/>
    <updated>2019-10-11T01:45:33+08:00</updated>
    <id>https://steppark.net/15707295333245.html</id>
    <content type="html"><![CDATA[
<p><a href="15707294010250.html">上篇文章</a>通过一步步深入 SiriKit 的细节，讲述了 SiriKit 可以让 app 发挥的领域以及引出了 Siri 捷径的多种类型和各种设计规范。这篇文章将用一个实际的例子一步步地从细节上去设计 app 的 Siri 捷径。<br/>
通常情况下，Siri 捷径（Siri Shortcuts）是在 iOS 上把你的 app 的功能在更多地方带到更多用户面前的一个好方法。</p>

<span id="more"></span><!-- more -->

<p>来看一下你的 app 的捷径可能会出现的地方以从中获得有帮助的信息。当用户在你的 app 中做了什么事情，你告诉了系统，系统就可以预测用户下次想做那个动作时，自动建议这个捷径。这些捷径可以出现在锁屏和搜索中。<br/>
在下图中，这个捷径让你快速开始一个你平时会在一天中的这一刻进行的锻炼。</p>

<p><img src="media/15707295333245/07F3F2D2-2C9D-4D72-8FBF-11928334C00C.png" alt=""/></p>

<p>如果一个用户通过分配一个自定义词组，添加了一个捷径到 Siri，他们可以通过他们的声音在任何时候调起它。在这里，这个捷径让他们预订日常晚餐。</p>

<p><img src="media/15707295333245/FEC4C950-426D-44D6-94A4-DE03F935A843.png" alt=""/></p>

<p>另一个捷径配合 Siri 的应用是不需要操作、不需要看着就可以获取信息。对于你的 HomePod 来说，如果你有一个交通 app 的捷径，你可以说「公共汽车时刻表」，Siri 就会从 app 中读出公共汽车的时刻表信息。</p>

<p><img src="media/15707295333245/EE5ACB2B-D5F5-43CD-9AB8-2BA55B6E398B.png" alt=""/></p>

<p>你也可以让你 app 的功能作为一个多步骤捷径的一部分。在这里，这个捷径控制了你晚上回家时的行动安排，在到家时预订汤，开车时播放喜欢的音乐并展示最快的路线。</p>

<p><img src="media/15707295333245/409B0CA5-33D3-4E12-8DE7-5D0E0D0E33C2.png" alt=""/></p>

<p>所以，看看这些例子，我们可以看到捷径可以加速你 app 频繁使用、有用的动作。呈现可以看一眼就获得的信息或者使用你的声音或者作为强大的多步骤捷径的一个部分，你的 app 可以与其他 app 一起配合工作。</p>

<p><img src="media/15707295333245/D577DE1C-C885-4AFF-8B3B-55020A90EAC5.png" alt=""/></p>

<p>这篇文章将会聚焦于如何让捷径利用好 iOS 13 新的 Siri 能力。</p>

<h2 id="toc_0">目录</h2>

<ul>
<li>
<a href="#toc_0">目录</a>
</li>
<li>
<a href="#toc_1">选择功能</a>
</li>
<li>
<a href="#toc_2">发现捷径</a>
</li>
<li>
<a href="#toc_3">设计交互</a>
</li>
<li>
<a href="#toc_4">总结</a>
</li>
<li>
<a href="#toc_5">参考链接</a>
</li>
</ul>


<h2 id="toc_1">选择功能</h2>

<p>首先，来看看如何优选 app 的功能以利用好 Siri 捷径。为了实现它，我们以一个名字为「SoupChef」的 app 为例，它可以让你预订各种各样的汤品，你可以选择自取或者送货上门。来看下创造一个 SoupChef 的捷径的设计过程。</p>

<p><img src="media/15707295333245/9EB52C2A-FEDB-427A-9B4B-DC3220846CD6.png" alt=""/></p>

<p>先列出 app 能做到的所有事情。当做完这个时，开始想想一个用户可能会重复用声音去做的事情。在 SoupChef 中，你可能会像浏览汤的菜单、定一个汤、检查订单状态或者查看过去的订单。</p>

<p><img src="media/15707295333245/88642D60-5B20-449F-B7E7-213028D9B215.png" alt=""/></p>

<p>让我们一个个来看下这些功能。<br/>
浏览菜单一个需要许多结构信息且不能很好地翻译成声音的视觉活动。它需要滚动、点击、导航。随着一次次调用，它提供的信息可能不会经常改变。它更像是一个结束，而不是一个有价值的动作。所这个功能可能不适合作为一个捷径。</p>

<p><img src="media/15707295333245/BEAC4115-2CCC-4789-B821-4C1620CF087F.png" alt=""/></p>

<p>检查用户状态可能是用过想通过声音触发的功能，从 Siri 中获得一个快速的信息总结。但是它也是只在用户预定完后的很少的时间才能够用得到。所以，这个可能只在送餐时间很长时时或者有多个阶段时，才合适让用户转化其为一个捷径。</p>

<p><img src="media/15707295333245/EFC60645-B0B4-4343-BEEC-47F9A85DB673.png" alt=""/></p>

<p>查看过去的订单也是一个可以考虑的功能，但是对于我来说，我并不会经常去查看。所以也不适合作为一个捷径。</p>

<p><img src="media/15707295333245/65EAF3B6-1146-4443-93A9-27AACE1ABB94.png" alt=""/></p>

<p>预定汤品是一个非常有价值的活动。实际上，也是你的 app 中最重要的活动。如果一个用户有一个最喜欢的汤品，你可以想象得到他会经常订购它。所以，我们可以把它作为捷径的最佳候选人。</p>

<p><img src="media/15707295333245/E190A5C1-A686-461A-BCAA-262EA2489611.png" alt=""/></p>

<p>总结一下，一个可以好好利用的解决应该是有价值的或者说可重复的，它可以不依赖视觉和点击只通过声音就能完成，它可以在许多场景中被调起，因此捷径可以不只是在很短的窗口时间内才会被用到。</p>

<p><img src="media/15707295333245/755FC845-C21B-4FA9-B83A-4B4854103330.png" alt=""/></p>

<h2 id="toc_2">发现捷径</h2>

<p>现在，我们已经知道了我们想要用户通过捷径能够重新订购汤品，我们进一步来看看如何让这个捷径在你的 app 中可被发现。<br/>
我们提供了一个标准的「添加到 Siri」按钮，这让用户容易看到 app 中哪个功能可以被转化成为一个 Siri 捷径。</p>

<p><img src="media/15707295333245/681518EA-8983-4E77-8A19-78A4C64E7941.png" alt=""/></p>

<p>但注意使用时仔细思考一下，不要像下图这样，把添加到 Siri 按钮放到你的主菜单的每一个条目上。即使按钮本身再漂亮，像这样重复使用也很难看，而且在这里相关性也不足，用户不太可能在第一个开始的地方就尝试下订单，并且这些按钮挡住了路，有些条目可能是用户之前根本没订购过的，目前建议他们重新订购毫无意义。</p>

<p><img src="media/15707295333245/7111E8E9-0D0A-42C2-9459-3E71459C535D.png" alt=""/></p>

<p>解决方案是寻找你可以把它放置在一个聚焦一些的 UI 的地方的机会，在那里你会得到一个清晰的信号，用户可能想要重复做些什么事情。例如，在用户订购完什么东西之后展示一个添加到 Siri 按钮可能会更好。这里的逻辑是，如果一个用户发现之前订购的汤品很不错，那他就更可能想要再次订购。而且在这里，你也没有打断用户任何想要做的事，因为它们已经订购完成，所以这是一个好机会。</p>

<p><img src="media/15707295333245/B024DCF8-B73F-496D-978F-845319F66830.png" alt=""/></p>

<p>为了让添加到 Siri 按钮更适合你的 app 的视觉外观，你可以自定义按钮的圆角半径。你可以基于用户的浅色模式或深色模式设置自动让按钮的外观变化。</p>

<p><img src="media/15707295333245/D084F4F4-1BC5-4FE0-AC7B-B17CF93E0A4F.png" alt=""/></p>

<p>如果上面说的这些变种还是不能满足你的要求，按钮的样式始终不适合你的 app，你可以自己创造一个，但你应该重复添加到 Siri 按钮的所有功能。标准的添加到 Siri 按钮在配置好后会展示用户设置的捷径短语。这是一个提醒用户他们可以说什么来运行捷径的好方法。</p>

<p><img src="media/15707295333245/8A324F6C-3AB5-4EEE-9D44-7942003A287D.png" alt=""/></p>

<p>点击按钮会显示一个标准的模态窗口，它允许用户编辑或者删除捷径。</p>

<p><img src="media/15707295333245/2D908AA2-1903-4D7E-A044-6CE9E4011FAA.png" alt=""/></p>

<p>如果你想在你的 app 中有一个集中的位置列出所有的你的捷径，那就可能因为太多而不能在每行都显示添加到 Siri 按钮，所以解决方案是使用标准的 UIKit 元素就好。只要确保当一个用户设置了一个捷径后，像添加到 Siri 一样，你应该展示用户为捷径设置的那个短语。点击按钮也会弹出一个模态窗口，同样地可以编辑或者删除捷径。</p>

<p><img src="media/15707295333245/C7B94070-A537-43ED-BB46-EF82DB7C0181.png" alt=""/></p>

<p>假如用户第一次设置捷径，当用户点击添加到 Siri 按钮后，他们会看到添加到 Siri 模态窗口，在这里用户可以选择哪个短语用来触发捷径。在 iOS 13 中，你的 app 可以预置一个你自己选择的捷径。如果你提供了短语参考，大多数用户将可能会直接用那个，所以确保你提供了一个好的默认短语。在上面的例子中，「预定汤品」是一个好的、简短的、可以记住的短语，用户可能想要由衷地用作捷径的短语。</p>

<p><img src="media/15707295333245/212ECE72-FCDF-4D04-8FD1-9ED3B1CFB0A3.png" alt=""/></p>

<p>来看另一个例子，「检查公共汽车时刻表」。这看起来像是一个明智的短语，考虑到它相对比较短，这里有充足的机会用户可能会忘记某个单词或者换掉某个单词，他们可能会说「查看公共汽车时刻表」或者是「35 路公共汽车时刻表」。虽然 Siri 可以尽可能地把这些与短语匹配，但用户仍可能在想到更长的短语时有更多的创意。所以，这可能不是一个最好的建议的短语。</p>

<p><img src="media/15707295333245/410ECFFB-2756-4FA8-8CF4-F1474CC0B41F.png" alt=""/></p>

<p>解决方案是，让它足够简短，只需要三两个词语，尝试把它限制到一个合适的名词内或者是一个动词、一个对象。这会减少用户打乱单词顺序或者使用不同的介词的机会。</p>

<p><img src="media/15707295333245/8F0037E4-E0ED-4037-9151-0CDDEA93397F.png" alt=""/></p>

<p>一个用户想要设置一个捷径用来订购西红柿汤，但是如果用户想要捷径每次做的事都不太一样该怎么办，比如订购一个不同的汤品。在 iOS 13 中，用户可以点击执行命令下的具体动作并且通过点击每一个选项来自定义多少信息被预置到捷径中。</p>

<p><img src="media/15707295333245/9D404CC5-CFCB-44F0-B766-C582EBEB49C2.png" alt=""/></p>

<p>用户可以选择让某些选项置空，比如汤的类型。当用户这样做的时候，Siri 会向代表 app 向用户询问缺失的信息。</p>

<p><img src="media/15707295333245/1B99D5A3-8EC6-45AB-876C-466874D29F0B.png" alt=""/></p>

<p>现在，理想情况下一个捷径会有比较少的交互。毕竟，它应该为用户经常要做的事情提速。所以当你呈现添加到 Siri 模态窗口时，内置的动作应该包括尽可能多的信息，以让运行捷径时只需要一两个点击就能完成。在下面图示的例子中，这个捷径可以直接到最后的确认步骤，因为一切都已经指定好了。</p>

<p><img src="media/15707295333245/35CEB392-CF2A-4B98-998F-2839C5B11ABC.png" alt=""/></p>

<p>但如果用户让每一个选项都置空，想通过 Siri 的交互指定所有的订单细节会怎样？让我们来看看我们如何设计一个完整的通过 Siri 订购汤品的交互。</p>

<h2 id="toc_3">设计交互</h2>

<p>先考虑一下为了订购汤品你需要知道什么信息？比如汤品的类型，是自取还是送货上门，如果选择送货上门送达的位置是什么？如果选择自取你要何时在哪里自取？</p>

<p><img src="media/15707295333245/B625BE99-B8E1-4A77-84A0-F0E2981FC563.png" alt=""/></p>

<p>要开始考虑订单和你可能收集这些信息的方法，你应该把你 app 的交互看做是你的用户和 Siri 之间的一个对话。一种视觉化这种对话的方式是使用脚本，这对快速记下一段对话的路径很有用。</p>

<p><img src="media/15707295333245/16022B77-4DD1-493F-8464-65B2F9706F8D.png" alt=""/></p>

<p>当然，这里不会只有一条路径，你应该写下所有对话可能去的路径。例如，一个用户说了一个你的 app 没有提供的选项，这时 Siri 应该告知用户这个情况。</p>

<p><img src="media/15707295333245/585DB1F9-64D0-4CE9-904E-46ED232DDFE2.png" alt=""/></p>

<p>准备许多脚本作为设计规范可能不灵便，所以在过程的结束，你可能需要通过一些这样的形式来结束：一个包含所有对话中可能的状态和转换的流程图。现在这里有一些特别的方式让 Siri 可以呈现选择、处理用户输入，我们直接来看你拥有并可以直接使用的对话模式。<br/>
第一个模式是「提示」，这个是你从用户那里收集有价值的信息最开放的方式。</p>

<p><img src="media/15707295333245/48CFCA30-2965-4100-8405-FB3232ED2B56.png" alt=""/></p>

<p>你应该把提示写作一个问题，组织好用词以让用户可以有好的反应。当一个用户说了对 app 意味着多重含义的事情时，你可以呈现一个选项列表让用户确定他们说的是哪一个，这叫做消除歧义提示。</p>

<p><img src="media/15707295333245/14AA0D8C-A43E-4F2C-B4E5-E25626F6FF8E.png" alt=""/></p>

<p>你也可以最小化消除歧义提示，通过更早地呈现选项列表在对话中添加额外的步骤。注意用户说了捷径短语「订购汤品」，直接看到了列表，如果这里只有有限的几个选项可以选择的话，你应该使用列表而不是自由形式的提示。确保你的提示对话可以鼓励用户从列表中做出选择。以词语「哪一个」开头的问题在这里就效果很好。</p>

<p><img src="media/15707295333245/03CE27E8-7B22-469A-87B3-F534BDE1977B.png" alt=""/></p>

<p>当在没有显示屏的情况下使用捷径时，Siri 会把选项读出来，像是在使用 AirPods 时或者 在 HomePod 上或者当用户使用「Hey Siri」时，Siri 会直接把提供在视觉 UI 中的选项读出来。</p>

<p><img src="media/15707295333245/A768FB7D-943B-485D-9F98-524571975E81.png" alt=""/></p>

<p>但你可以想象得到那会很冗长，特别是有很多相似选项的时候。为了改善这个体验，你可以在每个选项中添加发音标记以让 Siri 特定的读出你的选项。像下面这个例子，用户想要面条汤，菜单里提供了两种，不是直接说牛肉面条汤和蔬菜面条汤，而是只需要问需要牛肉的还是蔬菜的。所以考虑只读出可以区分不同条目的那些细节。</p>

<p><img src="media/15707295333245/FEB88DF9-F593-4303-B715-AFE312066457.png" alt=""/></p>

<p>对话是双向的，你还需要考虑用户可能会说什么。用户可能不会使用你标记选项的那个词，为了控制每个选项回复时的自然语言变种，你应该给 Siri 提供与选项相同含义的同义词。这样当用户直接说牛肉时就可以直接匹配到牛肉面条汤。</p>

<p><img src="media/15707295333245/F96D1199-1CEF-44A4-B6CF-52A54EB35289.png" alt=""/></p>

<p>在挑选这些同义词时，你也应该记住你的问题的用词会影响用户答复的方式。所以如果你有一种更随意的方式描述选项，比如带肉的或蔬菜的，你应该确保你能识别出用户会向 Siri 重复那种措辞。</p>

<p><img src="media/15707295333245/9F4987BC-A43E-4493-9FD0-3CD348B245A9.png" alt=""/></p>

<p>如果用户提供了一个你想要额外确认的答复，比如一个后果很严重的值，你可以提供一个参数确认提示。但是谨慎地使用，只在真正的例外情况时使用，因为这会拖慢用户流程。</p>

<p><img src="media/15707295333245/49FC6A58-CD14-4952-A68E-4C4675F26022.png" alt=""/></p>

<p>使用参数确认提示的一个替代方案是如果你的 app 有自己的可以预测用户会想要什么的逻辑，你可以把最可能的预测呈现给用户，他们可以直接确认他而不需要再提供额外的细节。或者他们也可以否定它，你就可以回到一个更加开放的提示去。如果你可以猜测到用户想要的，这是让你的捷径交互更快的好方式。</p>

<p><img src="media/15707295333245/4251FCD8-5575-410B-813C-EEF27466310F.png" alt=""/></p>

<p>在流程的结束，考虑使用一个应用到整个流程的确认提示，特别是操作会带来很严重的结果时。在这一步，你可以确认与决定相关的所有要执行的动作细节，比如通过一个你可以完全自定义的视觉的用户界面确认价格、送达时间等信息。注意对于订购类的动作，系统也会要求用户确认。所以如果你的 app 属于那个类别，你应该提供优秀的确认体验。</p>

<p><img src="media/15707295333245/D9D1E786-B5F8-42BE-B006-DC5D8C8E2D1F.png" alt=""/></p>

<p>但是记住你的捷径可能被一个用户在没有看屏幕时所运行，所以你可以提供只要声音的对话体验。在这种情况下，我们提供了额外的对话帮助用户做出选择。这种额外对话的目的就是提供那些不能通过视觉 UI 展现出来的信息。可以把这个额外对话看做是你会在显示屏上显示的最重要信息的语音等价物。</p>

<p><img src="media/15707295333245/F7D69050-AEC4-4342-A5D5-385611A96580.png" alt=""/></p>

<p>最后来看下你的答复。Siri 会表明动作的状态。你可以在这里提供一个视觉 UI 总结来描述额外的细节，像是谁会派送你的汤品以及最新的估计派送时间。而在这里我们只说「好的，订好了」，因为我们还通过 UI 展示了额外的信息。</p>

<p><img src="media/15707295333245/7266A007-37E5-4F95-92B6-24C58528723C.png" alt=""/></p>

<p>对于只有声音的体验来说，你应该指定一个更具描述性的对话。同样把这个额外的对话看作是你会在显示屏上显示的答复 UI 上的最重要信息的语音等价物。</p>

<p><img src="media/15707295333245/B0058B3A-0C63-426C-AD2F-B1EF305F03BF.png" alt=""/></p>

<p>当你在思考你的确认和答复对话时，你应该记住你需要为捷径选择一个分类。你可以在 Xcode 中定义捷径时，选择一个最接近你的捷径功能的分类。在 SourChef 的例子中，订购分类是最适合的。</p>

<p><img src="media/15707295333245/2D019352-32CE-478D-9FAA-83B9FF65700B.png" alt=""/></p>

<p>在确认提示中，Siri 将会基于你选择的分类自动提出问题。所以不要包括在自定义的确认对话中包括问题。</p>

<p><img src="media/15707295333245/42F258A0-2DFB-4945-829F-508D57E82CCC.png" alt=""/></p>

<p>在答复对话中，Siri 将会根据分类提供状态信息。你的自定义对话将会被添加到 Siri 提供的对话之后。</p>

<p><img src="media/15707295333245/008E8A5E-FDB6-4EDB-BB1A-46B0B10BC33D.png" alt=""/></p>

<p>声音交互也应该是尽可能健壮的，避免强制用户打开 app 手动执行。例如，如果一个参数值无效，你应该提供清晰的错误信息，Siri 之后会自动地重新询问用户。</p>

<p><img src="media/15707295333245/779E7DB4-589A-4EF2-9BBD-ADD9828964FF.png" alt=""/></p>

<p>你还应该首先避免自己陷入这种情况，如果你呈现了一个选项列表，确保你没有呈现任何运行时你已经知道是无效的选项。你还应该考虑到深入挖掘用户潜力的机会。用户可能在捷径中包含像是送达位置的值，通常是他们的家，所以他们会习惯于不跟 Siri 说他们的送达位置。有一天他们可能在离家很远的地方使用捷径，你应该检查那个情况，并提示用户应该是一个不同的位置。</p>

<p><img src="media/15707295333245/72CCC0C4-AA75-4E01-A8B9-11838C1094C9.png" alt=""/></p>

<p>不管是什么原因，用户可能想要继续在你的 app 中运行捷径，他们只需要轻点 UI 中的任何地方就可以做到。所以当你呈现一个 UI 时，记住整个区域都应该是一个可以打开你的 app 的大的按钮。所以不要绘制看上去是可以独立可交互的元素。确保用户点击那里时，你的 app 可以带着用户已经提供的所有信息跳转到正确的位置，并把信息正确显示在 app 中。</p>

<p><img src="media/15707295333245/DF588025-B416-4D82-848E-E10893626DA5.png" alt=""/></p>

<p>我们鼓励你在写对话时花点时间，这不是一些快速展示从而获得一些需要展示的东西，这是最后要提交的产品。记住在声音交互中，语言就是用户的界面。所以你应该把 Siri 捷径交互中的每一个词看得像 app 中的每一个像素一样尊重和重要。</p>

<p><img src="media/15707295333245/5E24C5AC-C70C-4091-9B70-551F7298A3BB.png" alt=""/></p>

<p>不要太过礼貌或者加入太多个性化的内容。想要订购汤品的用户在运行这个捷径的每一次都会听到这段非必要的对话，那很烦人。如果怀疑的话，那就做个测试，听听 Siri 讲你的对话，在听了三次、十次之后是什么感觉。如果让人心烦，那可能是一个你应该降低你的对话的冗长度的好信号。</p>

<p><img src="media/15707295333245/1B5727E2-3426-407D-BF56-E63E2AE76073.png" alt=""/></p>

<p>对话应该是准确的、中立的，表达出你想要响应的类型。</p>

<p><img src="media/15707295333245/A6F48FD4-D3D2-433E-99E3-AB97AB58A6A1.png" alt=""/></p>

<p>不要在对话中包括你的 app 的名字。你的 app 会通过对话和答复 UI 被属性化、视觉化，有时 Siri 自己会在必要的时候添加你的 app 的名字。所以不要自己添加它。不用担心，你的品牌是安全的。</p>

<p><img src="media/15707295333245/7D827764-5277-478C-B43A-010698419461.png" alt=""/></p>

<p>相似的，你不应该在对话中包含用户的名字。Siri 有时可能会在 HomePod 上讲出用户的名字以确认身份。如果你的 app 也这样做，那就重复、烦人了。所以把用户的名字拿掉。</p>

<p><img src="media/15707295333245/79826A0F-81BF-492A-A530-9FF4A158278D.png" alt=""/></p>

<p>避免使用第一人称，因为不是 Siri 而是你的 app 在执行动作。这之间有微妙的差别，但很重要。在 Siri 的声音中说「我」或者「我们」，用户可能会认为 Siri 会更好地理解你的 app 的能力，并可能尝试一些你的 app 和 Siri 都不理解的动作。解决方法是用中立的方式呈现选项，使用像是「这里有几个选项」的词语。</p>

<p><img src="media/15707295333245/0CCB93D2-C34D-48E4-BA9D-396D9DFC558F.png" alt=""/></p>

<h2 id="toc_4">总结</h2>

<p>捷径可以提升你 app 中最可以被重复的功能，你应该使用添加到 Siri 按钮确保用户知道可以从你的 app 中把什么功能转化成一个捷径。你应该让 Siri 的交互有逻辑、清晰、健壮。在写对话时应该仔细慎重的进行思考。</p>

<p><img src="media/15707295333245/960CE9A4-710F-4EF1-9618-D5E99E9F6A56.png" alt=""/></p>

<h2 id="toc_5">参考链接</h2>

<ul>
<li><a href="https://developer.apple.com/design/human-interface-guidelines/sirikit/overview/domains-and-intents/">Domains and Intents - SiriKit - Human Interface Guidelines - Apple Developer</a></li>
<li><a href="https://developer.apple.com/design/human-interface-guidelines/sirikit/overview/siri-shortcuts/">Siri Shortcuts - SiriKit - Human Interface Guidelines - Apple Developer</a></li>
<li><a href="https://developer.apple.com/design/human-interface-guidelines/sirikit/overview/responses/">Responses - SiriKit - Human Interface Guidelines - Apple Developer</a></li>
<li><a href="https://developer.apple.com/design/human-interface-guidelines/sirikit/overview/editorial-guidelines/">Editorial - SiriKit - Human Interface Guidelines - Apple Developer</a></li>
<li><a href="https://developer.apple.com/videos/play/wwdc2019/806">Designing Great Shortcuts - WWDC 2019 - Videos - Apple Developer</a></li>
<li><a href="https://developer.apple.com/videos/play/wwdc2019/805/">Building Great Shortcuts - WWDC 2019 - Videos - Apple Developer</a></li>
</ul>

<blockquote>
<p>如果你觉得这篇文章对你有所帮助，欢迎请我喝杯咖啡，感谢你的支持😁</p>

<p><img src="media/14625521742746/15088240400740.jpg" alt=""/></p>
</blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android 10 的深色主题应用]]></title>
    <link href="https://steppark.net/15675754544495.html"/>
    <updated>2019-09-04T13:37:34+08:00</updated>
    <id>https://steppark.net/15675754544495.html</id>
    <content type="html"><![CDATA[
<p>从 Android 10 开始，系统引入了「Dark Theme 深色主题」功能，app 不仅可以在默认的浅色主题模式下浏览，也可以在新的深色主题下浏览。<br/>
深色主题简而言之就是在深色的界面上展示低亮度的 UI。</p>

<span id="more"></span><!-- more -->

<p><img src="media/15675754544495/darktheme-overview.png" alt=""/></p>

<h2 id="toc_0">目录</h2>

<ul>
<li>
<a href="#toc_0">目录</a>
</li>
<li>
<a href="#toc_1">Usage 用法</a>
<ul>
<li>
<a href="#toc_2">Principles 原则</a>
</li>
<li>
<a href="#toc_3">Properties 特性</a>
</li>
</ul>
</li>
<li>
<a href="#toc_4">Anatomy 结构</a>
</li>
<li>
<a href="#toc_5">Behavior 行为</a>
</li>
<li>
<a href="#toc_6">Properties 属性</a>
<ul>
<li>
<a href="#toc_7">Elevation 海拔</a>
</li>
<li>
<a href="#toc_8">Accessibility and contrast 可访问性和对比度</a>
</li>
</ul>
</li>
<li>
<a href="#toc_9">UI application UI 应用</a>
<ul>
<li>
<a href="#toc_10">Theme colors 主题颜色</a>
</li>
<li>
<a href="#toc_11">Primary color 主要颜色</a>
</li>
<li>
<a href="#toc_12">Secondary color 次要颜色</a>
</li>
<li>
<a href="#toc_13">Accnet color 强调色</a>
</li>
<li>
<a href="#toc_14">Brand colors 品牌颜色</a>
</li>
<li>
<a href="#toc_15">The dark theme baseline palette 深色主题基线色盘</a>
</li>
</ul>
</li>
<li>
<a href="#toc_16">Custom application 自定义应用</a>
</li>
<li>
<a href="#toc_17">States 状态</a>
<ul>
<li>
<a href="#toc_18">Surface Containers</a>
</li>
<li>
<a href="#toc_19">Primary Containers</a>
</li>
<li>
<a href="#toc_20">不可用状态</a>
</li>
</ul>
</li>
<li>
<a href="#toc_21">参考链接</a>
</li>
</ul>


<h2 id="toc_1">Usage 用法</h2>

<p>深色主题在主要的 UI 之间展示了深色的界面，它是默认浅色主题的一个补充。<br/>
深色主题减少了屏幕发出的亮度，但仍然满足最小对比度。它通过减少眼部压力、适应当前光照条件、让在黑暗环境中使用屏幕更便利来改善视觉效率。当然也节省了电量，对于 OLED 屏幕通过关掉所有的黑色像素的发光来从中受益。</p>

<h3 id="toc_2">Principles 原则</h3>

<ul>
<li>Darken with grey 使用灰色来变暗：使用深灰色而不是纯黑色来表现环境中的海拔感和空间感。</li>
</ul>

<p><img src="media/15675754544495/dark-mode-gray.png" alt=""/></p>

<ul>
<li>Color with accents 强调色：在深色主题中使用有限的强调色，大部分的空间都应该是深色的界面。</li>
</ul>

<p><img src="media/15675754544495/dark-mode-color.png" alt=""/></p>

<ul>
<li>Conserve engery 节省能量：在需要注意效率的设备上，比如 OLED 屏幕，通过减少浅色像素的使用来节省电量。</li>
</ul>

<p><img src="media/15675754544495/dark-mode-battery.png" alt=""/></p>

<ul>
<li>Enhance accessibility：要考虑到那些特殊的使用深色主题的用户，比如视力障碍人士，通过符号可访问性的颜色对比度标准来实现。</li>
</ul>

<p><img src="media/15675754544495/dark-mode-aa.png" alt=""/></p>

<h3 id="toc_3">Properties 特性</h3>

<ul>
<li>Contrast 对比度：深色的界面和纯白色的文本有至少 15.8:1 的对比度；</li>
<li>Depth 深度：在更好的层级上，组件在表现深度时应使用更浅的界面颜色；</li>
<li>Desaturation 去饱和：主要颜色（Primary Colors）应该去饱和，以满足 WCAG 至少 4.5:1 的 AA 标准；</li>
<li>Limited color 限制颜色使用：大的界面使用深色的界面颜色，限制使用强调色。</li>
</ul>

<h2 id="toc_4">Anatomy 结构</h2>

<p>深色主题的 UI 主要使用深色的表面，一点点强调色。为了保持一个高标准的可用性，界面只会散发出一点点光。</p>

<p>下图是一个界面的颜色示例：</p>

<ol>
<li>Background (0dp elevation surface overlay)</li>
<li>Surface (with 1dp elevation surface overlay)</li>
<li>Primary</li>
<li>Secondary</li>
<li>On background</li>
<li>On Surface</li>
<li>On Primary</li>
<li>On Secondary</li>
</ol>

<p><img src="media/15675754544495/darktheme-anatomy.png" alt=""/></p>

<h2 id="toc_5">Behavior 行为</h2>

<p>深色主题可以通过使用一个控件被开启或关闭。</p>

<ul>
<li>为了显眼，可以使用一个 icon 来触发深色主题的开启和关闭；</li>
<li>如果为了不那么显眼，可以使用菜单或者设置里的一个开关来控制。</li>
</ul>

<p>下图是在 top app bar 上设置了一个按钮开关：</p>

<p><img src="media/15675754544495/darktheme-darktheme-usage-availability-toggle.png" alt=""/></p>

<p>下图是在一个弹出菜单中设置了选项：</p>

<p><img src="media/15675754544495/darktheme-darktheme-usage-availability-menu.png" alt=""/></p>

<p>下图是在 app 的设置中设置了一个开关：</p>

<p><img src="media/15675754544495/darktheme-darktheme-usage-availability-settings.png" alt=""/></p>

<h2 id="toc_6">Properties 属性</h2>

<p>深色主题应使用深灰色而不是纯黑色作为组件的首要表面颜色（primary surface color）。深灰色的表面更容易表示更大范围的颜色、海拔、深度，因为它更容易在灰色上看清除阴影。<br/>
深灰色的表面也减少了眼部的压力，在深灰色表面上的浅色文本比在黑色表面上的浅色文本有更低的对比度。</p>

<p>推荐的深色主题表面颜色是「#121212」。</p>

<p><img src="media/15675754544495/darktheme-darksurfaces-grey.png" alt=""/></p>

<h3 id="toc_7">Elevation 海拔</h3>

<p>在深色主题中，组件具有与浅色主题相同的海拔层级和阴影。然而，在深色主题中，不同的海拔层级表示方法不再与以前完全一样。<br/>
表面的海拔层级越高（就像离光源越近），表面应该变得越亮，可以<a href="https://storage.googleapis.com/spec-host-backup/mio-design%2Fassets%2F1ro3dFa9v71nmSj8eg-tqN83z1Hcclgeu%2Fdarktheme-lightsource.mp4">查看动态展示↗</a>。</p>

<p><img src="media/15675754544495/294E1135-1CB1-467F-AE9B-2E33629CBE68.png" alt=""/></p>

<p><img src="media/15675754544495/BDD71245-2701-47E6-92BB-26DF6EA5F007.png" alt=""/></p>

<p>深色主题的表面通过在组件表面上放置一层半透明的白色遮罩（overlay）来展现。</p>

<p><img src="media/15675754544495/4AD669E7-FA38-4068-93A7-AB911BA151CB.png" alt=""/></p>

<p>在表面上的遮罩也使得更容易区分组件之间的海拔层级，以看到阴影。遮罩在表面和阴影之间增加了对比度，使每个表面的边缘更明显，可以<a href="https://storage.googleapis.com/spec-host-backup/mio-design%2Fassets%2F1MHUUJUUsP5V7UUaeeVrgzOuJ6r4FFlIG%2Fdarktheme-light-dark-elevation.mp4">查看动态演示↗</a></p>

<p><img src="media/15675754544495/619B6D2B-B55B-460D-AEE9-B81D39E9D165.png" alt=""/></p>

<p><img src="media/15675754544495/2CC0B459-0D4E-4DAA-9A75-D265B2ECC56B.png" alt=""/></p>

<p>这些表面遮罩的值为保证最大可读性来设计，同时也确保不同海拔层级之间能够看得清。</p>

<p><img src="media/15675754544495/B8C3A6ED-55BD-4E8C-A4C2-98FAAD462736.png" alt=""/></p>

<p>遮罩表明了在组件之间的不同海拔层级。</p>

<p><img src="media/15675754544495/AC6F11F6-71CF-4FE2-B509-0945860E6867.png" alt=""/></p>

<p>对于主要颜色和次要颜色，不要在使用这些颜色的表面上使用海拔层级遮罩。在深色主题中，阴影仍然是深色以保证投影的准确度。</p>

<p><img src="media/15675754544495/D470FB72-D596-40C8-82BB-4595CBF8C6A4.png" alt=""/></p>

<h3 id="toc_8">Accessibility and contrast 可访问性和对比度</h3>

<p>深色主题的表面必须足够暗以能够展示白色文本。在文本和背景之间至少应该达到 15.8:1 的对比度。在更高海拔层级（更浅颜色）的表面上，文本应该至少满足 WACG 的 4.5:1 的 AA 对比度要求。</p>

<p><img src="media/15675754544495/FFE564DB-3E23-4749-9C9F-A846D4CC5782.png" alt=""/></p>

<p><img src="media/15675754544495/4375B991-5860-4BC7-B527-EA964F94D7DC.png" alt=""/></p>

<p>对于那些对电量使用有效率要求的 UI 来说可以使用纯黑色，一些设备（比如配备 OLED 屏幕的可穿戴设备）可以通过关闭像素点来显示黑色从而解压电量，可以<a href="https://storage.googleapis.com/spec-host-backup/mio-design%2Fassets%2F1-j0v2NbxU5lVtcB1A2wjDj-n1_UFHBNu%2Fdarktheme-surfaces-black.mp4">查看动态演示↗</a>。</p>

<p><img src="media/15675754544495/4D14680C-2580-4C09-872D-1F96413B50D6.png" alt=""/></p>

<h2 id="toc_9">UI application UI 应用</h2>

<h3 id="toc_10">Theme colors 主题颜色</h3>

<p>深色主题应该避免使用过饱和的颜色，因为它们与深色表面放在一起不会通过 4.5:1 的最低对比度要求。过饱和的颜色也会造成光学上的振动，增加眼部压力。去饱和的颜色是更好的选择。</p>

<p><img src="media/15675754544495/43E0D0B2-AF8A-4BE3-BBB8-FD4257445867.png" alt=""/></p>

<h3 id="toc_11">Primary color 主要颜色</h3>

<p>主要颜色是在你的 app 中的屏幕和组件中最频繁使用的。Material Design 深色主题一般使用主要颜色的 200 色调变种作为基线，这个变种可以在任何海拔高度的表面通过至少 4.5:1 的对比度要求。</p>

<p><img src="media/15675754544495/6F0FF795-43C2-4478-8B00-D548E2101962.png" alt=""/></p>

<p>具有浅色表面的组件可以使用深色主题主要颜色的某个变种。</p>

<p><img src="media/15675754544495/1FD67276-5D96-4310-BEBA-D95022F152F0.png" alt=""/></p>

<h3 id="toc_12">Secondary color 次要颜色</h3>

<p>次要颜色被用来强调 UI 中的选择部分。在深色主题中，次要颜色也要去饱和以满足至少 4.5:1 的对比度要求。、</p>

<p><img src="media/15675754544495/2DBAB354-3179-4FAC-A587-54C1AABA204C.png" alt=""/></p>

<p><img src="media/15675754544495/FC29658B-068B-4CC6-99D0-5380A39FDD6D.png" alt=""/></p>

<h3 id="toc_13">Accnet color 强调色</h3>

<p>在深色主题中，深色表面几乎占据了 UI 的全部。强调色可以让元素显眼，它们应该被单独应用与需要被强调的核心元素，比如文字或按钮。</p>

<p>可以使用「色盘生成器 color palette generator」来生成颜色主题，它会根据你自定义的主要颜色和次要颜色生成从深色到浅色的一系列颜色变种。你可以从中选择你要用在深色主题中的颜色。</p>

<p><img src="media/15675754544495/05575D43-B1A1-4C0E-84E3-76498A93E0C8.png" alt=""/></p>

<p><img src="media/15675754544495/7B87DF6D-3E56-447A-A9CE-B16C7BB9F570.png" alt=""/></p>

<p><img src="media/15675754544495/918377D7-D1D7-45A0-AD6A-2740BB947FD0.png" alt=""/></p>

<h3 id="toc_14">Brand colors 品牌颜色</h3>

<p>为了保持品牌辨识度，品牌颜色可以在深色主题中保持饱和度，但应用内的品牌元素应该有所限制，比如只有一两个，例如 logo 或者品牌按钮。通过单独使用品牌颜色，元素可以在层级中保持显眼。</p>

<p><img src="media/15675754544495/8EB784ED-2694-417C-B3AA-6C104FA8B662.png" alt=""/></p>

<h3 id="toc_15">The dark theme baseline palette 深色主题基线色盘</h3>

<p>深色主题颜色应该被应用与各个深色主题的 UI，包括下面这些部分</p>

<ul>
<li>颜色：主要颜色、次要颜色、主要颜色变种；</li>
<li>表面：背景和组件；</li>
<li>状态：比如错误状态；</li>
<li>内容：文字排版、图标排版。</li>
</ul>

<p><img src="media/15675754544495/19D185BE-2F00-49B8-9942-18928A2ACDF0.png" alt=""/></p>

<p>在浅色主题和深色主题下不同组成部分颜色的变化：</p>

<p><img src="media/15675754544495/301C1DCF-B20E-4A5D-A371-FAE935028871.png" alt=""/></p>

<p>错误颜色用来表示错误状态。</p>

<p><img src="media/15675754544495/1C65FD00-9040-4B78-8325-FB7F1FCFC863.png" alt=""/></p>

<p>通常情况下用于文字排版和图标排版的「On colors」表示在其他主题颜色表面上使用的颜色，比如主要颜色上、次要颜色上、表面颜色上、背景颜色上、错误颜色上。默认情况下，深色主题的「On colors」是白色和黑色。</p>

<p><img src="media/15675754544495/B0AF1EEA-9AF8-4446-82E1-B8D5CE9B1DC3.png" alt=""/></p>

<p>当浅色文本出现在深色背景上时，一般遵照下面的准则：</p>

<ul>
<li>高层级强调：87% 不透明度；</li>
<li>中层级强调：60% 不透明度；</li>
<li>不可用文本：38% 不透明度。</li>
</ul>

<p><img src="media/15675754544495/darktheme-adjustedcolor-textlegibility.png" alt=""/></p>

<h2 id="toc_16">Custom application 自定义应用</h2>

<p>使用较大比例屏幕的组件，比如 app bar、backdrop，可以使用表面颜色作为深色主题的颜色。</p>

<p><img src="media/15675754544495/2FA48FD2-8085-4840-8A9F-05EB7A74C4C0.png" alt=""/></p>

<p><img src="media/15675754544495/930AC981-60F8-490B-A4E5-5B45118A47B8.png" alt=""/></p>

<p>当深色主题中需要一个浅色表面时，浅色可以被用在组件表面以突出层级关系。举个例子，深色主题的 snackbar 为了突出显示就可以有一个浅色的表面。因此你可以应用浅色主题的 Surface color 和 On Surface color。</p>

<p><img src="media/15675754544495/173DD1EF-CE9D-4C19-BB85-C947F43AD8F4.png" alt=""/></p>

<h2 id="toc_17">States 状态</h2>

<p>「状态」在视觉上通过使用遮罩表达了组件或不可交互元素的状态。在深色主题中，状态也应该使用与浅色主题一样的遮罩值，它们调整后可以满足 AA 的对比度要求。<br/>
有两种类型的容器：一种使用「Surface」填充色，另一种使用「Primary」填充色。</p>

<h3 id="toc_18">Surface Containers</h3>

<p>Surface containers 使用「Surface」颜色作为填充色，使用文本或 icon 的颜色作为遮罩颜色。</p>

<p><img src="media/15675754544495/2A191F46-7395-4218-A962-D873541EE785.png" alt=""/></p>

<h3 id="toc_19">Primary Containers</h3>

<p>Primary containers 使用「Primary」颜色作为填充色，使用白色作为遮罩颜色。</p>

<p><img src="media/15675754544495/CFE7BCF9-8190-4EFC-B1C8-A7A68FE76B4F.png" alt=""/></p>

<h3 id="toc_20">不可用状态</h3>

<p>不可用状态的组件都使用 12% 不透明度的白色作为描边颜色和填充颜色，38% 不透明度的白色作为内容颜色，比如文本或 icon。</p>

<p><img src="media/15675754544495/4D85DF39-029F-4FA5-8418-FE3DE3A1A3B7.png" alt=""/></p>

<h2 id="toc_21">参考链接</h2>

<ul>
<li><a href="https://material.io/design/color/dark-theme.html">Dark theme - Material Design</a></li>
</ul>

<blockquote>
<p>如果你觉得这篇文章对你有所帮助，欢迎请我喝杯咖啡，感谢你的支持😁</p>

<p><img src="media/14625521742746/15088240400740.jpg" alt=""/></p>
</blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在 tvOS 中把内容放在第一位]]></title>
    <link href="https://steppark.net/15675156374221.html"/>
    <updated>2019-09-03T21:00:37+08:00</updated>
    <id>https://steppark.net/15675156374221.html</id>
    <content type="html"><![CDATA[
<p>曾经的日子里，我们通过电视去了解不同的人，更多样的文化，更大的世界。电视就是一座桥梁。你在电视的丰富内容中不断搜索，当你找到吸引你的内容时，你会全神贯注地沉浸其中。</p>

<p>但现在电视的状态有些啰嗦。你会看到一行又一行的内容，你在这些内容中迷茫地穿梭，为了寻找想要看的内容在其中花费了 5 分钟、10分钟、20分钟……这种体验很普遍，也很让人沮丧。我们会失去选择的能力而变得犹豫不决。</p>

<span id="more"></span><!-- more -->

<p><img src="media/15675156374221/1E55D9BD-C2BE-47C8-ABCF-A9F9D01A6625.png" alt=""/></p>

<p>怎样让用户快速地找到他想要看的内容并且排除一切障碍进入呢？</p>

<h2 id="toc_0">目录</h2>

<ul>
<li>
<a href="#toc_0">目录</a>
</li>
<li>
<a href="#toc_1">内容优先 Content First</a>
<ul>
<li>
<a href="#toc_2">Top Shelf——移除障碍</a>
</li>
<li>
<a href="#toc_3">速度和节奏</a>
</li>
<li>
<a href="#toc_4">避免过度刺激</a>
</li>
<li>
<a href="#toc_5">在 UI 中让内容类型多样化</a>
</li>
<li>
<a href="#toc_6">减少元素的数量</a>
</li>
<li>
<a href="#toc_7">内容元数据</a>
</li>
<li>
<a href="#toc_8">使用页码符号</a>
</li>
<li>
<a href="#toc_9">使用 V 形箭头</a>
</li>
<li>
<a href="#toc_10">小结</a>
</li>
</ul>
</li>
<li>
<a href="#toc_11">Top Shelf 的新样式及使用要点</a>
<ul>
<li>
<a href="#toc_12">Top Shelf Carousel（传送带/分页滚动视图）</a>
<ul>
<li>
<a href="#toc_13">Actions Carousel</a>
</li>
<li>
<a href="#toc_14">Details Carousel</a>
</li>
<li>
<a href="#toc_15">Content Best Practices</a>
</li>
<li>
<a href="#toc_16">Image Best Practices</a>
</li>
<li>
<a href="#toc_17">Video Best Practices</a>
</li>
</ul>
</li>
</ul>
</li>
<li>
<a href="#toc_18">Top Shelf Items 的构成</a>
</li>
<li>
<a href="#toc_19">User Profile 用户描述文件</a>
<ul>
<li>
<a href="#toc_20">关于切换用户，系统提供了什么？</a>
</li>
<li>
<a href="#toc_21">关于切换用户，开发者需要做什么？</a>
</li>
<li>
<a href="#toc_22">实例说明</a>
</li>
<li>
<a href="#toc_23">关于 User Profiles 的小结</a>
</li>
</ul>
</li>
<li>
<a href="#toc_24">Tab Bar 标签栏</a>
</li>
<li>
<a href="#toc_25">Full Screen Browse 全屏浏览</a>
</li>
<li>
<a href="#toc_26">参考链接</a>
</li>
</ul>


<h2 id="toc_1">内容优先 Content First</h2>

<p>Apple TV 的第一设计目标是「内容优先」。这意味着一定有东西正在呈现，一定有东西正在放映。当你运行一个 app 时，它应该是活的。</p>

<h3 id="toc_2">Top Shelf——移除障碍</h3>

<p>首先，我们要移除进入 app 之前的障碍，摆脱内容和界面之间的障碍。这也正是我们要让 Top Shelf 变得可交互、更沉浸的原因。</p>

<p>当光标聚焦在「TV」app 上时，tvOS 默认会显示全屏的节目海报。当光标停留超过五秒后，这个节目的预告片就会开始播放。核心内容占据了屏幕上的每一个元素，充满了整个屏幕。这时，用户不会在没有预料到的情况下听到视频的声音。</p>

<p><img src="media/15675156374221/2A013130-8335-4375-99A1-A2AB21B66280.png" alt=""/></p>

<p><img src="media/15675156374221/CF14EDAC-B119-4546-9814-E5FFE5309648.png" alt=""/></p>

<p>接下来我们要让用户看到的内容变得可交互。在 Top Shelf 中，屏幕顶部会有一个视觉提示，告诉用户可以通过向上移动光标进入全屏模式。当用户在遥控器上向上滑动后，dock 栏将会隐去，内容进入全屏模式。同时视频的标题可能会出现在屏幕上，用户也可以听到视频的声音。虽然仍然处于内容浏览模式中，但用户仿佛已经置身在电影之中。</p>

<p><img src="media/15675156374221/9747D4AC-D95F-4798-85D8-50D17F01EF9A.png" alt=""/></p>

<h3 id="toc_3">速度和节奏</h3>

<p>速度和节奏也是减少用户认知负担的重要组成部分。尝试移除掉 app 中所有的延迟和滞后，这样一来，app 就会变得生动、流畅。</p>

<p><img src="media/15675156374221/A8E4EE05-0431-4DEA-AFF3-BFE145C52D21.png" alt=""/></p>

<h3 id="toc_4">避免过度刺激</h3>

<p>混乱的界面会让用户分心。想象一下在一个屋子里，同时有十几个人在和你讲话，你不能听清任何一个人所讲的内容。如果电视上的 app 也这样，用户就不能找到聚焦点。<br/>
如果使用了太多的动画、图标、图片、文本样式，就会与内容抢夺用户的注意力。我们需要让用户聚焦且放松。</p>

<p><img src="media/15675156374221/C29179D9-0F57-4D46-B1DC-0C27235AA3A6.png" alt=""/></p>

<h3 id="toc_5">在 UI 中让内容类型多样化</h3>

<p>在 UI 中让内容类型多样化实际上就是与不同的形状和比例打交道。在 Apple TV 上，屏幕被划分成不同大小的网格以来展示不同种类的内容。对于内容提供者来说，这些地方可以用来展示重要的、值得注意的有意义的内容。对于内容观看者来说，在浏览这些密集的内容时，这些不同类型的网格能让眼睛能够得到短暂的休息。</p>

<p><img src="media/15675156374221/91496B88-FAF9-43B7-98DF-F9B491EEA557.png" alt=""/></p>

<h3 id="toc_6">减少元素的数量</h3>

<p>减少元素的数量意味着我们要创造层级。在 Top Shelf 的设计中，内容是最高优先级，所以它充满了整个屏幕，接着在屏幕底部放上了 app dock，在下面是其他的应用，这些的重要性要比内容低一些。通过给不同的元素划分优先级，你可以帮助用户导航、更好地引导用户。</p>

<p><img src="media/15675156374221/CFC7F25E-A6D0-427F-9AA9-D47878D28AA8.png" alt=""/></p>

<h3 id="toc_7">内容元数据</h3>

<p>在 Top Shelf 中，内容的元数据是有用的，但是是次于内容考虑的事。因为我们要让用户首先被内容吸引，然后再去关注更多的可用信息。<br/>
Top Shelf 的内容进入全屏时，通过轻点遥控器就可以让内容元数据显示出来，这让用户有了控制权，进一步可以观看内容。这也让用户可以从浏览模式转到购买或订阅的操作中去。</p>

<p><img src="media/15675156374221/97B18CDC-DA4F-4B9C-9C5D-F02720259763.png" alt=""/></p>

<h3 id="toc_8">使用页码符号</h3>

<p>页码符号会提醒用户他们正在浏览一系列内容中的一个，也表明他们正处于浏览模式而不是实际播放模式。就像面包屑一样，页码符号很小并且会出现在界面底部。我们使用了 Apple TV 的系统材料组件以让其与背景有良好的对比度。</p>

<p><img src="media/15675156374221/2683B0EC-9363-409A-A4BE-BB308781D518.png" alt=""/></p>

<h3 id="toc_9">使用 V 形箭头</h3>

<p>V 形箭头表明了滑动的方向，还表明了还有内容在屏幕之后。它和页码符号一起让用户保持空间感。</p>

<p><img src="media/15675156374221/D6CC6FD5-BC21-4819-80C0-BCDE940920CE.png" alt=""/></p>

<h3 id="toc_10">小结</h3>

<p>这些注意点和小功能会避免用户在使用过程中陷入迷惑，避免让他们思考我该怎么导航出去，过一会儿我还能回来这个页面吗。这些地方会让用户沉浸在内容之中，我们也相信内容优先的力量。</p>

<p><img src="media/15675156374221/27B71BA7-32A1-4FE2-B811-B5EEAC2A1A5A.png" alt=""/></p>

<p>电视上的内容有能力改变我们的思维，有能力把我们带到一个新的世界，有能力打开我们的眼界，我们的工作就是让用户与这些能够改变他们的内容连接在一起，不要让用户困惑，帮助他们打开内容的大门，让用户进来，让内容发光。如果我们做到了，用户就会留下来沉浸在内容之中。这也会在用户和你的产品之间创造一种情感上的连接。</p>

<p><img src="media/15675156374221/1ECB973B-2EEE-4C05-B919-57C199926AB8.png" alt=""/></p>

<h2 id="toc_11">Top Shelf 的新样式及使用要点</h2>

<p>Top Shelf 是让用户在进入 app 前就提前预览内容的好地方。已有的 Top Shelf 提供了两种样式，一种是「分组内容 Sectioned Content」，另一种是「插入内容 Inset Content」。</p>

<p><img src="media/15675156374221/D520B4A0-7F0C-4E1B-B7F4-3E6FD3EF18BC.png" alt=""/></p>

<p><img src="media/15675156374221/3A5EF15C-024D-4965-897F-C60C1269D412.png" alt=""/></p>

<p>在 tvOS 13 中，提供了新的一种样式，称为「传送带内容 Carousel Content」。</p>

<h3 id="toc_12">Top Shelf Carousel（传送带/分页滚动视图）</h3>

<p>当 Top Shelf 中的内容进入全屏时，Carousel 是可交互的。你可以在不同项目之间滑动就像是在浏览不同的频道。当你选中一个项目，你会在屏幕底部看到内容的丰富的元数据。这可以让你 app 中的某些内容直接展示在 Apple TV 的首屏上。当然并不是所有的内容都有一样的结构，所以在 API 中有两种内容样式提供给开发者，一种是 Action Carousel，一种是 Details Carousel。</p>

<p><img src="media/15675156374221/E5FBFBFE-5588-4146-B98F-C3DE1ECAE871.png" alt=""/></p>

<h4 id="toc_13">Actions Carousel</h4>

<p>Actions Carousel 首先聚焦于你 app 提供的内容的全屏图片，并且有一部分 UI 元素你可以进行自定义。<br/>
在左上角有标题（title）和情景标题（context title），这可以告诉用户他们看到的是什么内容以及为什么要把这个内容展示给用户。你可以把情景标题想象成是一个部分的统称，它可以在 Top Shelf 的不同项目中创建逻辑分组。<br/>
在屏幕底部会有播放按钮和更多信息按钮，这为用户浏览指定的内容并直接进入 app 提供了一种确切的方式，用户可以选择直接播放或者查看更多信息。</p>

<p><img src="media/15675156374221/0F407464-8AC8-4440-8DB0-A4AF3FB38F54.png" alt=""/></p>

<h4 id="toc_14">Details Carousel</h4>

<p>在这种样式中有熟悉的标题部分以及动作按钮，并且 API 还允许你提供丰富的内容元数据以显示在这里。像下图这样，包括内容的简介、类型、年份、时长，还包括支持的音视频模式以及字幕和声音描述，以及演职员信息。</p>

<p><img src="media/15675156374221/06DAF1F1-6364-4CC2-BE43-D91548260B61.png" alt=""/></p>

<h4 id="toc_15">Content Best Practices</h4>

<ul>
<li>Carousel 被用来作为发现内容的方式是最好的，比如说推荐的电影、电视剧的新剧集或者是已登录用户的个性化推荐。</li>
<li>Top Shelf 中的内容应该被定期更新。这是通过展示亮点内容吸引用户进入 app 的窗口，所以需要保持新鲜和活力。</li>
<li>在 Top Shelf 中不要给用户太多选择，太多的项目会让用户迷失。推荐 5 到 10 个项目为佳。</li>
</ul>

<h4 id="toc_16">Image Best Practices</h4>

<ul>
<li>在 Top Shelf 中的内容是全屏的，所以内容应该是 1920 × 1080pt 的，并且应该铺满全屏。对于 1080P 设备，API 会让你提供 1x 分辨率的，对于 4K 设备，API 会让你提供 2x 分辨率的。这些优化会让你的内容给用户提供最佳的体验。</li>
</ul>

<p><img src="media/15675156374221/8418FB51-FF76-4549-B13D-0588EE6971A1.png" alt=""/></p>

<ul>
<li>tvOS 的安全区域像下图所示，左右有 90pt 的间距，上下有 60pt 的间距。注意如果内容可能会跑出安全区域是没有关系的，但要知道根据不同的设备或电视设置，用户可能看不到边缘的内容和控件。对于 Carousel 也有同样的安全区域定义，当你把图片放上去时，要记得会有一些系统元素会出现在上面，比如 V 形箭头、内容元数据信息等。所以如果图片上有重要的信息，要确保不会与这些系统元素冲突。</li>
</ul>

<p><img src="media/15675156374221/18082266-4007-400F-88DF-5A01C171CC32.png" alt=""/></p>

<p><img src="media/15675156374221/120E542D-DBF9-4C06-82EB-F0AC9673ABFC.png" alt=""/></p>

<h4 id="toc_17">Video Best Practices</h4>

<ul>
<li>你可以在 Top Shelf 中播放视频、预告片等内容，这些视频应该是 1080p 高分辨率的。</li>
<li>你应该使用 HLS（HTTP Live Streaming）把视频传输给系统。这可以帮助改善内容，提供用户更好地体验。这些视频应该可以快速载入，可以根据用户的带宽调整分辨率。</li>
<li>Carousel 是预览内容的好地方，所以不要在这提供过长的视频，推荐 2-5 分钟。</li>
<li>推荐在视频中包含声音。只有在用户作出确切动作的时候，电视才会发出声音。</li>
</ul>

<h2 id="toc_18">Top Shelf Items 的构成</h2>

<ul>
<li>TVTopShelfContentProvider 是 Top Shelf Extension 的源对象，当系统请求 Top Shelf 的数据时，它负责响应此请求。</li>
<li>TVTopShelfContent 是一个你不会直接与其交互的协议，其包括三个具体的类，Carousel、Sectioned、Inset，每一种代表一种 UI 样式。每一个类都有其具体的属性。</li>
<li>TVTopShelfItem 是每一个具备不同属性的内容样式的不同类。</li>
</ul>

<p><img src="media/15675156374221/5C4AEEE3-B233-4B51-9128-B0D057DC7F9A.png" alt=""/></p>

<h2 id="toc_19">User Profile 用户描述文件</h2>

<p>在 tvOS 13 中增加了控制中心，人们可以在这里快速访问一些常用功能，如睡眠、搜索、正在播放以及切换用户。通过这里的切换用户，人们可以在不离开当前情景的前提下，快速地切换到他们的个性化内容和推荐中。这个功能也开放给了开发者，所以开发者也可以利用这个多用户功能。</p>

<p><img src="media/15675156374221/974E8058-7C2C-4F72-B94B-F36C4ADD67F6.png" alt=""/></p>

<p>有多少 app 在一进入时就像下面一样让你选择用户，对于一个提供个性化体验的 app 来说，这样的功能不符合把内容放在第一位的使用体验。在 tvOS 13 中，你应该已经知道了是哪个用户在使用 app，而不需要再次询问用户。</p>

<p><img src="media/15675156374221/8F2C9333-D126-44EB-A6CF-2A482F9E8E99.png" alt=""/></p>

<h3 id="toc_20">关于切换用户，系统提供了什么？</h3>

<p>tvOS 13 的 API 提供了 <code>TVUserManager</code>，使用它可以帮助你的基于用户描述文件的 app 快速切换用户。</p>

<ul>
<li>它提供了一个 identifier 用来代表当前的用户；</li>
<li>它会通知 app 什么时候用户的 identifier 发生了改变；</li>
<li>提供了一些系统 UI 把系统用户的 identifier 映射到 app 的多用户上。</li>
</ul>

<p><img src="media/15675156374221/C03A7488-86A0-41D6-85F6-4264AC053193.png" alt=""/></p>

<h3 id="toc_21">关于切换用户，开发者需要做什么？</h3>

<p>以上是系统提供的功能，对于开发者来说，需要做的是：</p>

<ul>
<li>存储用户的 identifier 并映射到 app 中的用户描述文件，存在多个用户 identifier 映射到一个用户描述文件的情况；identifier 对于不同的开发者账户是不一样的，如果你有多个 app，你可以共享相同的偏好设置。</li>
<li>监听当前用户 identifier 的改变；</li>
<li>在你 app 的路径中调起需要的系统 UI。</li>
</ul>

<p><img src="media/15675156374221/354EA095-401D-4014-9ACB-71663D4A11E8.png" alt=""/></p>

<h3 id="toc_22">实例说明</h3>

<p>以上面的进入 app 显示选择用户的界面为例，现在在进入这个页面之前，你需要检查 app 的描述文件是否已经映射到了当前系统的 identifier。<br/>
如果已经映射了，那无需再显示这个用户选择界面，直接进入相应的内容就好。<br/>
如果没有映射，你可以显示用户选择界面，当用户选择一个用户后你可以询问用户现在选择的用户是否可以映射到当前的 Apple TV 用户。如果用户选择确定映射，那你应该记住这个结果，下次进入 app 就不需要再选择用户了。你可以通过 API <code>shouldStorePreferenceForCurrentUser</code> 来实现。</p>

<p><img src="media/15675156374221/9DC8E472-7B86-45EA-84A3-12201AF36032.png" alt=""/></p>

<p>用户在之后也应该可以修改这个映射，你可以通过 API <code>presentProfilePreferencePane</code> 来实现。</p>

<p><img src="media/15675156374221/DEE0DE37-96A7-437F-81BC-1712E67594A8.png" alt=""/></p>

<p>你需要监听当前用户 identifier 的改变。你可以通过API <code>currentUserIdentifierDidChangeNotification</code>  来实现。当改变发生时，你需要让系统知道新的系统用户映射到了当前的用户描述文件。</p>

<p>几条使用注意点：</p>

<ul>
<li>在切换用户描述文件之前保存当前数据；</li>
<li>确保这种改变是清晰且有意义的，比如改变后个性化推荐发生了变化，应该有一个明显的过渡，告知用户已经切换了用户。</li>
</ul>

<h3 id="toc_23">关于 User Profiles 的小结</h3>

<ul>
<li>如果你的 app 是有多个用户，依赖用户描述文件运行的，那利用好 tvOS 13 系统提供的多用户功能，让用户获得更好的个性化体验；</li>
<li>使用 TVUserManager 构建一个内容优先的体验，用户可以跳过那些不必要的对话框直接进入内容。</li>
</ul>

<h2 id="toc_24">Tab Bar 标签栏</h2>

<p>在 TV app 中引入了新的 tab bar，它让导航更加简单，也让背后的内容更加大放异彩。因为它可以跟随内容一起竖直滚动，而不是在失去焦点时就消失。这对强化用户的层级意识很有用。在 tvOS 13 中，每一个 app 都可以使用这种新的 tab bar 样式。</p>

<p><img src="media/15675156374221/9BF51811-5F7B-4F2D-B6E9-CB44ED8276D8.png" alt=""/></p>

<p>如果你想让 tab bar 与内容一起滚动，你可以在 view controller 中设置 <code>tabBarObservedScrollView</code> 属性，这样样式推荐用于一系列可浏览的内容，而且对于 UI Collection View Controller 这种样式是自动的。<br/>
如果你想 tab bar 固定在屏幕顶部，你可以让上面这个属性为 nil。<br/>
不管哪种情况，你都需要注意安全区域。</p>

<p><img src="media/15675156374221/BD5DAAC1-AA54-4F83-A35C-AECA47967FF8.png" alt=""/></p>

<p>在 tab bar 中也引入了新的 API，你可以在其中展示你的品牌。你可以在 tab bar 的左右两边放置品牌 Logo。Logo 会与 tab bar 一起滚动。</p>

<p><img src="media/15675156374221/0AE331D5-E220-41E6-A291-8AC0A53DDBDF.png" alt=""/></p>

<p>你可以通过下图中的两个属性来实现，同时你不应该把按钮等其他动态内容放在这里。如果你想进一步自定义 tab bar，你也可以通过下面的新属性来实现。</p>

<p><img src="media/15675156374221/F13CF4EF-EFD7-4D44-8932-EB811B31DC30.png" alt=""/></p>

<h2 id="toc_25">Full Screen Browse 全屏浏览</h2>

<p><img src="media/15675156374221/0C4DE9D8-FFD6-4B18-9ADF-C8BFFE075297.png" alt=""/></p>

<p>在 tvOS 13 系统的 API 中引入了「TVCollectionViewFullScreenCell」，它包括「Masked Background View」和「Masked Content View」两部分。你可以在前者上添加不透明的图片，可以在后者上添加 UI 元素。<br/>
因为新的 collection view layout 是为了利用好全屏幕而设计的，所以它的 cell 占据了整个屏幕。</p>

<p><img src="media/15675156374221/C266B0CC-335D-497B-B460-ECFE7A52D67A.png" alt=""/></p>

<p>使用注意点：</p>

<ul>
<li>在cell 移动到中心前不要开始动画或者播放视频；</li>
<li>注意屏外传入（offscreen passes）；</li>
<li>注意内存使用。</li>
</ul>

<h2 id="toc_26">参考链接</h2>

<ul>
<li><a href="https://developer.apple.com/design/human-interface-guidelines/tvos/system-capabilities/profiles/">Profiles - System Capabilities - tvOS - Human Interface Guidelines - Apple Developer</a></li>
<li><a href="https://developer.apple.com/design/human-interface-guidelines/tvos/icons-and-images/top-shelf-content/">Top Shelf Content - Icons and Images - tvOS - Human Interface Guidelines - Apple Developer</a></li>
<li><a href="https://developer.apple.com/design/human-interface-guidelines/tvos/interface-elements/tab-bars/">Tab Bars - Interface Elements - tvOS - Human Interface Guidelines - Apple Developer</a></li>
<li><a href="https://developer.apple.com/videos/play/wwdc2019/211/">Mastering the Living Room With tvOS - WWDC 2019 - Videos - Apple Developer</a></li>
</ul>

<blockquote>
<p>如果你觉得这篇文章对你有所帮助，欢迎请我喝杯咖啡，感谢你的支持😁</p>

<p><img src="media/14625521742746/15088240400740.jpg" alt=""/></p>
</blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在设计和开发时使用 SF Symbols]]></title>
    <link href="https://steppark.net/15675148872165.html"/>
    <updated>2019-09-03T20:48:07+08:00</updated>
    <id>https://steppark.net/15675148872165.html</id>
    <content type="html"><![CDATA[
<p>标志（symbol）在界面中扮演一个非常重要的角色，它们在表达某些含义时非常有效，它们可以表明哪个条目被你选中了，它们被用来在视觉上区分不同的内容类型。标志出现在系统的不同情景中。它们给用户在整个用户界面中创造了一种熟悉的感觉。</p>

<span id="more"></span><!-- more -->

<p><img src="media/15675148872165/BF89717D-7443-4872-B640-BA3E33A0C9EB.png" alt=""/></p>

<p><img src="media/15675148872165/93E43829-F84A-47AC-B8D4-A27124993FB5.png" alt=""/></p>

<p>标志可以在不同的方式中被使用，设计标志也是一个内在的挑战。这些标志要设计得与其他 UI 元素完美得匹配在一起，比如文本。在 UI 中文本会有不同的尺寸，标志也是这样。</p>

<p><img src="media/15675148872165/2D210958-0871-42DC-A0B4-1579BB663A55.png" alt=""/></p>

<p><img src="media/15675148872165/AA300161-C710-4255-8920-6C28183BA193.png" alt=""/></p>

<p>所以为了让这项工作变得更为简单，在 iOS 13 中我们重新设计了所有的标志。你会知道这些标志怎样有一个圆形套在外面，怎样在字重上更粗一点。他们可以完美地与文字相搭配。除了重新设计所有已有的标志，我们还扩展了这个列表，设计了更多的标志。它们统称为「SF Symbols」。它们在整个平台具有高度一致性，可以高质量地应用在你的所有 app 中。它们采用矢量形式，这意味着它们可以放大缩小，无论大尺寸还是小尺寸都能被渲染地很好。</p>

<p><img src="media/15675148872165/D0078F5B-ED9B-49E0-80D9-A7B9BB4D2CF1.png" alt=""/></p>

<p>针对于系统字体 San Francisco 的不同字重，SF Symbols 也有着不同的字重与之搭配。<br/>
这里有超过 1000 个标志可供选择使用。如果这里的标志仍然不够，你甚至可以自动以他们，并创建自己的标志。</p>

<p><img src="media/15675148872165/9B6C4A51-C215-4EB6-811D-2FF8EEFC9136.png" alt=""/></p>

<h2 id="toc_0">目录</h2>

<ul>
<li>
<a href="#toc_0">目录</a>
</li>
<li>
<a href="#toc_1">在设计时使用 SF Symbols</a>
<ul>
<li>
<a href="#toc_2">字号、对齐</a>
</li>
<li>
<a href="#toc_3">字重、缩放</a>
</li>
<li>
<a href="#toc_4">综合使用</a>
</li>
<li>
<a href="#toc_5">设计小结</a>
</li>
</ul>
</li>
<li>
<a href="#toc_6">在开发中使用 SF Symbols</a>
<ul>
<li>
<a href="#toc_7">使用系统提供的 SF Symbols</a>
</li>
<li>
<a href="#toc_8">使用自定义 symbols</a>
</li>
<li>
<a href="#toc_9">配置 SF Symbols 的参数</a>
</li>
<li>
<a href="#toc_10">使用 SF Symbols 进行布局</a>
</li>
<li>
<a href="#toc_11">在按钮中使用 SF Symbols</a>
</li>
<li>
<a href="#toc_12">SF Symbols 的渲染模式（render mode）</a>
</li>
<li>
<a href="#toc_13">几个注意点</a>
</li>
</ul>
</li>
<li>
<a href="#toc_14">参考链接</a>
</li>
</ul>


<h2 id="toc_1">在设计时使用 SF Symbols</h2>

<h3 id="toc_2">字号、对齐</h3>

<p>SF Symbols 可以像文本一样指定字号。当标志和文本并排在一起时，它们拥有相同的基线。</p>

<p><img src="media/15675148872165/BB1D7CAE-6116-4CC2-83F4-C08949C8A071.png" alt=""/></p>

<p>当标志和文本竖直放在一起时，这里通常会有两种情况：文本支撑标志或者标志支撑文本。</p>

<p><img src="media/15675148872165/8F0D8AA5-82AB-4615-B7E8-4CC93CDFA525.png" alt=""/></p>

<p><img src="media/15675148872165/944E11DC-EDA2-403D-AE58-1D064DCE2A30.png" alt=""/></p>

<p>水平对齐可以确保每一项都看起来没问题，这得益于标志的边界。每一个标志的边界并不一定相同。边界是不可见的，但当在屏幕上布局元素时会需要用到边界。</p>

<p><img src="media/15675148872165/74F33F12-B4C4-4061-A855-3CE5131ECC58.png" alt=""/></p>

<h3 id="toc_3">字重、缩放</h3>

<p>每一个标志都有着九种不同的字重，从超细到超粗，对应系统字体的不同字重。每一个字重都被手动绘制出来，特别考虑了每种不同的设计。更细的字重有着可区分的、优雅的外表，而更粗的字重会尽力保持细节和可见性。</p>

<p><img src="media/15675148872165/4AB3E729-C976-4142-B5A2-F2634809714B.png" alt=""/></p>

<p><img src="media/15675148872165/C2F6D939-1C0F-4C3C-A6A5-62ABFD6FE877.png" alt=""/></p>

<p>当与文本搭配使用，即使文本字号没有变化，可能也需要不同大小的标志。这就是之前我们设计标志时要考虑的问题，取决于我们要多强调标志，取决于有多大的展示空间。在 iOS 13 里，我们把这些变成了系统功能。我们称这一个特性为「scales 缩放」——分为三种，小、中等、大。</p>

<p><img src="media/15675148872165/E2D443BD-1DA0-4ED5-924F-35E9D7F11C76.png" alt=""/></p>

<p><img src="media/15675148872165/D253DF8B-9B35-4A68-9D9A-9D927DAD7709.png" alt=""/></p>

<p>这里注意下，在调整标志的缩放大小时，其字号大小（point size）是始终不变的。调整标志的缩放，会有与文本相匹配的字重，并且会与文本的大写字母高度始终竖直中心对齐。</p>

<p><img src="media/15675148872165/EEA6A64A-E342-47BD-A0A3-96D97FB9668E.png" alt=""/></p>

<p><img src="media/15675148872165/67709481-39F7-4D32-8FE8-DF1F0D7C4666.png" alt=""/></p>

<p>对于该在哪里使用不同的缩放，什么时候该用哪一个具体的 缩放，这里有三个具体的示例。它们都包括了字号为 17 的文本，但每个标志的容器有着不同的高度。文字和标志的字号是相同的，但通过改变标志的缩放来更好地适配不同情况的空间。在像工具栏这样的地方，UIKit 可以自动对控件使用合适的缩放。</p>

<p><img src="media/15675148872165/342151F3-DFA1-4103-8C0B-BF5AA0AA283C.png" alt=""/></p>

<h3 id="toc_4">综合使用</h3>

<p>我们把字号大小、字重、缩放三者放在一起看，这意味着你可以在动态类型中使用它们，每一项都会很完美。</p>

<p><img src="media/15675148872165/912A3D57-82BA-4D5F-9698-B497C274E413.png" alt=""/></p>

<p>当然，标志也可以被本地化。这里有一个语音备忘录应用的例子，在英语和阿拉伯语的不同运行情况下，同一个标志有着不同的样式。</p>

<p><img src="media/15675148872165/5F149E76-1585-4FBD-81F6-8A68D54705D5.png" alt=""/></p>

<p>如果你想搞清楚这些标志的话，每一个标志都提供了一个名字。大多数的标志还会有描边和填充两种样式。</p>

<p><img src="media/15675148872165/3A280B27-7DEE-45B4-979A-A8371362928C.png" alt=""/></p>

<p>它们还可以被包在一个圆圈或者一个方形中，还可以带有一个标准的系统角标。</p>

<p><img src="media/15675148872165/6D8F70DE-FD8D-4FF7-A2DE-803542CDD577.png" alt=""/></p>

<p>使用这些标志也很方便。它们属于 SF 字体家族的一部分，可供下载，你可以在你的设计中使用。缩放功能可以通过 open Type 功能开启。默认缩放是中等，你可以在字体面板中选择小或大的缩放，抑或其他指定 UI 形状。</p>

<p><img src="media/15675148872165/26C1A051-CA9E-4241-AED6-389D191409E3.png" alt=""/></p>

<p>为了更方便使用，我们创建一个名为「SF Symbols」的应用。可以在里面通过平铺方式或者列表方式浏览所有的标志。可以通过名字搜索标志，预览不同的字重。</p>

<p><img src="media/15675148872165/40777400-657E-4E97-B470-8FA68D43F44C.png" alt=""/></p>

<p>我们来看一个实际的例子。在下面的设计中，按以前的操作，你需要定义图片的边界，确定图片的大小、四周边界值。</p>

<p><img src="media/15675148872165/84196755-080A-4CEC-8DE2-46ABD7E314EA.png" alt=""/></p>

<p>但有了 SF Symbols，你只需要确定标志的名字和字号大小以及对齐方式就可以了，如果有需要可以再定义字重和缩放。</p>

<p><img src="media/15675148872165/B84773FC-5D52-43E7-A3B0-FF8E6EDB0B91.png" alt=""/></p>

<p>第二行的图片有些普通，我们可以自己绘制一个茶杯的形状。因为 SF Symbol 里没有这个图形，我们可以自定义一个。</p>

<p><img src="media/15675148872165/2B574EDD-C6A9-4702-A401-550BB42AE0AC.png" alt=""/></p>

<p>你可以从已有的标志中选取一个相似的，导出并作为模板。导出的模板包括所有的字重和缩放大小，并且是 SVG 格式，可以使用自己熟悉的设计工具进行编辑。</p>

<p><img src="media/15675148872165/976421CB-0043-4199-B9F7-05EC781C1F38.png" alt=""/></p>

<p>这个文件可以直接被用于开发时的 Xcode 中，不再需要许多个文件。<br/>
在所有的字重和缩放中，你至少需要提供 regular 字重的中等规模标志样式。</p>

<p><img src="media/15675148872165/D2F965D3-84EE-455C-99DD-C9BD03164F01.png" alt=""/></p>

<p>进一步可提供其他两种缩放的样式，进一步可提供 medium 和 bold 两种字重。当然，也需要根据你 app 的排版样式有针对性的考虑。</p>

<p><img src="media/15675148872165/49D1B752-0FAA-4C2D-BF17-4B12203F211E.png" alt=""/></p>

<p><img src="media/15675148872165/668B2F3C-4AF7-4656-9B51-E018A0F37113.png" alt=""/></p>

<p>制作好的自定义标志可以在「SF Symbols」app 中浏览。</p>

<h3 id="toc_5">设计小结</h3>

<p><img src="media/15675148872165/BA4F526B-0925-425E-9423-9719EBE9BF18.png" alt=""/></p>

<h2 id="toc_6">在开发中使用 SF Symbols</h2>

<h3 id="toc_7">使用系统提供的 SF Symbols</h3>

<p>下面这个 app 提供了滑块的相关功能，可以通过控制滑块或者两边的按钮来调节速度，但是目前的加减图片不太好，我尝试用 SF Symbols 来替换这两张图片。</p>

<p><img src="media/15675148872165/05470A32-D8E1-446E-BF94-F0A1794DF75D.png" alt=""/></p>

<p>在 SF Symbols app 中可以找到「乌龟」和「野兔」两个标志，分别代表更慢和更快。</p>

<p><img src="media/15675148872165/4BB0A6FC-13E4-4776-AD45-7B5802820B65.png" alt=""/></p>

<p><img src="media/15675148872165/59D963FB-581D-4259-85E7-A0BADB3D07F5.png" alt=""/></p>

<p>可以利用新的 API：<code>UIImage(systemName:)</code>  来替换相应的图片，具体的代码如下：</p>

<pre class="line-numbers"><code class="language-swift">// You’re eager to use one of these 1500+ new system symbols
// It’s easy!

slowerImageView.image = UIImage(systemName: &quot;tortoise&quot;)
fasterImageView.image = UIImage(systemName: &quot;hare&quot;)
</code></pre>

<p><img src="media/15675148872165/3ACCCF42-A8E5-4FB9-91CF-E06711FEA672.png" alt=""/></p>

<h3 id="toc_8">使用自定义 symbols</h3>

<p><img src="media/15675148872165/97A3D814-AEA8-4769-8425-D7D18DFD1E76.png" alt=""/></p>

<p>在开发中要使用上图的自定义标志，需要将设计师提供的「teacup.svg」文件导入 Xcode 中，在代码中使用 API  <code>UIImage(named:)</code>  即可调用这个自定义标志，具体代码如下：</p>

<p><img src="media/15675148872165/58FA9B53-A6B3-4641-A257-508559BBA9A8.png" alt=""/></p>

<pre class="line-numbers"><code class="language-swift">// And you want to use the image your designer made?
// It&#39;s just like it was:

cupView.image = UIImage(named: &quot;teacup&quot;) 
</code></pre>

<p><img src="media/15675148872165/6B2B2613-A01B-4179-943B-D8AAF5CD4B4C.png" alt=""/></p>

<p>不止你有没有注意到在资源目录中同时存在两个名称为「teacup」的资源文件，它们都是图片，都不是相同的类型，一个是普通 png 格式图片，一个是 svg 格式的标志。</p>

<p><img src="media/15675148872165/75D6ABC3-6229-436A-B919-A67F770C90EF.png" alt=""/></p>

<p>以前的时候你通过 UIImage(named:)  这个 API 调用图片文件名非常直接和方便，当有了 SF Symbols 时，事情会变得稍微有些复杂。以文件名「envelope」为例，解释下这里。同一个文件名的图片，这里可能有三个版本：一个是系统标志，一个是自定义标志，还有一个是非标志的普通图片。<br/>
对于系统标志没有什么问题，因为它是通过 API  <code>UIImage(systemName:)</code>  单独的命名空间来调用的，不会与其他的产生冲突。</p>

<p><img src="media/15675148872165/B9BDE0CD-DE63-4EEA-94C3-7FCA5142547B.png" alt=""/></p>

<p>而对于自定义标志和普通图片来说，它们都是通过 API <code>UIImage(named:)</code> 来调用的。系统会优先调用自定义标志文件，如果没有再调用普通类型的图片文件。这样做的好处是，不需要多余的代码，不需要版本检查代码，在 iOS 12 或更早版本可以显示普通类型的图片，而在 iOS 13 或之后版本中可以利用 SF Symbols 的功能显示自定义标志。</p>

<p><img src="media/15675148872165/DFDCD360-3C44-47EF-9F0F-4047DF0391A1.png" alt=""/></p>

<h3 id="toc_9">配置 SF Symbols 的参数</h3>

<p><img src="media/15675148872165/905D12FC-859A-4EAB-BFBD-DC783DDEC99D.png" alt=""/></p>

<p>我们需要对「teacup」这个标志进行配置，其缩放是「large」,可以利用新的 API <code>UIImage.SymbolConfiguration()</code> ，具体代码如下：</p>

<pre class="line-numbers"><code class="language-swift">// Our designer specified to use a large configuration:

let configuration = UIImage.SymbolConfiguration(scale: .large)
imageView.preferredSymbolConfiguration = configuration
</code></pre>

<p><img src="media/15675148872165/F8C0C1AD-E96E-40DF-8CF9-194A745341ED.png" alt=""/></p>

<p>想改变标志的更多参数，比如字号、字重，具体的代码如下：</p>

<pre class="line-numbers"><code class="language-swift">// Symbols are typographic in nature, and it reflects
// in how you configure them

// typographic points, not screen points
let headlineConfig = UIImage.SymbolConfiguration(pointSize: 23.0f, weight: .medium)

// you can always add a scale
let annotationConfig = UIImage.SymbolConfiguration(pointSize: 17.0f, scale: .small)
</code></pre>

<p>在这里注意，标志的「pointSize」指的是字体字号大小，而不是屏幕尺寸大小。</p>

<p><img src="media/15675148872165/93C0A958-957B-43E9-876E-D5560A715350.png" alt=""/></p>

<p>如下图所示，下面这个标志其字号尺寸是 28 pt，但其物理尺寸是 33pt × 32pt。你应该把标志看作是文本的一部分。</p>

<p><img src="media/15675148872165/378AB0A3-37A1-4F02-944B-D256B9BDF725.png" alt=""/></p>

<p>正因为标志就像文本一样，所有标志可以配置它的文本类型（text style），以支持系统的动态类型功能。具体代码如下：</p>

<pre class="line-numbers"><code class="language-swift">// Symbols are typographic in nature, and it reflects
// in how you configure them

// dynamic type text styles
let footnoteConfig = UIImage.SymbolConfiguration(textStyle: .footnote)

// … you can always add a scale
let introConfig = UIImage.SymbolConfiguration(textStyle: .body, scale: .large) 
</code></pre>

<p><img src="media/15675148872165/3D2A54FF-758F-4021-A02A-D37E45311B04.png" alt=""/></p>

<p>如果 app 使用了非系统字体，标志的参数也可以根据自定义字体进行变化。当你已经有了一段配置好属性的文本，你就不需要一个个属性地去调整标志。具体代码如下：</p>

<pre class="line-numbers"><code class="language-swift">// Symbols are typographic in nature,
// and it reflects in how you configure them

titleLabel.font = style.titleFont()

let configuration = UIImage.SymbolConfiguration(font: titleLabel.font, scale: .large)
titleImage.preferredSymbolConfiguration = configuration
</code></pre>

<p>关于标志的属性它是一个常量，它是不可变的。如果你想利用已有的属性值，你可以通过方法 <code>applying</code> 去创建了一个新的属性，从而间接修改已有的属性，并应用在你需要的地方。具体代码如下：</p>

<pre class="line-numbers"><code class="language-swift">// It’s also possible to combine configurations、
let boldLargeConfig = UIImage.SymbolConfiguration(weight: .bold, scale: .large)
let smallConfig = UIImage.SymbolConfiguration(scale: .small)

let config = boldLargeConfig.applying(smallConfig)

// config will be .bold, .small
</code></pre>

<h3 id="toc_10">使用 SF Symbols 进行布局</h3>

<p><img src="media/15675148872165/6D8FD6EC-70A7-4B9E-B545-DABD5784525A.png" alt=""/></p>

<p>上图这个 app，每一行都有一个头像、一条文字评论和一个箭头。对于头像可以使用 SF Symbols，一般情况下头像与右边的文字是竖直中心对齐的，即使右边的文字大于一行，也是可以的。</p>

<p><img src="media/15675148872165/A2211C0B-3E93-4918-AC91-8F7E0F75CB8A.png" alt=""/></p>

<p>要想让头像与第一行文字对齐，有两种方法，一种是让头像和文字的边缘对齐，还有一种方法是让头像的基线与第一行文字的基线对齐。对于第二种方法，在 iOS 13 中，对于图片新增了一个 <code>baselineOffsetFromBottom</code> 属性，正如名字所示，它表示从底部到基线的偏移值，它是一个可选的 CGFloat 类型。对于 SF Symbols 来说，它默认具有这个属性，而对于普通图片来说，它默认不具有这个属性。查看图片的这个属性的具体代码如下：</p>

<pre class="line-numbers"><code class="language-swift">// You can inspect the baseline values on images
// Expressed in screen points from the bottom of the image

let chevron = UIImage(systemName: “person.square”)

// Not all images have baselines!
if let offset = chevron.baselineOffsetFromBottom {
    // …
}
</code></pre>

<p>下图中的两个标志和文字的基线相同，可以看到下箭头标志的偏移值是「-3.5」，而云朵标志的偏移值是「+4.5」，所以说基线可能不在图片的边界之内。如果偏移值为 0，并不是说没有基线，而是基线与图片的底部是重合的。</p>

<p><img src="media/15675148872165/9486BA51-3194-4ACD-BE6D-23AB135A2467.png" alt=""/></p>

<p>对于默认没有基线的普通图片，我们可以通过 API <code>withBaselineOffsetFromBottom</code> 来为其添加基线。具体的代码如下：</p>

<pre class="line-numbers"><code class="language-swift">// You can add baselines to any image
// Important: baseline offsets are in screen points.

let avatarImage: UIImage?

if let loadedImage = AvatarCache.load(forUser: user.id) {
    // give the avatar a baseline
    avatarImage = loadedImage.withBaselineOffsetFromBottom(3.5f)
}
else {
    avatarImage = UIImage(systemName: “person.square”)
}
</code></pre>

<p>通过以上代码，为普通图片添加了基线，这样普通图片和标志可以用同一逻辑进行统一的布局。</p>

<p><img src="media/15675148872165/83EF3DF8-E3EA-44F7-8218-2283628F7D8B.png" alt=""/></p>

<h3 id="toc_11">在按钮中使用 SF Symbols</h3>

<p>为了区分不同的情况，在这里把按钮可以分为三种，第一种是系统按钮，第一种是普通按钮，第三种是栏上的按钮（bar buttons)。先来看系统按钮。</p>

<p><img src="media/15675148872165/F9940190-1D9B-4F65-A937-78B56B6BAB01.png" alt=""/></p>

<p>在 UIKit  中的所有「系统按钮」都有一个预置的配置参数，他是「body」文本类型，「large」缩放大小。在系统按钮中使用 SF Symbols 的具体代码如下：</p>

<pre class="line-numbers"><code class="language-swift">// System buttons have a default configuration of: .body, .large

let watchImage = UIImage(systemName: “stopwatch”)

let startButton = UIButton.system(image: watchImage,
                                     target: self,
                                     action: #selector(startTimer)) 
</code></pre>

<p>再来看普通按钮。在下图的这个例子中，有一个 pop-over 弹窗，在其中有两个动作按钮。在普通按钮上使用 SF Symbols，默认缩放大小是「medium」。</p>

<p><img src="media/15675148872165/4A0CDA48-C850-4355-B6E2-8FE4CF5C6229.png" alt=""/></p>

<p>在普通按钮上使用 SF Symbols 并改变其属性值的具体代码如下：</p>

<pre class="line-numbers"><code class="language-swift">// Buttons have a default configuration of .medium
// use setPreferredSymbolConfiguration() to change

let checkButton = UIButton(type: .custom)
checkButton.setImage(UIImage(systemName: &quot;check&quot;), forState: .normal)

let config = UIImage.SymbolConfiguration(textStyle: .caption, scale: .small)
button.setPreferredSymbolConfiguration(config, forState: .normal)
</code></pre>

<p>对于下图中左右两个按钮，左边按钮是一个标志，右边按钮是文字，虽然它们没有紧挨在一起，但它们应该有同样的参数。它们应该有着同一条基线值，有着同样的属性（字体、字号、字重、文本样式等）。这样来看，可以让布局的思考更加简单。</p>

<p><img src="media/15675148872165/4BA54907-B7A2-43BC-8F56-A6EA0F2244F3.png" alt=""/></p>

<p>最后来看栏上的按钮（bar buttons）。在 iOS 13 中，所有 bar buttons 的图片资源也已经使用 SF Symbols 更新过了。</p>

<p><img src="media/15675148872165/ACA71914-7234-414E-BB3A-52B04341431C.png" alt=""/></p>

<p>对于 bar buttons，也有预置的属性。栏上按钮在像 iPhone 竖屏高度上是 regular 这种尺寸等级（size class）的屏幕上是「large」缩放大小，而在高度上是 compact 这种尺寸等级的屏幕上是「medium」缩放大小。这也意味着你不需要针对高度不同的栏提供两套不同的栏上按钮资源文件。</p>

<p><img src="media/15675148872165/4FE6E169-46A4-4B05-A7A6-AE41C59DADFA.png" alt=""/></p>

<p><img src="media/15675148872165/B8DCF7C7-82C8-4634-8942-3F9073D4A667.png" alt=""/></p>

<h3 id="toc_12">SF Symbols 的渲染模式（render mode）</h3>

<p>对于普通图片来说都有颜色数据，而对于 SF Symbols 来说其没有固定的颜色。我们可以通过描边颜色（tint color）来渲染标志。如果没有描边颜色，会使用黑色。但黑色并不总是合适，比如在深色模式中。</p>

<p><img src="media/15675148872165/62511826-436F-4D03-9F28-758C809FA357.png" alt=""/></p>

<p>以前图片的渲染模式都是自动的，都是原始颜色。而现在来说对于非标志类型的图片仍然是这样，对于标志类型的图片将会是根据描边颜色来显示。</p>

<p><img src="media/15675148872165/9A9B0D1B-899F-44A2-9801-113ED8B4649D.png" alt=""/></p>

<p>绘制一个标志的具体代码如下：</p>

<pre class="line-numbers"><code class="language-swift">// Drawing symbols

let cupImage = UIImage(named: &quot;teacup&quot;)
let receipt = UIGraphicsImageRenderer(size: receiptSize).image {
    // …

    cupImage.draw(at: .zero) // use natural size of the image

    // …
}
</code></pre>

<p>如果觉得绘制的标志太小，可以通过下面的代码创建一个新的属性，并创建一张新的标志图片。</p>

<pre class="line-numbers"><code class="language-swift">let cupImage = UIImage(named: &quot;teacup&quot;)

let configuration = UIImage.SymbolConfiguration(pointSize: 34.0f, weight: .bold)
let largeTeacupImage = cupImage.withConfiguration(configuration)
</code></pre>

<p>回到之前的 pop-over 页面，我们想要让其中的某些文字用标志替代。</p>

<p><img src="media/15675148872165/4F754298-E167-47EB-9D07-8A49307DF25B.png" alt=""/></p>

<p>因为标志是图片，我们要把标志通过一些方法转换为字符串，具体的代码如下：</p>

<pre class="line-numbers"><code class="language-swift">// Symbols in strings
// — use attachments

let string = NSMutableAttributedString(string: &quot;I just symbol images!&quot;,
                                          attributes: [.foregroundColor: UIColor.label])

let heartImage = UIImage(systemName: &quot;heart.fill&quot;)
let heartAttachment = NSTextAttachment(image: heartImage)
let heartString = NSAttributedString(attachment: heartAttachment)

string.insert(heartString, at: 7)
</code></pre>

<p>转换后的标志会根据匹配的文字来自动确定属性值，比如颜色、大小等。进一步，要想改变插入文字中的这些标志的颜色，可以通过下面的代码实现，其中可以选择是否改变渲染模式：</p>

<pre class="line-numbers"><code class="language-swift">// Tinting images
// — apply a color to the whole image

let heartImage = UIImage(systemName: &quot;heart.fill&quot;)
let redHeartImage = heartImage.withTintColor(.redColor, renderingMode: .alwaysOriginal) 
</code></pre>

<p><img src="media/15675148872165/758AF029-8C10-4E6E-AB41-E6A11A915BD9.png" alt=""/></p>

<h3 id="toc_13">几个注意点</h3>

<p><img src="media/15675148872165/097FDF53-4ED4-41D8-BE08-3C09EA2A0458.png" alt=""/></p>

<h2 id="toc_14">参考链接</h2>

<ul>
<li><a href="https://developer.apple.com/design/human-interface-guidelines/sf-symbols/overview/">SF Symbols - SF Symbols - Human Interface Guidelines - Apple Developer</a></li>
<li><a href="https://developer.apple.com/videos/play/wwdc2019/206/">Introducing SF Symbols - WWDC 2019 - Videos - Apple Developer</a></li>
</ul>

<blockquote>
<p>如果你觉得这篇文章对你有所帮助，欢迎请我喝杯咖啡，感谢你的支持😁</p>

<p><img src="media/14625521742746/15088240400740.jpg" alt=""/></p>
</blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SiriKit 知一二 - Siri 捷径从设计到构建（上）]]></title>
    <link href="https://steppark.net/15707294010250.html"/>
    <updated>2019-10-11T01:43:21+08:00</updated>
    <id>https://steppark.net/15707294010250.html</id>
    <content type="html"><![CDATA[
<p>SiriKit 包含了 iOS 和 watchOS 上的 app 可以调用 Siri 的领域以及可能的用户意图，并进一步将用户经常使用的功能扩展为 Siri 捷径。这篇文章将通过 HIG 来深入了解 SiriKit 的基本功能和各方面的设计规范与细节。</p>

<span id="more"></span><!-- more -->

<h2 id="toc_0">目录</h2>

<ul>
<li>
<a href="#toc_0">目录</a>
</li>
<li>
<a href="#toc_1">领域和意图</a>
<ul>
<li>
<a href="#toc_2">增加准确度</a>
</li>
</ul>
</li>
<li>
<a href="#toc_3">Siri 捷径</a>
<ul>
<li>
<a href="#toc_4">捷径的类型</a>
<ul>
<li>
<a href="#toc_5">Donated Shortcuts 贡献型捷径</a>
</li>
<li>
<a href="#toc_6">Suggested Shortcuts 建议型捷径</a>
</li>
<li>
<a href="#toc_7">Relevant Shortcuts 相关型捷径</a>
</li>
</ul>
</li>
<li>
<a href="#toc_8">设计捷径的最佳实践</a>
</li>
<li>
<a href="#toc_9">贡献捷径</a>
</li>
<li>
<a href="#toc_10">创造捷径的标题和副标题</a>
</li>
<li>
<a href="#toc_11">Siri 捷径的建议短语</a>
</li>
<li>
<a href="#toc_12">包含捷径图片</a>
</li>
<li>
<a href="#toc_13">提供一步步的问题</a>
</li>
<li>
<a href="#toc_14">让人们添加和编辑捷径</a>
</li>
<li>
<a href="#toc_15">添加到 Siri 按钮样式</a>
</li>
<li>
<a href="#toc_16">提供多个 Siri 捷径</a>
</li>
</ul>
</li>
<li>
<a href="#toc_17">答复</a>
<ul>
<li>
<a href="#toc_18">设计一个自定义的 Siri 界面</a>
</li>
<li>
<a href="#toc_19">写下口头答复</a>
</li>
</ul>
</li>
<li>
<a href="#toc_20">编辑规范</a>
<ul>
<li>
<a href="#toc_21">提到 Siri 和使用 Hey Siri</a>
</li>
<li>
<a href="#toc_22">提到 Siri 捷径</a>
</li>
<li>
<a href="#toc_23">提到 Apple 产品</a>
</li>
</ul>
</li>
<li>
<a href="#toc_24">继续阅读</a>
</li>
<li>
<a href="#toc_25">参考链接</a>
</li>
</ul>


<h2 id="toc_1">领域和意图</h2>

<p>如果你的 app 提供了特定目录的服务（称之为领域），如健康、信息、支付或者订车，它就可以与 Siri 结合响应口头的命令和问题以让用户执行某些动作（称之为意图）。Siri 负责处理需要把这些口头语言转化为你 app 可以处理的指令的所有的语言处理和语义分析过程。你的 app 定义它支持的人物，确认它接收到的信息，给 Siri 提供信息以显示并执行动作。</p>

<p><img src="media/15707294010250/4B84B7B8-872D-46B4-8FE4-C19694F45500.png" alt=""/></p>

<p>iOS 和 watchOS 的 app 可以适配 SiriKit 框架以让人们使用 Siri 和捷径在 Apple Watch、HomePod、iPad、iPhone 甚至是通过 CarPlay 去执行 app 指定的动作。SiriKit 支持 iOS 和 watchOS 的下面这些领域和动作：</p>

<p><img src="media/15707294010250/BFC25B3C-C705-4EC3-BC81-5134C7D1FA8C.png" alt=""/></p>

<h3 id="toc_2">增加准确度</h3>

<ul>
<li>定义人们会在 app 内使用的自定义词汇：通过定义人们可能会在请求中使用的特定术语，如账户名字、联系人名字、照片标签、照片专辑名字、搭车选项和锻炼名字，帮助 Siri 学习跟过关于你 app 可以执行的动作。这些术语应该是不普遍的，对于你的 app 是独一无二的。不要包含其他 app 的名字、明显与其他 app 有关的术语、不合适的语言或者预留短语，如「Hey Siri」。记住任何你定义的术语会被 Siri 用来帮助分析请求，但不保证它们被识别。</li>
<li>考虑定义其他的 app 名字：如果人们对于你的 app 的名字有不同的发音，你可以提供一个替代名字的清单以增加在让 Siri 将目标对准你的 app 时的灵活度。例如，一个叫「UnicornChat」的 app 可能会定义术语「Unicorn」作为一个替代的 app 名字。不要使用其他 app 的名字作为你的 app 的替代名字从而去冒充它们。</li>
<li>提供请求样例：给 Siri 提供样例短语以在 Siri 界面中点击帮助按钮会显示的引导中展示。使用这些短语教人们最容易和最有效的方式通过你的 app 使用 Siri。</li>
</ul>

<h2 id="toc_3">Siri 捷径</h2>

<p>任何 app 都可以提供捷径以马上执行有用的动作，或者打开 app 跳转到特定的屏幕，用户可以快速开始任务。</p>

<p><img src="media/15707294010250/AA276659-CD66-4626-A57F-90D61EA880A8.png" alt=""/></p>

<h3 id="toc_4">捷径的类型</h3>

<p>SiriKit 支持几种捷径的类型。</p>

<h4 id="toc_5">Donated Shortcuts 贡献型捷径</h4>

<p>贡献型捷径是用户会有规律执行并可能会再次执行的 app 的特定的动作。例如，一个用户可能会使用一个订购汤品 app 在每周五的中午订购蛤蜊杂烩汤。这个 app 可以把这个动作当做一个可预测的用户行为，向系统贡献一个「订购我最喜欢的汤品」的捷径。使用像是位置、一天中的时间和动作类型（如在走、在跑、在开车）这些信号，系统可以智能地预测捷径正确的时间和位置。系统可以通过一个 iOS 锁屏通知、搜索结果、锁屏上的媒体播放控制（针对于媒体播放型捷径）或者是 Apple Watch 上的 Siri 表盘提供捷径给用户。</p>

<h4 id="toc_6">Suggested Shortcuts 建议型捷径</h4>

<p>建议型捷径是用户没有执行过但可能仍有用的 app 特定的动作。例如，如果一个订购汤品 app 的用户从来没定过汤品，app 可能想要通过一个「订购汤品」的捷径给用户一个方式做到这一点。在这个例子中，app 在 iOS 捷径 app 中提供了一个建议型捷径。一个 app 也可以展示一个添加到 Siri 按钮以直接在 app 中启动一个建议型捷径。</p>

<h4 id="toc_7">Relevant Shortcuts 相关型捷径</h4>

<p>相关型捷径是用户从来没有执行过，但包含像是位置、一天中的时间这样的信息的 app 特定的动作。这些捷径会在 Apple Watch 的 Siri 表盘上被智能地展示在合适的时间和地点。</p>

<h3 id="toc_8">设计捷径的最佳实践</h3>

<ul>
<li>提供可以加速普遍的、有用的活动的捷径：利用好人们对 app 的熟悉，为那些人们会经常做的动作创造捷径，不要为人们只可能做一次的动作创造捷径。</li>
<li>通常情况下，为那些不是太复杂的人物创造捷径：人们会从可以减少复杂任务的多个步骤的捷径中受益最多。不要要求人们参与一个 app 中的长时间对话，这会毁掉捷径带来的益处。你可以通过让捷径清晰地定义任务来减少用户错误的可能性。</li>
<li>设计寿命长的捷径：避免提供特定日期或者与临时数据相关的捷径。例如，一个旅行 app 可能不应该为每个特定的旅行行程都提供一个捷径。更好的解决是让人们通过一个个的问题从所有接下来的旅行中做出选择。</li>
<li>提供不被情景所限的捷径：人们可以通过不同的方式、在不同的时间、使用不同的设备来运行捷径。无论什么方法、何时何地都能成功运行的捷径才能创造好的体验。例如，一个锻炼 app不应该贡献一个「结束锻炼」的捷径，因为当用户没有在锻炼时捷径被建议会是一个糟糕的体验。</li>
<li>在你的 app 中不要在提供 Siri 捷径前就请求用户使用 Siri 的许可：如果你的 app 只支持 Siri 捷径，在让用户创造和使用捷径前你不需要获得使用 Siri 的许可。获取许可会给用户造成分歧，会打击用户使用捷径的信心。</li>
<li>可用时使用系统意图：如果内建的 SiriKit 意图代表了你的捷径的目的，适配那个意图而不是定义你自己的自定义意图。例如，如果你想提供一个发送信心的解决，适配「INSendMessageIntent」意图就好。如果你想提供一个播放媒体的捷径，适配「INPlayIntent」意图。</li>
<li>提供后台操作：最好的捷径可以快速运行，不会让人们从当前的情景中脱离。努力支持可以在后台运行而不需要把 app 带到前台的捷径。这样做也确保人们可以在不用手、不用看的情景中完成捷径的任务。</li>
<li>选择一个最匹配你的捷径任务的意图分类：一个分类告知系统一个捷径的通用功能，比如创造、订购、分享或者搜索。当系统提供了一个捷径或者使用 Siri 调起捷径时，这会影响呈现给用户的文本、图标、口语对话。</li>
</ul>

<h3 id="toc_9">贡献捷径</h3>

<ul>
<li>针对普遍的用户动作做出贡献：用户每次执行一个动作时都应该进行贡献，不只是第一次，这可以帮助系统更准确地预测提供捷径的最好时间和地点。</li>
<li>如果你的 app 需要处理预订，考虑贡献给系统：像是订票事件或者预订餐馆、航班、电影和其他旅行日程的项目会自动作为建议出现在日历和地图 app 中。例如，贡献预订可以出现在锁屏上，比如建议通过你的 app check in 或者作为一个提醒基于当前的交通状况告诉用户什么时候该离开。确定只在人们活跃地查看特定预订的详细信息时贡献预订信息。在其他时候贡献预订（例如人们搜索或者查看所有预订清单时）会让人惊讶，因为当系统在你的 app 中探测到一个新的事件时会展示一个通知横幅。</li>
<li>只为那些用户实际执行的动作贡献捷径：不要贡献用户从来没做过的捷径。例如，如果用户从来没有订购过汤品，一个汤品订购 app 不应该贡献订购汤品捷径。</li>
<li>使用相符的数据移除贡献：如果一个贡献型捷径要求的信息不再存在，你的 app 应该删除贡献，捷径就不会再被建议。例如，如果一个用户在一个信息 app 中删除了一个联系人，任何给那个联系人发送信息的捷径也应该被删除。一个用户必须手动移除他们自己添加到 Siri 的捷径。</li>
</ul>

<h3 id="toc_10">创造捷径的标题和副标题</h3>

<p>当捷径被系统建议、添加到 Siri 或者用户编辑的时候，捷径的标题和副标题会出现。</p>

<ul>
<li>保持简洁，但是是描述性的：一个标题应该清晰地传达当捷径运行时会发生什么。一个副标题可以提供补充标题但不是重复标题的额外细节。</li>
<li>标题使用首字母大写的句子样式，不需要使用末尾标点符号，用一个动词开头：把捷径的标题看做是一种指导。</li>
</ul>

<p><img src="media/15707294010250/2551256F-6B36-44CD-AF65-8EEDF303D69B.png" alt=""/></p>

<ul>
<li>重要的信息放在前面：取决于设备的屏幕尺寸，过长的标题和副标题在某些情景中可能会被缩短。</li>
<li>排除 app 的名字：系统已经通过捷径的关联识别到了是哪个 app。</li>
<li>只在提到捷径使用的特定短语时使用引号：例如下图这些例子。</li>
</ul>

<p><img src="media/15707294010250/B1D19386-3350-4EDB-8901-AF4BF2F0231C.png" alt=""/></p>

<ul>
<li>本地化标题和副标题：使用多种语言提供内容可以确保全世界的人们都获得一样的好的体验。</li>
</ul>

<h3 id="toc_11">Siri 捷径的建议短语</h3>

<p>你的 app 可以为 Siri 捷径提供设置期间的默认短语。当添加建议的捷径到 Siri 中时，人们可以设置个性化的短语。</p>

<ul>
<li>让建议短语保持简短和容易记住：记住人们必须要说出你的短语，所以太长或让人困惑的短语可能会导致错误和失望。理想情况下，短语应该包含两到三个词。再多的词语人们就很能记住，太长的短语会被删节。</li>
<li>确保你建议的短语是准确特定的：像是「再订一次咖啡」或者「订我的日常咖啡」这样的短语清晰地描述了捷径是做什么的，这会让人们更容易在之后更容易记住短语。也确保你的建议短语对于每个捷径范围是特定的，例如，「看棒球比赛」比「看比赛」更清晰、更容易被记住。然而，建议短语不应该暗示自然语言理解。例如，一个像是「订购一份大的蛤蜊杂烩汤」的短语可能会导致某些人认为他们可以使用一个像是「订购一份小的龙虾浓汤」变种。</li>
<li>不要征用关键的 Siri 命令：例如，你的 app 不应该建议一个像是「拨打 110」这样的短语，或者是包含文本「Hey Siri」。</li>
</ul>

<h3 id="toc_12">包含捷径图片</h3>

<p>呈现给用户的捷径包含一张图片可以给出额外的视觉情景。默认情况下，图片是你 app 的图标。</p>

<ul>
<li>为了达到更吸引人的体验，使用自定义的图片：例如，「订购我喜欢的汤」这个捷径可能会展示用户最喜欢的汤的碗。当人们在捷径 app 中搜索时，提供特定动作的图片和定义核心参数可以让人们更容易发现你的捷径。</li>
<li>提供正确尺寸的相关的捷径图片：在 44mm Apple Watch Siri 表盘上出现的图片应该是 68px × 68px（34pt × 34pt @2x）。对于更小的手表，系统会自动缩放。</li>
</ul>

<h3 id="toc_13">提供一步步的问题</h3>

<p>捷径可以提供一步步的问题，即时优化结果，让人们通过一个捷径做到更多。例如，如果你提供了一个「订购我的日常咖啡」捷径，你可以通过问人们问题，像是什么尺寸、哪个位置或者你日常订哪一个，来帮助他们得到他们想要的。</p>

<ul>
<li>设计要求尽可能少的一步步问题的捷径：一个捷径可以不用一步步的问问题就可以完成一个请求。虽然一步步的问题让捷径更灵活，但是你并不想强制人们进入一个很长的交互。在大多数的例子中，最好是提供一两个一步步问题就好。</li>
<li>确保每一个一步步的问题都是有意义的：理想情况下，每一个一步步问题都帮助人们做出一个重要的选择。如果你呈现的选项或者是问题本身太粗糙或者太相似，对话就会变得重复，人们使用你的捷径会感到有太多工作要做。</li>
<li>当可以说清楚时支持链式的一步步问题：例如，一个帮助人们订餐的 app 可能提供了自取或者送货上门的选项，但只在用户选择送货上门时询问用户的特定位置。</li>
<li>预定义有用的默认选项：当人们添加捷径到 Siri 时，他们可以改变一步步问题的参数。你可以让人们基于用户的当前使用场景通过设置默认值更容易做到这些。你可以提供一个「再次订购汤品」的捷径，其带有询问人们特定订单的一步步问题。当人们从订单的详情页面添加这个捷径到 Siri 时，你可以预配置这个捷径以博涵那个特定的订单。</li>
<li>考虑提供动态的选项：例如，如果你的捷径依赖于位置，你可以通过提供离用户最近的选项帮助确保准确最新的结果。你也可以在人们第一次添加捷径到 Siri 时提供动态选项。</li>
<li>帮助人们理解错误和失败：例如，如果你询问了让人们选择味道的一步步问题，若用户的选择卖光了你需要提供一个有用的答复。系统可以为像是达到了最大值或最小值这样的情况提供默认错误提示，但你应该根据你解决的任务为错误量身定制。例如，如果鸡肉面条汤卖完了，可以回复用户一个错误提示「对不起，鸡肉面条汤卖完了」，而不是「对不起，我们不能完成你的订单」。</li>
<li>确保你的捷径在每一个情景中都可以运行良好：让人们容易运行你的捷径，不管他们是如何启动的。例如，你应该为在设备上没有屏幕，只使用他们声音运行捷径的人做好准备，也为从锁屏或者 Apple Watch Siri 表盘建议或者从搜索结果或者在一个多步骤捷径中运行做好准备。</li>
</ul>

<h3 id="toc_14">让人们添加和编辑捷径</h3>

<p>人们可以在捷径 app 中添加、编辑、删除捷径，但是你也可以在你的 app 中呈现这些功能。</p>

<p><img src="media/15707294010250/9D5BE4E5-E178-4E0C-BA93-A965A627EBA0.png" alt=""/></p>

<ul>
<li>提供一个添加到 Siri 按钮让人们可以为一个普遍的动作添加捷径：当用户点击按钮时，标准捷径页面会出现，允许用户录制一个自定义的声音命令并添加捷径。在捷径被添加后，按钮的文本会自动改变成已添加到 Siri，录制的触发短语也会显示在上面。这些改变告诉人们成功添加了捷径，更重要的是提供他们当让 Siri 运行捷径时该说什么。如果你让人们在你的 app 中为几个动作创造了捷径，你可以使用一步步问题整合这些动作或者在一个屏幕上展示多个捷径。</li>
<li>适用添加到 Siri 按钮的可变宽度：在不同位置和更新到展示用户的调起短语时，按钮的宽度会发生变化。</li>
<li>在添加到 Siri 按钮周围保证清晰的空间：在按钮四周，最小留出按钮高度的 1/10 间距。</li>
</ul>

<p><img src="media/15707294010250/AddToSiri-ClearSpace_2x.png" alt=""/></p>

<ul>
<li>如果你创造一个自定义的添加捷径按钮，提供和系统按钮一样的体验：你的自定义按钮应该展示短语「添加到 Siri」。不要展示像是「添加声音命令」、「创造声音捷径」、「创造声音提示」这样的短语，不要在你的自定义按钮上展示 Siri 图标。也不要使用 Siri 图标作为按钮，或者在你界面的其他地方展示它。在人们使用你的自定义按钮添加捷径之后，展示录制的调起短语对于帮助人们记住它很重要。对自定义按钮，你可以跟随系统提供的体验，更新按钮显示已添加到 Siri 和短语。</li>
</ul>

<p><img src="media/15707294010250/add-to-siri-button-added_2x.png" alt=""/></p>

<ul>
<li>让人们编辑和移除已添加的解决：在添加一个捷径之后，当用户点击显示在你 app 中的调起短语，再次显示标准的捷径界面，这样用户就可以重新录制短语或者删除捷径。</li>
<li>让 app 中显示的任何捷径保持最新：人们可以在设置-Siri 和搜索中添加、删除、更新你 app 的捷径。然而，当发生改变时设置不会通知你的 app。让界面与最近的捷径改变保持最新是你 app 的责任。</li>
</ul>

<h3 id="toc_15">添加到 Siri 按钮样式</h3>

<p>添加到 Siri 按钮有几种视觉样式可用。你也可以自定义按钮的圆角半径以搭配你的 app 的界面。</p>

<p><img src="media/15707294010250/AddToSiri-Black_2x.png" alt=""/></p>

<ul>
<li>Black 黑色：在白色或者提供充足对比度的浅色背景上使用。不要再黑色和深色背景上使用。</li>
</ul>

<p><img src="media/15707294010250/AddToSiri-Black-Outlined_2x.png" alt=""/></p>

<ul>
<li>Black with outline 有轮廓的黑色：在深色或者提供充足对比度的带色背景上使用。不要在白色或浅色背景上使用。</li>
</ul>

<p><img src="media/15707294010250/AddToSiri-White_2x.png" alt=""/></p>

<ul>
<li>White 白色：在深色和提供充足对比度的带色背景上使用。</li>
</ul>

<p><img src="media/15707294010250/AddToSiri-White-Outlined_2x.png" alt=""/></p>

<ul>
<li>Whit with outline 有轮廓的白色：在白色或者不能提供足够对比度的浅色背景上使用。不要在深色或饱和背景上使用。</li>
</ul>

<h3 id="toc_16">提供多个 Siri 捷径</h3>

<p>如果你的 app 包含好几个 Siri 捷径，考虑一块 app 的专用区域展示它们。一块专用的区域可以让人们容易一眼看到你 app 所有的捷径，并添加他们想使用的捷径。另外，考虑提供一步步问题以支持一个捷径的一系列额外选项。</p>

<ul>
<li>对你的捷径列表使用一个不模糊的标题：例如在导航栏上使用标题「Siri 捷径」可以清晰地表达这一个界面的目的。</li>
<li>考虑创造一个自定义的添加按钮用于捷径列表：当在一个界面中被用到多次时，系统提供的添加到 Siri 按钮会添加太多的视觉比重。如果一个界面上的列表里全是 Siri 捷径，你可以为列表中的每一个捷径显示一个简单的添加按钮。</li>
</ul>

<p><img src="media/15707294010250/A644A957-CA96-4A35-BB14-25B00F622274.png" alt=""/></p>

<ul>
<li>当一个捷径被添加时提供反馈：通过替换添加按钮为编辑按钮、展示他们录制的短语，告诉人们他们已经成功地添加了捷径。或者，你可以移除添加按钮，让人们点击他们录制的短语以打开一个编辑界面。</li>
</ul>

<h2 id="toc_17">答复</h2>

<p>当某个人使用 Siri 去执行你 app 中的一个动作时，你的 app 可以在 Siri 中提供一个自定义的界面展示可以执行的选项。在动作被执行后，你的 app 可以响应那个信息或者表明确认、成功或失败。你的 app 也可以通过可以被 Siri 读出的自定义的对话的形式提供答复。</p>

<p><img src="media/15707294010250/2021A55B-5F42-44A5-BA3E-A1C6C4587EA1.png" alt=""/></p>

<ul>
<li>让 Siri 交互更中立：你可以在整个捷径体验中自定义 Siri 会讲什么，包括一步步问题的控制。尝试写一个脚本并与其他人演绎来看看你的对话在实践中的感受是如何。用这种方式体验自定义对话可以帮助你找到交互不中立的地方。</li>
<li>保持相关、准确：让你的 app 的答复与用户的当前请求和期望相关。例如，如果用户请求 Siri 用你的 app 发送一条消息，那就发送一条消息，不要执行不同的动作。</li>
<li>在 Apple Watch 上，设计一个要求最小交互的流线化的工作流：你的 app 不能为 Siri 提供一个可以在 Apple Watch 上显示的自定义的用户界面。作为结果，你的 app 的 Siri 体验应该是流线化的、最小化的。任何可能的时候，使用智能默认选项而不是请求输入。例如，交通分享 app 可能自动默认上次请求的交通方式，或者一个健康 app 可能默认为一个最喜欢的锻炼。如果你要给用户呈现选项，提供有效的、聚焦的可以减少额外提示可能性的选择。任何可能的时候，自动完成任务。例如，watchOS 的信息 app 可以自动发送信息，除非不要发送的按钮被点击。</li>
<li>快速响应：人们为了便利使用 Siri，期望回复越快越好。</li>
<li>任何可能的时候，完成请求时不要离开 Siri：如果一个请求必须在你的 app 中完成，把用户直接带到期望的地方。不要展示一个中间屏幕或者信息，这会拖慢整个体验。</li>
<li>当一个请求会对财产有影响时，默认选择最安全和最便宜的选项：不要欺骗用户或者是歪曲信息。对于有多个价格等级的购买，不要默认选最贵的。在用户付款时，不要在没通知用户时付掉额外的费用。</li>
<li>让选项列表尽可能简短，把这些条目通过一种讲得通的方式排序：虽然一步步问题让捷径更灵活，但给人们太多选项会让复杂的任务变得很繁重。当你决定是否要包含一个条目时，考虑它的复杂度和实用度。例如，在一个订餐 app 中，独立的菜单条目比每个条目包含好几种食物的菜单能让人们更容易从句法上分析。在你识别出一部分有用条目之后，考虑按照时间、频繁度或者流行度来排序它们。</li>
<li>只在讲得通时请求确认：一个捷径可以在完成任务之前或停止回答一步步问题时请求用户确认。有财产影响的 app 应该在完成订单之前请求确认。另一方面，你应该避免请求用户确认一个一步步问题的回答，除非提供的答案有疑问或者很难懂。在这两种情况下，避免请求确认超过一次。</li>
<li>考虑让人们在 app 中查看更多选项：如果选项列表不包括用户所需要的，你可能需要包括一个选项让用户打开你的 app 查看更多。在列表中，你可以使用像是「在 XX app 中查看更多」这样的话，在口语对话中，你可以顾里用户直接说「更多选项」。</li>
</ul>

<h3 id="toc_18">设计一个自定义的 Siri 界面</h3>

<ul>
<li>确保你的界面与 Siri 完美融合：使用你 app 的颜色、图片和其他设计元素去表达你的品牌是可以的，但任何界面元素应该感觉像是属于 Siri 的。除非你的 app 需要一个完全的自定义界面，否则把你的内容与 Siri 提供的默认界面结合在一起就好。</li>
<li>提供充足的边界和间距：避免让内容跑出界面的边界，除非内容看上去像是自然跑出屏幕的，像是地图。通常情况下，在界面和内容之间提供至少几个像素的边界。使用在界面顶部的 app 图标作为对齐规范。当内容与图标的中线对齐时，内容一般都会表现得很好。</li>
<li>最小化你界面的高度：理想情况下，你的界面应该不高于屏幕的高度，这样用户能够不需要滚动就可以看到所有的内容。</li>
<li>不要创造看上去可以交互的界面：当你的界面在 Siri 中显示时，它不能响应事件或者手势（除了可以打开你 app 的点击动作）。因为这个原因，避免展示多个图片、形状或者看上去可交互的元素很重要。你可以最多展示一个按钮打开你的 app 跳转到人们可以执行额外动作的界面。例如，一个自定义的订单确认界面可以展示一个编辑按钮以打开 app 并让人们改变订单的一些选项。</li>
<li>不要在界面中包括 app 名字或者图标：系统会自动展示这些信息。</li>
</ul>

<h3 id="toc_19">写下口头答复</h3>

<ul>
<li>争取让声音答复可以像自定义 Siri 界面一样吸引人：记住人们可能会不看屏幕从他们的 HomePod 上、在 AirPods 上使用「Hey Siri」或者通过 CarPlay 执行 app 的动作。在这些情况下，无论人们怎么与 Siri 进行交互，声音答复应该传达与视觉元素展示相同的核心信息，以确保人们可以获得他们所需要的。</li>
<li>创造简洁、可描述、在声音驱动场景中运行良好的声音答复：通过一个捷径标题，一个自定义的口头答复应该清晰地传达捷径运行时发生了什么。如果你问了一步步的问题，确保自定义的默认对话是清晰的。例如，「哪一个汤？」会比「哪一个」更清晰。</li>
<li>避免没必要的重复：人们倾向于频繁地运行捷径，所以当回答一步步问题或者处理错误时，他们可能会听到相同的提示多次。使用当前对话的场景移除掉尽可能多的提示细节。避免包括没必要的连篇累牍或者幽默的尝试，因为这两者随着时间都会让用户恼怒。</li>
<li>帮助 Siri 中立：人们总是会通过不同的方式与 Siri 交互，例如选择一个列表条目时会说「第二个」或者「大的」、「小的」，而不说词语碗。当你通过给系统提供替代的术语和短语来支持 app 特定的同义词，你可以让人们的 Siri 交互更加自然。考虑通过提供 Siri 可以说的替代的对话选项增强清晰度。例如，汤品订购 app 可能会展示一个菜单列表像是「一份蛤蜊杂烩汤」、「一份蛤蜊杂烩汤和一份番茄汤」，讲出这些选项时可以说「哪一个选项？那个只有蛤蜊杂烩汤的还是那个包括番茄汤的？」</li>
<li>排除你的 app 名字：当相应用户时，系统会在口头上和视觉上提供你 app 的属性。在口头答复中包括你的 app 的名字是多余的，可能会让与 Siri 的交互体验感到没那么中立。当人们使用一个捷径好几次时，Siri 就不会那么频繁地说出 app 的名字，因为提醒人们哪个 app 在响应已经没必要了。</li>
<li>不要尝试模仿或者操纵 Siri：你的 app 不应该冒充 Siri，不应该尝试重造 Siri 提供的功能或者提供一个像是来自于 Apple 的答复。</li>
<li>保持合适，遵照父母控制。不要展示无礼或降低身份的内容。记住许多家庭使用父母控制以限制露骨的内容或者基于特定分级的内容。</li>
<li>不要使用个人代词：内容应该是包括所有人。</li>
<li>保持相应与设备无关：人们可能使用 Siri 与 Apple Watch、HomePod、iPad、iPhone或者 CarPlay 上的 app 进行交互。如果你必须提供特定设备的功能，确保它清晰反映了用户的当前设备。</li>
<li>通过 Sir 和捷径强调你的 app：提及 Siri 和捷径应该比你的 app 名字和身份更不重要。</li>
<li>不要做广告：内容不应该包含广告、市场营销或者 app 内购买促销。</li>
</ul>

<h2 id="toc_20">编辑规范</h2>

<h3 id="toc_21">提到 Siri 和使用 Hey Siri</h3>

<ul>
<li>不要使用像是她、他这样的词语提及 Siri：理想情况下，只使用词语 Siri。例如，「在添加一个捷径到 Siri 之后，你可以在任何时候通过请求 Siri 运行捷径」。</li>
<li>当使用术语「Hey Siri」时使用正确的大小写和标点符号：「Hey Siri」是两个单词，斜体或者使用引号，H 和 S 大小。不要省略这个术语。</li>
</ul>

<p><img src="media/15707294010250/0B41F5D6-A91A-43CD-9889-77819D1030FA.png" alt=""/></p>

<ul>
<li>在一个本地化情景中，只翻译词语「Hey Siri」中的单词「Hey」：作为一个苹果商标，Siri 不需要被翻译。下面是一份可以被接受的「Hey Siri」的翻译列表。</li>
</ul>

<p><img src="media/15707294010250/4217ABDB-F891-4319-88C1-8F0EE0CD0CC1.png" alt=""/></p>

<h3 id="toc_22">提到 Siri 捷径</h3>

<ul>
<li>当提到 Siri Shortcuts 时，两个单词的 S 都要大写，并确保捷径这个单词是复数：例如「<em>Siri Shortcuts provide a quick way to get things done in your app with just a tap or by asking Siri</em>.」</li>
<li>当提及单独的捷径时（不是指功能本身或者捷径 app），使用小写：例如「<em>Run a shortcut by asking Siri or tapping a suggestion on the lock screen</em>.」</li>
<li>当描述人们是如何在你的 app 中使用 Siri 捷径时使用正确的术语：用户通过请求 Siri 运行捷径，所以你的用词应该与像是「<em>Run a shortcut by asking Siri</em>」或者「<em>Run the shortcut by asking Siri with your personalized phrase</em>」这样的词语相似。为了鼓励用户创造并使用捷径，避免使用像是「添加声音捷径」、「创造声音命令」、「创造声音提示」或其他变种这样的短语。你可以使用下面短语中的一个：
<ul>
<li>Add to Siri</li>
<li>Add a shortcut to Siri to run with your voice</li>
<li>Add a shortcut to Siri to run anytime by asking Siri</li>
</ul></li>
<li>在本地化情景中提到它们时，使用你 app 名字和单词捷径的翻译，但不要翻译 Siri：例如，当在设置-Siri 和搜索-我的捷径中提及特定捷径时，使用捷径的翻译版本。</li>
</ul>

<h3 id="toc_23">提到 Apple 产品</h3>

<ul>
<li>遵守 Apple 商标规范：Apple 商标不应该出现在你 app 的名字和图片中。在文本中，像 <a href="https://www.apple.com/legal/intellectual-property/trademark/appletmlist.html">Apple 商标列表</a>中展示的那样使用 Apple 产品名字。
<ul>
<li>只使用单数形式的 Apple 商标名字，不要使用 Apple 商标名字的所有格；</li>
<li>不要翻译 Apple、Siri 或其他的 Apple 商标；</li>
<li>不要使用分类描述词，例如要说 iPad，而不是平板电脑。</li>
<li>不要表明任何形式的来自 Apple 的赞助、合作、支持。</li>
<li>任何你 app 中法律信息出现的地方，都要把 Apple、Siri 和其他 Apple 商标放在正确的地位上。</li>
<li>只在技术规格或者兼容描述中提到 Apple 设备和操作系统。</li>
</ul></li>
</ul>

<p>更多的请参阅<a href="https://www.apple.com/legal/intellectual-property/guidelinesfor3rdparties.html">使用 Apple 商标的规范</a>。</p>

<h2 id="toc_24">继续阅读</h2>

<p>通过 SiriKit 了解了 app 可以发挥的领域，了解了这么多设计规范和细节之后，<a href="15707295333245.html">继续阅读 Siri 捷径从设计到捷径第二篇 - 设计绝佳的 Siri 捷径</a>，通过一个实际例子一步步地从细节上去设计 app 的 Siri 捷径。</p>

<h2 id="toc_25">参考链接</h2>

<ul>
<li><a href="https://developer.apple.com/design/human-interface-guidelines/sirikit/overview/domains-and-intents/">Domains and Intents - SiriKit - Human Interface Guidelines - Apple Developer</a></li>
<li><a href="https://developer.apple.com/design/human-interface-guidelines/sirikit/overview/siri-shortcuts/">Siri Shortcuts - SiriKit - Human Interface Guidelines - Apple Developer</a></li>
<li><a href="https://developer.apple.com/design/human-interface-guidelines/sirikit/overview/responses/">Responses - SiriKit - Human Interface Guidelines - Apple Developer</a></li>
<li><a href="https://developer.apple.com/design/human-interface-guidelines/sirikit/overview/editorial-guidelines/">Editorial - SiriKit - Human Interface Guidelines - Apple Developer</a></li>
<li><a href="https://developer.apple.com/videos/play/wwdc2019/806">Designing Great Shortcuts - WWDC 2019 - Videos - Apple Developer</a></li>
<li><a href="https://developer.apple.com/videos/play/wwdc2019/805/">Building Great Shortcuts - WWDC 2019 - Videos - Apple Developer</a></li>
</ul>

<blockquote>
<p>如果你觉得这篇文章对你有所帮助，欢迎请我喝杯咖啡，感谢你的支持😁</p>

<p><img src="media/14625521742746/15088240400740.jpg" alt=""/></p>
</blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS 13 的设计有什么新变化？]]></title>
    <link href="https://steppark.net/15674389801268.html"/>
    <updated>2019-09-02T23:43:00+08:00</updated>
    <id>https://steppark.net/15674389801268.html</id>
    <content type="html"><![CDATA[
<p>从 iOS 13 系统开始，用户可以像在 macOS 中一样开启全局的「Dark Mode 深色模式」，聚焦于内容本身。这对 app 在设计时提出了挑战。为了让用户在 app 中使用时更有空间感，iOS 13 强化了「Modal Presentation 模态展示」页面的样式。3D Touch 让使用支持此功能的硬件的用户可以快捷访问某些功能、预览某些页面，「Context Menu 情景化菜单」把这项功能带给了所有用户。</p>

<span id="more"></span><!-- more -->

<h2 id="toc_0">目录</h2>

<ul>
<li>
<a href="#toc_0">目录</a>
</li>
<li>
<a href="#toc_1">Dark Mode 深色模式</a>
<ul>
<li>
<a href="#toc_2">核心设计目标</a>
</li>
<li>
<a href="#toc_3">Color 颜色</a>
</li>
<li>
<a href="#toc_4">Materials 材料</a>
</li>
<li>
<a href="#toc_5">Controls and bar 控件和栏</a>
</li>
<li>
<a href="#toc_6">SF Symbols</a>
</li>
</ul>
</li>
<li>
<a href="#toc_7">Modal Presentations 模态展示</a>
</li>
<li>
<a href="#toc_8">Contextual Menus 情景化菜单</a>
</li>
<li>
<a href="#toc_9">参考链接</a>
</li>
</ul>


<h2 id="toc_1">Dark Mode 深色模式</h2>

<p>在 iOS 13 及之后的系统中，人们可以选择采用一个全局的深色系统外观——称为「Dark Mode 深色模式」。在深色模式中，系统中的所有屏幕、界面、菜单、控件都使用了更深的颜色，这让在更深背景中的前景内容更容易显现出来。注意深色模式仍然支持所有的辅助功能设置。<br/>
人们可以选择深色模式作为他们的默认界面样式，他们也可以通过设置设定周围灯光变暗时自动开启深色模式。<br/>
因此深色模式带来了一个与颜色、图片、文本打交道的新界面方案。</p>

<p><img src="media/15674389801268/646DFB45-7C4F-49F0-A993-7BB4CE922BF7.png" alt=""/></p>

<p>深色的 UI 更适合灯光条件较暗的情况，对于我们的眼睛来说，在一个暗色的屏幕和周围的世界之间做出调整也更加容易。抛开功能性去说，许多人只是喜欢把使用暗色的界面作为自己的个人偏好。<br/>
 iOS 的 Dark Mode 使用了几乎全黑的背景以提供与文本和其他前景元素的最大对比度。黑色的背景会使 UI 与硬件本身看上去融为一体。<br/>
通常情况下，你的 app 都应该支持 Dark Mode 功能。当人们使用 iPhone 切换到 Dark Mode 时，他们期望你的 app 也一起改变。</p>

<p><img src="media/15674389801268/78327CCF-8350-4BF7-9068-5A7E7C59294F.png" alt=""/></p>

<h3 id="toc_2">核心设计目标</h3>

<ul>
<li>保持熟悉：iOS 设计系统会经历一个从头到尾的更新，但是结果还是人们熟悉的那个 iOS 系统；</li>
<li>平台一致性：所有的内置 app 在 iOS 13 中都被重新设计过，它们的组成部分都保持着平台的一致性；</li>
<li>清晰的信息层级：通过颜色区分信息层级，让重要的信息更加显眼，不重要的信息隐藏在背后；</li>
<li>可访问：把辅助功能与其他目标放在同等地位，新的系统同样支持粗体文本、增强对比度、减少透明度等辅助功能模式；</li>
<li>保持简洁：让新的设计系统保持简洁、直接、易于操作执行。</li>
</ul>

<p><img src="media/15674389801268/7E2132DC-7C02-4F1E-9880-9236DBA3A791.png" alt=""/></p>

<h3 id="toc_3">Color 颜色</h3>

<p>每一个 app 都有一个背景，大多数 app 会包含文字、图形。有的还会包含分隔线、分组以帮助组织内容。在以前当我们描述这些的颜色时，可以直接说它们的色值是多少，比如文本是黑色，背景是白色等等。但当 app 有了另一套外观时，就出现了两套对应相同元素的不同颜色体系。</p>

<p><img src="media/15674389801268/051EB791-1111-4B2D-AFD0-6AE98178B070.png" alt=""/></p>

<p>此时，对颜色需要有一个更抽象的方式来描述，那就是「semantic colors 语义化颜色」。</p>

<p><img src="media/15674389801268/525A6D6E-F76B-4AA2-86B0-5AD9C2C41ECD.png" alt=""/></p>

<p>「语义化颜色」描述了一个颜色的目的而不是颜色的值。所以对于「背景颜色」来说，在亮色模式下是白色，在深色模式下就是黑色。你需要对 UI 元素匹配语义化颜色，以使得外观可以自动在亮色和深色模式之间切换。</p>

<p>大多数的颜色会分为四个等级：一级、二级、三级、四级。这些变种用来表现不同的信息层级。</p>

<p><img src="media/15674389801268/1EBDD6C2-467E-4DDC-A970-63B52C9745E1.png" alt=""/></p>

<p>Label 文字标签应该与背景有着最强的对比度，是需要用户注意的地方，所以对于标题使用一级，副标题使用二级，占位文本使用三级，不可用文本使用四级。</p>

<p><img src="media/15674389801268/9F81C17D-43BA-4A2E-8002-41F064B9CBBE.png" alt=""/></p>

<p>同样的，对于背景颜色也是这样。系统背景是一级，二级和三级的背景颜色可以让你在视觉上构建信息层级。</p>

<p><img src="media/15674389801268/4704953F-249F-4938-A4C6-C5913F89031B.png" alt=""/></p>

<p>对于成组的 table view 来说也有特定的视差背景效果。Table view 的背景是一级，每一行的背景是二级。仔细观察，相比于亮色模式，深色模式不是简单地将颜色进行翻转。</p>

<p><img src="media/15674389801268/92D3DA9F-0CD1-457F-A9C8-72EC20CC2441.png" alt=""/></p>

<p>新的系统色盘还包括「fill color 填充颜色」和「separator color 分隔线颜色」。所有的填充颜色和其中一个分隔线颜色都是半透明的。这对增强与多变的背景颜色的对比度有所帮助。</p>

<p><img src="media/15674389801268/0F1002CC-DADA-4A29-8776-27500D219B13.png" alt=""/></p>

<p>新的色盘还包括了六种完全不透明的灰色值。当透明会导致出现问题时，可以使用这些灰色值。例如在绘制横纵相见的分割线时。</p>

<p><img src="media/15674389801268/D2311261-FC2E-4052-AE50-BAABD2EB25F3.png" alt=""/></p>

<p>同样地，在色盘中，对于「tint color 着色」在亮色模式和深色模式中也有不同的变种。针对增强对比度模式，也有更进一步的变种。开启增强对比度功能后，对于一个颜色，在亮色模式中应该更暗，在深色模式中应该更亮。</p>

<p><img src="media/15674389801268/B105C12C-5FA9-4B88-A0F7-B371D2FF5E16.png" alt=""/></p>

<p><img src="media/15674389801268/E3B32D72-911F-472A-B098-69DBFD9DB91D.png" alt=""/></p>

<p>当你自己设置自定义的颜色时，要注意在两种模式中颜色的显示都应该合适，必要时应该使用颜色对比度计算器，对比度至少达到 4.5：1，对于更小的文本需要达到 7：1。更强的颜色对比度可以帮助改善 app 的可访问性和可用性。不同模式下的颜色可以在保证最小对比度的情况下保持相似。</p>

<p><img src="media/15674389801268/1D9B0DE5-1B2F-4B44-93D6-74525CA26667.png" alt=""/></p>

<p><img src="media/15674389801268/A4BD32F0-5B28-4934-9CC3-7196B3183FAC.png" alt=""/></p>

<p>当两个界面叠在一起时，我们需要建立视觉上的层级。比如两个白色背景的界面叠在一起的时候，两个界面之间会通过阴影来表现出两个界面间的关系。但到了深色模式下的黑色背景，这个方法就不太管用了。此时，需要对背景中的那个界面使用更深的背景，对于前景中的界面使用较浅的背景。</p>

<p><img src="media/15674389801268/3AB6AB66-57CA-4E1B-8FC5-A875AEFB4A30.png" alt=""/></p>

<p>以「通讯录」应用举例，当有一个模态窗口展示在原来的界面上时，通讯录的界面相比之前会更浅。</p>

<p><img src="media/15674389801268/4F198898-3971-4E9F-A19D-62EF7A42B9D3.png" alt=""/></p>

<p>继续看一个更复杂的例子，在 iPad 上的「邮箱」应用的界面上 slide over 一个「通讯录」应用。「通讯录」应用的背景颜色会比背景中的「邮箱」应用更浅，以使其更显眼。</p>

<p><img src="media/15674389801268/DD839CD9-A8D3-438B-84CE-2E45F72AA99E.png" alt=""/></p>

<p>当「邮箱」应用和「通讯录」应用以 side view 的方式并排展示时，它们两个应用的背景颜色都变得更浅了。这可以与两个 app 间的分隔线形成对比，也避免了两个 app 的背景色融在了一起，看上去像一个 app。</p>

<p><img src="media/15674389801268/BC4DDC06-7451-4F1E-B344-59F893935A39.png" alt=""/></p>

<p>再进一步，在上面的情况下，在「邮箱」应用中写一封新邮件会弹出一个模态窗口。新的窗口的背景颜色与旁边的「通讯录」应用一个层级，而背景中的「邮箱」主应用看上去变得更暗了一些。这是因为模态窗口绘制了一层遮罩覆盖在了上面。</p>

<p><img src="media/15674389801268/B6694725-3EED-4234-842A-10D2C4272B7B.png" alt=""/></p>

<p>以上，为了保持对视觉层级的呈现，需要在深色模式的设计中特别注意背景颜色的变化（可借助前面提到的「fill colors」和「separator colors」，并确保有合适的对比度。</p>

<p><img src="media/15674389801268/E5B6CA2C-6749-4180-801D-46B5706A2E7B.png" alt=""/></p>

<p>如果你必须在深色模式中使用白色的背景颜色，可以选择一个稍暗淡的白色，以此避免白色背景与周围的暗色内容相冲撞。</p>

<h3 id="toc_4">Materials 材料</h3>

<p>在 iOS 13 中引入了四种不停厚度的材料：厚、普通（默认）、薄、超薄，并且针对亮色和深色模式有不同的变种。<br/>
如果需要建立与背景明确的对比度，可以使用更厚的材料；对于一些更轻量化的交互，可以使用更薄的材料。使用何种材料完全取决于你要展示的内容。</p>

<p><img src="media/15674389801268/71C5D5FD-61E6-4395-B3FE-85F888454CBB.png" alt=""/></p>

<p>对于不同的材料类型，系统也对文本标签、填充和分隔线的颜色进行了定义。「Vibrancy 虚化透明效果」是贯彻 Apple 所有系统的一个视觉效果，使用系统材料，建议最好使用动态调整颜色而不是固定的颜色。因为随着背景的各种变化，使用固定颜色可能会造成一些可读性的问题，而动态调整可以在背景颜色变化的情况下保持良好的对比度。</p>

<p><img src="media/15674389801268/B38ACF92-1D10-44EA-9812-04AA4E2D4708.png" alt=""/></p>

<p><img src="media/15674389801268/553B48CA-14F8-4FE3-A16C-153C324BB88F.png" alt=""/></p>

<h3 id="toc_5">Controls and bar 控件和栏</h3>

<p>iOS 13 UIKit 中的所有控件已经更新，针对于亮色和深色模式有着不同的变种。所有的控件都使用了语义化颜色重新绘制。不要对这些已有的控件尝试重新创造，不要重复造轮子。</p>

<p><img src="media/15674389801268/10CA82E2-0904-48D4-8E0D-0D4D28CF23D0.png" alt=""/></p>

<p>在创造自定义控件时，针对于亮色和深色模式的不同颜色使用系统色盘。</p>

<p><img src="media/15674389801268/9A7A0EDC-8711-4A0A-92C5-00D7ED2E7B7C.png" alt=""/></p>

<p>导航栏也被进行了更新。默认情况下，大标题导航栏没有背景和阴影，这可以使标题和下面的内容融为一体。当内容滚动时，导航栏的背景和阴影才会出现。</p>

<p><img src="media/15674389801268/4977D064-E0FB-44A3-954F-F43F73F2E308.png" alt=""/></p>

<p>非大标题的导航栏在某些情况下也可以使用这种效果。例如在 iPad 上的「设置」app，master view 和 split view 中的导航栏都没有背景和阴影。</p>

<p><img src="media/15674389801268/253033E1-998A-4F57-BEF8-12B2612EFC57.png" alt=""/></p>

<p>但这种样式并不是总是合适的。以下两种情况还是更适合以前的导航栏样式：<br/>
    * 元素会出现在透明的导航栏后面时；<br/>
    * 需要视觉分隔时。</p>

<p><img src="media/15674389801268/C208AC65-6DBE-47CC-B84D-0FADADD5C120.png" alt=""/></p>

<h3 id="toc_6">SF Symbols</h3>

<p>以前，iOS 系统提供了一些常用的「symbol 符号」用于表示 table view 每一行和工具栏上的图标。但现在有了深色模式，一些符号就会看上去不是很合适，显得有些单薄。</p>

<p><img src="media/15674389801268/850CC01D-0D09-4EBB-97C8-1C025EB61014.png" alt=""/></p>

<p>设计团队重新设计了所有的符号，并且整合成了包含 1500 多个符号的「SF Symbols」。这不仅仅是一些图标的合集，而且这代表了一种思考、设计图标的新的方式。</p>

<p><img src="media/15674389801268/61A389C4-E26F-4D3F-8CF2-25D58F7D179C.png" alt=""/></p>

<p>SF Symbols 可以与 Apple 的系统字体 San Francisco 的设计特征相匹配。它们可以被展示到一行文本中，SF Symbols 中插入了基线以确保能与文字有合适的对齐关系。每一个 SF Symbol 在一个字号下提供了小、中等、大三种大小变种以适配不同的情景 。</p>

<p><img src="media/15674389801268/9C0D501E-81D6-4C51-BBDE-60BEBCA0411C.png" alt=""/></p>

<p>并且每一个 SF Symbol 也像 SF 字体一样提供了九种字重，因此在粗体文本的辅助功能开启时可以变得更粗。因为 SF Symbols 是矢量的，所以可以跟随文本在动态类型中发生变化。</p>

<p><img src="media/15674389801268/B03256ED-240B-4C35-B865-EE6571A6A6FD.png" alt=""/></p>

<p>要在实际的设计中使用 SF Symbols，只需要在 SF Symbols app 中浏览或搜索你想要的符号，将其复制粘贴到你的设计中即可。</p>

<p><img src="media/15674389801268/9612CE0C-2A32-4E25-AC69-2A98B99C4BEE.png" alt=""/></p>

<p>如果 app 中没有你想要的符号，你可以通过模板创造一个格式为 svg 的自定义的符号，之后就可以获得 SF Symbols 所提供的所有功能。</p>

<p>有关于 SF Symbols 的更多细节和使用方法请阅读<a href="15675148872165.html">「在设计和开发时使用 SF Symbols」</a>。</p>

<h2 id="toc_7">Modal Presentations 模态展示</h2>

<p>新的卡片样式的表单不仅通过一种不同的方式呈现了「Modal Prensentations 模态展示」，而且改变了我们与这些控件交互的方式。</p>

<p><img src="media/15674389801268/84F85BAC-67D0-4E1C-9EA6-CC1EC96ECD71.png" alt=""/></p>

<p>模态展示通常被称为「sheets 薄片」，因为它是从屏幕底部划入屏幕中的。这个进场动画告诉人们他们从一个模式转换到了另一个新的模式或者说进入了 app 的一个新的模态。在 iOS 13 中，模态窗口有了一个在全系统使用的新的像卡片样子的外观。模态展示的好处是可以让用户看到背景中还有其他内容待确认或者待完成。如果是一个全屏的模态窗口，你可能就会忘记你之前在做什么。</p>

<p><img src="media/15674389801268/7F9F72A7-5DFD-4D2E-BF92-95C4B292AA3B.png" alt=""/></p>

<p>模态窗口可以通过在卡片的导航栏上向下滑动来关闭。不可滚动的卡片样式的模态窗口可以通过在任意位置向下滑动来关闭，这比点击导航栏上的一个按钮来得更容易操作，而且这种单指就能完成的操作也对大屏手机有利。可滚动的模态窗口向上滚动到顶端，若继续向上滚动则可以关闭模态窗口。</p>

<p><img src="media/15674389801268/51B77D63-51C6-4A08-884E-906257511494.png" alt=""/></p>

<p>如果你的 app 的某个交互与这个关闭交互发生了冲突，那这个关闭操作就会不起作用。当模态窗口包含一个强制性的操作请求时，那关闭模态窗口的交互也会不起作用。例如在关闭一个正在写邮件的模态窗口时，为了防止用户误操作而丢失内容，界面会显示一个 Action Sheet 让用户选择是否要保存草稿。</p>

<p><img src="media/15674389801268/AE97B31F-6872-4D5E-B88A-872E48E589A1.png" alt=""/></p>

<p>有了关闭的手势并不代表不需要可以执行关闭操作的按钮。关闭按钮对于让用户知道这个页面可以关闭十分重要，对于可访问性也非常有帮助。况且人们可能并不熟悉关闭窗口的手势操作。而且当一个内容区域被向下滚动时，一个关闭操作的按钮也更加方便。</p>

<p><img src="media/15674389801268/BA4E395B-55E2-4B1A-A3C1-3B2089FA2956.png" alt=""/></p>

<p>虽然卡片形式的模态展示非常方便，遍布整个 iOS 系统，但是并不代表这个交互总是合适的。对于一些任务，像编辑图片、标记截图界面，你更需要最大化屏幕操作空间，减少让用户分心的视觉元素。对于这种情况，你应该使用全屏的模态展示。</p>

<p><img src="media/15674389801268/8CAC7C5E-B6F7-421F-8D83-95D387187A76.png" alt=""/></p>

<p>特别注意，模态是指的是模式之前的切换。不要因为喜欢这个交互的动效或者视觉样式而去使用它。例如在日历中，当浏览日历时你可以查看日历的所有事项，选中某个事项查看详情。因为我们一直处于浏览模式，一个子视图更加适合展示事项详情。一个子视图就是父视图的延伸，其代表任务或者工作流的继续。当创建或编辑一个事项时，一个模态窗口表示进入了一个新的工作流。</p>

<p><img src="media/15674389801268/8B778C6D-2B5B-40B3-8CB2-EA874F2D7EF2.png" alt=""/></p>

<h2 id="toc_8">Contextual Menus 情景化菜单</h2>

<p>新的「Contextual Menus 情景化菜单」控件使快速获取情景相关的功能更加简单。</p>

<p><img src="media/15674389801268/EB1ADF03-10DB-4E52-8F8F-151022C908C7.png" alt=""/></p>

<p>通过 3D Touch 引入了一个新的一个新的交互「Peek」和「Pop」。这对于预览内容很有用，如果有相关的操作可以通过上划显示并选择相应的操作。情景化菜单在这基础上进行了转化，将重点放在了操作上。与内容相关的操作可以立马呈现出来。</p>

<p><img src="media/15674389801268/E68D02C0-178A-41BE-AB5A-2ED19B0F1EDD.png" alt=""/></p>

<p>情景化菜单可以在所有的设备上起作用，而 peek 和 pop 操作只在具备 3D Touch 功能的设备上起作用。展示情景化菜单的手势是通过长按，而在具备 3D Touch 功能的设备上操作更简单，只需用力按。情景化菜单可以分为两部分，一部分是可以被执行的操作，另一部分是可选的，用于显示所选内容的预览。</p>

<p><img src="media/15674389801268/66E6CD12-593E-4F4D-B94B-A7E64D4B9C4B.png" alt=""/></p>

<p>情景化菜单的样式取决于设备的屏幕尺寸和方向。在 iPhone 上情景化菜单的预览和命令操作竖直排列，在 iPad 上当命令操作小于等于三个时，也是竖直排列，而其他情况则是左右排列。</p>

<p><img src="media/15674389801268/8EDA95BD-4E07-4E11-9599-48EA23657854.png" alt=""/></p>

<p>情景化菜单会出现在被触发内容的最近之处，应该把用户常用的操作放在上面。并且对于相关的操作应该作为一组，对于不同的组可以使用分隔线进行视觉区分。情景化菜单也可以是有层级的，某些操作可以有二级操作。情景化菜单也包括一个图标帮助用户快速找到想要的操作，并使用红色文本标签提醒用户这是一个破坏性的操作。就像 macOS 的情景化菜单（右键菜单）一样，你应该尽可能地让 app 的每一个对象都有情景化菜单。</p>

<p><img src="media/15674389801268/32B6A089-A1F4-4510-97A7-08E77385F3CC.png" alt=""/></p>

<p>情景化菜单中的操作也应该在 app 中的其他位置找到并可用。因为人们可能并不一定能及时发现相关的情景化菜单。</p>

<h2 id="toc_9">参考链接</h2>

<ul>
<li><a href="https://developer.apple.com/videos/play/wwdc2019/808/">What’s New in iOS Design - WWDC 2019 - Videos - Apple Developer</a></li>
<li><a href="https://developer.apple.com/design/human-interface-guidelines/ios/visual-design/dark-mode/">Dark Mode - Visual Design - iOS - Human Interface Guidelines - Apple Developer</a></li>
<li><a href="https://developer.apple.com/design/human-interface-guidelines/ios/visual-design/color/#dynamic-system-colors">Color - Visual Design - iOS - Human Interface Guidelines - Apple Developer</a></li>
<li><a href="https://developer.apple.com/design/human-interface-guidelines/ios/visual-design/materials/">Materials - Visual Design - iOS - Human Interface Guidelines - Apple Developer</a></li>
<li><a href="https://developer.apple.com/design/human-interface-guidelines/sf-symbols/">SF Symbols - SF Symbols - Human Interface Guidelines - Apple Developer</a></li>
<li><a href="https://developer.apple.com/design/human-interface-guidelines/ios/bars/navigation-bars/">Navigation Bars - Bars - iOS - Human Interface Guidelines - Apple Developer</a></li>
<li><a href="https://developer.apple.com/design/human-interface-guidelines/ios/app-architecture/modality/">Modality - App Architecture - iOS - Human Interface Guidelines - Apple Developer</a></li>
<li><a href="https://developer.apple.com/design/human-interface-guidelines/ios/controls/context-menus/">Context Menus - Controls - iOS - Human Interface Guidelines - Apple Developer</a></li>
</ul>

<blockquote>
<p>如果你觉得这篇文章对你有所帮助，欢迎请我喝杯咖啡，感谢你的支持😁</p>

<p><img src="media/14625521742746/15088240400740.jpg" alt=""/></p>
</blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[跨平台设计时的思考路径]]></title>
    <link href="https://steppark.net/15706056024784.html"/>
    <updated>2019-10-09T15:20:02+08:00</updated>
    <id>https://steppark.net/15706056024784.html</id>
    <content type="html"><![CDATA[
<p>Apple 创造了很多平台，对于每一个创造的平台，对于每次更新一个平台的时候，我们的目标都是改善你的每日生活，希望在平台和你之间创造一个有意义的关系。这个关系不仅仅只在一个平台上出现，你使用的 Apple 产品越多，你就越不会只依赖一个平台，而是依赖整个生态系统。</p>

<span id="more"></span><!-- more -->

<p>你可能通过在 Apple Watch 上点击开始跑步以开始你的一天。在工作时，你可能会使用 MacBook 或者 iMac。当你要回家时，你可能在你的 iPhone 上寻找公共交通信息或者在车上使用 CarPlay。当你回到家，你可能想放松一下在 Apple TV 上看一个电视剧或电影，在一天的结束，你可能在你的 iPad 上读一会儿书。不管你使用的是什么设备，你都可以依靠苹果生态系统去识别你、理解你、帮助你。创造并为这个生态系统做贡献要求对每一个平台都有很深的理解。<br/>
<img src="media/15706056024784/45A85A77-1769-438D-8F8A-A48CBAFDCDA1.png" alt=""/></p>

<p>作为一个在 Apple 的设计师，那是一个非常熟悉的挑战。对于每一个 Apple 创造的 app，我们仔细考虑它应该生存于哪个平台，在不同平台之间是怎样的。如果你仔细看看 Apple 创建的 app，你可能会意识到有一些 app 在所有的平台上都存在，如「照片」、「音乐」，而另一些 app 只存在于某些平台，如「备忘录」、「邮件」。如果你能有多个设备，一些我们的服务（如 Apple Pay）会工作得很好。其他的像是「FaceTime」你得同时有多个设备才能工作。</p>

<p><img src="media/15706056024784/8DC23A54-BE64-4325-B005-843885455A84.png" alt=""/></p>

<p><img src="media/15706056024784/55D199EE-FBF4-4F9A-979F-613CB68906CA.png" alt=""/></p>

<p><img src="media/15706056024784/4A25BBDE-0DB3-4699-826E-C04C2BCD2E03.png" alt=""/></p>

<p>这篇文章谈论的就是为了帮助你在跨平台之间设计，我们在 Apple 使用的方法。目标是更有效率，更有目的，把你的 app 带到更多的平台上去。</p>

<p>第一部分是「选择」，会讲一讲每个平台的能力和使用情景，基于这些信息作出设计决定。第二部分是「适配」，会看一看我们想带到平台上的亮点和功能以及去管理它们。第三部分是「遵从」，尝试在我们自己的品牌和平台设计规范之间找到一个平衡，确定 app 长什么样子并去感受它。第四部分是「连接」，会看一看当你从一个平台到另一个平台上会发生什么，它是怎样让体验无缝衔接、轻松愉悦的。最后一部分是「延伸」，看一看多个平台都可用时会发生什么。</p>

<p><img src="media/15706056024784/20C3201E-DE51-4F4A-B408-3EF92B6A2372.png" alt=""/></p>

<p>希望在文章结束之时，你能获得你在 Apple 生态系统下打造令人惊异的 app 所需要的所有需要的信息和知识。</p>

<h2 id="toc_0">目录</h2>

<ul>
<li>
<a href="#toc_0">目录</a>
</li>
<li>
<a href="#toc_1">选择 Select</a>
</li>
<li>
<a href="#toc_2">适配 Adapt</a>
</li>
<li>
<a href="#toc_3">遵从 Conform</a>
</li>
<li>
<a href="#toc_4">连接 Connect</a>
</li>
<li>
<a href="#toc_5">延伸 Extend</a>
</li>
<li>
<a href="#toc_6">总结</a>
</li>
<li>
<a href="#toc_7">参考链接</a>
</li>
</ul>


<h2 id="toc_1">选择 Select</h2>

<p>当谈到选择的时候，我们很想回答这个问题：我该选择哪个平台？也许你的 app 还没有诞生，你想要决定首先在哪个平台上创造它；或许你已经在一两个平台上发布了你的 app，你尝试选择下一个平台。<br/>
当我们选择平台时，「使用场景」和「能力」非常重要。使用场景有关于你的 app 的使用时间、地点、环境。能力是平台之间得以区分的独一无二的功能。</p>

<p><img src="media/15706056024784/19D99691-C191-4211-8795-AAC7CB4C87EF.png" alt=""/></p>

<p>因为人们切换使用场景时会经常切换使用平台，所以「使用场景」很重要。例如你从一个专注固定的场景中到了一个公共汽车或者火车上，这就变成了一个非常动态、移动的场景，这是一个很大的变化，也解释了为什么人们会从 Macbook/iMac 切换成了 iPhone/Apple Watch，因为电话和手表更优化于移动的场景。<br/>
理解「能力」同样重要，因为它让你看到是什么让一个平台独一无二、你的 app 如何从这些能力中受益。</p>

<p>举几个例子，从最熟悉的平台 iPhone 开始。如果你思考 iPhone 的使用场景，它总是开启的，总是在你身边，因此它是移动的，它是非常个人和隐私的设备。你不会很容易与其他人分享它，它针对短时间使用进行了优化。当你使用 iPhone 时，你可能只会用几分钟。<br/>
能力支持了这个场景。iPhone 具备陀螺仪、加速器，即使你没有在使用 iPhone，你也可以在后台访问到这些配置的信息。因为你的 iPhone 是个人和隐私的，它通过 Touch ID 和 Face ID 保护。为了让短时间的使用更加容易、有趣，会有一块详细的触摸屏。</p>

<p><img src="media/15706056024784/4B75F946-B862-4198-8E49-59E092BD96D8.png" alt=""/></p>

<p>Apple Watch 有些相似，也是始终开启、始终在你身边，也是个人和隐私的，但是它更加瞬时，为更短的使用时间所优化。例如，通过撇一眼，你就能在表盘上看到想要的信息，通知只在你看足够长的时候才给你展示更多信息。<br/>
来看下手表的能力。因为手表是个人的，所以它可以跟踪你的移动、你的心跳甚至你的位置。触感可以在你该看手表的时候告诉你，表盘可以根据你想看到的信息自定义。</p>

<p><img src="media/15706056024784/9FC3F7A9-A52E-4518-A046-A2A9CAD91A8A.png" alt=""/></p>

<p>再来看下 iPad，iPad 有非常混合的使用场景。你可以在家里使用，也可以在路上使用。你可以在上面做非常精确专注的工作，也可以用它作为一个放松设备，用它看电影、看电视剧、玩游戏。所有的这些比 iPhone、Apple Watch 的使用时间更长。<br/>
更大的屏幕支持了这些使用场景。光线感应器让你可以在晚上和白天都使用 iPad，高保真扬声器让你可以沉浸于电影和游戏，iPad 同样配备和 iPhone 一样的触摸屏。如果你给 iPad 配备了 Apple Pencil，交互就会更加精确。</p>

<p><img src="media/15706056024784/569B895B-FC95-46D7-80DF-6D662DB2C01C.png" alt=""/></p>

<p>再来看下 MacBook，MacBook 的使用场景一般都是在比较专业的环境中。你可以在 MacBook 上做很精确、很复杂的工作，比如设计 app、开发 app。它也可以被用作为一台共享设备，但因为每个人都有一个账户，所以它仍然是个人化的。你会长时间使用 MacBook 或者 iMac。绝大多数人一天会用几个小时。<br/>
为了完成那些专业的工作，Mac 配备了很高的配置。Mac 上的鼠标和键盘让你可以做精确复杂的工作，多任务让你用你的方式做你想做的，多用户让你把 Mac 变成共享设备。</p>

<p><img src="media/15706056024784/7D0ED798-B829-413F-B041-C8C56B4DE7CD.png" alt=""/></p>

<p>最后来看下 Apple TV，Apple TV 是一个共享设备，你会与你的家人、朋友一起使用它，它是固定的，一般不会从一个地方移动到另一个地方。Apple TV 为放松的使用体验所优化，你可以在上面看电影、看电视剧、玩游戏。所有的这些活动都是长时间的使用，30 分钟或者更长。<br/>
Apple TV 可以与一台高清显示器/电视完美工作，让内容栩栩如生。遥控器很轻，使用很简单，你可以轻松把遥控器递给朋友或家人。因为它是固定的、与家庭密切相关的，所以它可以和 HomeKit 完美匹配。它为 10 步的距离所优化，所以你可以坐在沙发上放松并享受节目。</p>

<p><img src="media/15706056024784/693D7AB8-A9B1-48EE-B7A1-E99BAD7840D7.png" alt=""/></p>

<p>由上面的例子，你可以看到理解每个平台的使用场景和能力对帮助你选择哪个平台很重要。场景是平台生存的地方，能力让平台第一无二。<br/>
对于 app 来说也是这样，你可能想问你自己，我的 app 可以在哪个场景生存？它需要什么能力？在 Apple，当我们选择一个 app 应该出现在哪个平台时会有一个简单的测试。我会用几个例子来说明。</p>

<p>首先来看「活动」app，如果你思考「活动」的特点的话，它肯定是移动的。</p>

<ul>
<li>活动跟踪你整天移动的数据，为了给你提供准确的数据，它必须是开启的，时刻在你身边，因此是移动的。</li>
<li>它也得是私人的，它可以追踪数据且只是你的数据。</li>
</ul>

<p><img src="media/15706056024784/BA4A40E3-7846-4516-9D95-625EDF4F04AE.png" alt=""/></p>

<p>当你看到这两个特点时，我们要做什么就是我们把这些特点映射出来、画出来。比如移动性，我们可以把它从移动到固定画出来。如果你在这个范围看我们的平台，它将会是下图这样的。Apple Watch 是最具移动性的平台，Apple TV 是最具固定性的平台。</p>

<p><img src="media/15706056024784/7C8A4172-1AB7-4737-BA1E-DD11A20D42BD.png" alt=""/></p>

<p>如果你去看私人这个特点，我们可以把它从私人到共享画出来，像下图这样。Apple Watch 是最私人的平台，Apple TV 是最共享、最固定的平台。</p>

<p><img src="media/15706056024784/B7EED9EB-6BBA-49FE-9E47-0623370D3184.png" alt=""/></p>

<p>当我们回到「活动」app，我们说它是私人的、移动的。所以在图表中就应该落在下图所示的那里。这也解释了「活动」app 为什么只在那两个平台上存在，而在其他平台上不存在。</p>

<p><img src="media/15706056024784/7CE08A12-8FC7-46F7-B6F9-DFA080ED8517.png" alt=""/></p>

<p>另一个例子来看「库乐队」这个 app。它的特点是你必须非常精确，你必须在你想要的地方和时间准确操作声音。第二点，它需要与多任务配合工作，你需要能够同时播放多个声音，需要控制连接到平台上的所有的硬件和乐器。</p>

<p><img src="media/15706056024784/A62B6C82-57B0-4222-89DD-7917709D042B.png" alt=""/></p>

<p>我们同样可以把这些特点画出来，我们可以把它从宽松的交互到精确的交互画出来，平台的情况会像下图这样。在一个配备了鼠标和键盘的 MacBook 上，你可以做到很精确，但在一个 Apple Watch 上，因为屏幕很小，人们手指很粗，你就不能很精确。</p>

<p><img src="media/15706056024784/D2727B9C-8793-4187-9169-EE7329A1F9C5.png" alt=""/></p>

<p>如果你看多任务这个特点，我们可以把它从多任务到单任务画出来。在 MacBook 上，你可以很容易地同时处理多个任务，而在 Apple Watch 上，你只能一次处理一个任务。</p>

<p><img src="media/15706056024784/5A281545-4C3C-49D5-A812-CC9A29FE65D6.png" alt=""/></p>

<p>如果你要看看「库乐队」该处于何位置时，因为它必须支持多任务、必须足够精确，所以它应该位于下图所示的位置。这也解释了「库乐队」app 为什么只在那三个平台上存在，而在其他平台上不存在。</p>

<p><img src="media/15706056024784/2D35C142-8A82-462A-A959-FC234761527B.png" alt=""/></p>

<p>根据不同的特点，我们一遍又一遍地做这个测试，最终我们希望可以找到你的 app 可以生存的那几个平台。基于它支持的场景、提供的能力选择一个平台，它验证了你的 app 会在哪里受益最多，这就是选择。</p>

<p><img src="media/15706056024784/ADD2F45D-EB99-4FFB-8C82-37F46558518A.png" alt=""/></p>

<p>这就是选择。</p>

<h2 id="toc_2">适配 Adapt</h2>

<p>通过适配，我们去看看我们想带给 app 的所有的交互、所有的特性、所有的功能，并尝试在我们想要的几个跨平台上管理它。<br/>
用一个例子来解释，再来看下 iPhone 上的「活动」app，这个 app 中你可以做很多种功能。你可以看看一天的活动进程，你可以看看你的成就、你的锻炼，你可以看看你朋友运动情况如何。你也可以管理所有的这些数据，邀请朋友、分享成就和活动进程。所有的这些功能在 iPhone 上都是可以实现的，如果你回过头去考虑下 iPhone 的使用场景，这些功能也会工作的很好。iPhone 是一个非常私人的设备，所有的你做的这些交互都包含私人信息。iPhone 为短时间使用所优化，所有的这些交互都不会花很长时间，你可以快速完成它们。</p>

<p><img src="media/15706056024784/38FA16DD-5878-4ACB-8F63-4397B96ADC9F.png" alt=""/></p>

<p>但是如果你看一下它在 Apple Watch 上的表现，我们会看到功能设置很大程度上被削减了。如果你回过头去考虑下 Apple Watch 的使用场景，这是讲得通的。手表也是一个私人设备，所有的这些交互、信息也是私人的。但手表是为非常短的交互所设计，比如瞥一眼。所以我们确保你可以通过瞥一眼看到自己的活动进程，看到朋友们运动如何。</p>

<p><img src="media/15706056024784/09FE97C9-C9AB-4B6C-8EAB-A53B054E77A7.png" alt=""/></p>

<p>所以关于适配很大的一部分就是看看在你想要呈现的跨平台上是如何管理你的交互和功能的。另一部分是看看一个平台可以提供哪些独一无二的能力，你的 app 又是如何从中受益的。当我们看 Apple Watch 时，手表的独一无二的一些能力是它可以追踪移动轨迹，可以跟踪你的心率、你的位置以及所有 app 需要的信息。如果你看看我们给 Apple Watch 带来的额外功能，你可以看到「创建体能训练」、「更改活动目标」。</p>

<p><img src="media/15706056024784/5554A7CC-3FD0-483A-834E-60202E18AFEA.png" alt=""/></p>

<p>适配会基于平台的情景和能力优选你的功能，会考虑那些可以从平台独一无二的能力中受益的新功能。</p>

<p><img src="media/15706056024784/9158168B-F71F-4924-8A77-87F73D7927A3.png" alt=""/></p>

<p>在这方面一个很好的例子是「Photoshop」。对于在 Mac 上使用过这个 app 的人来说，都知道「Photoshop」是一个很庞大的 app，包括非常多的功能，你可以在其中做很多事情。但是当要把这个 app 带到 IPhone 上时，Adobe 做得很好，他们把 app 拆分成了三个 app。所有的交互也为短时间使用所优化，利用手机独一无二的能力，增加了像是能在 app 中立即拍照的功能。</p>

<p><img src="media/15706056024784/2D9A7EB3-6455-42B7-8DBE-82F3A7869EBD.png" alt=""/></p>

<p>另一个很好的例子是「New York Times」。如果你想在这个平台上读一篇文章，你可以在 iPhone 上、iPad 上或者网站上完成。但如果你看看在 Apple Watch 上他们是怎么做的，你只能看到最近一系列文章的标题，如果你对其中一个感兴趣，你可以向下推就可以看到一个对文章简短的总结，但是如果你想看整篇文章，你需要花很长时间，那 Apple Watch 不能实现。因此，它要求你到 iPhone、iPad 或者网站上查看。</p>

<p><img src="media/15706056024784/D559AF12-F7CC-49B5-9014-EE6843677770.png" alt=""/></p>

<p>这就是适配。</p>

<h2 id="toc_3">遵从 Conform</h2>

<p>在第一步中，我们看了你该选什么平台，在第二步中，我们看来具体的功能，现在我们来看看 app 的外观和感觉。当人们谈到外观和感觉时，他们总是会想到一致性这个词，那是在把 app 带到多平台时非常重要的一个词。但是一致性并不意味着完全相同。在 Apple，我们不会把功能和视觉元素从一个平台复制粘贴到另一个平台。<br/>
做到一致性更多的是一件平衡的事。你必须在两种类型的一致之间平衡，一种是品牌平衡，这意味着当用户打开你的 app 时，他们应该识别出你的品牌，它应该很熟悉，这会在品牌和使用 app 的人之间构建信任。另一种是平台规范，这意味着你需要使用平台提供的标准，你的 app 才会像原生的一样。因为这些标准会出现在平台上的所有 app 中，人们会感到识别度很高。认知负担越低，学习曲线越减缓。所以在这两种类型的一致性之间找到平衡是很重要的，这可能是整个过程中最困难的一部分。</p>

<p><img src="media/15706056024784/CEAC2EFB-781A-4121-9E47-FA5E21AD54F2.png" alt=""/></p>

<p>Apple 的 HIG 可能可以帮助到你，它可以帮助你理解所有的平台提供的标准和规范，也可以帮助你理解你的品牌在这些规范中该落地何方。一个例子就是你可以使用的的字形，它们都根据所在的平台最优化。这并不意味着你必须使用 SF 字体，或者你必须使用特定的字形或样式，但是它可以给你针对于不同平台哪个尺寸表现得更好的参考意见。</p>

<p><img src="media/15706056024784/E6DB2FD6-AE74-4C9E-A7B2-34C370A70675.png" alt=""/></p>

<p>例如，你看一下这三个平台上的「body」样式，你会看到它们的大小根据观看距离都设置的恰到好处，在 Apple Watch 上，你看手表时会离手表很近，所以它是很小的样式；在 iPhone 上，稍微远一点，所以它会比手表上稍微大一点；而在 Apple TV 上，观看距离很远，所以它的样式很大，人们可以从很远的距离舒服地看到屏幕上的内容。</p>

<p><img src="media/15706056024784/C425363C-5BD3-4A46-8CFD-9AC2AB74F588.png" alt=""/></p>

<p>除了样式上的特性，HIG 还可以在平台提供的标准和功能上帮助你。例如，Alerts 提醒弹窗，它会出现在每个平台上，拥有的元素都差不多，一个描述、一到两个动作，会模糊掉后面显示的内容。但是，如果你仔细看描述的长度、按钮的样式、轻点的目标，它们都根据各个平台进行了优化。因此使用用户熟悉的、一眼就认得出的系统提醒弹窗会让用户易于使用。</p>

<p><img src="media/15706056024784/52573A32-4C3C-4820-AD37-7FB91C829BDD.png" alt=""/></p>

<p>导航也是这样。如果我想在 Apple Watch 上导航到上一个屏幕，我只需要轻点左上角的后退按钮，iPhone 也是这样。而在 Apple TV 上，屏幕上没有后退按钮，因为后退按钮是位于遥控器上的，所以没有必要在屏幕上再添加一个按钮用于导航。</p>

<p><img src="media/15706056024784/6DADE0CE-E04B-4F6D-83A7-490C7171965A.png" alt=""/></p>

<p>这就是遵从要讲的内容，需要在你的品牌和平台规范之间找到一个平衡，向你的品牌看齐，这样你的品牌就会被认出、让人们熟悉并创造信任；向平台规范和功能看齐以降低认知负担、减缓学习曲线。</p>

<p><img src="media/15706056024784/F366C779-96D2-4B6A-A629-EB7FFED58CF0.png" alt=""/></p>

<p>举一个第三方 app 的例子「Ulysess」。如果你在 iPhone、iPad、Mac 上使用这个 app，就会发现一系列的平台提供的标准，它们都使用了导航栏、工具栏、搜索区域、分隔视图，在这些地方，品牌呈现全都体现在写作体验中。通过允许专注聚焦、快速应用 markdown 格式，在 app 中写作变成了一份奇妙的体验。</p>

<p><img src="media/15706056024784/48752708-F061-480E-BF02-E6D3C2CFF99C.png" alt=""/></p>

<p>另一个例子是「Streaks」，你通过颜色、排版、图形甚至是长按完成任务的交互就能马上辨别出它的品牌。但它们也同样遵从了平台规范，比如，智能通知、缩放字体、适配新的语言。</p>

<p><img src="media/15706056024784/9C26971C-6942-4393-9EE3-5A131F194AF8.png" alt=""/></p>

<p>最后一个例子是「Tinder」，你同样会从图形、颜色以及左划右划的交互辨别出品牌。但它仍然向平台设计规范看齐。UI 大小根据不同平台进行调整，左划右划的独一无二的交互也不会妨碍平台功能。</p>

<p><img src="media/15706056024784/8E8D2CEE-7FA6-4372-BFD7-2AF3B7BBB9C4.png" alt=""/></p>

<p>这就是遵从。</p>

<h2 id="toc_4">连接 Connect</h2>

<p>如果这是你第一次在第一个平台上发布你的 app，现在已经搞定了。你选择了你的平台，定义了 app 的功能，定义 app 的外观和感觉。现在，你可以构建它并且发布了。但是，如果你这你这是在第二个、第三个平台上发布你的 app，连接会变成非常重要的一步。<br/>
当谈到连接时，有两个点很重要，进入点和退出点。进入点是当你打开 app 你开始使用时，退出点是经过一段时间，你在 app 中完成了工作，你关闭它去做其他事时。这两点都很重要，即使你只有一个平台。</p>

<p><img src="media/15706056024784/5554BDF3-0133-4568-8687-190CDC883282.png" alt=""/></p>

<p>每当你再次打开 app 时，你希望不会看到同样的启动屏幕，但是这可以帮助你创造你最后一次打开 app 时相同的环境，我们称之为「再创造状态」。此处的状态是指你最后一次打开 app 时的内容、信息和设置。取决于你的 app 可以做什么，状态可以是任何形式。</p>

<p><img src="media/15706056024784/0F078002-CBCE-488C-8259-4E4C04DD830F.png" alt=""/></p>

<p>例如「天气」app，再次打开时，应该显示与上次打开 app 时相同的位置和城市的天气，但天气信息已经更新了。</p>

<p><img src="media/15706056024784/F891A757-26B1-4A5D-8ECC-D4F875FF9A6D.png" alt=""/></p>

<p>再比如「备忘录」app，它可以打开你上次工作的那个笔记，如果可能的话还会选中相同的工具。</p>

<p><img src="media/15706056024784/E5E47CB9-F0E6-4115-8666-ED08D9DFA224.png" alt=""/></p>

<p>对于像是电影、电视剧、游戏等的媒体型 app，你会希望它恢复上次离开时的进度。例如，在游戏中你不需要一遍遍地从头玩游戏到某个相同的点。</p>

<p><img src="media/15706056024784/7A07B97D-FB90-46F7-A03A-F9D62316CBD9.png" alt=""/></p>

<p>当你在平台间切换时，记住状态变得更加重要。在任何平台能够记住并且再创造最后使用的状态可以创造一种轻松愉悦的体验。它允许人们在任何他们喜欢的场景中享受 app，因为你作为一个 app 开发者或者设计师，你应该关注平台上的最优化体验。</p>

<p><img src="media/15706056024784/0960812C-0FB1-468F-ABA6-D9E61E90B1B2.png" alt=""/></p>

<p>在 Apple，我们努力尝试去连接平台。例如，在「TV」app 中，它记住的状态是你上次停止观看的地方，你看得哪个电视剧和在哪个时间点暂停的是可以所以设备间同步的，所以你可以在任何你选择的平台上恢复播放进度。</p>

<p><img src="media/15706056024784/43CD346D-1B4D-40C3-A84A-CCAEDCB040F1.png" alt=""/></p>

<p>另一个例子是「地图」app，早上我在地图上搜索了我如何到达会议中心，因为我做过这个动作，这个搜索就会进入我的最近搜索中，最近搜索就是一个可以在所有平台重新创造的状态。所以，当我进入我的车里时，那个最近搜索就可以在列表中看到，我可以点击并前往目的地。</p>

<p><img src="media/15706056024784/940DCEFE-8424-4CF4-BD22-6758BA4DC7F7.png" alt=""/></p>

<p>如果你在所有的平台上都配置好了你的 app，用起来会非常棒。但是当一个新平台加入时会发生什么？假如你在用 MacBook 或者 iPhone，有一天你买了一个 iPad，它变成了你生活的一部分。你会在 iPad 上安装 app，大多数时候，在 app 可以重建你的状态前，它需要一些信息，它需要额外的一步，那就是配置步骤。App 需要知道你是谁，所以它可以重建你曾经在另一个平台上最后一次使用 app 的状态。</p>

<p><img src="media/15706056024784/EF444831-0BAA-4808-B21C-53E070F2BC61.png" alt=""/></p>

<p>通常情况下，这样一个配置步骤像下图这样，这非常让人泄气，你必须记住你的电子邮箱、用户名、密码，而且还得输入它，你还可能会输错。最后，你可能就退出了，不想再在这个平台上使用这个 app。</p>

<p><img src="media/15706056024784/5B3BEE2B-BD70-417B-B972-A37E6AFE5080.png" alt=""/></p>

<p>但是，得益于像是 iCloud 钥匙串 这样的功能，你可以让这些步骤变得轻松简单。通过点击一个按钮，iCloud 钥匙串可以填充上你的名字、电子邮件和密码，你就可以用了。</p>

<p><img src="media/15706056024784/8ADB4863-903E-43BD-9D12-9C6E01AF2BA8.png" alt=""/></p>

<p>在 Apple，我们真的非常喜欢这个部分、这个配置步骤，特别是在新平台上。如果你买了一个 Apple TV，你不需要手动配置，你只需要把你的 iPhone 或者 iPad 靠近 Apple TV，它就会把所有与 Apple TV 兼容的 app 以及 iTunes 上存储的证书移过去。所以当 Apple  TV 完成配置时，你会看到所有的 app 都在那里了，因为你在手机上使用过它们，你可以马上开始购买电影或游戏，因为 iTunes 证书也可以工作了。所以，这是一个很好的关于连接的例子。</p>

<p><img src="media/15706056024784/5360C15C-A615-46AC-8D2A-E20F24201190.png" alt=""/></p>

<p>连接是通过记住状态、最优化入口和出口，在平台间创建一个连续的体验。它允许通过快速简单的方式使用新的平台。</p>

<p><img src="media/15706056024784/C079E648-606A-4696-BAC0-A6DFB017E09D.png" alt=""/></p>

<p>一个第三方 app 的例子是「Things」，它重新创建的状态是你的待办清单。在任何你访问过 Things 的平台，你可以添加待办项，你可以完成一个待办项，你可以给它添加截止日期、组织它，而 app 可以在所有的设备上同步这些信息。</p>

<p><img src="media/15706056024784/4D22F01C-E83E-4571-9DC6-BF6AF0F9279C.png" alt=""/></p>

<p>「Deliveries」也在做相似的事情。它记住了你存储在 iCloud 中的跟踪列表，它可以通过快递服务对每个项目更新信息，这些信息你可以在任何你打开的平台上访问到。</p>

<p><img src="media/15706056024784/848E7CBD-048C-43B4-99E1-5886835F4145.png" alt=""/></p>

<p>一个无缝登录体验的好例子是「Instagram」，如果安装了 Instagram，并且已经安装了 Facebook，它会使用这些证书让你直接登录 Instagram。只需要一个轻轻的点击，Instagram 的内容就呈现在你的面前了，你就可以用了。</p>

<p><img src="media/15706056024784/5555254B-CBF5-4B66-A101-E21FA912FD87.png" alt=""/></p>

<p>这就是连接。</p>

<h2 id="toc_5">延伸 Extend</h2>

<p>在第五步中，我们看一看当两个平台同时可用时会发生什么。我们回到第一步选择中提到的平台的情景和能力，来看下 MacBook。MacBook 有很高的性能，你可以使用键盘和鼠标完成精确的工作，可以进行多任务，但是它不擅长的是知道你是谁。事实上，当我从睡眠中打开我的 MacBook 或者开机时，我将会看到下面这个画面。我必须输入密码或者用 Touch ID 登录，像前面提到的登录体验一样，如果需要需要手动输入密码，这让人有点泄气。我必须记住密码，如果输错了可能要输入好几次。</p>

<p><img src="media/15706056024784/4A3A0B7D-CF29-46D6-B245-5A688D3D3692.png" alt=""/></p>

<p>但是这是 MacBook 知道我们是谁的唯一方式，它没有其他方式确认我的身份。但如果你有一块 Apple Watch，因为手表总是戴着并与你相伴，它知道你是谁。所以当 MacBook 和 Apple Watch 之间可以对话时，魔法就出现了。手表可以告诉电脑那就是你，登录吧，你还没反应过来，你的电脑就已经登录并呈现在你的面前了。这里很重要的一点是这个体验有多么轻松，我没有让 MacBook 一直聆听我的 Apple Watch，我没有让 Apple Watch 向 MacBook 传递信息，仅仅是因为它们靠得近一切就发生了。事实上，我什么都不用做。</p>

<p><img src="media/15706056024784/A1725B5F-D445-4288-8AFF-A01C9FBF762F.png" alt=""/></p>

<p>所以，当你有多个平台可用的时候，创造一种轻松的体验是非常重要的。增加一个平台不应该导致步骤的额外增加。再来看另一个平台，来看看 iMac，iMac 也有着高性能，同时还有一块大的显示屏，这有利于浏览网页甚至说是购物。但不幸的是，iMac 不能安全地存储你的 Apple Pay 卡片信息。但是 iPhone 可以做到。所以当这两者开始对话时，支付就可以瞬间完成。当你想在 iMac 上买东西时，它会告诉你到你的 iPhone 上，你的手机会使用安全存储的 Apple Pay 卡片，通过 Touch ID/Face ID 验证确认购买，一切就搞定了，付款完成，你可以继续购物了。</p>

<p><img src="media/15706056024784/4220B186-7300-4734-B569-DA5B07E058E6.png" alt=""/></p>

<p>这也不必非得是 iPhone，iPad 和 Apple Watch 也可以做得到。这里很重要的一点是控制有多么清晰。iMac 清楚地告诉你去到 iPhone 上，在 iPhone 上，我可清晰地看到我要买的东西，通过 Touch ID/Face ID 完成确认，对于 Apple Watch 是通过双击完成确认，我还没反应过来的时候，购买已经完成了。</p>

<p><img src="media/15706056024784/1A6AB494-199A-4569-A11A-4B26D036ABD5.png" alt=""/></p>

<p>再来看一下「Keynote」，Keynote 是做演示的好工具。但做演讲的一个缺点就是你的 MacBook 总是与一台显示器或者投影仪相连。如果你想在幻灯片之间移动，你必须站在 MacBook 背后，因为键盘是移动幻灯片的唯一方式。但如果你有一个 iPhone，它就可以控制展示哪个幻灯片，你可以轻松地到处走动，因为手机更轻、更好拿。这里很重要的一点是它是可选的。如果我的手机没电了或者忘记了，我仍然可以回到 MacBook 旁边使用键盘移动幻灯片。所以，让其可选也是打造多设备一体化体验的重要一步。</p>

<p><img src="media/15706056024784/98793AC1-0C20-472C-9F1A-954889D64903.png" alt=""/></p>

<p>这就是延伸所包括的内容，我们通过组合不同平台的能力补足了不同平台，我们让如何控制不同设备变得清晰，我们向着一种可选的、轻松的体验努力。</p>

<p><img src="media/15706056024784/551A0638-C36B-499C-9AA9-86CDBC190126.png" alt=""/></p>

<p>一个第三方 app 的例子是游戏「Timber Tennis」，游戏总是能很好地理解多平台是怎样创造魔法的体验的。你可以在这个游戏中，通过多设备创造多角色的游戏体验，它是很轻松的。通过一个简单的按钮点击，你可以开始多角色游戏。游戏中有清晰的控制，因为屏幕上只有两个按钮。它是完全可选的，你可以使用电视、iPhone、iPad 或者随意组合来玩。</p>

<p><img src="media/15706056024784/E8AD484D-B30D-4C81-A562-680D1CB1C60B.png" alt=""/></p>

<p>另一个例子是「Zova」，即使你只有一个设备，Zova 也会工作的很好。如果你有 iPad 或者 iPhone 或者 Apple TV，你可以通过 Zova 开始训练，但你也可以通过多设备配合得到更好的体验。例如你有一块  Apple Watch，它会测量你的心跳，这个信息会在所有你使用的设备上共享，比如出现在电视上。它是令人轻松的，还是那样，你不需要做任何事情去让这些信息在设备间共享。我也不需要让手表去电视上展示心跳。它是完全可选的，Zova 在一个平台上和在多个平台上都工作的很好。</p>

<p><img src="media/15706056024784/E4348A65-1DC5-4418-9AB9-7636C049B4B7.png" alt=""/></p>

<p>这就是延伸。</p>

<h2 id="toc_6">总结</h2>

<p>这就是整个过程，我们基于每个平台的情景和能力选择我们的平台，我们通过优选新的和已存在的功能、利用独一无二的平台能力去适配。通过遵从，我们尝试着在品牌和平台设计规范间找到一个平衡。在连接中，我们看了当你从一个平台到另一个平台时会发生什么，让体验真正无缝轻松。最后，通过延伸了，我们看了当多个设备同时可用时，什么魔法事情会发生。</p>

<p><img src="media/15706056024784/20C3201E-DE51-4F4A-B408-3EF92B6A2372.png" alt=""/></p>

<p>我们设计我们的平台和我们的 app 以让你的每天生活受益，并创造一种有意义的关系。我们希望所有的 app 和平台创造一种比单独自己更棒的整体体验</p>

<h2 id="toc_7">参考链接</h2>

<ul>
<li><a href="https://developer.apple.com/videos/play/wwdc2017/804/">Designing Across Platforms - WWDC 2017 - Videos - Apple Developer</a></li>
</ul>

<blockquote>
<p>如果你觉得这篇文章对你有所帮助，欢迎请我喝杯咖啡，感谢你的支持😁</p>

<p><img src="media/14625521742746/15088240400740.jpg" alt=""/></p>
</blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[设计能让每一个人都用上的 app]]></title>
    <link href="https://steppark.net/15713081795025.html"/>
    <updated>2019-10-17T18:29:39+08:00</updated>
    <id>https://steppark.net/15713081795025.html</id>
    <content type="html"><![CDATA[
<p>你曾经考虑过世界上和你有着相同激情、需求但却不能使用你的 app 的其他人是怎样的吗？如果我们考虑下在十亿 Apple 设备背后有许多我们的潜在客户会是什么样？</p>

<span id="more"></span><!-- more -->

<p><img src="media/15713081795025/00EA509D-7BAD-4584-BFFD-7E2918FEBD1F.png" alt=""/></p>

<p>世界上每七个人中就有一个人有残疾，我们可以很确定那些想使用我们 app 或者平台的人是具备各种能力和本领的。</p>

<p><img src="media/15713081795025/B33C8CAD-3BDB-4CA9-AD26-1C21CB6C7435.png" alt=""/></p>

<p>人在认知能力、社交能力、灵敏性、机动性、视觉和听觉上是很大不同的。<br/>
为了充分了解并理解信息，我们在视觉、听觉、触觉的感知能力是十分重要的。如果你的某种能力被丢掉或被拿掉会发生什么？那是有可能在我们的人生轨迹中逐渐发生或者突然发生的。</p>

<p><img src="media/15713081795025/266AC47E-7520-4C41-BF64-8C57ECDBFECB.png" alt=""/></p>

<p>有身体残疾的人还包括一些极端的情况，例如大脑麻痹或瘫痪，亦或是腕管综合症或者是暂时的手腕损伤。</p>

<p><img src="media/15713081795025/7B293063-96B8-4992-B515-2DFE32E0F840.png" alt=""/></p>

<p>视觉能力丧失的人们包括失明、视力下降、色盲。还有由环境引起的能力的丧失，比如耀眼的屏幕或者我们都体验过的那种从黑暗电影院一下子走出来时的临时的失明现象。</p>

<p><img src="media/15713081795025/4CC5C9CB-CC53-470B-BCB3-4AE4353989AD.png" alt=""/></p>

<p>听力丧失是听觉残疾的主要类型。无论是先天的还是后天的，iPhone 的助听工具都改变了人们的生活。</p>

<p><img src="media/15713081795025/FEB47BE5-D370-4964-8F7C-D574F0545F4C.png" alt=""/></p>

<p>当我们把我们的通知队列按视觉、口头和触觉反馈展开来，我们可以让每个人都获得通知。根据统计数字显示，在美国每 68 个孩子中就有 1 个孩子被诊断出「自闭症谱系障碍」。自闭症个体对于突然而来的声音或者纷乱的图片都很敏感。也有许多成年人和孩子患有阅读障碍，包含多个视觉或者听觉选项可以帮助有阅读障碍的人，对于失明和视力低下的人也有明显帮助。</p>

<p><img src="media/15713081795025/BC8A167D-DBB6-4A34-AF3B-1B6BCD56120C.png" alt=""/></p>

<p>所以，如果我们思考了世界的每一个人都有着怎样的能力和本领，触及更多人的下一步就是让你的 app 可接近、可进入、可使用（accessible）。但是 accessible 这个词并不是被发明用来描述这些能力的残缺，它是让我们每个人都能用上，容易触及到、容易获得、容易使用、容易理解，针对于每一个人。</p>

<p><img src="media/15713081795025/62150D6B-DF92-4629-AEB4-9B07A6BC432A.png" alt=""/></p>

<p>不管你是有暂时的还是永久的伤害、年轻或年老、对科技陌生还是熟悉，不管你讲什么、写什么、读什么语言，都会喜欢使用好的 app。我们一起可以为每一个人设计更好的 app。</p>

<p><img src="media/15713081795025/1EFB5A88-EDA4-458B-8D20-E61B3830BAD4.png" alt=""/></p>

<p>为了做到这一点，这篇文章将会讲到一些在让你的 app 可以让更多人用上时你需要的设计思考方式方法。通过更加包容的设计，不仅是创造帮助每一个人日常生活中使用的 app，而且努力在整个社会中创造新的可能性。<br/>
这篇文章包括三个部分，为「简洁」而努力，让我们的 app 可以轻松使用、易于学习；可感知能力，确保我们的 app 在视觉、听觉、触觉上是可以被理解的；保证正直设计，确保覆盖了所有的人群。</p>

<p><img src="media/15713081795025/113B1784-505E-4F7C-B77B-6645936B90BE.png" alt=""/></p>

<h2 id="toc_0">目录</h2>

<ul>
<li>
<a href="#toc_0">目录</a>
</li>
<li>
<a href="#toc_1">简洁 Simplicity</a>
</li>
<li>
<a href="#toc_2">感知能力 Perceivability</a>
<ul>
<li>
<a href="#toc_3">最大化可读性</a>
</li>
<li>
<a href="#toc_4">动态类型</a>
</li>
<li>
<a href="#toc_5">字幕</a>
</li>
<li>
<a href="#toc_6">VoiceOver</a>
</li>
<li>
<a href="#toc_7">与 Siri 的结合</a>
</li>
<li>
<a href="#toc_8">触觉反馈</a>
</li>
<li>
<a href="#toc_9">实例-地图 app</a>
</li>
</ul>
</li>
<li>
<a href="#toc_10">正直 Intergrity</a>
<ul>
<li>
<a href="#toc_11">负起责任</a>
</li>
<li>
<a href="#toc_12">共情能力</a>
</li>
<li>
<a href="#toc_13">发挥潜力</a>
</li>
</ul>
</li>
<li>
<a href="#toc_14">总结</a>
</li>
<li>
<a href="#toc_15">参考链接</a>
</li>
</ul>


<h2 id="toc_1">简洁 Simplicity</h2>

<p>如果我们认为某件事情是可以简单地做到的，我们会认为这是没有困难、障碍或者认知负担的，这很轻松。但是对于那些感到简单的某些事情并不意味着不能做复杂的事情，那只意味着用尽可能最轻松和最讲究的方式尝试着实现渴望的结果。那些不简单的事情给人们带来了进入的障碍。</p>

<p>当我们度过一整天时，工作和生活的需求会慢慢耗尽我们的精力。当我们精力低下时，我们就有更少的精力排除技术问题、更少的耐心在本该快速、简单的事情中找到方向。</p>

<p><img src="media/15713081795025/C2B5E5FC-3351-4CC8-A905-60E1A872A7B3.png" alt=""/></p>

<p>在晚上，我们休息、重新充满电。</p>

<p><img src="media/15713081795025/CEA07E08-F27B-4924-8265-9F75ED0465F5.png" alt=""/></p>

<p>然而，你知道在美国每 6 个孩子中就有 1 个孩子有发育残疾吗？从轻微的残疾，比如语言能力受损，到严重的发育残疾，比如智力残疾、自闭症。</p>

<p><img src="media/15713081795025/E460D0DE-4176-4B9C-BCEC-3C08899070D1.png" alt=""/></p>

<p>对于那些有认知残疾或者慢性疾病的人来说，他们开始一天时的精力可能只有正常人的四分之三。在一整天中，各种任务会花费他们额外的努力。而且，如果你有一天忙了一整天耗掉了所有精力，第二天可能还是很疲惫。所以，我们创造的 app 可以帮助我们度过每一天，不管是给我们提供便利还是帮助我们充满电。</p>

<p>它们提供了快速、简单访问服务的方法，这对可能在外旅行有困难的人、电话交谈有困难的人或者同时兼顾家庭和工作的人来说非常重要。例如，可以为人们提供便利的 app「Instacart」，你可以让货品送到你的家中，这减轻了你逛超市的压力，允许你在家休息，或者它给了你时间回归家庭。</p>

<p><img src="media/15713081795025/945CCD33-C112-4129-9E22-1CB4E5534E19.png" alt=""/></p>

<p>再例如，教育 app「Doulingo」，我们按照自己的时间、自己的进度在家舒服地学习。</p>

<p><img src="media/15713081795025/D7BCE876-CE34-435B-807B-42AB9F865D75.png" alt=""/></p>

<p>再比如健康 app「Calm」，它可以帮助我们改善精神和身体健康。</p>

<p><img src="media/15713081795025/00544804-A222-487F-9C51-867278CA0DE9.png" alt=""/></p>

<p>像是内容创造型 app「iMoive」，我们可以创造并与朋友、家人、甚至整个世界分享我们的艺术作品。</p>

<p><img src="media/15713081795025/9C5E2E63-585A-4872-8080-01CE9D5FA0DC.png" alt=""/></p>

<p>所以 app 在我们的日常生活中扮演了核心角色，我们可以通过降低障碍、提供更多的机会以减少使用 app 需要的努力来给人们的生活创造更多影响。但这说起来容易，做起来难。这里有几个方法可以提供指导：</p>

<ul>
<li>我们应该通过让 app 具有相似的结构来尽可能的容易导航；</li>
<li>我们需要能够在不遇到任何障碍或问题的前提下开始、完成普遍的任务；</li>
<li>我们应该尽可能多地使用 UIKit 以在每个 app 中和 app 之间实现一致性的行为。因为 UIKit 并不仅是为开发者而创造的，它也是每一个人都熟悉和知道如何使用的平台的设计语言。</li>
</ul>

<p>在设计过程中，<a href="https://developer.apple.com/design/resources/">HIG 中的设计资源</a>可以帮助你在 app 中使用标准的 UIKit 组件。</p>

<p><img src="media/15713081795025/D4834493-6DE9-4D30-836E-46A89FFF7F69.png" alt=""/></p>

<p>记住这些工具包支持许多辅助功能非常重要。如果我们可以在我们 app 的更多任务（比如基本的结构和导航、注册过程、帐户设置、分享）中贯彻始终地使用标准的 UIKit 交互模式和组件，你就可以把你的主要时间放在让你 app 更加特别的那一部分。当然，也确保这一部分是可用的。</p>

<p>贯彻始终地使用我们的设计语言是有益的，因为如果你学习了一个 app，就等于在学习其他 app 上也有了优势，重复可以让认知变容易，创造一种熟悉的感觉。但我们知道一直使用 UIKit 也是不可能的，你总是需要做一些独特和原创的东西，但不要忘记可用性。它可以让你对要推向全世界的产品思考的更全面。</p>

<p>所以，简洁就是基于我所知道的进行构建，利用标准组件和熟悉的交互模式去让 app 更容易导航；专注于你的目标，减少任何的障碍，帮助我们尽可能快地开始；像人们期待的那样保持一致性地运行。</p>

<p><img src="media/15713081795025/EB6642E4-12C2-4069-9B12-DEF6B9810564.png" alt=""/></p>

<h2 id="toc_2">感知能力 Perceivability</h2>

<p>我们的产品对于每个人来说应该是可被理解、可被感知到的。这意味着信息至少应该在人们都能感觉到的视觉、听觉、触觉中的一种是可用的。我们可以看看我们的 app，问问自己它是易读的吗？它是听得见的吗？它是可以感知到的吗？<br/>
在看可读性之前，我们先来看看美丽的沙滩，用几种不同的方式来体验它。放松，看着起起落落的海浪，沐浴在阳光之下。如果你视觉上有残疾，你可能不能看到这美丽的景象，但你的听觉会对这些美丽的声音更敏感。</p>

<p><img src="media/15713081795025/5E0BE582-42B8-4F71-9411-54BBE2CDA5C5.png" alt=""/></p>

<p>世界上，2.85 亿人会有轻度或重度的视力丧失，其中 3900 万人是完全失明的。</p>

<p><img src="media/15713081795025/D52DC63D-38B0-42E8-B5D9-9B796AACCEF0.png" alt=""/></p>

<p>12 个人中就有 1 个是色盲。</p>

<p><img src="media/15713081795025/8731FB4A-8897-4208-BBA0-901E1F83934F.png" alt=""/></p>

<p>世界上大约有 3.6 亿人有听力丧失残疾</p>

<p><img src="media/15713081795025/0AF67102-180A-4B38-8957-F874678DBF34.png" alt=""/></p>

<p>视觉和听觉的丧失不仅会限制人们分辨信息，它们还会用你想不到的方式影响你看到和听到的东西。例如，一个有低视力的人看到的电话可能是下面这样。如果你不是低视力的，你可以通过在设计软件中使用一个微弱的模糊来模拟低视力。</p>

<p><img src="media/15713081795025/C31751F5-F1ED-4D47-9F22-4B752A479552.png" alt=""/></p>

<h3 id="toc_3">最大化可读性</h3>

<p>有低视力的人会总是学习按钮的位置，只要它们不会移动，但是内容区域就不同了，所以他们需要保持很好的视觉对比度来增加可读性。如果你刚动工，你应该问问你自己你的 app 是清晰易读的吗？因为最大化可读性对充分理解信息有很大的益处，这不需要我们进行额外的说明。</p>

<p><img src="media/15713081795025/46BB009C-6172-4BDE-A60C-59259B0B49D9.png" alt=""/></p>

<p>例如，当关键信息因为小字体、较低的颜色对比度、较细的字体而造成低对比度时，那可能阅读起来很痛苦，你会体验到认知压力。</p>

<p><img src="media/15713081795025/D4586DEF-18AF-4E06-8A37-688C482DCA74.png" alt=""/></p>

<p>所以修正低对比度的一个开始的好地方是对主要内容使用默认的「body」文本样式，与背景形成高对比度。</p>

<p><img src="media/15713081795025/188391D8-400F-417A-A14D-EBE9151A84C5.png" alt=""/></p>

<p>之后你可以使用更粗的字体字重而不是较细的字体来强调文本或者标题。</p>

<p><img src="media/15713081795025/EF272BD7-71D3-4597-A5A3-6D7EB28D89E5.png" alt=""/></p>

<p>你可以在按钮形状上使用填充色，这样文本对比度就会很高，你 app 的路径就会很清晰。</p>

<p><img src="media/15713081795025/FE3EA84C-F4F1-4CCB-8CF9-0CF837C398BC.png" alt=""/></p>

<p>如果在你的 app 中你不使用文本样式或者系统字体，最好是也要支持辅助功能中的粗体文本设置，这要求你在设置选项开启时增加你的字体字重。</p>

<p><img src="media/15713081795025/2E1EF96D-A312-4FFC-91E0-77D58B2789A5.png" alt=""/></p>

<p>iOS 11 开始，新的 App Store 的设计通过它的较粗的文本排版、明显的购买按钮、更大的字体、更高颜色对比度来很好的展现了可读性的最大化。</p>

<p><img src="media/15713081795025/E5F48232-1B1B-457A-891B-6AFDBC92C3B8.png" alt=""/></p>

<p><img src="media/15713081795025/2385E0BB-E30C-47E0-89B7-A213907D7432.png" alt=""/></p>

<p>在 macOS 上也有增强对比度的设置选项，通过让背景不透明、按钮的轮廓更厚更深、系统颜色变得更深来让所有活跃的控件具有更好的对比度。从下图的前后效果可以看到，甚至是横格线以及灰色的文本颜色也变得更深。</p>

<p><img src="media/15713081795025/5BE83B3F-9E75-4D57-8354-717C1CB57787.png" alt=""/></p>

<p><img src="media/15713081795025/F024CCEA-8B42-4297-A31F-19934D75910D.png" alt=""/></p>

<p>如果你不使用标准的 AppKit，你就需要提供这些设计的替代性设计，因为这些功能不能自动应用到你的自定义 UI 中，这对最大化可读性极其重要。</p>

<h3 id="toc_4">动态类型</h3>

<p>下一个增加可读性的建议是这里讲到的最重要的，支持动态类型或者说文本尺寸设置，因为这个功能可以让每个人通过增加字体尺寸来个性化他们的体验，以此来增加可读性。</p>

<p><img src="media/15713081795025/60821DBA-81A1-41B9-A0E9-1F45701712D0.png" alt=""/></p>

<p>当你靠在一个椅子上或撑在一个桌子上时你可能需要一个更远的阅读距离。当 app 中的字体大小不能调整，有低视力的人们就需要使用屏幕放大镜来阅读内容，那就像是在一个昏暗灯光的参观中阅读菜单，必须打开灯或者使用放大镜一样，但这个动作需要整天都这样、每一天都这样，有些人就压根不会使用放大镜。</p>

<p><img src="media/15713081795025/782998D7-7DA2-4A90-A03D-4E866A8022F5.png" alt=""/></p>

<p>他们痛苦的阅读较小字体的内容，只能使用手机很短的时间。那不是一个好的体验。所以，如果你通过使用文本样式来适配了动态类型、使用了标准的间距限制，我们就不需要放大镜就可以提供一种更大的阅读体验。</p>

<p><img src="media/15713081795025/B5B4EDF8-53EE-4C61-9329-47CB4618AC8B.png" alt=""/></p>

<p>从 iOS 11 开始，动态类型也支持了自定义字体。另外，如果你在通用设置中调整更大的字体设置选项，在那里还有一个开关，可以开启更大的字体尺寸选项。所以，这意味着我们需要设计响应式布局来能够处理这些大的字体尺寸。</p>

<p>这里有一些简单的设计指导性原则可以参考：</p>

<ul>
<li>让尽可能多的文本变成动态的，支持辅助功能中的文本尺寸设置。</li>
<li>利用好屏幕宽度，绕排文本而不是截断文本。</li>
<li>在更大字体时，展示和默认 UI 相同数量的文本。</li>
<li>缩放出现在内容区域文本旁边的图形，这样图形才会和文本缩放和谐。</li>
</ul>

<p><img src="media/15713081795025/43AB7C12-8485-4282-81B4-EB3C006D85D3.png" alt=""/></p>

<p>当我们把这些设计原则应用到实践中去，将会发挥很大的效果。<br/>
在「邮件」中，邮件信息这个屏幕可以放大到默认尺寸的 315%。</p>

<p><img src="media/15713081795025/E23E49D8-5C33-40F0-985A-583748196212.png" alt=""/></p>

<p>在像「日历」这样的自定义布局中，月视图可以支持更大的尺寸。</p>

<p><img src="media/15713081795025/2C3715A1-B8CC-4E61-ABD5-7FD5B40B6DB4.png" alt=""/></p>

<p><img src="media/15713081795025/AD274304-80FC-4295-99BF-7AD0F59B8582.png" alt=""/></p>

<p>如果在辅助功能中设置了更大的字体尺寸，日历事件的布局就会做出一些调整，就像 Apple Watch 上的布局一样，每一行字符的数量会变得相同，文本可以获得最大的屏幕宽度。</p>

<p><img src="media/15713081795025/F93F2B1E-9B70-401A-977E-7EB48D2A360E.png" alt=""/></p>

<p>如果我们打开加粗文本设置选项，使用模糊效果模拟低视力的情况，与默认文本大小的情况作比较，可以很明显的看出，低视力的人们能够通过使用更大的字体尺寸使用 app。</p>

<p><img src="media/15713081795025/978E6F0F-0AFD-448D-B492-0E9EB6A4D14B.png" alt=""/></p>

<p>在大多数原生的 UIKit 控件中，也设计了响应性布局。例如 action sheet、edit menus、keyboard auto correction bar。</p>

<p><img src="media/15713081795025/04FCA996-C6F7-4E1C-AFA1-68F1AB63A254.png" alt=""/></p>

<p><img src="media/15713081795025/9E1012F5-1097-4DE5-B389-93A7CCD5E17B.png" alt=""/></p>

<p>对于像是导航栏、工具栏、标签栏这些放大时会占据很大空间的元素，你可以通过长按来展示一个放大版。</p>

<p><img src="media/15713081795025/F73F8334-4D52-4A06-AD39-B9EBB1F0F979.png" alt=""/></p>

<p>对于分段控件，也有一个更大的 popover。</p>

<p><img src="media/15713081795025/C70E5A47-C018-48E4-AD23-63317D7D52E2.png" alt=""/></p>

<p>在像主屏幕文字标签和通知这样的系统空间上也使用了这种放大的技术。</p>

<p><img src="media/15713081795025/E658CB7B-FBE9-4F29-B906-03279A3C81E9.png" alt=""/></p>

<p><img src="media/15713081795025/F1DFE018-B88C-40AC-A631-355569BD8708.png" alt=""/></p>

<h3 id="toc_5">字幕</h3>

<p>除了清晰、可被理解的文本，对于媒体和游戏也需要这样。所有的对话都应该提供字幕，因为字幕展示了在说什么，这会让更多的人可以使用，不管你是有听力损伤、在一个公共环境中或者是学习一门新的语言。没有字幕就像是把声音调到最低去看一个视频或者游戏的介绍，或者尝试读出没有正在看向你的人的唇语，你好像只能明白一半的故事。</p>

<p>所以，像「Kitchen Stories」这个 app，它在所有的烹饪视频中都添加了字幕，这就很好。</p>

<p><img src="media/15713081795025/98C71AFD-517F-44DC-BF92-0562E822BFFA.png" alt=""/></p>

<h3 id="toc_6">VoiceOver</h3>

<p>说完视觉再来看看听觉，你可以问问你自己，你的 app 是可以被听到的吗？<br/>
我们来<a href="https://www.apple.com/105/media/cn/accessibility/2018/b15f99da_fc43_4dac_addc_103b9085b648/films/carlos/accessibility-carlos-tpl-cn-20180517_960x540.mp4">看一段视频</a>，看看通过 VoiceOver 功能给出的 app 声音线索，用户是如何在 app 中到达想去的地方的？</p>

<blockquote>
<p><a href="https://www.youtube.com/playlist?list=PLHFlHpPjgk7307LVoFKonAqq616WCzif7">点击这里在 YouTube 查看更多有关可用性的视频↗︎</a>  </p>
</blockquote>

<p>VoiceOver 是系统自带的可以阅读屏幕上的内容的工具，它可以为那些盲人或者视力低下的人们读出屏幕上的内容。从视频中可以看到，VoiceOver 可以为你在 app 中指明方向，app 的信息可以被读出来，通过听写可以输入信息，这让这个 app 的体验是可用的。所以，在 app 交互中添加语音可以帮助你知道你在哪、你做了什么、你可以做什么。</p>

<p>在系统中开启 VoiceOver 功能非常简单，只需要让 Siri 打开就好。你可以通过在屏幕上的滑动来改变选中的项目，比如我知道「电话」应用在 dock 栏上，我就可以通过点击左下角的屏幕，并通过双击来打开它。</p>

<p><img src="media/15713081795025/CD1BA43A-9534-42FF-A5B2-0002257EB8A2.png" alt=""/></p>

<p>如果你有基于图片的 app，我们需要你为图片添加上描述，这样 VoiceOver 就可以描述出那张图片。VoiceOver 也具有自动分析图片的功能，但一个亲手添加的描述文字当然是最好的。「Twitter」在这方面就做的很好，在发推时就可以为图片添加描述。</p>

<p><img src="media/15713081795025/185ED3B1-4BA2-4BE3-96A0-7E3C988E640C.png" alt=""/></p>

<h3 id="toc_7">与 Siri 的结合</h3>

<p>另一个 app 减少障碍的方法是与 Siri 结合。Siri 是可以快速访问你的 app，不需要看或拿起手机或者触摸屏幕，可以直接通过声音激活、语音输入。它解放了双手和眼睛。我可以通过 Siri 控制我的家，发送信息，甚至是通过像是「Zova」这样的 app 快速开始锻炼。</p>

<p><img src="media/15713081795025/4F300C14-7E8C-433E-8F00-0D87B7A4435F.png" alt=""/></p>

<p>从 iOS 11 开始，Siri 也支持通过键盘键入来使用，你可以通过辅助功能开启。这给了不能讲话的人或者在公共场合的人一个快速使用的方法。</p>

<p><img src="media/15713081795025/E496A935-588B-4AF7-818D-C70C5FBB7454.png" alt=""/></p>

<h3 id="toc_8">触觉反馈</h3>

<p>除了视觉和听觉，还有触觉。你可以问问自己你的 app 是可被感触到的吗？在支持的设备上添加触感提供了一种物理上通过感觉吸引用户的方式，它可以在视觉和听觉之外引起你的注意，也增强了每个人的使用体验。</p>

<p><img src="media/15713081795025/ECDCD70D-5196-412B-A78B-FA511420C23D.png" alt=""/></p>

<p>例如，有些像开关（switched）、滑块（sliders）、选择器（pickers）、目录快速选择器（index scrubbers）这样的系统提供的界面元素，当我们与其进行交互时，就可以提供触感反馈以强调我们正在做的事。</p>

<p><img src="media/15713081795025/E8F700C2-D385-42C2-B59E-5BA6EF1C6D8B.png" alt=""/></p>

<p>在下拉刷新时的触感让你知道你已经到达了滚动和刷新的极限。而像滑动以删除动作，触感提供了删除滑动的极限。</p>

<p><img src="media/15713081795025/9537E3AC-B84B-4D44-8524-859131637C69.png" alt=""/></p>

<p>另一个例子是 Siri，它使用一个代表成功的触感表示她听到了你说的的确认。</p>

<p><img src="media/15713081795025/3380D826-5E08-44CA-A973-06D187F23F9F.png" alt=""/></p>

<p>Apple Pay 使用了视觉触感和声音确认购买成功。感觉和看起来、听起来一样，让用户清楚地知道购买结果。</p>

<p><img src="media/15713081795025/DFFC6744-9C19-40C8-BB7A-82728B059AAE.png" alt=""/></p>

<p>所以去看看你的 app 是否是可被感知到的，问问你自己它是可读的吗？我可以读懂吗？它是可以被听到的吗？在不看的时候是可用的吗？它是可被感触到的吗？我可以感觉到吗？</p>

<p><img src="media/15713081795025/AE664E2B-7FF4-425B-9E44-61E98BE533B8.png" alt=""/></p>

<h3 id="toc_9">实例-地图 app</h3>

<p>下面将通过系统应用「地图」的变化来具体讲讲上面这些设计原则是如何实际应用的。<br/>
我们使用地图去计划、导向、旅行以及帮助我们探索世界已经有几千年的历史。过去的地图都很漂亮，但是不是可用的。如果你没有放大镜你不能放大地图，没有指南针你不能自己确定方位，你能做的就是把它叠起来。</p>

<p><img src="media/15713081795025/C4BAC2B1-89EE-490D-B5F2-83EC5A3173B8.png" alt=""/></p>

<p>而今天，你的地图知道你在哪里，它知道你面向的方向，它知道你正在使用的设备，它有独立的偏好设置，它的信息每天都会被更新。你可以在地图中搜索，你可以标记它，制作属于自己的地图，地图可以实时显示你所处的地方的交通情况。从 iOS 11 开始，你甚至可以看到建筑物中的结构。</p>

<p><img src="media/15713081795025/92A57D78-882A-454C-A19F-402CF963DCFD.png" alt=""/></p>

<p>用户在拿到地图时，不会考虑地图 app 在制作时有多么困难，他们只会考虑我可以使用它吗？地图不是环境的复制品品，虽然有时照片的细节是有用的，但大多数人不会在每天的生活中寻找卫星景象，所以我们使用了简化抽象的替代物，设计地容易理解，能够更快速地帮助我们确定方位。</p>

<p><img src="media/15713081795025/346EE33A-EC46-4FCE-8399-F110FD98B98A.png" alt=""/></p>

<p><img src="media/15713081795025/69C5A22A-50C9-4205-8BCC-CD35886A1D30.png" alt=""/></p>

<p>这也是我们为什么还设计了公交地图，在这上面呢我们减少了一些元素，比如地理位置或者较小的路，因为你在使用公交地图时这些元素与你没有关系。我们为了简化而去做这些，我们确定地图是可被理解的，无论是视觉上、听觉上还是通过触觉反馈。</p>

<p><img src="media/15713081795025/A899FF23-61F0-4A25-8E2D-0C9564C56646.png" alt=""/></p>

<p>我们让导航的屏幕保持足够简单，最重要的消息一眼就能看到，这样你就可以快速理解并把注意力放在道路上了。</p>

<p><img src="media/15713081795025/8778892B-753F-4F00-8011-9BAE48A0875C.png" alt=""/></p>

<p>当你在走路或乘坐公共交通工具时，声音导向可以讲得很清楚。</p>

<p><img src="media/15713081795025/6820F7D3-FE3E-4C13-AE8E-F21EDE46E32B.png" alt=""/></p>

<p>当你的手机放在口袋里时，在你的手腕上，Apple Watch 可以通过不同的触感反馈告诉你该往哪个方向转向和什么时候需要转向。</p>

<p><img src="media/15713081795025/2DEDA6A2-038B-4B39-93AF-77B3F919F61D.png" alt=""/></p>

<p>这些结合在一起就是可感知的，它是可读的、可被听到的、可感触的，你可以使用其中任何一种。</p>

<p><img src="media/15713081795025/D4D7DE87-CF24-41FC-B15D-55DC7969D574.png" alt=""/></p>

<h2 id="toc_10">正直 Intergrity</h2>

<p>正直是一个不同的概念，我们让事情简化、改善可感知能力，我们也需要正直，这是一种完整专心的状态。当我们说一个人是正直的时候，我们认为他是诚实的，有着令人钦佩的道德罗盘。所以当我们在考虑那些最需要我们服务的那些人时，可能他们会觉得使用很困难，如何做正直设计？</p>

<h3 id="toc_11">负起责任</h3>

<p>作为设计师和开发者，我们要负起责任。当建筑师设计建筑时，他们要确保每个人都可以用，因为这是人的权利。当设计是绘制漂亮的汽车时，他们必须遵守为人们安全所设定的规则。所以当我们设计数码产品时，我们也要对它们的可用性负责。如果我们没有这样做，我们就没有做到一视同仁。</p>

<p><img src="media/15713081795025/143A6E46-40AB-44C1-91AA-1FF9578AC75E.png" alt=""/></p>

<p>在 iOS 10 中，为了让地图应用更清晰、更简单、更易于使用、更快，它被完全重新设计。我们打开了可用性的大门，但我们只走到了走廊，还有很多需要做的事。</p>

<p><img src="media/15713081795025/2282B0E2-7C48-4DCB-9164-C39CB8E43707.png" alt=""/></p>

<p>在 iOS 11 中，我们负起了责任，把可用性放在了优先的位置，利用了新的 UIKit 框架并应用了前面提到的那些设计原则，让足够多的文本动态化，展示和默认 UI 相同数量的文本，尽可能地让文本利用屏幕宽度。</p>

<p><img src="media/15713081795025/CCDFC386-0390-4AE1-8B06-D1C27FAFACAC.png" alt=""/></p>

<p>搜索是地图的一个核心模块，现在对于每一个人，它更容易被使用。</p>

<p><img src="media/15713081795025/384F57C3-E4E7-4012-B16B-759CB6753727.png" alt=""/></p>

<p>但这不仅仅是增加字体尺寸那么简单。你可能在下面的截图中看到有些文字截断，这就打破了我们刚才提到的设计原则，但有时我们必须基于情景做出一些选择。因为你可以在右侧的屏幕上看到，信息卡的顶端的标题是固定的，如果不截断，下面的路线选项就不能滚动。</p>

<p><img src="media/15713081795025/C7FE87A4-8F7E-4B07-B113-80927F292A8D.png" alt=""/></p>

<p>下面这是一个地理位置的卡片，它们被用在 iOS 的不同使用场景中，包括 Spotlight、Safari、Siri。从这里你可以开始导航、打电话定位或者看看里面有什么。</p>

<p><img src="media/15713081795025/98120227-2A65-4A9A-B7C8-3AF732101843.png" alt=""/></p>

<p>进一步来看下这个设计的一些组件，如标题部分。这一部分也被用在搜索结果中。</p>

<p><img src="media/15713081795025/93952BAB-DE44-465D-90D7-EC0B57BC9B67.png" alt=""/></p>

<p>通过 UIKit 的帮助，这一部分的内容现在可以绕排显示了。这样组件就会更加有效和健壮。</p>

<p><img src="media/15713081795025/DD80F2BD-E229-46C8-B45E-C0C96AB8484A.png" alt=""/></p>

<p>我们对地理位置卡片做了一些改变以改善信息层级，比如第二行的操作。这里最多会有五个选项，在 iPhone 7 的英语语言下，这个显示没有什么问题。</p>

<p><img src="media/15713081795025/C2F83AB7-30B3-40EF-B3F1-3A101472AF8D.png" alt=""/></p>

<p>但在考虑动态类型时该如何处理？我们不能只是增加字体尺寸。我们可以巧妙地把他们堆叠在一起。</p>

<p><img src="media/15713081795025/1CD43FE0-012E-4C23-A4F5-5FCDA8F1C423.png" alt=""/></p>

<p><img src="media/15713081795025/7B0F3477-CE4D-493E-AD70-A51A905AE5B4.png" alt=""/></p>

<p>国际化也是可用性的一种形式，这也带来了挑战，来看下这些标签在意大利语时的显示情况。</p>

<p><img src="media/15713081795025/4CA34218-D4D6-488E-94B0-8732E1753B5C.png" alt=""/></p>

<p><img src="media/15713081795025/D5A7C1FD-2E5A-4418-A42A-37B430E5D6BA.png" alt=""/></p>

<p>意大利语的字符长度有点长，在默认尺寸下，文字标签被截断了。因为文字标签很重要，我们应该让它在任何尺寸都不能被截断，所以在这里使用了一个相似的做法来处理。这样就可以保持清晰不截断了，适应性设计需要基于用户的语言和 UI 设置。</p>

<p><img src="media/15713081795025/0CA2939B-C3A7-4328-A163-6230BF9720DB.png" alt=""/></p>

<p>对于这些在卡片底部的操作，以及所有内容，我们重排了文字，缩放了图标，因为使用的是矢量资源，这里没有像素点。</p>

<p><img src="media/15713081795025/F9A5E9A5-E07A-4EFA-AAAC-8F3626D6C449.png" alt=""/></p>

<p><img src="media/15713081795025/4D414E64-4540-41E5-BD73-CB7281DAEAF9.png" alt=""/></p>

<p>当然，我们也让所有的文字标签支持了 VoiceOver 功能。在地图中，我们也可以使用 Siri 操作。这里也有一些比刚才提到的更复杂的挑战。为每个人设计是一个过程，可以让你更深地理解你的产品和它的目的。</p>

<h3 id="toc_12">共情能力</h3>

<p>除了要负起责任，我们还需要有共情能力，理解别人的能力，去发现他们的需求和感觉。</p>

<p><img src="media/15713081795025/689D58F6-575F-4D47-8738-84023F271D23.png" alt=""/></p>

<p>来看几个例子。报纸从来都不是可用的。你可以坐下来开始看报纸，但如果你不能读，如果你视力有问题，读报纸对于你就是一个挑战。</p>

<p><img src="media/15713081795025/E6F0B6EC-0E88-443F-982D-136515006754.png" alt=""/></p>

<p>有许多你创造的内容平台过度消费了世界，这些平台有能力改善内容的可读性，也有一些平台可以让那些不能通过视觉阅读的人通过声音在平台上找到想去的地方、理解内容。</p>

<p>我们会在 iPhone 和 iPad  上阅读很多东西。下面是相同的文章针对动态类型的一些视觉考量。标题被移到顶部图片之外，有了更好的对比度。内容也是使用我喜欢的字号来显示的。</p>

<p><img src="media/15713081795025/B697D1E8-DEDD-4D16-A8D6-7DFB00F9E2DC.png" alt=""/></p>

<p><img src="media/15713081795025/36140400-A01A-4CE1-9300-710C373D629D.png" alt=""/></p>

<p>如果你在买东西时无法阅读价格标签会怎样？你不能点击价格标签去听到一个声音提示，但是在 iPhone、iPad 或者 Mac 上，你可以做到这样甚至更好。下面是一个商品列表，默认情况下它是两列的。</p>

<p><img src="media/15713081795025/16525A25-0FFE-4D66-B71D-18F10D26A637.png" alt=""/></p>

<p>如果我们将动态类型调大一些，我们会让内容变成一列，这就跟一个网站在桌面端和手机端之间切换一样。让元素拥有足够的空间以让它们简单轻松地通过。</p>

<p><img src="media/15713081795025/B87D3BE7-957E-4BEC-9C06-90BDCC3127A4.png" alt=""/></p>

<p>这是商品的详情页面，恰当地适配布局，确保最重要的操作是马上可用的。</p>

<p><img src="media/15713081795025/99F38C93-1EB2-48D9-A9D8-8B0A4BA39C60.png" alt=""/></p>

<p><img src="media/15713081795025/7CEE5ECB-77F8-4062-8474-24F87790B573.png" alt=""/></p>

<p>但当继续放到最大时，我们可以看到那个最重要的操作需要滑动很长的一段页面才能看到。</p>

<p><img src="media/15713081795025/312EAE67-DBAF-4168-852D-C18F0024DD91.png" alt=""/></p>

<p>或许这就需要作出一些调整。</p>

<p><img src="media/15713081795025/F75B1453-DC15-4D94-ACAE-1785BCF3E2BD.png" alt=""/></p>

<p>对于音频内容，它们通过空气或者耳机播放出来，你不需要一个 UI，但你需要一个 UI 能够去发现它们。在 iOS 11 的 podcast 和 music app 中，内容可以适配你的偏好设置，你可以使用 VoiceOver，所以每一个人都可以使用它。</p>

<p><img src="media/15713081795025/A69094E1-0180-4C09-9A15-CC8CC33FEAE6.png" alt=""/></p>

<h3 id="toc_13">发挥潜力</h3>

<p>如果我们为更多种人做尽可能多的事，那更多的事情就会发生，这就是发挥潜力。</p>

<p><img src="media/15713081795025/BA933CAE-29BD-4ADA-A817-C3A39F72976B.png" alt=""/></p>

<p>我们依赖语言、频繁使用语言可能是人类作为物种成功的主要原因，进一步是通过颜色、文本、声音、标志。如果我们不能通过语言相互理解，我们就不能创造任何价值。</p>

<p>正直设计，负起责任，关心每个人的体验，不仅是你自己的；站在用不同方式与世界交互的其他人的角度考虑，不仅仅是你的方式；理解这么做能解锁潜能，无论是微观上还是宏观上。</p>

<p><img src="media/15713081795025/DB3E18FA-60BE-4BB5-B6CF-AD09A1DF1626.png" alt=""/></p>

<h2 id="toc_14">总结</h2>

<p>我鼓励你现在开始，审查你的 app，与你的团队、使用你 app 的用户聊聊，抽出时间去看看到用户手中的全过程。自豪地完成它，我们可以让每一个人都感到惊讶、感到快乐、感到充满能量。</p>

<p><img src="media/15713081795025/880D065E-7110-468F-963C-6D6DDE5F494F.png" alt=""/></p>

<p>我们作为设计师很喜欢排列整齐的事情，但你不能控制让每一件事都排列好。你不能控制人们个性化体验的方式，因为每一个人都是不同的。</p>

<p><img src="media/15713081795025/16D8D3A7-1CC7-45BD-B10E-4464F4666889.png" alt=""/></p>

<h2 id="toc_15">参考链接</h2>

<ul>
<li><a href="https://developer.apple.com/videos/play/wwdc2017/806/">Design For Everyone - WWDC 2017 - Videos - Apple Developer</a></li>
<li><a href="https://www.apple.com/accessibility/">Accessibility - Apple</a></li>
</ul>

<blockquote>
<p>如果你觉得这篇文章对你有所帮助，欢迎请我喝杯咖啡，感谢你的支持😁</p>

<p><img src="media/14625521742746/15088240400740.jpg" alt=""/></p>
</blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Designing For New iPad Pro and Apple Pencil — 适配没有刘海的 iPad Pro 与有刘海的 iPhone Xs 有什么不同?]]></title>
    <link href="https://steppark.net/15416976044741.html"/>
    <updated>2018-11-09T01:20:04+08:00</updated>
    <id>https://steppark.net/15416976044741.html</id>
    <content type="html"><![CDATA[
<p>Apple 在 10 月 30 日发布了全新的 iPad Pro 11 寸版本和 12.9 寸版本，它们去除了 Home 键、配备了 Face ID，从而使得边框变得极窄，iPad Pro 也步入了无 Home 键的时代。但与之前发布的 iPhone Xs、iPhone Xs Max 不同，全新的 iPad Pro 并没有刘海。同时，Apple 发布了第二代 Apple Pencil，在这支笔上配备了双击手势功能。那在设计与开发适配全新的具备 Split View、Slide Over 功能、搭配第二代 Apple Pencil 的 iPad Pro 时，有什么要注意的呢？</p>

<span id="more"></span><!-- more -->

<blockquote>
<p>全新 iPad Pro 亮相：</p>

<iframe width="560" height="315" src="https://www.youtube.com/embed/LjaKHqDbzSA" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
</blockquote>

<ul>
<li><strong>Note:</strong></li>
</ul>

<blockquote>
<p>在进一步阅读此文章前，推荐阅读这篇文章的姊妹篇，有利于更好地理解 Apple 最新 iPhone、iPad 的适配原则：  </p>

<ol>
<li><a href="15086036845015.html">Designing For iPhone X —— iPhone 上有了刘海，设计和开发到底该咋整?</a><br/></li>
<li><a href="15433010141111.html">Designing For iPhone Xs、iPhone Xs Max、iPhone Xʀ — 比大还大，更大的刘海屏 iPhone 来了</a></li>
</ol>
</blockquote>

<h2 id="toc_0">目录</h2>

<ul>
<li>
<a href="#toc_0">目录</a>
</li>
<li>
<a href="#toc_1">屏幕尺寸的变化</a>
</li>
<li>
<a href="#toc_2">App 的适配与设计原则</a>
</li>
<li>
<a href="#toc_3">Compatibility Mode—App 没有适配会如何显示？</a>
<ul>
<li>
<a href="#toc_4">全屏显示</a>
</li>
<li>
<a href="#toc_5">Split View</a>
</li>
<li>
<a href="#toc_6">Slide Over</a>
</li>
<li>
<a href="#toc_7">只为 iPhone 而设计的 app</a>
</li>
<li>
<a href="#toc_8">总结</a>
</li>
</ul>
</li>
<li>
<a href="#toc_9">适配常见问题</a>
<ul>
<li>
<a href="#toc_10">示例一：由自定义 Tab Bar 引出的问题</a>
</li>
<li>
<a href="#toc_11">示例二：完全自定义 UI 的全屏游戏</a>
</li>
</ul>
</li>
<li>
<a href="#toc_12">Apple Pencil 新功能的设计原则</a>
</li>
<li>
<a href="#toc_13">Read More</a>
<ul>
<li>
<a href="#toc_14">Apple 官方</a>
</li>
<li>
<a href="#toc_15">非官方</a>
</li>
</ul>
</li>
</ul>


<h2 id="toc_1">屏幕尺寸的变化</h2>

<ul>
<li><p>全新的 iPad Pro 11″ 与 iPad Pro 10.5″ 相比，在去除了 Home 键之后，将上下边框（竖屏模式下）缩小，而机身尺寸几乎变化不大，故屏幕由原来的 10.5 寸增大为 11 寸。因此 iPad Pro 11″ 在横屏模式下的屏幕高度与 iPad Pro 10.5″ 是相同的，但在横屏模式下的屏幕宽度比  iPad Pro 10.5″ 多出了 82pt @2x，即横屏模式下 iPad Pro 11″ 为 1194 × 834pt @2x，iPad Pro 10.5″ 为 1112 × 834pt @2x。</p></li>
<li><p>全新的 iPad Pro 12.9″ 与第二代 iPad Pro 12.9″ 相比，在去除了 Home 键并缩小了上下边框（竖屏模式下）后，整体机身尺寸变小一圈，使得屏幕仍保持 12.9 寸不变。因此第三代 iPad Pro 12.9″ 和前两代的 iPad Pro 12.9″ 的屏幕显示宽度、高度完全一致，即横屏模式下 1366 × 1024pt @2x。</p></li>
</ul>

<p><img src="media/15416976044741/67162CE4-3789-4CBE-B020-67DE1F8FA5A8.png" alt="67162CE4-3789-4CBE-B020-67DE1F8FA5A8"/></p>

<ul>
<li>有人可能会产生疑惑：同是新一代的 iPad Pro，为什么 11 寸的和 12.9 寸的相比上一代的变化方式不同？一个增大屏幕、保持机身尺寸几乎不变；一个保持屏幕尺寸不变、减小机身尺寸。如果新的小尺寸的 iPad Pro 仍然保持 10.5 寸屏幕、减小机身尺寸，iPad 分辨率的变种不就更少、适配不就更简单？一个个人感觉靠谱的说法：iPad Pro 的定位是注重生产力的个人电脑，Smart Keyboard 是其重要的一个配件，不可或缺，如果机身尺寸在上一代的基础上进一步缩小，那就会导致全尺寸的 Smart Keyboard 的按键设计出现问题。所以基于此，Apple 不会再减小 iPad Pro 的机身尺寸，自然只能扩大屏幕尺寸。</li>
</ul>

<h2 id="toc_2">App 的适配与设计原则</h2>

<p>全新的 iPad Pro 的屏幕与 iPhone Xs 一样是四个圆角，所以在设计 app 时，应该避免重要的信息或控件出现在四个角落，以免被圆角遮挡或切割。像 Status Bar、Navigation Bar、Tab Bar、Tool Bar 这些会覆盖到边角的标准控件，应该被自动且正确地放置。</p>

<p><img src="media/15416976044741/ED039BBE-40FF-438D-A43F-9BAAC784EF3A.png" alt="ED039BBE-40FF-438D-A43F-9BAAC784EF3A"/></p>

<p>为了让你的 app 在全新的 iPad Pro 上完美地呈现，你需要在设计 app 时遵守下面三个原则：</p>

<ul>
<li><p><strong>使用安全区域布局规范（Safe Area Layout Guides）阻止界面元素被屏幕圆角切割或者被 Home Indicator 遮挡。</strong></p>
<ul>
<li><p>在屏幕上没有其他控件时，安全区域几乎覆盖整个屏幕，在横屏和竖屏模式下，需要在底部留出 20pt 高度的区域给 Home Indicator，以防内容被 Home Indicator 遮挡。</p>
<p><img src="media/15416976044741/AA38670A-D8C0-4759-A5FB-FFAE16FB66F8.png" alt="AA38670A-D8C0-4759-A5FB-FFAE16FB66F8"/></p></li>
<li><p>不要尝试在 Home Indicator 周围放置控件、元素，虽然在全屏模式下，Home Indicator 是位于屏幕底部中央位置的，但在 Split View 中，Home Indicator 的位置会跟随 app 发生变化。如果有内容放置在 Home Indicator 两边就可能会被遮挡。</p>
<p><img src="media/15416976044741/52F6C707-BEDA-4663-9EFC-68573F451383.png" alt="52F6C707-BEDA-4663-9EFC-68573F451383"/></p></li>
<li><p>当界面中显示 Status Bar 时，Status Bar 的高度是 24pt，而不是 iPhone 或者前几代 iPad 上的 20pt。</p>
<p><img src="media/15416976044741/73F8EA5A-E64A-41B3-98C1-7BE2AB92DB05.png" alt="73F8EA5A-E64A-41B3-98C1-7BE2AB92DB05"/></p></li>
<li><p>特别提示，在 Slide Over 模式中，app 的安全区域完全充满 app 的可显示区域，安全区域到顶部和底部的距离均为 0pt。 </p>
<p><img src="media/15416976044741/FE0AAB89-583B-46CA-AAD0-363DD002F92C.png" alt="FE0AAB89-583B-46CA-AAD0-363DD002F92"/></p></li>
<li><p>在界面中有 Navigation Bar、Tab Bar 或者 Tool Bar 时，不管屏幕方向是横向还是纵向，安全区域到左右两侧的距离均为 0pt。这不同于 iPhone Xs，在横向屏幕时，因为刘海的缘故，需要在左右两侧留出对称相等的安全距离。</p>
<p><img src="media/15416976044741/71D19712-586A-40B0-BA80-293F2C31BFF3.png" alt="71D19712-586A-40B0-BA80-293F2C31BFF3"/></p></li>
</ul></li>
<li><p><strong>使用布局边界（Layout Margins）从屏幕左端到屏幕右端插入内容。</strong></p>
<ul>
<li><p>布局边界在内容之间、屏幕的左右边缘提供了可以呼吸的空间，也有利于内容与 Status Bar、Navigation Bar、Tab Bar、Status Bar 上的内容相对齐。同时布局边界也使得内容不会滚动到屏幕边缘的圆角中去。</p>
<p><img src="media/15416976044741/87E608E5-598A-44F5-98A5-631F7A8CF886.png" alt="87E608E5-598A-44F5-98A5-631F7A8CF886"/></p></li>
<li><p>布局边界的宽度是由设备的 Size Class 来决定的。在 Regular 普通模式（如iPad Pro 11″ 横屏模式）下，布局边界的宽度是 20pt；在 Compact 紧凑模式（如 iPhone Xs 竖屏模式）下，布局边界的宽度是 16pt。有关于 Size Class 的更多细节可以阅读我的另一篇文章：<a href="15171487371271.html">尺寸级别和核心要素 Size Classes and Core Components - WWDC 2017 Session 812</a></p>
<p><img src="media/15416976044741/CD25F2B3-A2CD-40DC-A63A-D23796C9202B.png" alt="CD25F2B3-A2CD-40DC-A63A-D23796C9202B"/></p></li>
</ul></li>
<li><p><strong>要考虑到多种不同的屏幕比率。</strong></p>
<ul>
<li><p>所有之前的 iPad 的屏幕比率是 4:3，iPad Pro 11″ 有着更宽的屏幕比率。</p>
<p><img src="media/15416976044741/ABF2E500-6E6E-4985-BDCB-BC9B44AF9B6E.png" alt="ABF2E500-6E6E-4985-BDCB-BC9B44AF9B6E"/></p></li>
<li><p>例如，一个游戏只为 4:3 比率而设计，那么在横屏模式下的 iPad Pro 11″ 上显示时，左右两侧就会出现黑条，或者当 app 充满屏幕显示时，上下两侧的内容就会被切掉。所以要特别注意那些独立的界面元素的位置和大小。</p>
<p><img src="media/15416976044741/3C2337B8-C3B5-423C-B863-6497ABB8CA3E.png" alt="3C2337B8-C3B5-423C-B863-6497ABB8CA3E"/></p></li>
</ul></li>
</ul>

<h2 id="toc_3">Compatibility Mode—App 没有适配会如何显示？</h2>

<p>不同于 iPhone Xs、iPhone Xs Max 在屏幕尺寸发生变化时基本上只需要考虑竖屏和横屏两种情况，iPad Pro 在屏幕尺寸发生变化时不仅需要考虑 app 全屏时在竖屏和横屏的适配显示方式，还需要考虑 app 在 Slide Over、Spit View 模式下的适配显示方式。<br/>
以下主要以 iPad Pro 11″ 为例说明在各种不同的情况下，未适配的 app 会如何在新款 iPad Pro 上显示。请注意，探究 app 最后的显示结果是次要的，重要的是为什么 app 会那样显示，以此来深入了解、思考当硬件屏幕尺寸发生变化时，原有的 app 如何兼容、新的 app 如何与旧的 app 共存？进一步可展望未来新硬件设备尺寸的可能性和兼容旧 app 的大原则、大方向。</p>

<p><strong>图例说明</strong></p>

<ul>
<li>蓝色表示已经适配了新 iPad Pro 的应用的实际显示区域，红色表示已经适配了新 iPad Pro 的另一个应用的实际显示区域（如有）。</li>
<li>黄色表示未适配新 iPad Pro 的应用的实际显示区域，绿色表示未适配新 iPad Pro 的另一个应用的实际显示区域（如有）。</li>
<li>黑色表示 app 运行时不能被利用的区域，通常会显示状态栏 Status Bar、Home Indicator 或黑边等。</li>
<li>为了更好地区分屏幕边框和屏幕显示区域，特将示意图中的 iPad 黑色边框修改为了白色。</li>
<li>以下示意图中的尺寸、比例虽与实际情况接近，但不足够精确，仅供参考。</li>
</ul>

<p>在分不同的情况观察未适配的 app 如何显示之前，需要先将 iPad 上的 app 分为三类。发布在 App Store 中的 app 有的是专门为 iPad 设计的，有的并没有，只为 iPhone 进行了设计，但可以下载运行在 iPad 上。而专门为 iPad 设计的这类应用中，一部分应用支持 Split View、Slide Over 功能，常见的如「微信」、「微博」，这类 app 因为支持这种功能所以其布局会根据屏幕分配的显示区域大小动态变化；另一部分应用则不支持 Split View、Slide Over 功能（这类 app 在 <code>Info.plist</code> 文件中将 <code>UIRequiresFullScreen</code> 属性设置为了 <code>YES</code>），常见的如「腾讯视频」、「淘宝」、大部分游戏，它们不支持这种功能因此 app 的布局是固定的。因此分出的三类分别是：</p>

<ol>
<li>专门为 iPad 而设计但不支持 Split View、Slide Over 功能的 app；</li>
<li>专门为 iPad 而设计且支持 Split View、Slide Over 功能的 app；</li>
<li>只为 iPhone 而设计但可以运行在 iPad 上的 app。</li>
</ol>

<p>这三类重点来关注前两类。</p>

<h3 id="toc_4">全屏显示</h3>

<p>已经适配全新 iPad Pro 的 app 的显示区域自然可以完全充满屏幕。在屏幕的顶端一般会显示状态栏 Status Bar，底部一般会显示 Home Indicator。<br/>
对于一个未适配的 app来说，其在开发时，圆角屏幕和 Home Indicator 是不存在的。所以当显示在全新的 iPad Pro 上时，必须要留出空间。在横屏模式下的 iPad Pro 11″ 上，一个未适配且不支持 Split View 功能的 app 由于其布局尺寸是固定的，所以其必须保持 4:3 的显示比例，又需要在顶部为 Status Bar 和在底部为 Home Indicator 留出空间，综上其显示时上、下、左、右都是有黑边的。而对于一个未适配但支持 Split View 功能的 app 由于可以自动调整布局尺寸，所以其显示比例是灵活的。只需要为 Status Bar 和 Home Indicator 留出空间，即只有上、下有黑边。</p>

<p><img src="media/15416976044741/5F195401-FC52-4719-9103-B8198DED3DB9.png" alt="5F195401-FC52-4719-9103-B8198DED3DB9"/></p>

<p>同理，在竖屏模式下的 iPad Pro 11″ 上，一个未适配且不支持 Split View 功能的 app 显示比例仍旧保持 4:3，其实际显示区域和 iPad Pro 10.5″ 是一样的，但在上、下留有黑边。而对于一个未适配但支持 Split View 功能的 app 由于比例灵活，其实际显示区域大于 iPad Pro 10.5″，上、下的黑边比前述情况更小一些。</p>

<p><img src="media/15416976044741/EE824C4F-2218-457D-8D0B-AAF7F2563308.png" alt="EE824C4F-2218-457D-8D0B-AAF7F2563308"/></p>

<p>iPad Pro 12.9″ 与前两代屏幕分辨率完全相同，于是很多人想当然的认为 app 就有什么需要适配的。然而由于圆角屏幕和 Home Indicator 的引入，app 仍然需要做一些适配工作。<br/>
在横屏模式下的 iPad Pro 12.9″ 上，一个未适配且不支持 Split View 功能的 app，显示时保持比例 4:3，其上、下、左、右均有黑边，但相比同情况下的 iPad Pro 11″，左右两侧的黑边宽度看上去更小一些。在竖屏模式下的 iPad Pro 12.9″ 上，一个未适配且不支持 Split View 功能的 app 由于要保持 4:3 的显示比例且上、下需要留出空间，所以其左、右两侧会空出，即其上、下、左、右均有黑边。</p>

<p><img src="media/15416976044741/63894588-8DC1-406F-B2F9-D5B114C2C307.png" alt="63894588-8DC1-406F-B2F9-D5B114C2C307"/></p>

<p>虽然现在已经是 iPad Pro 11″ 和 iPad Pro 12.9″（第三代）的时代了，iPad Pro 10.5″ 已经成为了历史。但仍旧有许多 app 没有适配 iPad Pro 10.5″ 和 iPad Pro 12.9″，只适配了 iPad 9.7″。这种应用在 iPad Pro 11″ 和 iPad Pro 12.9″ 上显示时不仅会出现上述的黑边情况，还会在 iPad 9.7″ 基础上直接放大到对应尺寸，由此造成的结果就是 app 显示看上去有点糊或者说字号看上去都很大或者说 app 显示的内容比正常情况少。</p>

<h3 id="toc_5">Split View</h3>

<p>在 Split View 显示模式下，两个 app 可以以 1:1 或者 2:1 的方式并排显示，实现多任务处理。两个已经适配全新 iPad Pro 的 app 进行 Split View 时，app 均能充满其分配的显示区域。在屏幕的顶端一般会显示状态栏 Status Bar，底部一般会显示 Home Indicator，两个 app 之间会显示控制 app 显示方式的控制条。<br/>
在此指出 iOS 12 和新设备引入的两个小变化：</p>

<ul>
<li>自 iOS 12 开始，Apple 取消了在竖屏模式下的 1/2 Split View 这种显示模式，猜测可能是因为在此模式下两个 app 的显示宽度比较窄，功能使用比较受限，所以被取消。当处于横屏下 1/2 Split View 显示模式时，此时将设备竖屏会自动切换到 1/3 Split View 显示模式。</li>
<li>由于 iPad Pro 11″ 的宽度（横屏模式下）比上一代进一步增加，所以在横屏下的 1/3 Split View 显示模式时，较窄的 app 的宽度由 320pt（iPhone SE、iPhone 4s 相同宽度） 增加到了 375pt（iPhone 8、iPhone Xs 相同宽度），与 iPad Pro 12.9″ 同样情况下的宽度相等。</li>
</ul>

<p>不管是横屏还是竖屏，未适配的 app 在显示时需要为 Status Bar 和 Home Indicator 留出空间，所以在 1/2 Split View 和 1/3 Split View 时上、下均有黑边。<br/>
特别注意的是，若一个已适配的 app 和另一个没有适配的 app 进行 Split View 时，两个 app 都会被当做没有适配，即上、下有黑边，以此作兼容性处理。</p>

<p><img src="media/15416976044741/97419587-D98C-45C6-A9C3-A6ED7516A5FC.png" alt="97419587-D98C-45C6-A9C3-A6ED7516A5F"/></p>

<h3 id="toc_6">Slide Over</h3>

<p>在 Slide Over 显示模式下，一个全屏显示的 app 或者两个进行 Split View 的 app 之外，可以打开另一个 app 附在其他 app 之上进行操作，不需要时可以滑出屏幕隐藏，继续在之前的 app 上操作。这个功能对于需要临时查看、参考的 app 很有用。已经适配全新 iPad Pro 的 app 进行 Slide Over 时，app 可以充满其分配的显示区域，并浮在其他 app 之上，上、下、右都会留出一个 Status Bar 的高度/宽度（24pt）。<br/>
同样的，由于 iPad Pro 11″ 的宽度（横屏模式下）的增加，横屏下进行 Slide Over 的 app 的宽度也由 320pt（iPhone SE、iPhone 4s 相同宽度） 增加到了 375pt（iPhone 8、iPhone Xs 相同宽度），与 iPad Pro 12.9″ 同样情况下的宽度相等。</p>

<p>不管是横屏还是竖屏，未适配的 app 在进行 Slide Over 时，app 均可以充满被分配的显示区域。但在实际情况下，与已适配的 app 对比，还是可能会有一些细节上的不同。例如，Tab Bar/Tool Bar 的高度在未适配的 app 中是 50pt，而在已适配的 app 中是 70pt，增加的 20pt 即是 Home Indicator 的高度。</p>

<p><img src="media/15416976044741/FC793C5B-154B-42D1-B4B1-25CE03E965AE.png" alt="FC793C5B-154B-42D1-B4B1-25CE03E965AE"/></p>

<h3 id="toc_7">只为 iPhone 而设计的 app</h3>

<p>在 iOS 12 之前，那些只为 iPhone 而设计的 app 运行在 iPad 上时，会以 iPhone 4s 的屏幕尺寸 320pt × 480pt 显示，可以等比例放大显示。可想而知，在如今这个大屏时代，其显示效果真是又窄又矮。<br/>
在 iOS 12 中，Apple 终于更改了这个显示尺寸，这样的 app 会以 iPhone 8 的屏幕尺寸 375pt × 667pt 显示，可以等比例放大显示。自然的，无论放大与否，app 的四周均有黑边，毕竟这些 app 不是为 iPad 而设计的。</p>

<p><img src="media/15416976044741/3AC1E889-075C-4F65-9C53-9079CEEFD0FD.png" alt="3AC1E889-075C-4F65-9C53-9079CEEFD0FD"/></p>

<h3 id="toc_8">总结</h3>

<p>从各种情况的不适配 app 的显示结果来看，全新 iPad Pro 对原有 app 的兼容显示原则并不像从 iPhone 7 → iPhone X 时那样简单明了，app 的显示尺寸也不一定是与老设备的显示尺寸完全一致，需要考虑 iPad 特有的多种不同的显示模式、屏幕方向、app 显示比例的变化、新的屏幕元素（圆角和 Home Indicator ）的引入、已适配 app 和未适配 app 的共存等诸多因素，综合这些来确定一个合适的最终方案。</p>

<p>从发布 iPhone Xs Max 之后来看，由于 iPhone Xs Max 上的 app 显示时会直接放大 iPhone X 版本的 app 到全屏，不存在黑边，看上去问题没有那么严重，因此 app 的开发者/开发厂商对于适配 iPhone Xs Max 的积极性并不高或者说推进速度并不块，例如「微信」在 iPhone Xs Max 发布今近两月后仍没有适配。而对于全新的 iPad Pro 来说，iPad 的 app 市场远小于 iPhone app 市场，许多厂商在考虑缩减成本的情况下，将 iPad 版本直接做成了 iPhone 版本的放大版甚至完全停止更新或取消 iPad 版本。这是一个不好的信号，可想而知，全新 iPad Pro 的 app 的适配推进速度也不会很快。<br/>
Apple 肯定也意识到了 iPad app 生态的这些问题，这两年更加坚定和清晰地将 iPad 分为了高低端两档产品，低端维持原有的娱乐属性，高端大幅向提高生产力、创造力方向改进，并从近期和远期推出两项改进计划：</p>

<ol>
<li>近期：Apple 已经发出<a href="https://developer.apple.com/ios/submit/">通知</a>，自 2019 年 3 月开始，所有更新提交的 app 或新上架的 app 都需要使用 Xcode 10.1/iOS 12.1 SDK 或以上版本来编译，即需要更新适配最新的 iPhone、iPad 机型。</li>
<li>远期：Apple 在 WWDC 2018 上宣布，从 2019 年晚些时候开始，iOS 平台上的 app 可以通过 UIKit 等底层框架的适配和调整直接借鉴到 macOS app 中去，以减少分别开发两个平台 app 的成本。macOS 10.14 中的「Stocks 股市」、「News 新闻」、「Voice Memos 语音备忘录」、「Home 家庭」app 即是这项技术的一个示例。</li>
</ol>

<p>希望随着 Apple 对 iPad 的定位更加清晰，可以吸引更多的生产力、创造力 app 开发者入场，使得 iPad app 市场死灰复燃，真正可以说出「用 iPad Pro 取代电脑」这句话。那时的 iPad Pro 和电脑市场到底会是怎样的呢？值得期待。</p>

<h2 id="toc_9">适配常见问题</h2>

<h3 id="toc_10">示例一：由自定义 Tab Bar 引出的问题</h3>

<ul>
<li>下面这个 app 在 iPad Pro 10.5″ 上运行时没有任何问题，但在 iPad Pro 11″ 上运行时，底部的 Tab Bar 会和 Home Indicator 重叠在一起。</li>
<li>造成这个问题的一个原因是底部的 Tab Bar 看上去是标准的 Tab Bar，但实际上是自定义的 Tab Bar，并没有服从 Safe Area 的布局规范；另一个可能的原因是 app 在开发时并没有使用 Storyboard 而是通过 API 去定义了屏幕边界。</li>
<li>解决这个问题的方法很简单：在开发时使用 Storyboard 以及符合 Safe Area 的布局规范，以及尽可能地使用原生的 UI 控件。</li>
</ul>

<p><img src="media/15416976044741/8974FE24-E0EA-4F45-B685-4119F4FF985C.png" alt="8974FE24-E0EA-4F45-B685-4119F4FF985"/></p>

<h3 id="toc_11">示例二：完全自定义 UI 的全屏游戏</h3>

<ul>
<li>下面这个 app 是完全自定义 UI 元素的一个全屏游戏，在 iPad Pro 10.5″ 上运行也没有任何问题，但运行在 iPad Pro 11″ 上会发现，上部和顶部的元素被切掉了，而且四个角落里的按钮离屏幕圆角太近了以致于不能完全显示出来。</li>
<li>造成这个问题的一个原因是游戏 app 在开发时假设了屏幕的比率固定为 4:3，然而这对于 iPad Pro 11″ 来说并不再符合。</li>
<li> 需要在设计时就考虑到可变的屏幕比率，特别注意新的 iPad 的四个圆角。并且在开发时使用 Safe Area 布局规范，不要让按钮和控件超出安全区域。特别在游戏中，要注意游戏的手势或控件要远离 Home Indicator。</li>
</ul>

<p><img src="media/15416976044741/5B22AD48-B1A2-4A09-B75D-03FC2E2ABF11.png" alt="5B22AD48-B1A2-4A09-B75D-03FC2E2ABF11"/></p>

<h2 id="toc_12">Apple Pencil 新功能的设计原则</h2>

<p><img src="media/15416976044741/A33D261C-522D-4423-B4BD-50851B7744FE.png" alt="A33D261C-522D-4423-B4BD-50851B7744FE"/></p>

<ul>
<li>第二代 Apple Pencil 在笔身上增加了一个双击手势。用户可以在系统设置中为双击手势选定一个固定操作，这也给用户在使用各个 app 时提供了连贯一致的、可预测的使用体验。用户可以在以下几种选项中选择双击手势的操作：
<ul>
<li>在当前选择的工具和橡皮擦之间切换；</li>
<li>在当前选择的工具和上次使用的工具之间切换；</li>
<li>展示一个调色板；</li>
<li>关闭双击手势功能。</li>
</ul></li>
</ul>

<p><img src="media/15416976044741/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-11-06%20%E4%B8%8A%E5%8D%8812.41.04.png" alt="屏幕快照 2018-11-06 上午12.41.04"/></p>

<ul>
<li><p>为了在 app 中提供不同功能的 Apple Pencil 双击操作手势，你需要遵守下面几个原则：</p>
<ul>
<li><p>如果在系统设置中用户关闭了双击操作手势，app 就不应该响应用户在 Apple Pencil 上的双击操作手势。</p>
<p><img src="media/15416976044741/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-11-06%20%E4%B8%8A%E5%8D%8812.41.27.png" alt="屏幕快照 2018-11-06 上午12.41.27"/></p></li>
<li><p>在任何可能的时候，都要遵守系统的设置。在你的 app 中如果存在多种不同的笔功能、橡皮擦功能、调色板功能，但却并没有遵守双击操作手势对应功能的系统设置，这种不一致、不连贯的操作会让你的 app 变得不直观，特别是在配合其他支持 Apple Pencil 的 app 进行多任务操作时尤为明显。</p>
<p><img src="media/15416976044741/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-11-06%20%E4%B8%8A%E5%8D%8812.41.45.png" alt="屏幕快照 2018-11-06 上午12.41.45"/></p></li>
<li><p>如果在你的 app 中，需要针对双击手势提供不同于系统设置中的功能，确保让这个自定义的行为默认保持关闭。在用户明确需要的时候，由用户主动开启，以让 app 中的自定义功能覆盖系统层级中设定的功能。这样也防止了用户在使用你的 app 时发现其行为与其他 app 不一致。</p>
<p><img src="media/15416976044741/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-11-06%20%E4%B8%8A%E5%8D%8812.42.27.png" alt="屏幕快照 2018-11-06 上午12.42.27"/></p></li>
<li><p>如果你的 app 支持 Apple Pencil，但并不支持或不完全支持在系统设置中提到的几个双击手势功能，你可以尽可能地将相似含义的功能映射到 Apple Pencil 的双击手势上，以保持连贯一致。例如在一个照片类 app 中，Apple Pencil 的双击手势可以在两种不同的滤镜模式中切换。不要让 Apple Pencil 的双击手势执行直接修改内容的操作以防止出现严重的操作失误，因为双击手势这个操作很容易误操作。</p></li>
<li><p>不管 Apple Pencil 的双击手势在你的 app 中对应什么操作，确保总是给用户提供有关于 Apple Pencil 双击后发生了什么的清晰、及时的视觉反馈，这样用户可以及时感知到 app 的行为发生了变化，如果是误操作可以及时恢复。</p></li>
<li><p>要向第一代、第二代 Apple Pencil 的用户都提供一份绝佳的使用体验。Apple Pencil 双击手势所提供的功能应该是用户在 app 中某个功能的快捷方式，而不是在 app 的界面中找不到的功能。</p></li>
</ul></li>
</ul>

<h2 id="toc_13">Read More</h2>

<h3 id="toc_14">Apple 官方</h3>

<ul>
<li><a href="https://developer.apple.com/design/human-interface-guidelines/ios/visual-design/adaptivity-and-layout/#auto-layout">Adaptivity and Layout - Visual Design - iOS - Human Interface Guidelines - Apple Developer</a></li>
<li><a href="https://developer.apple.com/design/human-interface-guidelines/ios/icons-and-images/image-size-and-resolution/">Image Size and Resolution - Icons and Images - iOS - Human Interface Guidelines - Apple Developer</a></li>
<li><a href="https://developer.apple.com/design/human-interface-guidelines/ios/icons-and-images/launch-screen/">Launch Screen - Icons and Images - iOS - Human Interface Guidelines - Apple Developer</a></li>
<li><a href="https://developer.apple.com/design/human-interface-guidelines/ios/system-capabilities/multitasking/">Multitasking - System Capabilities - iOS - Human Interface Guidelines - Apple Developer</a></li>
<li><a href="https://developer.apple.com/ipad/">Developing iPad Apps - Apple Developer</a></li>
<li><a href="https://developer.apple.com/videos/play/tech-talks/804/">Designing for iPad Pro and Apple Pencil - Tech Talks - Videos - Apple Developer</a></li>
<li><a href="https://developer.apple.com/videos/play/tech-talks/209/">Bringing Your Apps to the New iPad Pro - Tech Talks - Videos - Apple Developer</a></li>
</ul>

<h3 id="toc_15">非官方</h3>

<ul>
<li> <a href="https://medium.com/@hacknicity/how-ipad-apps-adapt-to-the-new-11-and-12-9-ipads-pro-cabd1c0e5f20">How iPad Apps Adapt to the New 11” and 12.9” iPads Pro</a></li>
</ul>

<blockquote>
<p>如果你觉得这篇文章对你有所帮助，欢迎请我喝杯咖啡，感谢你的支持😁</p>

<p><img src="media/14625521742746/15088240400740.jpg" alt=""/></p>
</blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Designing For iPhone Xs、iPhone Xs Max、iPhone Xʀ — 比大还大，更大的刘海屏 iPhone app 如何适配]]></title>
    <link href="https://steppark.net/15433010141111.html"/>
    <updated>2018-11-27T14:43:34+08:00</updated>
    <id>https://steppark.net/15433010141111.html</id>
    <content type="html"><![CDATA[
<p>在人民群众的热切期盼下，比 iPhone X 更大、刘海屏版的 iPhone 8 Plus —— iPhone Xs Max 终于在 2018 年 9 月苹果秋季发布上发布，一同发布的还有升级版的 iPhone X —— iPhone Xs 和看似低配实则仍然很贵的 iPhone Xʀ。正如<a href="15086036845015.html#toc_16">去年文章中推测</a>的一样，iPhone Xs Max 的分辨率是在 iPhone 8 Plus 的基础上保持宽不变高拉长的规律且保持与 iPhone X 一致的屏幕比例，即为 1242px × 2689px。那设计、适配运行在 iPhone Xs Max 上以及 iPhone Xʀ 上的 app 又有什么需要注意的呢？这就是本篇文章想要探讨的主题。</p>

<span id="more"></span><!-- more -->

<blockquote>
<p>iPhone Xs Max、iPhone Xs 广告：</p>

<iframe width="560" height="315" src="https://www.youtube.com/embed/uJkOP1-v9B4" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

<p>iPhone Xʀ 广告：</p>

<iframe width="560" height="315" src="https://www.youtube.com/embed/tG7vx7-3sl0" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
</blockquote>

<ul>
<li><strong>Note:</strong></li>
</ul>

<blockquote>
<p>在进一步阅读此文章前，推荐先阅读这篇文章的姊妹篇，看看初代刘海屏手机上 app 的那些设计和开发问题，再来更好地理解全新 iPhone 的变化：  </p>

<ul>
<li><a href="https://steppark.net/15086036845015.html">Designing For iPhone X —— iPhone 上有了刘海，设计和开发到底该咋整?</a><br/></li>
</ul>

<p>2018 年 10 月苹果秋季发布会上，iPad 也与 Home 实体键说再见了，想了解全新 iPad Pro 的更多设计和适配细节，推荐阅读下面这篇文章：  </p>

<ul>
<li><a href="https://steppark.net/15416976044741.html">Designing For New iPad Pro and Apple Pencil — 适配没有刘海的 iPad Pro 与有刘海的 iPhone Xs 有什么不同?</a><br/></li>
</ul>
</blockquote>

<h2 id="toc_0">屏幕尺寸的变化</h2>

<ul>
<li>iPhone Xs 的屏幕尺寸以及屏幕分辨率与上一代的 iPhone X 没有任何区别，仍然是 375 × 812pt @2x。</li>
<li>iPhone Xs Max 的屏幕尺寸是 6.5 寸，其屏幕分辨率是在 iPhone 8 Plus 的基础上保持宽不变高拉长，即 414 × 896pt @3x。其比例因子与 iPhone 8 Plus 一样，同是 @3x。</li>
<li>对于 6.1 寸的 iPhone Xʀ，其屏幕分辨率是 414 × 896pt @2x，和 iPhone Xs Max 不同的是其比例因子为 @2x，但它们以 pt 为单位的屏幕分辨率是完全一样的，这就意味着在这两款设备上运行相同的 app，看到的内容是完全一致的。</li>
<li>新发布的三款 iPhone 设备的屏幕比例都大约为 9:19.5。</li>
</ul>

<p><img src="media/15433010141111/5AA815C9-BF65-408C-BE39-6C1363922A04.png" alt="5AA815C9-BF65-408C-BE39-6C1363922A04"/><br/>
<em>注：iPhone 8 Plus 物理设备的屏幕在渲染时是在上述屏幕分辨率基础上进一步进行了缩放，实际屏幕物理分辨率为 1080px × 1920px。</em></p>

<ul>
<li>Size Class 方面，由于 iPhone Xs Max 和 iPhone Xʀ 是由 iPhone 8 Plus 衍化而来，所以其在横屏和竖屏时的 Size Class 与 iPhone 8 Plus 保持一致，具体可以参见下表。</li>
<li>特别的，在横屏条件下，iPhone Xs Max 和 iPhone Xʀ 的 Size Class 均为「Regular width，Compact height」，与 iPhone Xs 横屏的 Size Class「Compact width，Compact height」相比，更宽的宽度可以显示更多的内容，例如 Split View 可以同时显示 Master View 与 Detail View。</li>
<li>有关于 Size Class 的更多细节可以阅读我的另一篇文章：<a href="15171487371271.html">Size Classes and Core Components - WWDC 2017 Session 812</a></li>
</ul>

<p><img src="media/15433010141111/D92ABA2D-810A-4DF5-B386-F38C9F37B85E.png" alt="D92ABA2D-810A-4DF5-B386-F38C9F37B85E"/></p>

<h2 id="toc_1">未适配 app 在新 iPhone 上的显示</h2>

<ul>
<li>由于 iPhone Xs 与 iPhone X 的屏幕分辨率、屏幕尺寸完全一致，那如果已经适配了 iPhone X 的 app 自然可以在 iPhone Xs 上正常显示。</li>
<li><p>对于相同屏幕分辨率（以 pt 为单位）的 iPhone Xs Max 与 iPhone Xʀ 来说，由于它们与 iPhone X 的屏幕比例一样，所以运行在这两款新 iPhone 上的未适配 app 会直接通过放大拉伸 iPhone X 版本的 app 到全屏幕的方式来显示。这时，与 iPhone X 上显示的内容是完全一致的，但由于是整体放大显示，与 iPhone X 屏幕上的 app 显示相比仔细看会有些模糊。</p>
<p><img src="media/15433010141111/FE5B0516-B29C-4DFF-810B-AB58145C6EC9.png" alt="FE5B0516-B29C-4DFF-810B-AB58145C6E"/><br/>
图片来源：<a href="https://medium.com/@hacknicity/how-ios-apps-adapt-to-the-iphone-xs-max-and-iphone-iPhone%20X%CA%80-screen-sizes-f4c1f2d4eec2">How iOS Apps Adapt to the iPhone Xs Max and iPhone Xʀ Screen Sizes</a></p></li>
</ul>

<h2 id="toc_2">改进和改变</h2>

<h3 id="toc_3">自动布局 Auto Layout 性能的改善</h3>

<ul>
<li><p>Auto Layout 在 iOS 12 中的性能得到了大幅提升，推荐在开发 app 甚至设计 app 时就通过 Auto Layout 的方法进行思考，这将十分有利于以后新机型的适配，更加直观的同时减少适配工作量。下图中灰色表示 Auto Layout 在 iOS 11 中的表现，蓝色表示在 iOS 12 中的表现。</p>
<p><img src="media/15433010141111/40E38F4A-9429-48A9-9681-6DE2A666B06A.png" alt="40E38F4A-9429-48A9-9681-6DE2A666B06A"/></p></li>
</ul>

<h3 id="toc_4">Split View Controller 在 iPhone Xs Max 和 iPhone Xʀ 上的行为变化</h3>

<ul>
<li><p>由于屏幕宽度（横屏下）的进一步拉长，在横屏时，iPhone Xs Max、iPhone Xʀ 默认情况下显示的 Split View 与 iPhone 8 Plus 有稍许的不同。</p>
<ul>
<li>虽然这几款设备在横屏时的 Size Class 都为「Regular width，Compact height」，但在默认情况下显示 Split View 时，iPhone 8 Plus 会默认左右并排显示 Master View 和 Detail View，用户若有需要可以手动放大 Detail View 到全屏，其 Master View 的 Size Class 为「Compact width，Compact height」，Detail View 的 Size Class 为「Regular width，Compact height」。</li>
<li>而在 iPhone Xs Max 和 iPhone Xʀ 上，会像「邮件」应用在竖屏 iPad 上一样，默认全屏显示 Detail View，需要显示 Master View 时可以通过导航栏上的按钮或在屏幕左侧右滑呼出，Master View 的显示方式是直接覆盖住 Detail View 的一部分显示，而不是左右并排显示。此时 Master View 的 Size Class 为「Regular width，Compact height」，Detail View 的「Regular width，Compact height」也为「Regular width，Compact height」。</li>
<li>当然，开发者可以在开发时不选择这种默认显示模式，而选择与 iPhone 8 Plus 上一样的左右并排显示模式。</li>
</ul>
<p><img src="media/15433010141111/F6BB8A5B-5ED1-424C-8C99-75DCD1A871B8.png" alt="F6BB8A5B-5ED1-424C-8C99-75DCD1A871B8"/><br/>
图片来源：<a href="https://medium.com/@hacknicity/how-ios-apps-adapt-to-the-iphone-xs-max-and-iphone-iPhone%20X%CA%80-screen-sizes-f4c1f2d4eec2">How iOS Apps Adapt to the iPhone Xs Max and iPhone Xʀ Screen Sizes</a></p></li>
<li><p>代码中的实现一瞥</p>
<ul>
<li><p>默认全屏显示 Detail View，通过点击导航栏上左侧按钮或屏幕左侧右滑呼出 Master View：</p>
<p><img src="media/15433010141111/4EFB45A9-843D-4CDC-97F7-17BDBA2150DB.png" alt="4EFB45A9-843D-4CDC-97F7-17BDBA2150DB"/></p></li>
<li><p>Detail View 和 Master View 并排显示：</p>
<p><img src="media/15433010141111/D7F88015-8235-41C1-9AF6-E81B10204126.png" alt="D7F88015-8235-41C1-9AF6-E81B10204126"/></p></li>
</ul></li>
</ul>

<h2 id="toc_5">适配常见问题</h2>

<h3 id="toc_6">避免写死屏幕分辨率或根据设备机型执行指令</h3>

<ul>
<li>为某一个分辨率或某一个机型设置特例，虽然看上去很有针对性，但这反而占用了开发其他新特性的时间，后期还需要维护成本，这很大程度上是冗余的工作。</li>
<li>当代码在新的机型上运行时，可能会造成不可预知的问题，而你又不能在第一时间让用户用上新版本，这会影响用户体验。</li>
<li>你为一个分辨率、一个机型设置里特例，那之后有了新的机型、新的分辨率，还需要再做一遍这个工作，耗时耗力，无穷无尽。</li>
<li>要把这部分工作交给 UIKit 和 Auto Layout 来处理。</li>
</ul>

<h3 id="toc_7">确定某个特性在设备上的可用性的方法</h3>

<ul>
<li><p>新发布的 iPhone Xʀ 并不支持 3D Touch 功能，以「家庭 Home」app 为例，当在支持 3D Touch 功能的设备开启了 3D Touch 功能时，可以通过 3D Touch 查看智能硬件的更多选项；当在不支持 3D Touch 功能的设备上或者支持此功能但没有开启此功能时，可以通过长按来查看智能硬件的更多选项。具体代码实现方式示例如下：</p>
<ul>
<li><p>在 app 启动时检查设备是否支持某个特性，以作出相对应的处理：</p>
<p><img src="media/15433010141111/50D640F1-94EB-41FD-8EDE-2519618F9732.png" alt="50D640F1-94EB-41FD-8EDE-2519618F9732"/></p></li>
<li><p>用户可能在运行时关闭了 3D Touch，需要在运行时也检查设备某个特性的状态，以做出改变：</p>
<p><img src="media/15433010141111/06CBD00D-AD43-428D-8BCF-6FD41DAA2DF8.png" alt="06CBD00D-AD43-428D-8BCF-6FD41DAA2DF8"/></p></li>
<li><p>可以考虑使用长按手势来替代 3D Touch 的功能。</p></li>
</ul></li>
</ul>

<h2 id="toc_8">Read More</h2>

<h3 id="toc_9">Apple 官方</h3>

<ul>
<li><a href="https://developer.apple.com/design/human-interface-guidelines/ios/visual-design/adaptivity-and-layout/#auto-layout">Adaptivity and Layout - Visual Design - iOS - Human Interface Guidelines - Apple Developer</a></li>
<li><a href="https://developer.apple.com/iphone/">iPhone - Apple Developer</a></li>
<li><a href="https://developer.apple.com/videos/play/tech-talks/207">Building Apps for iPhone Xs, iPhone Xs Max, and iPhone Xʀ - Tech Talks - Videos - Apple Developer</a></li>
</ul>

<h3 id="toc_10">非官方</h3>

<ul>
<li><a href="https://www.paintcodeapp.com/news/ultimate-guide-to-iphone-resolutions">The Ultimate Guide To iPhone Resolutions</a></li>
<li><a href="https://medium.com/@hacknicity/how-ios-apps-adapt-to-the-iphone-xs-max-and-iphone-iPhone%20X%CA%80-screen-sizes-f4c1f2d4eec2">How iOS Apps Adapt to the iPhone Xs Max and iPhone Xʀ Screen Sizes</a></li>
</ul>

<blockquote>
<p>如果你觉得这篇文章对你有所帮助，欢迎请我喝杯咖啡，感谢你的支持😁</p>

<p><img src="media/14625521742746/15088240400740.jpg" alt=""/></p>
</blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[流畅界面背后的设计考量]]></title>
    <link href="https://steppark.net/15416957498069.html"/>
    <updated>2018-11-09T00:49:09+08:00</updated>
    <id>https://steppark.net/15416957498069.html</id>
    <content type="html"><![CDATA[
<p>在使用 iPhone X 时，用户可以通过简单直观的手势顺畅地完成回到主屏幕、查看多任务、切换 app 等操作。之所以让用户感到界面如此流畅甚至与用户的思想融为一体的界面是如何设计的？这个 session 将会带领你学习如何设计直观、自然的手势、动画，从而让用户爱上你的 app。</p>

<span id="more"></span><!-- more -->

<p><img src="media/15416957498069/2247_wide_250x141_2x.jpg" alt="2247_wide_250x141_2x" class="mw_img_center" style="display: block; clear:both; margin: 0 auto;"/></p>

<h2 id="toc_0">Interfaces that extend our minds 延伸我们思想的界面</h2>

<blockquote>
<p>Aligning interfaces to the way we think and the way we move</p>
</blockquote>

<ul>
<li>Respond to input instantly 对输入马上做出响应</li>
<li><p>Allow for constant redirection and interruption 允许持续的重新定向和打断</p>
<ul>
<li><p>如果不允许重新定向和打断，那界面的操作将是线性的，你要先思考决定要干什么再通过特定的手势完成任务。<br/>
<img src="media/15416957498069/FA964CC6-3EC4-4B9C-81D3-CCF065537F62.png" alt="FA964CC6-3EC4-4B9C-81D3-CCF065537F62"/></p></li>
<li><p>如果可以重新定向和打断，那「思考」和「手势操作」就可以同时进行，你可以将不同的单一的手势结合，组成新的手势。<br/>
<img src="media/15416957498069/75DDEA69-BA4C-4A4F-8CA9-75680B5759E2.png" alt="75DDEA69-BA4C-4A4F-8CA9-75680B5759E2"/></p></li>
<li><p>Gesture in Parallel With Thought Summary</p>
<ol>
<li>Faster than thinking before doing 比「做之前做出思考」更快</li>
<li>One gesture solves multiple problems 一个综合的手势可以解决多个不同的问题</li>
<li>Helps with discovery 有助于探索新的手势，创造 1+1&gt;2 的效果</li>
<li>Allow you to layer gestures at the speed of thought 允许你跟上思考的速度做出对应的手势</li>
</ol></li>
<li><p>Examples：</p>
<ol>
<li>Swipe home-screen pages /<em>while</em>/ going home</li>
<li>Go to multitasking /<em>while</em>/ app is launching</li>
<li>Close app /<em>while</em>/ launching app</li>
<li>Interact with app /<em>as</em>/ it launches</li>
</ol></li>
</ul></li>
<li><p><em>Summary：</em>这些事情看起来没有那么重要，但要想界面一直能够及时响应并理解你的意图这一点十分重要。要让用户感到界面是有生命的。这对于用户对界面的期待和理解以及使用的舒适度亦十分重要。</p></li>
<li><p>Maintain spatial consistency throughout movement 在移动的过程中保持空间一致性</p>
<ul>
<li>保持在移动时的空间一致性、对称性，以符合物理世界物体运动的规律。例如一个页面自右向左滑入屏幕，那返回时应该自左向右滑出屏幕。
<img src="media/15416957498069/ECD639EA-72D3-42C9-8902-ECC64975F8CC.png" alt="ECD639EA-72D3-42C9-8902-ECC64975F8C"/></li>
</ul></li>
<li><p>Hint in the direction of the gesture 在手势方向上的暗示/预测</p>
<ul>
<li>物理世界中，人们会根据规律，对物体的形态、轨迹进行预测。例如控制中心的某个功能模块会随着手指的按下弹起并逐渐变大，直至弹出完整的功能页面。
<img src="media/15416957498069/73AA81DD-4777-4730-959E-DADA6A8F3BBE.png" alt="73AA81DD-4777-4730-959E-DADA6A8F3BBE"/></li>
</ul></li>
<li><p>Keep touch interfaces lightweight, but amplify their motion 保持触摸交互轻量化，但是放大它们的动作</p>
<ul>
<li>小的投入产生大的、满意的效果；</li>
<li>short interaction：通过 position（位置）、velocity（加速度）、speed（速度）、force（力）建立手势的动量/惯性文档，继而放大动作的效果，让其感觉就是自己的延伸。例如在滚动页面时，手指只在屏幕停留了一瞬间，但系统可以保持手指手势的能量和动量，移动合适、满意的距离。
<img src="media/15416957498069/DB59CA57-9C73-4543-8B86-514552C0AD36.png" alt="DB59CA57-9C73-4543-8B86-514552C0AD36"/></li>
</ul></li>
<li><p>Softly indicate boundaries 柔和地表明边界</p>
<ul>
<li>例如在到达页面顶端和底端时，界面会柔和的提醒你，而不是戛然而止，像是碰到了一堵墙。</li>
</ul></li>
<li><p>Soft transitions 柔和地过渡</p>
<ul>
<li>从一个界面过渡到另一个界面、从一个动作过渡到另一个动作。例如在 iPad 上手指从屏幕底部向上轻扫划出 Dock，继续向上轻扫会进入多任务界面或回到首页。在这两者直接的过渡是平滑的，不是生硬的。</li>
</ul></li>
<li><p>Design smooth frames of motion 设计平滑的动作运动效果</p>
<ul>
<li>界面中物体的运动实际上是由多个帧组成，相邻的两个帧的视觉变动太大，就会造成视觉频闪，人的眼睛跟不上运动的速度。</li>
<li>在设计中重要的不是帧速率，而是帧内容。</li>
<li>几种运动效果：正常、动作模糊、动作拉伸
<img src="media/15416957498069/BDB64898-80DC-483F-A3CB-825400986D7D.png" alt="BDB64898-80DC-483F-A3CB-825400986D7D"/></li>
</ul></li>
<li><p>Work with behavior rather than animation 更多地考虑行为而不是动画</p>
<ul>
<li>物理世界中的物体是一直处于动态的，并且会受到人的影响。</li>
<li>动画和操作更像是你和物体之间的对话，而非界面的描述。不要把静态的事物转变成动态的。</li>
<li>例如，在相册中滑动照片时的阻力较小，因为这个动作是轻量化的；而通过 Home Indicator 左右滑动切换 app 时需要用到的阻力就会更大，因为我们把这个动作看得更重。</li>
</ul></li>
<li><p><em>Summary 总结：</em></p>
<ul>
<li>Instant response and constant redirection 立即地响应、连续地重定向</li>
<li>Maintain spatial consistency 保持空间一致性</li>
<li>Hint in the direction of the gesture 在手势方向上的预测</li>
<li>Lightweight interactions, amplified output 轻量化交互，放大输出</li>
<li>Soft boundaries and transitions 柔和的边界和过渡</li>
<li>Design smooth, dynamic behavior 设计平滑、动态的行为
<img src="media/15416957498069/35E6DFE8-E909-4A8A-9CEC-52A9E926134B.png" alt="35E6DFE8-E909-4A8A-9CEC-52A9E926134B"/></li>
</ul></li>
</ul>

<h2 id="toc_1">Designing with dynamic motion 动态动作的设计</h2>

<ul>
<li><p>在界面中常见的使用动态的一种形式是定时动画，只要敲击一下按钮，屏幕的控制权就完全交给了设计者。<br/>
<img src="media/15416957498069/C4E49A86-76BE-4816-9A62-9D50B5808E20.png" alt="C4E49A86-76BE-4816-9A62-9D50B5808E20"/></p></li>
<li><p>在一个流畅的界面中，动画是动态的，屏幕的控制权是属于用户的，动画应该与互动同步进行。<br/>
<img src="media/15416957498069/9D40AE03-CB51-4928-B9BC-6414EBC68811.png" alt="9D40AE03-CB51-4928-B9BC-6414EB"/></p></li>
<li><p>Seamless motion 无缝动作</p>
<blockquote>
<p>Characteristics of the physical world make great behaviors  物理世界的特征创造了完美的行为。  </p>
</blockquote>
<ul>
<li>Familiar, natural motion 熟悉的、自然的符合物理规律、人们认知的动作</li>
<li>Maintains throw momentum 保持运动的动力</li>
<li>Friction gracefully reduces speed 阻力优雅地使速度变慢</li>
<li><p>Imperceptibly comes to rest 难以觉察地趋向于静止，这种感觉不到结尾的运动会增强内容是不断运动的感觉。</p></li>
<li><p>当滚动一个页面到边缘时，页面会有一个弹性告诉用户用户已经到了页面的边缘，当用户放手时，这个弹性又会让页面渐渐回到其静息状态。</p></li>
<li><p>拿物理世界中最常见的弹簧来看，影响弹簧运动的几个因素：</p>
<ul>
<li>质量+硬度（可合称为响应时间）：可以影响弹簧的惯性、运动时间和距离等</li>
<li>阻尼：可以影响弹簧的力的衰减等。
<img src="media/15416957498069/2C9B4A83-EB8C-4AA2-B3B8-17EAC1065935.png" alt="2C9B4A83-EB8C-4AA2-B3B8-17EAC1065935"/></li>
</ul></li>
<li><p>从简单开始，最基本的动作不需要弹簧的阻尼/过冲；一个有动量的手势需要有像弹簧一样的阻尼/过冲。例如在音乐 app 中，点击 tab bar 上方的正在播放以展开「正在播放」模态页面时，这个点击动作就没有动量，不需要阻尼，但当用手指向下轻扫关闭「正在播放」模态页面时就需要一点阻尼。</p></li>
<li><p>反弹可以用来暗示：例如在 iPhone X 的锁屏上有「手电筒」和「照相机」按钮，为了避免用户在无意间点击了这两个按钮，用户需要使用更加强烈的手势（3D Touch）才能打开相应的功能。但当一个不知道如何操作的用户轻点了这两个按钮，两个按钮会使用反弹的形式告诉用户界面正在响应用户的操作，这两个按钮是可以使用的，但还需要再用力一点。</p></li>
<li><p>Think beyond motion. 思考并不仅仅是动作。</p>
<ul>
<li>在界面中，不仅仅可以通过动效来告诉用户内容是运动的，还可以通过声音、触觉、颜色等。</li>
<li>例如在一个 Data Picker 中，用户上下滑动日期，屏幕上有动画，扬声器中有声音，手机会有震动反馈，这更加让用户感受到内容的运动。</li>
</ul></li>
</ul></li>
<li><p>Crafting a character 构造一个特征</p>
<ul>
<li>任何一个动作都不应该是独立的，而应该是置于整体考虑的，应该是在 app 中可重复的，用户可以轻易学会的；</li>
<li>例如手指向上滑动，使一个页面向上滚动时，用户也可以双击状态栏使页面回到顶部，这是无缝衔接的，这也应该是贯彻整个 app 的交互操作。</li>
</ul></li>
<li><p>Understanding intent 理解意图</p>
<ul>
<li>普通的按钮在点击后的发生的结果比较显而易见，且每个按钮与结果一般是一一对应的。但对于用户触发的手势来说，需要根据用户手势的动作、动量、时间等因素预测并理解用户的意图。</li>
<li><p>例如在 Facetime 中，默认情况下右下角的浮窗可以显示对方能看到的你的画面，用户可以通过手势将其移动到屏幕的四个角落的任意一个。当用户的手势触发时，就应该根据手势的动量等数据预测用户的意图，以确定最终的移动位置。<br/>
<img src="media/15416957498069/BA2FC553-65E1-4611-A6AC-ED2A11E524C4.png" alt="BA2FC553-65E1-4611-A6AC-ED2A11E524"/></p></li>
<li><p>意图的预测与理解不仅适用于物体的移动，也适用于物体的旋转、改变大小或者几者之间的结合。</p></li>
</ul></li>
<li><p><em>Summary 总结：</em></p>
<ul>
<li>Continuous behaviors, not timed animations 连续一致的行为，而不是定时动画；</li>
<li>Draw inspiration from the physical world 从物理世界获取灵感</li>
<li>Springs don’t need to be springy! 弹簧并不一定要有弹性，要合理利用反弹</li>
<li>Align motion with intent  利用动量，预测意图，展现动作
<img src="media/15416957498069/1C9C0D1D-58D6-49E2-8067-9481C9145948.png" alt="1C9C0D1D-58D6-49E2-8067-9481"/></li>
</ul></li>
</ul>

<h2 id="toc_2">Responding to interaction 对交互作出响应</h2>

<ul>
<li><p>Design of taps and swipes  轻点和轻扫手势的设计</p>
<ul>
<li>轻点手势：以计算器键盘上的一个按钮来说，一个按钮需要至少满足以下条件：
<ul>
<li>按钮在点击之后需要立即做出响应，这让用户知道按钮响应了用户的操作；</li>
<li>除开按钮本身的可见区域外，还需要有一个更大的点击有效区域，这可以防止用户在点击过程完成前意外移动出了按钮的可见区域；</li>
<li>若用户在按下按钮之后且松开按钮之前改变了注意，用户可以将手指移出可点击区域取消操作，亦可在移出后回到可点击区域恢复操作，即用户松开手指才算是完成了一次轻点手势操作。</li>
</ul></li>
<li>轻扫手势：广义上的轻扫可以代表许多动作，滑动、拖拽、弹开、滚动等，以将一张图片从一个位置拖拽到另一个位置为例，其过程需要注意：
<ul>
<li>当拖拽手势离原点移动超过了 10 point（动作滞后），图片就应该开始移动；</li>
<li>当开始移动时，需要注意其运动的方向，严格符合拖拽手势的动量、速度，符合物理规律；</li>
<li>最后，根据移动的历史轨迹落入最终的位置。</li>
</ul></li>
</ul></li>
<li><p>Principles of fluid interactions 流畅交互的原则</p>
<ul>
<li>Touch and content move together 触摸和内容要一起动，两者是一一对应的。
<ul>
<li>一旦触摸和内容没有一起移动，用户立即就能感受到。例如滑动一个页面到页面边缘时。</li>
<li>触摸和内容一起动不仅仅存在于手和屏幕之间，还存在于 Apple TV 中，遥控器上的触摸手势和屏幕之间。</li>
</ul></li>
<li>Provide continuous feedback 提供连续一致的反馈
<ul>
<li>例子一：iPhone X 锁屏上的手电筒按钮，随着按压的面积和力度逐渐变大，按钮会变得越来越大，同时也提醒用户只要再用力一点，就可以触发其功能。</li>
<li>例子二：Apple TV 上的焦点系统会随着遥控器触摸表面上的手势而变化：聚焦时焦点的变化、移动焦点时的方向指向</li>
</ul></li>
</ul></li>
<li><p>Dealing with multiple gestures 处理多个手势</p>
<ul>
<li>例如，在一个列表页面可以通过轻扫上下滚动，也可以用力按下（3D Touch）一个条目以预览/查看（Peep）其详细内容。</li>
<li><p>如果系统先判断出是什么手势再做出视觉反馈，那么就会存在延迟：<br/>
<img src="media/15416957498069/09920A47-6F3B-488D-9063-4FCCE3EA817E.png" alt="09920A47-6F3B-488D-9063-4FCCE3EA817E"/></p></li>
<li><p>所以，必须要同时判断所有手势，并在确定最终手势的时候，中断其他手势。例如在 3D Touch 过程中又想改变意图而去滚动页面。<br/>
<img src="media/15416957498069/3051B1CB-A29C-40CB-9867-3B464570CB76.png" alt="3051B1CB-A29C-40CB-9867-3B464570CB76"/></p></li>
<li><p>但有时候延迟不可避免，例如在「照片」中当照片全屏显示时，单击可以显示菜单，双击可以使图片放大，系统必须要等点击结束后才能做出响应，因为其必须要知道这次点击是单击还是双击。</p></li>
</ul></li>
<li><p><em>Summary 总结：</em></p>
<ul>
<li>Design of taps and swipes 轻点和轻扫手势的设计</li>
<li>Content and touch move one-to-one  内容和触摸的移动是一一对应的</li>
<li>Provide continuous feedback 提供连续一致的反馈</li>
<li>Detect multiple gestures in parallel 同步检测多个手势
<img src="media/15416957498069/2C7A08D4-CCE8-4E4A-9E26-4FB5660A4814.png" alt="2C7A08D4-CCE8-4E4A-9E26-4FB5660A4814"/></li>
</ul></li>
</ul>

<h2 id="toc_3">Fluidity as a medium 作为一个媒介的流畅度</h2>

<ul>
<li><p>怎样让用户知道交互具体是如何操作的？</p>
<ul>
<li><p>Visual Cues 视觉线索：页面底部只露出一部分内容，表明后面还有更多的内容；利用页面指示器表明还有更多的页面；通过一个「把手」提示用户这个界面可以提起展示更多内容。<br/>
<img src="media/15416957498069/96F7DD7F-0734-47B5-996B-5C02C365CE2B.png" alt="96F7DD7F-0734-47B5-996B-5C02C365CE2B"/></p>
<p><img src="media/15416957498069/C25E1BC2-9E74-4A81-9940-4D475CBE7C7C.png" alt="C25E1BC2-9E74-4A81-9940-4D475CBE7C7"/></p></li>
<li><p>Elevate interactive elements to a separate plane 提升可交互元素的层级到一个单独的平面：「开关」控件。<br/>
<img src="media/15416957498069/70ECC8F0-C04B-4EB1-B18D-4C20BE56DFF4.png" alt="70ECC8F0-C04B-4EB1-B18D-4C20BE56DFF4"/></p></li>
<li><p>Use behavior to teach gesture 利用行为去教用户手势：如在 Safari 中的多页面界面，点击「关闭」按钮，该网页会从右往左滑出屏幕，也暗示了如果直接在网页上从右往左滑动也可以关闭网页。<br/>
<img src="media/15416957498069/A5A04C11-E4E8-46D7-BA51-2AB5BE6EC3EF.png" alt="A5A04C11-E4E8-46D7-BA51-2AB5BE6EC3EF"/></p></li>
<li><p>Explanations 解释：应该最少使用，应该只在那些重复使用的场景下使用，不要在间歇性使用手势的地方使用，否则用户会记不住</p></li>
</ul></li>
<li><p>Playfulness 让交互变得活泼有趣——一个将以上都做到所达到的境界，这表明 app 的界面和交互正在内化：</p>
<ul>
<li>A natural consequence of a fluid interface 一个流畅交互的自然结果</li>
<li>Happens when the interface feels in sync with you 界面与你完全同步这件事真的发生了</li>
<li>You feel comfortable exploring new areas 探索新的领域，你感觉很舒服</li>
<li>Allow people to <em>discover</em>your interface through play 允许人们通过玩去发现你的界面</li>
</ul></li>
<li><p><em>Summary 总结：</em></p>
<ul>
<li>Design the interactions to be /inseparable/ from the visuals 将交互和视觉设计成不可分割的</li>
<li>A interactive demo is worth a million static designs 一个可交互的 demo 值得一百万个静态设计，以让自己真正理解其内涵</li>
<li>Prototyping helps you /think/ by exploring 搭建原型时通过探索可以帮助你的思考</li>
<li>Sets a goal for the implementation 为实施设定一个目标</li>
<li>Hard to copy and gives your app a unique character 很难复制，给予你的 app 一个独一无二的特征
<img src="media/15416957498069/B2BE5E1E-A4A9-407C-B938-420C44C099B2.png" alt="B2BE5E1E-A4A9-407C-B938-420C44C099B2"/></li>
</ul></li>
</ul>

<h2 id="toc_4">参考链接</h2>

<ul>
<li><a href="https://developer.apple.com/videos/play/wwdc2018/803/">Designing Fluid Interfaces - WWDC 2018 - Videos - Apple Developer</a><br/></li>
</ul>

<blockquote>
<p>如果你觉得这篇文章对你有所帮助，欢迎请我喝杯咖啡，感谢你的支持😁</p>

<p><img src="media/14625521742746/15088240400740.jpg" alt=""/></p>
</blockquote>

]]></content>
  </entry>
  
</feed>
