<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[北极熊不不]]></title>
  <link href="http://chuxiangyuan.github.io/atom.xml" rel="self"/>
  <link href="http://chuxiangyuan.github.io/"/>
  <updated>2016-10-30T00:25:33+08:00</updated>
  <id>http://chuxiangyuan.github.io/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://www.mweb.im/">MWeb</generator>
  
  <entry>
    <title type="html"><![CDATA[使用 Alfred 提高你的工作效率]]></title>
    <link href="http://chuxiangyuan.github.io/14774965258076.html"/>
    <updated>2016-10-26T23:42:05+08:00</updated>
    <id>http://chuxiangyuan.github.io/14774965258076.html</id>
    <content type="html"><![CDATA[
<p>相信看过 macOS 系统必备软件推荐这类文章的同学，一定听说过 Alfred 这款软件。Alfred 是一款通过一个输入框快速完成文件搜索、自定义动作从而大幅提高工作效率的软件，可以看成 macOS 自带功能 Spotlight 的加强版。</p>

<p>网上讲 Alfred 的文章很多，Alfred 的许多深度功能可能我都还没用上。在这里只与大家分享一下我自己的一些用法，供大家参考。</p>

<p>写这篇文章的时候，正好赶上万众期待的新的 MacBook 即将发布，对于第一次使用 Mac 的同学这篇文章应该会对你有所帮助，对于还没拥有 Mac 的同学，说不定你看了这篇文章一冲动就买了呢。</p>

<span id="more"></span><!-- more -->

<p><img src="media/14774965258076/14774973341760.jpg" alt="" class="mw_img_center" style="display: block; clear:both; margin: 0 auto;"/></p>

<h2 id="toc_0">目录</h2>

<ul>
<li>
<a href="#toc_0">目录</a>
</li>
<li>
<a href="#toc_1">基本使用</a>
</li>
<li>
<a href="#toc_2">奇思妙用</a>
</li>
<li>
<a href="#toc_3">进阶使用</a>
<ul>
<li>
<a href="#toc_4">搜索类</a>
</li>
<li>
<a href="#toc_5">工具类</a>
</li>
<li>
<a href="#toc_6">软件辅助类</a>
</li>
<li>
<a href="#toc_7">自己动手，丰衣足食</a>
</li>
</ul>
</li>
<li>
<a href="#toc_8">总结</a>
</li>
</ul>


<h2 id="toc_1">基本使用</h2>

<p>Alfred 可以通过快捷键快速触发搜索输入框，我设置的快捷键是<code>⌥+Space</code>。Alfred 本身是免费的，但是想要用更高级的功能需要付费激活 PowerPack 功能。</p>

<ol>
<li><p>基本文件搜索：输入关键字可以搜索电脑里的文件、程序、联系人、书签等，你完全不需要到对应的文件夹或者 Launchpad 里眼花缭乱的找到文件或程序再打开。在搜索结果中可以按<code>⌘+Enter</code>打开文件所在的位置。当然你可以在 Alfred 的偏好设置中选择哪些内容在搜索结果中展示，可以搜索哪些路径下的内容。<br/>
<img src="media/14774965258076/14774975502470.jpg" alt="" class="mw_img_center" style="display: block; clear:both; margin: 0 auto;"/></p></li>
<li><p>无搜索结果时默认搜索：当没有符合关键词的搜索结果时，Alfred 会默认使用 Google、Amazon、Wikipedia 的网页搜索。为了更符合自己的使用习惯，我把它默认设置为 Google 和 Baidu 的网页搜索。（在偏好设置中的 Features-Default Results-Fallbacks：Setup fallback results 进行设置）<br/>
<img src="media/14774965258076/14774974534608.jpg" alt="" class="mw_img_center" style="display: block; clear:both; margin: 0 auto;"/></p></li>
<li><p>更多网站搜索（Web Search）：软件自身内置了一些 Google、Twitter 等搜索，基本上都是一些国外的服务。为了更接地气，我添加了如下图所示的一些网站的搜索。图中的锁形标志代表了搜索结果的网页使用了 HTTPS。<br/>
<img src="media/14774965258076/14773860150947.jpg" alt="" class="mw_img_center" style="display: block; clear:both; margin: 0 auto;"/></p>

<p>添加自定义的搜索项也很简单，只需要知道对应网站的搜索 URL 并添加到偏好设置中的 Features-Web Search 中即可。比如： </p>

<ul>
<li>百度搜索的 URL 是：<code>http://www.baidu.com/s?wd={query}</code> </li>
<li>Appshopper 搜索的 URL 是：<code>http://appshopper.com/search?search={query}</code> </li>
</ul>

<p>添加的时候可以设置一个快捷键，比如百度搜索设置为<code>bd</code>就可以在呼出 Alfred 时，输入『 bd 』加空格，并输入要搜索的关键词，敲击回车，即可打开网页搜索到对应的内容了。</p>

<p>从上面举的两个例子，应该能看出<code>{query}</code>就是要搜索的关键词，这样只要你知道某网站一个搜索结果的 URL，这个网站的搜索 URL 你就知道，自然就可以添加到 Alfred 中了。</p></li>
</ol>

<h2 id="toc_2">奇思妙用</h2>

<p>除了基本的搜索功能，Alfred 还内置了一些常用的小功能。以下列出几个我常用的，大概按我的使用频率由高到低排序。</p>

<ol>
<li><p>如果你恰好需要计算一个简单的算式，可以直接在 Alfred 的搜索框中输入算式，Alfred 就会显示出计算结果。<br/>
<img src="media/14774965258076/14774975977854.jpg" alt="" class="mw_img_center" style="display: block; clear:both; margin: 0 auto;"/></p></li>
<li><p>Alfred 可以作为一个迷你的播放器，调用 iTunes 播放音乐。我设置的快捷键是<code>⌥+⌘+Enter</code>，然后直接输入歌曲／歌手／专辑名称，回车后就可以播放了。同样你也可以在调出 Alfred 搜索框后输入<code>itunes</code>，也可以打开迷你播放器。<br/>
<img src="media/14774965258076/14774976336355.jpg" alt="" class="mw_img_center" style="display: block; clear:both; margin: 0 auto;"/></p></li>
<li><p>Alfred 中内置了一部分系统功能的命令，可以通过自定义的关键字触发，如下图。举两个例子，在 macOS 中想立即锁定自己电脑进入输入密码的界面，除了通过系统自定义的触发角功能，可以在 Alfred 的搜索框中输入<code>lock</code>来锁定；下载安装了多个 dmg 程序安装包，但每个程序的 dmg 安装包都加载在了电脑上，如果一个个弹出，费时费力，可以在 Alfred 的搜索框中输入<code>ejectall</code>直接弹出所有挂载的磁盘。<br/>
<img src="media/14774965258076/14774976593989.jpg" alt="" class="mw_img_center" style="display: block; clear:both; margin: 0 auto;"/></p></li>
<li><p>遇到不懂的英文单词，调起 Alfred 的输入框输入<code>dic</code>+空格+单词即可调用 macOS 内置的词典查询单词的释义，按回车进入词典。<br/>
<img src="media/14774965258076/14774979006501.jpg" alt=""/></p></li>
<li><p>搜索框中直接输入<code>&gt;</code>，并在之后输入命令，就可以调用「终端」程序，并运行命令。例如，在搜索框中输入下面的命令可以查看通过 adb 连接上的安卓设备：<code>adb devices</code><br/>
<img src="media/14774965258076/14774977477267.jpg" alt="" class="mw_img_center" style="display: block; clear:both; margin: 0 auto;"/></p></li>
<li><p>记录多个剪贴板历史：我设置的快捷键是<code>⌥+⌘+C</code>，打开后可以查看最新所有的剪贴板历史。<br/>
<img src="media/14774965258076/14774977724375.jpg" alt="" class="mw_img_center" style="display: block; clear:both; margin: 0 auto;"/></p></li>
<li><p>在进入<code>⌥+⌘+C</code>后，第一项是「All Snippets」，在其中可以设置一些常用的需要输入的字符，比如邮箱，这样在登录、注册时就不需要重复输入复杂的邮箱地址了。<br/>
<img src="media/14774965258076/14774978021140.jpg" alt="" class="mw_img_center" style="display: block; clear:both; margin: 0 auto;"/></p>

<p>注：6 和 7 使用频率比较低的原因是相比其他竞品，Alfred 的调用更加复杂，呈现形式上不够直观，在这两个需求上我更喜欢 <a href="http://pasteapp.me/">Paste</a>。</p></li>
</ol>

<h2 id="toc_3">进阶使用</h2>

<p>在 Alfred 中有一个 Workflows 的 tab，用上这个，你才会发现 Alfred 的强大。简而言之，Workflow 就是把你想干的搜索的事，通过程序代码编写成一个流程化的东西，之后你只需要每次调用就行了。网上有很多分享的 workflow，可以参考 <a href="http://www.alfredworkflow.com">Alfred 2 Workflow List</a> 、<a href="http://www.packal.org/">Packal</a> 这两个网站。软件本身的功能是固定的，但提供的这种可扩展的能力却可以让 Alfred 完成更多不可思议的操作。</p>

<h3 id="toc_4">搜索类</h3>

<p>这类 workflow 主要是搜索某些软件或网站的内容，但相比 Web Search，可以直接在 Alfred 中显示搜索结果，一键即可打开搜索内容的详情页。</p>

<ol>
<li><p><a href="http://www.packal.org/workflow/itunes-store-search">iTunes Store Search</a><br/>
搜索 iTunes Store 里的 app、song、album、podcast 等内容，直接在 Alfred 中显示搜索结果，进一步可在 iTunes Store 里查看。你可在 workflow 的设置中自定义 iTunes Store 的搜索地区和显示的搜索结果的最大数量。<br/>
<img src="media/14774965258076/14774981208539.jpg" alt="" class="mw_img_center" style="display: block; clear:both; margin: 0 auto;"/></p></li>
<li><p><a href="http://www.packal.org/workflow/mac-app-store-search">Mac App Store Search</a><br/>
与 iTunes Store Search 类似，只不过这个是在 Mac App Store 中进行搜索。类似的还有 <a href="http://www.packal.org/workflow/ibooks-search">iBooks Search</a>，在 iBooks Store 中进行搜索。<br/>
<img src="media/14774965258076/14774980375390.jpg" alt="" class="mw_img_center" style="display: block; clear:both; margin: 0 auto;"/></p></li>
<li><p><a href="https://github.com/lucifr/Alfredv2-Extensions/raw/master/Douban.alfredworkflow">Douban</a><br/>
快速搜索豆瓣上的电影、音乐、图书，并返回相应搜索结果。<br/>
<img src="media/14774965258076/14774859695926.jpg" alt="" class="mw_img_center" style="display: block; clear:both; margin: 0 auto;"/></p></li>
<li><p><a href="https://github.com/em91/dianping-Alfredv2/raw/master/Dianping.alfredworkflow">Dianping</a><br/>
快速搜索大众点评上的商家店铺，可以自定义搜索的默认城市。<br/>
<img src="media/14774965258076/14774862831831.jpg" alt="" class="mw_img_center" style="display: block; clear:both; margin: 0 auto;"/></p></li>
<li><p><a href="https://github.com/KJlmfe/Alfred-workflows/raw/master/zhihu.alfredworkflow">知乎</a><br/>
快速搜索知乎上的问题、话题、人，还可返回知乎日报文章列表。<br/>
<img src="media/14774965258076/14774953262521.jpg" alt="" class="mw_img_center" style="display: block; clear:both; margin: 0 auto;"/></p></li>
</ol>

<h3 id="toc_5">工具类</h3>

<p>这类 workflow 主要是满足某些生活、工作、学习中经常用到、但又及其繁琐的需求。</p>

<ol>
<li><p><a href="https://github.com/roylez/alfred_kuaidi/raw/master/kuaidi.alfredworkflow">快递查询</a><br/>
快速查询快递利器，可对查询结果一键复制，可记录查询历史。<br/>
<img src="media/14774965258076/14774872384661.jpg" alt="" class="mw_img_center" style="display: block; clear:both; margin: 0 auto;"/></p></li>
<li><p><a href="https://github.com/wensonsmith/YoudaoTranslate/raw/master/Youdao%20Translate.alfredworkflow">Youdao Translate</a><br/>
调用有道翻译单词、词组、句子，中英互译。<br/>
<img src="media/14774965258076/14774874490798.jpg" alt="" class="mw_img_center" style="display: block; clear:both; margin: 0 auto;"/></p></li>
<li><p><a href="http://www.packal.org/workflow/newfile">NewFile</a><br/>
在 Finder 当前目录下新建文件，默认扩展名是 txt。有两种形式：仅创建和创建并打开。如果习惯于 Windows 的右键新建某种格式的文件，这个应该很方便。<br/>
<img src="media/14774965258076/14774877559589.jpg" alt="" class="mw_img_center" style="display: block; clear:both; margin: 0 auto;"/></p></li>
<li><p><a href="http://www.packal.org/workflow/resize-image">Resize Image</a><br/>
快速对 Finder 中当前选中的图片等比例调整尺寸。输入的数字代表想要调整的图片宽度。<br/>
<img src="media/14774965258076/14774879454220.jpg" alt="" class="mw_img_center" style="display: block; clear:both; margin: 0 auto;"/></p></li>
<li><p><a href="https://github.com/hzlzh/Alfred-Workflows/raw/master/Downloads/Shorten-URL.alfredworkflow">Shorten URL</a><br/>
把已有的较长的链接转换成短连接并复制到剪切板。<br/>
<img src="media/14774965258076/14774883038847.jpg" alt="" class="mw_img_center" style="display: block; clear:both; margin: 0 auto;"/></p></li>
<li><p><a href="http://www.packal.org/workflow/toggle-hidden-files">Toggle Hidden Files</a><br/>
快速显示/隐藏系统中的隐藏文件。虽然在 macOS 10.12 中已经可以通过快捷键<code>⇧+⌘+.</code>来完成上述操作，但这个快捷键可能你会忘记，使用 workflow 可能更加方便快捷。<br/>
<img src="media/14774965258076/14774896982373.jpg" alt="" class="mw_img_center" style="display: block; clear:both; margin: 0 auto;"/></p></li>
</ol>

<h3 id="toc_6">软件辅助类</h3>

<p>这类 workflow 主要是给已安装的软件提供一个辅助功能。但一般情况下这些软件自身都会带有一些全局快捷键或者工具条，软件原生的功能可能支持的更好，通过 Alfred 来实现可能并不能获得最好的效果，在此仅举一例。</p>

<ol>
<li><a href="http://www.packal.org/workflow/things">Things</a>
在 Things 中添加一个 TODO。
<img src="media/14774965258076/14774913959274.jpg" alt=""/></li>
</ol>

<h3 id="toc_7">自己动手，丰衣足食</h3>

<p>上文中提到的所有 workflow 其实都是 Alfred 的用户们自己创造的，有的简单，有的复杂。对于初学者来说，即使你不懂代码，你也可以通过简单的操作来做一个 workflow，从而提高自己的工作效率。</p>

<p>在此拿我自己的实际情况举一个非常简单的例子。每天开始工作的时候，我需要在 Teambiton 中查看最新的项目进展，在微信中与同事沟通，在 Foxmail 中收发邮件。所以我需要在进入工作状态后，打开 Teambiton 网页、微信 app、Foxmail app。这是一个较为固定的操作，但如果手动完成，其实很麻烦，可以借助一个 workflow 来解放劳动力。创建这个 workflow 大概分为以下几步：</p>

<ol>
<li><p>添加 workflow：Alfred 中内置了一些固定的模板，可以选择通过快捷键打开多个文件； <br/>
<img src="media/14774965258076/14774928163426.jpg" alt="" class="mw_img_center" style="display: block; clear:both; margin: 0 auto;"/></p></li>
<li><p>填写 workflow 基本信息：包括名称、Icon 等；<br/>
<img src="media/14774965258076/14774930055324.jpg" alt="" class="mw_img_center" style="display: block; clear:both; margin: 0 auto;"/></p></li>
<li><p>除了打开多个文件，还要添加一个 Action：打开一个 URL；<br/>
<img src="media/14774965258076/14774932148437.jpg" alt="" class="mw_img_center" style="display: block; clear:both; margin: 0 auto;"/></p></li>
<li><p>配置 Keyword；<br/>
<img src="media/14774965258076/14774937454375.jpg" alt="" class="mw_img_center" style="display: block; clear:both; margin: 0 auto;"/></p></li>
<li><p>添加要打开的 app；<br/>
<img src="media/14774965258076/14774931068193.jpg" alt="" class="mw_img_center" style="display: block; clear:both; margin: 0 auto;"/></p></li>
<li><p>配置要打开的 URL。<br/>
<img src="media/14774965258076/14774932046964.jpg" alt="" class="mw_img_center" style="display: block; clear:both; margin: 0 auto;"/></p></li>
</ol>

<p>workflow 创建完成后，在 Alfred 的输入框中输入设置好的 keyword，敲回车，一切搞定。<br/>
<img src="media/14774965258076/14774938791148.jpg" alt="" class="mw_img_center" style="display: block; clear:both; margin: 0 auto;"/></p>

<h2 id="toc_8">总结</h2>

<p>Alfred 的偏好设置中特别设置了一个『 Usage 』tab，在这里可以查看 Alfred 的使用频率，了解这款工具到底对你的工作效率有多大的改变。在用 Alfred 的用户不妨去看一看。<br/>
<img src="media/14774965258076/14774944700695.jpg" alt="" class="mw_img_center" style="display: block; clear:both; margin: 0 auto;"/></p>

<p>Alfred 的扩展性很高，所以他的玩法还有很多。但 Alfred 说到底是一款工具，工具的目的就是为了解决人的某些需求的。如果变成一个庞然大物，我相信不应该是一个工具的初衷。所以找到适合自己的用法才是最重要的，切忌不要被工具绑架了自己。</p>

<p>如你有更多有趣实用的玩法，欢迎与我交流。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Study iOS 9 Programming with Swift（4）]]></title>
    <link href="http://chuxiangyuan.github.io/14727151264192.html"/>
    <updated>2016-09-01T15:32:06+08:00</updated>
    <id>http://chuxiangyuan.github.io/14727151264192.html</id>
    <content type="html"><![CDATA[
<p>使用Swift进行iOS编程知识点总结第四篇。</p>

<span id="more"></span><!-- more -->

<blockquote>
<p>关联阅读：<br/>
<a href="http://chuxiangyuan.github.io/14709182567699.html">Study iOS 9 Programming with Swift（1）</a><br/>
<a href="http://chuxiangyuan.github.io/14710858606215.html">Study iOS 9 Programming with Swift（2）</a><br/>
<a href="http://chuxiangyuan.github.io/14725650174400.html">Study iOS 9 Programming with Swift（3）</a></p>
</blockquote>

<h2 id="toc_0">目录</h2>

<ul>
<li>
<a href="#toc_0">目录</a>
</li>
<li>
<a href="#toc_1">更新记录</a>
</li>
<li>
<a href="#toc_2">Self Sizing Cells</a>
</li>
<li>
<a href="#toc_3">Unwind Segue</a>
</li>
<li>
<a href="#toc_4">实例：多个button触发一个action方法</a>
</li>
</ul>


<h2 id="toc_1">更新记录</h2>

<ul>
<li>2016/09/01 第一次发布</li>
</ul>

<h2 id="toc_2">Self Sizing Cells</h2>

<ul>
<li>设置好cell的Constraints后，并且要把Cell的number of lines的值设置为0，在viewDidLoad方法中添加以下代码：</li>
</ul>

<pre><code>tableView.estimatedRowHeight = 36.0 
tableView.rowHeight = UITableViewAutomaticDimension
</code></pre>

<h2 id="toc_3">Unwind Segue</h2>

<ul>
<li>要点击一个button关闭一个view返回上一级view，可以在destination view controller中添加如下代码，并且将button与exit连接。</li>
<li>代码片段：</li>
</ul>

<pre><code>// 从review view跳转回detail view，并且带回rating的值改变detail view
@IBAction func close(segue:UIStoryboardSegue) {
    
  if let reviewViewController = segue.sourceViewController as? ReviewViewController {
    if let rating = reviewViewController.rating {
      ratingButton.setImage(UIImage(named: rating), forState: UIControlState.Normal)
    }
  }
    
}
</code></pre>

<h2 id="toc_4">实例：多个button触发一个action方法</h2>

<ul>
<li>对于多个button想要触发一个action方法，可以通过为不同的button定义不同的tag，之后coding时通过switch来区分不同tag，从而执行不同的动作。</li>
<li>代码片段：
// 对电影进行评价，根据点击button的不同给rating赋值并关闭modal view</li>
</ul>

<pre><code>@IBAction func ratingSelected(sender: UIButton) {
  
    switch (sender.tag) {
    case 100: rating = &quot;dislike&quot;
    case 200: rating = &quot;good&quot;
    case 300: rating = &quot;great&quot;
    default: break
    }
    
    // 执行特定的segue，即unwind to detailview
    performSegueWithIdentifier(&quot;unwindToDetailView&quot;, sender: sender)
    
}
</code></pre>

<p>未完待续</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Study iOS 9 Programming with Swift（3）]]></title>
    <link href="http://chuxiangyuan.github.io/14725650174400.html"/>
    <updated>2016-08-30T21:50:17+08:00</updated>
    <id>http://chuxiangyuan.github.io/14725650174400.html</id>
    <content type="html"><![CDATA[
<p>使用Swift进行iOS编程知识点总结第三篇，主要包括Navigation Bar的导入和Appearance的自定义、状态栏的样式自定义、Segue的基本使用和通过Segues在两个View Controller间传递数据。</p>

<span id="more"></span><!-- more -->

<blockquote>
<p>关联阅读：<br/>
<a href="http://chuxiangyuan.github.io/14709182567699.html">Study iOS 9 Programming with Swift（1）</a><br/>
<a href="http://chuxiangyuan.github.io/14710858606215.html">Study iOS 9 Programming with Swift（2）</a><br/>
<a href="http://chuxiangyuan.github.io/14725650174400.html">Study iOS 9 Programming with Swift（3）</a></p>
</blockquote>

<h2 id="toc_0">目录</h2>

<ul>
<li>
<a href="#toc_0">目录</a>
</li>
<li>
<a href="#toc_1">更新记录</a>
</li>
<li>
<a href="#toc_2">导航栏的引入</a>
</li>
<li>
<a href="#toc_3">导航栏外表的自定义</a>
</li>
<li>
<a href="#toc_4">对于某个View在滑动时隐藏导航栏</a>
</li>
<li>
<a href="#toc_5">调整状态栏的样式</a>
</li>
<li>
<a href="#toc_6">Segue的类型</a>
</li>
<li>
<a href="#toc_7">通过Segues传递数据</a>
</li>
<li>
<a href="#toc_8">UIImageView的几种模式</a>
</li>
<li>
<a href="#toc_9">Content Hugging Priority</a>
</li>
<li>
<a href="#toc_10">Self Sizing Cells</a>
</li>
</ul>


<h2 id="toc_1">更新记录</h2>

<ul>
<li>2016/08/31 第一次发布</li>
</ul>

<h2 id="toc_2">导航栏的引入</h2>

<ul>
<li>引入导航栏的方式：Select the table view controller and click &quot;Editor&quot; in the menu. Choose &quot;Embed in&quot; &gt; &quot;Navigation Controller&quot;.</li>
<li>选中引入导航栏的View Controller可以设置导航栏中的title。</li>
</ul>

<h2 id="toc_3">导航栏外表的自定义</h2>

<ul>
<li>在AppDelegate.swift文件中的application(_:didFinishLaunchingWithOptions:)方法中添加以下代码可以自定义导航栏的Appearance。</li>
<li>代码片段：</li>
</ul>

<pre><code>// 自定义导航栏的背景色
UINavigationBar.appearance().barTintColor = UIColor(red: 207.0/255.0, green: 0.0/255.0, blue: 15.0/255.0, alpha: 0.9)
    
// 自定义导航栏的导航button及文字、其他导航栏按钮元素的颜色
UINavigationBar.appearance().tintColor = UIColor.whiteColor()
    
// 自定义导航栏title文字的样式，包括字体、字号、颜色等等
UINavigationBar.appearance().titleTextAttributes = [NSForegroundColorAttributeName:UIColor.whiteColor()]
    
// 以下代码自定义了导航栏title文字的字体、字号、颜色，iOS SDK自带字体的名称可在http://iosfonts.com/查看
if let barFont = UIFont(name: &quot;PingFangSC-Semibold&quot;, size: 20.0) {
      
  UINavigationBar.appearance().titleTextAttributes = [NSForegroundColorAttributeName:UIColor.whiteColor(), NSFontAttributeName:barFont]
      
}
</code></pre>

<ul>
<li>若想移除导航栏back button后的title，可以在souce view controller中的viewdidload方法中添加以下代码：</li>
</ul>

<pre><code>// Remove the title of the back button 
navigationItem.backBarButtonItem = UIBarButtonItem(title: &quot;&quot;, style: .Plain, target: nil, action: nil)
</code></pre>

<ul>
<li>在导航栏上显示上级table view中对应cell的标题，在destination view controller中的viewdidload方法中添加以下代码：</li>
</ul>

<pre><code>// 将发现页选择的cell的标题显示在导航栏上
title = movie.name
</code></pre>

<h2 id="toc_4">对于某个View在滑动时隐藏导航栏</h2>

<ul>
<li>因为viewDidLoad方法只会在view初次创建时被调起一次，所以不能使用使用此方法来隐藏导航栏。可以使用viewWillAppear方法，此方法在view每次展示时都会被调起。</li>
<li>在Table View Controller添加以下代码：</li>
</ul>

<pre><code>// view每次展示时都会被调起
override func viewWillAppear(animated: Bool) {
  super.viewWillAppear(animated)
    
  // 向下滑动时隐藏导航栏
  navigationController?.hidesBarsOnSwipe = true
    
}

</code></pre>

<ul>
<li>在Detail View Controller添加以下代码：</li>
</ul>

<pre><code>override func viewWillAppear(animated: Bool) {
  super.viewWillAppear(animated)
    
  // 滑动时不隐藏导航栏
  navigationController?.hidesBarsOnSwipe = false
    
  // 设置导航栏为不可隐藏。第一个页面隐藏了导航栏之后，防止进入详情页不显示导航栏。
  navigationController?.setNavigationBarHidden(false, animated: true)
     
}
</code></pre>

<h2 id="toc_5">调整状态栏的样式</h2>

<ul>
<li>Status Bar有两种样式：Light和Dark。</li>
<li>若想改变某个view controller的Status Bar样式，可以添加以下代码：</li>
</ul>

<pre><code>override func preferredStatusBarStyle() -&gt; UIStatusBarStyle {
  return .LightContent 
}
</code></pre>

<ul>
<li>若想改变app全局的Status Bar样式，有两步需要做。第一步：Select the project in the project navigator. Under the Info tab of the FoodPin target, insert a new key named View controller-based status bar appearance and set the value to NO。第二步在AppDelegate.swift文件中的application(_:didFinishLaunchingWithOptions:)方法中添加以下代码：</li>
</ul>

<pre><code>// 自定义全局的Status Bar为Light Style
UIApplication.sharedApplication().statusBarStyle = .LightContent
</code></pre>

<h2 id="toc_6">Segue的类型</h2>

<ul>
<li>Segue是连接两个View Controller的桥梁，在iOS9之后定义了下面几种Segue的类型

<ul>
<li><strong>Show</strong> - when the show style is used, the content is pushed on top of the current view controller stack. A back button will be displayed in the navigation bar for navigating back to the original view controller. （这种类型是有导航栏的） </li>
<li><strong>Show detail</strong> - similar to the show style, but the content in the detail (or destination) view controller replaces the top of the current view controller stack. （没有导航栏）</li>
<li><strong>Present modally</strong> - presents the content modally. When used, the detail view controller will be animated up from the bottom and cover the entire screen on iPhone. （类似的例子是日历中添加Event时的效果。）</li>
<li><strong>Present as popover</strong> - Present the content as a popover anchored to an existing view. Popover is commonly found in iPad apps. （多用于iPad）</li>
</ul></li>
</ul>

<h2 id="toc_7">通过Segues传递数据</h2>

<ul>
<li>Segue起着连接作用，在从一个View Controller到另一个时，可以在SourceViewController中使用prepareForSegue方法来传递数据。</li>
<li>思路：为Segue定义一个独一无二的可识别的名称→确定选择的哪一行→确定目标ViewController→传递数据。</li>
<li>代码片段：</li>
</ul>

<pre><code>// 向DetailViewController传递信息
  override func prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?) {
    
    // 通过已经定义的segue这个桥梁来传递信息
    if segue.identifier == &quot;showMovieDetail&quot; {
      
      if let indexPath = tableView.indexPathForSelectedRow {
        let destinationController = segue.destinationViewController as! MoiveDetailViewController
        destinationController.movieBackgroudImage = movieImages[indexPath.row]
        destinationController.movieImage = movieImages[indexPath.row]
        destinationController.movieName = movieNames[indexPath.row]
        destinationController.movieType = movieTypes[indexPath.row]
        destinationController.movieYear = movieYears[indexPath.row]
        destinationController.movieActor = movieActors[indexPath.row]
      }
    }
  }
</code></pre>

<h2 id="toc_8">UIImageView的几种模式</h2>

<ul>
<li><p>UIImageView有几种常用的模式如下，在使用时注意选择：</p>

<ul>
<li><strong>Scale to Fill</strong> (默认的模式，会把图片拉伸到指定的尺寸，不能保证图片的原始比率) </li>
<li><strong>Aspect Fit</strong> （可以保持图片的原始比率，但是会在imageview中留下空白）</li>
<li><strong>Aspect Fill</strong> （保持图片的原始比率的前提下不会留下空白，但会切掉图片四周的一些细节，注意使用此模式时要开启“Clip Subviews”，否则图片会扩展到其他view中去。）</li>
</ul>

<p><img src="media/14725650174400/14726256242528.jpg" alt=""/></p></li>
</ul>

<h2 id="toc_9">Content Hugging Priority</h2>

<ul>
<li>对于一个Stack View中的多个view，为了满足指定的constraints，会把某些view拉伸，而拉伸的优先级由Content Hugging Priority定义。Content Hugging Priority的数值越大，级别越高，不会被拉伸。</li>
</ul>

<h2 id="toc_10">Self Sizing Cells</h2>

<ul>
<li>设置好cell的Constraints后，并且要把Cell的number of lines的值设置为0，在viewDidLoad方法中添加以下代码：</li>
</ul>

<pre><code>tableView.estimatedRowHeight = 36.0 
tableView.rowHeight = UITableViewAutomaticDimension
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Study iOS 9 Programming with Swift（2）]]></title>
    <link href="http://chuxiangyuan.github.io/14710858606215.html"/>
    <updated>2016-08-13T18:57:40+08:00</updated>
    <id>http://chuxiangyuan.github.io/14710858606215.html</id>
    <content type="html"><![CDATA[
<p>使用Swift进行iOS编程知识点总结第二篇，主要包括Table View和Table View Controller的区分使用，对Table View的Cells进行自定义，为每个cell添加分享动作，自定义tableview，图片圆角处理、模糊化处理等。</p>

<span id="more"></span><!-- more -->

<blockquote>
<p>关联阅读：<br/>
<a href="http://chuxiangyuan.github.io/14709182567699.html">Study iOS 9 Programming with Swift（1）</a><br/>
<a href="http://chuxiangyuan.github.io/14710858606215.html">Study iOS 9 Programming with Swift（2）</a><br/>
<a href="http://chuxiangyuan.github.io/14725650174400.html">Study iOS 9 Programming with Swift（3）</a></p>
</blockquote>

<h2 id="toc_0">目录</h2>

<ul>
<li>
<a href="#toc_0">目录</a>
</li>
<li>
<a href="#toc_1">更新记录</a>
</li>
<li>
<a href="#toc_2">Table View &amp; Table View Controller</a>
</li>
<li>
<a href="#toc_3">实例：自定义Table View Cells</a>
</li>
<li>
<a href="#toc_4">实例：将图片四个角设置为圆角/将正方形图片设置为圆形图片</a>
</li>
<li>
<a href="#toc_5">实例：对table view中的cell添加Swipe动作——分享</a>
</li>
<li>
<a href="#toc_6">实例：取消row点击后被选中的状态</a>
</li>
<li>
<a href="#toc_7">实例：对table view的分隔线、背景色等进行自定义</a>
</li>
<li>
<a href="#toc_8">实例：对图片采用系统自带的模糊化处理</a>
</li>
</ul>


<h2 id="toc_1">更新记录</h2>

<ul>
<li>2016/08/15 第一次发布</li>
</ul>

<h2 id="toc_2">Table View &amp; Table View Controller</h2>

<ul>
<li>相对于View Controller + Table View, Table View Controller已经提供了DataSource和Delegate，而且针对Table View提前配置好了一些参数，但在某些方面也失去了灵活性。</li>
</ul>

<h2 id="toc_3">实例：自定义Table View Cells</h2>

<ul>
<li>对cell的Identifier定义为Cell→在Cell中加入需要的View，如Label、Image View等，并根据设计图添加constraints→因为cell是与UITableViewCell class关联的，所以创建一个新的class，定义为UITableViewCell的subclass</li>
<li>Coding：

<ul>
<li>思路：对cell中自定义的views创建outlet变量→声明要展示的数据变量并赋值→告知table view有几个cell、几个section→在每个cell中显示具体的值。</li>
<li>Class MovieTableViewCell代码片段及Class MovieTableViewController代码片段：</li>
</ul></li>
</ul>

<pre><code>@IBOutlet weak var nameLabel: UILabel!
@IBOutlet weak var yearLabel: UILabel!
@IBOutlet weak var typeLabel: UILabel!
@IBOutlet weak var actorLabel: UILabel!
@IBOutlet weak var thumbnailImageView: UIImageView!
</code></pre>

<pre><code>      // 告知tableview中有几个section
    override func numberOfSectionsInTableView(tableView: UITableView) -&gt; Int {
        
        return 1
        
    }
    
    // 告知tableview中有几个cell
    override func tableView(tableView: UITableView, numberOfRowsInSection section: Int) -&gt; Int {
        
        // 根据数组的数量返回table view中cell的数量
        return movieNames.count
        
    }
    
    // 在每个cell中显示具体的内容,这个方法会在table view每个row要展示的时候被调起
    override func tableView(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath) -&gt; UITableViewCell {
        
        // 为节省资源，使每个cell可以重复利用
        let cellIdentifier = &quot;Cell&quot;
        let cell = tableView.dequeueReusableCellWithIdentifier(cellIdentifier, forIndexPath: indexPath) as! MovieTableViewCell //downcasting: covert the returned object of dequeueReusableCellWithIdentifier to MovieTableViewCell (对于downcast以及as! &amp; as?的区分与使用还没完全搞懂)
        
        // 定义cell要显示的内容
        cell.nameLabel.text = movieNames[indexPath.row]
        cell.thumbnailImageView.image = UIImage(named: movieImages[indexPath.row])
        cell.yearLabel.text = movieYear[indexPath.row]
        cell.typeLabel.text = movieType[indexPath.row]
        cell.actorLabel.text = movieActor[indexPath.row]
        
        return cell
        
    }
</code></pre>

<h2 id="toc_4">实例：将图片四个角设置为圆角/将正方形图片设置为圆形图片</h2>

<ul>
<li>方法一：通过代码实现

<ul>
<li>代码片段：</li>
</ul></li>
</ul>

<pre><code>// 将图片设置为圆角，圆角半径设置为3
        cell.thumbnailImageView.layer.cornerRadius = 3.0
        cell.thumbnailImageView.clipsToBounds = true
</code></pre>

<ul>
<li>方法二：通过Xcode配置实现

<ul>
<li>配置步骤：在storyboard中选择imageview后，在右侧的Identity inspector中的“Use Defined Runtime Attributes”中添加一个值→Key Path定义为“layer.cornerRadius&quot;,Type定义为”Number“，Value定义为你要设置的圆角半径值。加入一张60*60的正方形图片，设置半径为30，就可以将其变为圆形→切换到Attributes Inspector，将Clip Subviews打钩。</li>
</ul></li>
</ul>

<h2 id="toc_5">实例：对table view中的cell添加Swipe动作——分享</h2>

<ul>
<li>思路：定义分享button的title和style→定义点击分享button后的动作，包括定义分享的文本和图片信息→展示ActivityView。其中share button的颜色可以通过backgroudColor属性来进行自定义。</li>
<li>代码片段：</li>
</ul>

<pre><code>// 对每一个Row添加Swipe Action，如分享、删除等
override func tableView(tableView: UITableView, editActionsForRowAtIndexPath indexPath: NSIndexPath) -&gt; [UITableViewRowAction]? {
    
    // Social Sharing Button
    let shareAction = UITableViewRowAction(style: .Default, title: &quot;分享&quot;, handler: {(action, indexPath) -&gt; Void in
        
        // 定义Share的文本和图片信息，并显示ActivityView
        let defaultText = &quot;Just checking in at&quot; + self.movieNames[indexPath.row]
        if let imageToShare = UIImage(named: self.movieImages[indexPath.row]){
            let activityController = UIActivityViewController(activityItems: [defaultText, imageToShare], applicationActivities: nil)
            self.presentViewController(activityController, animated: true, completion: nil)
        }
    })
    
    // 自定义share action的背景色
    shareAction.backgroundColor = UIColor(red: 25.0/255.0, green: 118.0/255.0, blue: 210.0/255.0, alpha: 1.0)
    
    return [shareAction]
    
}
</code></pre>

<h2 id="toc_6">实例：取消row点击后被选中的状态</h2>

<ul>
<li>代码片段：</li>
</ul>

<pre><code>// 定义Row被选择之后的动作
override func tableView(tableView: UITableView, didSelectRowAtIndexPath indexPath: NSIndexPath) {
        
    // Row点击后取消被选中状态
    tableView.deselectRowAtIndexPath(indexPath, animated: false)
        
}
</code></pre>

<h2 id="toc_7">实例：对table view的分隔线、背景色等进行自定义</h2>

<ul>
<li>代码片段：</li>
</ul>

<pre><code>//View被加载到内存后，以下方法被调起，且只被调起一次，加载好就不再调起
override func viewDidLoad() {
    super.viewDidLoad()
                
    // 自定义tableview的背景色，注意每个cell也有自己的背景色，cell没有内容时才能看到tableview的背景色
    tableView.backgroundColor = UIColor(red: 240.0/255.0, green: 240.0/255.0, blue: 240.0/255.0, alpha: 0.2)
    
    // 通过设置FooterView，移除空的row的分隔线
    tableView.tableFooterView = UIView(frame: CGRectZero)
    
    // 自定义分隔线的颜色
    tableView.separatorColor = UIColor(red: 240.0/255.0, green: 240.0/255.0, blue: 240.0/255.0, alpha: 0.8)
    
}
</code></pre>

<ul>
<li>若想调整cell的背景色或者设置为透明，可在tableView(_:cellForRowAtIndexPath:)方法中添加以下代码片段：</li>
</ul>

<pre><code>// 清除cell的背景色，也即变成透明
cell.backgroundColor = UIColor.clearColor()

</code></pre>

<h2 id="toc_8">实例：对图片采用系统自带的模糊化处理</h2>

<ul>
<li>在viewDidLoad()中添加以下代码片段：</li>
</ul>

<pre><code>// 对背景图进行模糊化处理,style有三种：Dark，ExtraLight，Light
let blurEffect = UIBlurEffect(style: UIBlurEffectStyle.Dark)
let blurEffectView = UIVisualEffectView(effect: blurEffect)
blurEffectView.frame = view.bounds
movieBackgroudImageView.addSubview(blurEffectView)

</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Study iOS 9 Programming with Swift（1）]]></title>
    <link href="http://chuxiangyuan.github.io/14709182567699.html"/>
    <updated>2016-08-11T20:24:16+08:00</updated>
    <id>http://chuxiangyuan.github.io/14709182567699.html</id>
    <content type="html"><![CDATA[
<p>使用Swift进行iOS编程知识点总结第一篇，主要包括项目的基础搭建、Auto Layout、Alert的基本使用以及Table View的基本使用。</p>

<span id="more"></span><!-- more -->

<blockquote>
<p>关联阅读：<br/>
<a href="http://chuxiangyuan.github.io/14709182567699.html">Study iOS 9 Programming with Swift（1）</a><br/>
<a href="http://chuxiangyuan.github.io/14710858606215.html">Study iOS 9 Programming with Swift（2）</a><br/>
<a href="http://chuxiangyuan.github.io/14725650174400.html">Study iOS 9 Programming with Swift（3）</a></p>
</blockquote>

<h2 id="toc_0">目录</h2>

<ul>
<li>
<a href="#toc_0">目录</a>
</li>
<li>
<a href="#toc_1">介绍</a>
</li>
<li>
<a href="#toc_2">更新记录</a>
</li>
<li>
<a href="#toc_3">创建项目</a>
</li>
<li>
<a href="#toc_4">熟悉Xcode</a>
</li>
<li>
<a href="#toc_5">实例：点击一个button，弹出一个alert</a>
</li>
<li>
<a href="#toc_6">Auto Layout</a>
</li>
<li>
<a href="#toc_7">Stack View</a>
</li>
<li>
<a href="#toc_8">Size Classes</a>
</li>
<li>
<a href="#toc_9">实例：创建Table View</a>
</li>
<li>
<a href="#toc_10">实例：隐藏某一个View中的Status Bar</a>
</li>
</ul>


<h2 id="toc_1">介绍</h2>

<ul>
<li>该系列文章主要总结整理了自己在初学使用Swift语言进行iOS编程时的知识点，特别是一些常见功能的实例；</li>
<li>本文档总结的知识点出自<a href="https://www.appcoda.com/swift/">Beginning iOS 9 Programming with Swift</a> —— 国外作者写的一本针对于初学者的电子书，加之自己的理解和实践探索；</li>
<li>由于作为一名小白刚开始学习使用swift进行编程，所以总结的知识点可能有不准确或者错误的地方，故随着学习的深入和对知识点的回顾，可能会不定期的进行更正、增补；</li>
<li>所有的描述以自己能够理解为准则，但可能表述不够严谨或者完整；</li>
<li>为保证原汁原味，一些在开发过程中用到的术语，没有进行翻译。</li>
</ul>

<h2 id="toc_2">更新记录</h2>

<ul>
<li>2016/08/11 第一次发布</li>
</ul>

<h2 id="toc_3">创建项目</h2>

<ul>
<li>Organization Identifier是唯一的，命名方式采用reverse domain name service (or reverse-DNS) notation，如com.chuxiangyuan。加上Product Name，两者组合成一起为独一无二的Bundle ID，如com.chuxiangyuan.myproduct。</li>
<li>Use Core Data：Core Data简单理解为Apple开发包中自带的在本地存储数据的数据库。</li>
</ul>

<h2 id="toc_4">熟悉Xcode</h2>

<ul>
<li>最左侧的列有文件树一栏称为Project Navigator，展示了一个项目的所有文件，中间是编辑区，右侧是选中元素对应的工具区，在storyboard中未选中任何元素时，可以看到Object library，展示了一些内置的元素。底部是Debug相关区域。</li>
<li>Swift扩展名的文件是项目的主要代码，一般是**controller.swift，表示是某一个controller。AppDelegate.swift文件主要用来控制一些全局的设置。</li>
<li>Main.storyboard用于存储App的主路径上的user interface，其中包括Document Outline View、Interface Builder editor。</li>
<li>Assets.xcassets用于存储App中用到所有资源文件，如图片。</li>
<li>Info.plist用于存储App的一些初始化设置项。</li>
</ul>

<h2 id="toc_5">实例：点击一个button，弹出一个alert</h2>

<ul>
<li>思路：创建一个button的点击函数→定义点击后Alert显示消息的title、message、style→定义Alert的button的title、style、handler→展示Alert</li>
<li>代码片段：</li>
</ul>

<pre><code>//需要import UIKit
@IBAction func showMessage(sender: UIButton) {
        
        //创建Alert的Title和Message，可以选择Alert或者ActionSheet显示样式
        let alertController = UIAlertController(title: &quot;Title&quot;, message: &quot;Message&quot;, preferredStyle: UIAlertControllerStyle.Alert)
        
        //给Alert添加动作、点击后的功能，样式可选择Default（文字为蓝色）、Cancel（文字为蓝色加粗）、Destructive（文字为红色）
        alertController.addAction(UIAlertAction(title: &quot;Button Title&quot;, style: UIAlertActionStyle.Default, handler: nil))
        alertController.addAction(UIAlertAction(title: &quot;Button2 Title&quot;, style: UIAlertActionStyle.Destructive, handler: nil))
        alertController.addAction(UIAlertAction(title: &quot;Button3 Title&quot;, style: UIAlertActionStyle.Cancel, handler: nil))
        
        //展示Alert，可选有过渡动画或没有，可在展示后添加动作
        self.presentViewController(alertController, animated: true, completion: nil)
        
}
</code></pre>

<h2 id="toc_6">Auto Layout</h2>

<ul>
<li><p>Auto layout bar</p>

<ul>
<li>Align:创建一些与对齐有关的constraints；</li>
<li>Pin:创建一些与距离有关的constraints；</li>
<li>Issues:自动化解决一些constraints相关问题；</li>
<li>Stack:把几个view变成一个stack view，可以理解为组合起来，以方便对整组定义constraints。</li>
</ul></li>
<li><p>Control-drag</p>

<ul>
<li>在具体的view上按住control键然后拖拽到相关view，松开鼠标后选择添加constraints。小技巧：在选择时按住shift键，可以同时添加多个constraints。</li>
</ul></li>
<li><p>在具体constraints旁边出现黄色或红色标记，表示constraints存在一些问题。可以点击标记并update frames。只有一个问题时可能好使，多个问题的时候一般不好使。</p></li>
<li><p>小技巧：选择assistant pop-up menu→Preview→按住option键点击storyboard，可以在新窗口中预览不同机型的效果，可调整屏幕方向。（constraints复杂了之后，这个方法也不好使了）</p></li>
</ul>

<h2 id="toc_7">Stack View</h2>

<ul>
<li>Stack View插入的两种方式：1.从Object Library中拖到storyboard中，再把要组合的view拖进去；2.选中要组合的view后，使用Auto Layout bar中的Stack选项。</li>
<li>Stack View的两种基本形式：Horizontal（各view在其中水平排列）、Vertical（各view在其中竖直排列）</li>
<li>Stack View的几个可配置项：1.Alignment：设置Stack View中的Views是左对齐、居中还是右对齐；2.Distribution：设置Stack View中的Views高度或者宽度是各自适应还是相等；3.Spaceing：设置Stack View中的Views之间的间距。具体可参见下图。
<img src="media/14709182567699/14709260278104.jpg" alt="" class="mw_img_center" style="display: block; clear:both; margin: 0 auto;"/></li>
</ul>

<h2 id="toc_8">Size Classes</h2>

<ul>
<li>从iOS8开始，开启Size Classes后，可以通过一个storyboard适配不同尺寸、不同屏幕方向的屏幕，甚至是iPhone和iPad，即响应式布局Adaptive Layout。</li>
<li>Size Classes针对于横屏和竖屏定义了两种类型：Regular-空间大，Compact-空间小，这样排列组合后就会有四种类型。这四种类型分别代表了iPhone或iPad设备的不同屏幕方向，具体见下图。这样在针对View进行定义和constraints进行定义时就可以对于不同设备、不同屏幕方向采取不同的方案。具体方法是在这些设置项前面会有一个加号，点击后选择对应Size Classes并进行配置。
<img src="media/14709182567699/14709267301294.jpg" alt="" class="mw_img_center" style="display: block; clear:both; margin: 0 auto;"/></li>
</ul>

<h2 id="toc_9">实例：创建Table View</h2>

<ul>
<li>拖拽一个Table View到storyboard，然后初始配置其Cell（Table View中的每一行）的Style为Basic（系统内置类型），定义其Identifier为Cell，并添加必要的constraints；</li>
<li>对于class viewcontroller需要引入两个protocols：UITableViewDataSource和UITableViewDelegate，前者可以告知TableView要展示的数据是啥，要展示多少个等等，后者可以告诉TableView每一个展示的数据长啥样，比如行高是多少。</li>
<li>引入两个protocols后，要在storyboard中，将其与table view连接起来，具体操作是control-drag从table view到View Controller，并选中datasource和delegate。</li>
<li>Coding：

<ul>
<li>思路：声明要展示的数据变量并赋值→告知table view有几个cell→在每个cell中显示具体的值。</li>
<li>代码片段：</li>
</ul></li>
</ul>

<pre><code> // 声明tableview中展示的数据变量
    var movieNames = [&quot;小男孩&quot;, &quot;火星救援&quot;, &quot;老炮儿&quot;, &quot;心迷宫&quot;, &quot;房间&quot;, &quot;十二公民&quot;, &quot;独立日&quot;, &quot;寒战2&quot;,&quot;完美陌生人&quot;, &quot;大鱼海棠&quot;, &quot;熔炉&quot;, &quot;头脑特工队&quot;, &quot;破风&quot;, &quot;捉妖记&quot;, &quot;歌曲改变人生&quot;, &quot;速度与激情5&quot;, &quot;肖申克的救赎&quot;, &quot;机器人总动员&quot;, &quot;盗梦空间&quot;, &quot;忠犬八公的故事&quot;]

 // 告知tableview中有几个cell
    func tableView(tableView: UITableView, numberOfRowsInSection section: Int) -&gt; Int {
        
        // 根据数组的数量返回table view中cell的数量
        return movieNames.count
        
    }
    
// 在每个cell中显示具体的内容,这个方法会在table view每个row要展示的时候被调起
    func tableView(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath) -&gt; UITableViewCell {
        
        // 为节省资源，使每个cell可以重复利用
        let cellIdentifier = &quot;Cell&quot;
        let cell = tableView.dequeueReusableCellWithIdentifier(cellIdentifier, forIndexPath: indexPath)
        
        // 定义cell要显示的内容
        cell.textLabel?.text = movieNames[indexPath.row]
        cell.imageView?.image = UIImage(named: &quot;房间&quot;)
        
        return cell
        
    }
</code></pre>

<h2 id="toc_10">实例：隐藏某一个View中的Status Bar</h2>

<ul>
<li>代码片段：</li>
</ul>

<pre><code>// 在该View中隐藏Status Bar
    override func prefersStatusBarHidden() -&gt; Bool {
        return true
    }
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[学习使用Swift语言编写iOS程序小记]]></title>
    <link href="http://chuxiangyuan.github.io/14672077197053.html"/>
    <updated>2016-06-29T21:41:59+08:00</updated>
    <id>http://chuxiangyuan.github.io/14672077197053.html</id>
    <content type="html"><![CDATA[
<p>最近在了解Swift语言的语法，学着用Swift编写iOS程序，挖掘一下一直埋藏在心底coding的潜能，也锻炼下自己的逻辑思维能力。</p>

<span id="more"></span><!-- more -->

<h2 id="toc_0">学习时使用的资料汇总</h2>

<ul>
<li><p><a href="https://itunes.apple.com/cn/course/developing-ios-9-apps-swift/id1104579961">Developing iOS 9 Apps with Swift</a> —— Stanford大学一位有名的白胡子老头讲的公开课，年年根据苹果Swift版本迭代和iOS版本迭代的节奏不断更新，苹果官方推荐。iTunes U中有英文字幕，<a href="https://github.com/CS193P-Translation-Group/Developing-iOS-9-Apps-with-Swift">Github</a>上有中文字幕翻译项目，目前翻译的比较慢。着急的话可考虑去年的<a href="https://github.com/CS193P-Translation-Group/Developing_iOS_8_Apps_With_Swift">iOS 8版本</a>,翻译已全部完成。讲的很不错，但是自我感觉语速很快。</p></li>
<li><p><a href="https://developer.apple.com/library/prerelease/content/documentation/Swift/Conceptual/Swift_Programming_Language/index.html#//apple_ref/doc/uid/TP40014097-CH3-ID0">The Swift Programming Language</a> —— 苹果官方Swift语言指导手册，iOS 9在用的是<a href="https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/index.html#//apple_ref/doc/uid/TP40014097-CH3-ID0">Swift 2.2版本</a>，2016年WWDC刚刚发布<a href="https://developer.apple.com/library/prerelease/content/documentation/Swift/Conceptual/Swift_Programming_Language/index.html#//apple_ref/doc/uid/TP40014097-CH3-ID0">Swift 3版本</a>。</p></li>
<li><p><a href="https://www.appcoda.com/swift/">Beginning iOS 9 Programming with Swift</a> —— 国外作者写的一本针对于初学者的电子书，图文并茂，讲解的很详细，例子也很丰富。感觉每一章，作者都在害怕读者因为讲的东西太困难而放弃学习，在书中强调多次😂。</p></li>
</ul>

<h2 id="toc_1">有意思的iOS小程序记录</h2>

<p>从开始学习到不断深入，不管是视频中还是书中或是网络中，总会有很多有意思、启发性的iOS小程序，它们可能很简单，但是却带我走进了iOS开发的大门，让我兴趣越来越浓厚。感觉学习coding还是得以实例来引路，如果一直闷头学习语法，学很长时间也不知道学的到底用来干什么，真的会有强烈的挫败感，最后就像背单词永远停留在字母A序列中一样，了解了语法的皮毛就放弃了。</p>

<p>以下iOS小程序的完整代码可在<a href="https://github.com/ChuXiangyuan/Beginning-iOS-Programming-with-Swift">我的Github</a>中获取到。</p>

<ul>
<li><p>Hello World - 很简单，界面上有个button，点击后弹出一条消息。同时界面上的button和label元素实现Auto Layout。通过这个小程序，初步了解在Xcode中创建项目的方法，了解简单的View和Controler的创建方法和关系，了解了Auto Layout的基本方法。<br/>
<img src="media/14672077197053/1.png" alt="" class="mw_img_center" style="display: block; clear:both; margin: 0 auto;"/></p></li>
<li><p>StackViewDemo - 学习利用Stack View进行Auto Layout，进一步了解Auto Layout的方法，了解在不同设备上响应式布局的方法。<br/>
<img src="media/14672077197053/2.png" alt="" class="mw_img_center" style="display: block; clear:both; margin: 0 auto;"/></p></li>
</ul>

<p><img src="media/14672077197053/3.png" alt="" class="mw_img_center" style="display: block; clear:both; margin: 0 auto;"/></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[利器分享-Zeplin]]></title>
    <link href="http://chuxiangyuan.github.io/14641807710350.html"/>
    <updated>2016-05-25T20:52:51+08:00</updated>
    <id>http://chuxiangyuan.github.io/14641807710350.html</id>
    <content type="html"><![CDATA[
<p>作为一个产品汪或者设计师或者程序猿，你是否遇到过下面这些问题：</p>

<blockquote>
<ul>
<li>程序猿拿到设计师给出的设计图，只看到花花绿绿的一片，但是不知道开发时各个元素的间距到底是多少？该用啥字体？该用多大字号？这个文字是灰色还是黑色？具体的色值是多少？是半透明还是80%透明度？</li>
<li>为了让程序猿看得懂设计图，设计师辛苦的为每个图做出精细的标注，花费的时间比设计图本身还长？</li>
<li>产品经理针对设计图需要沟通的地方总是沟通不到位、理解不一致？花费了很多时间，最后还是没改对地方？</li>
<li>设计师update了设计图，程序猿拿到设计图时感到顿时懵逼？不知道哪张图改了？不知道哪些地方改了？到底要改成啥样？</li>
<li>对于设计图通用的一些样式、形状，程序猿每个都需要机械的去写css代码？</li>
<li>设计图中某个元素需要切图时，@1x、@2x、@3x傻傻分不清楚？</li>
</ul>
</blockquote>

<p>So，安利大家一个利器：Zeplin，上面的问题解决起来so easy，程序猿、产品汪、设计师又可以在一起愉快的玩耍了。</p>

<span id="more"></span><!-- more -->

<p>利用Zeplin可以基本实现：</p>

<ul>
<li><p>快速直接从Sketch文件中导出所有图层到Zeplin中，无需修改，无缝衔接；</p></li>
<li><p>查看所有元素的长度、宽度、边距、字体、字号、字体颜色等，甚至可以生成CSS代码，无需再刻意生成标注图；</p></li>
</ul>

<p><img src="http://o6lwrrweh.bkt.clouddn.com/2016-05-25-%E6%88%AA%E5%9B%BE%202016-05-25%2018%E6%97%B636%E5%88%8650%E7%A7%92.jpg" alt="查看标注"/></p>

<ul>
<li>给具体某个元素添加注释说明NOTE，例如某次更改的地方的注释、希望让开发同学特别注意的地方；</li>
</ul>

<p><img src="http://o6lwrrweh.bkt.clouddn.com/2016-05-25-%E6%88%AA%E5%9B%BE%202016-05-25%2018%E6%97%B639%E5%88%8605%E7%A7%92.jpg" alt="添加NOTE"/></p>

<ul>
<li><p>可邀请项目成员加入协作，所有成员都能同步看到所有更改、NOTE；</p></li>
<li><p>可以自由选择导出想导出的元素、切图；</p></li>
</ul>

<p><img src="http://o6lwrrweh.bkt.clouddn.com/2016-05-25-%E6%88%AA%E5%9B%BE%202016-05-25%2018%E6%97%B638%E5%88%8624%E7%A7%92.jpg" alt="导出元素"/></p>

<ul>
<li>可以定义、查看整个产品的颜色样式和文字样式。</li>
</ul>

<p><img src="http://o6lwrrweh.bkt.clouddn.com/2016-05-25-%E6%88%AA%E5%9B%BE%202016-05-25%2018%E6%97%B637%E5%88%8641%E7%A7%92.jpg" alt="查看颜色和文字样式"/></p>

<p>作为一个细分领域的团队协作工具，Zeplin确实是抓住了设计者和开发者的痛点。对于整体使用Mac的团队，如果可以根据自己团队的实际情况加以利用，一定会提升不少效率。</p>

<p>目前Zeplin仅支持与<a href="https://slack.com">Slack</a>连接，提供项目或页面更新提醒，如果之后能够支持更多服务（如Trello、Teambition、Worktile）就更好了。还有个小细节，目前在项目中添加的NOTE不支持导出、归档，所以在项目结束后，如果有重要的NOTE就会丢失了。这个地方如果能够稍加完善就更好了。</p>

<p>大家可以到<a href="https://zeplin.io">Zeplin的官网</a>了解它的更多细节。这个工具免费版只能创建一个项目，若需创建更多项目需要付费订阅。最便宜的15刀/月可以创建3个项目，不需要项目中每个成员都付费，只需一人订阅，即可全体受益。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[怎么获取手机上的App图标]]></title>
    <link href="http://chuxiangyuan.github.io/14631313149355.html"/>
    <updated>2016-05-13T17:21:54+08:00</updated>
    <id>http://chuxiangyuan.github.io/14631313149355.html</id>
    <content type="html"><![CDATA[
<p>在写文章、做展示或者其他场景中，我们需要某些手机上的App图标来作为素材。网上有许多文章讲了图标的获取方法，在这里说几个我自己常用且获取快速方便的方法。</p>

<span id="more"></span><!-- more -->

<h2 id="toc_0">获取Android应用图标</h2>

<p>相对于iOS应用图标，Android的应用图标获取比较简单：</p>

<ul>
<li>通过Google Play获取：比如想获取Wunderlist这个App的图标，打开Google Play，搜索到<a href="https://play.google.com/store/apps/details?id=com.wunderkinder.wunderlistandroid&amp;hl=zh-CN">Wunderlist的详情页</a>，直接图标上右击保存图标即可。</li>
</ul>

<p><img src="media/14631313149355/14631319696964.jpg" alt=""/></p>

<ul>
<li>如果你没有科学上网工具或者你要查找的App没有在Google Play中收录，那可以利用其它国内的安卓应用市场，以在豌豆荚获取网易云音乐的图标为例，同样是打开<a href="http://www.wandoujia.com/apps/com.netease.cloudmusic">网易云音乐的详情页</a>，直接图标上右击保存图标即可。</li>
</ul>

<p><img src="media/14631313149355/14631321310807.jpg" alt=""/></p>

<h2 id="toc_1">获取iOS应用图标</h2>

<p>iOS应用的渠道比较独立，只有App Store一个，而在应用详情页上不能直接通过右键另存为的方法保存图标，但倒是可以通过查看网页源代码来找到图标文件，如果觉着麻烦可以看看下面的方法。</p>

<ul>
<li>借助App <a href="https://appsto.re/cn/0eIv5.i">Lightscreen（点击下载）</a> 这款软件，在App Store的应用详情页上点击“分享”，再选择“保存为截图”，App的图标就乖乖地躺进相册里了。借助的这个小工具其实是一款截图管理软件，目前售价¥30，曾经冰点到¥18过。</li>
</ul>

<p><img src="media/14631313149355/IMG_1022.jpg" alt="IMG_1022"/></p>

<ul>
<li>上面的方法简单快捷，但如果没有购买 Lightscreen 可以通过<a href="http://appshopper.com/">AppShopper</a>这个网站来获取。<a href="http://appshopper.com/">AppShopper</a>网站是一个可以查看iOS、Mac应用的具体信息的网站，可以查看到App具体的升级、降价历史信息，可以在自己购买应用时做一个参考。在网站上找到应用详情页，然后在图标上直接右键另存为即可。</li>
</ul>

<p><img src="media/14631313149355/14631332088058.jpg" alt=""/></p>

<h2 id="toc_2">MORE</h2>

<p>如果你想知道更多获取App图标的方法，可以看下少数派的这两篇文章：<br/>
<a href="http://sspai.com/27269">提取 Android 高清应用图标？3 招就够</a><br/>
<a href="http://sspai.com/27234">提取 Mac OS X / iOS 应用图标的 6 种技巧</a></p>

<p>推荐下其中提到的网站<a href="http://bendodson.com/code/itunes-artwork-finder/index.html">iTunes Artwork Finder</a></p>

<blockquote>
<p>iTunes Artwork Finder可以提取电视节目、视频、电子书、专辑插图、应用程序、播客、电影等多达十项元素的大图标，还可以选择商店国籍，非常全能。</p>
</blockquote>

<p>注意下，在此网站中提取到的App图标是方形的，而不是圆角矩形的。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[说说Apple“我的照片流”和“iCloud照片图库”那些事]]></title>
    <link href="http://chuxiangyuan.github.io/14625508580709.html"/>
    <updated>2016-05-07T00:07:38+08:00</updated>
    <id>http://chuxiangyuan.github.io/14625508580709.html</id>
    <content type="html"><![CDATA[
<p>关于“我的照片流”和“iCloud照片图库”的Apple的官方解释：</p>

<blockquote>
<p>使用“我的照片流”，您可以在 Mac 和 PC 上访问<strong>最近</strong>使用 iPhone、iPad 或 iPod touch 拍摄的<strong>照片</strong>。</p>

<p>“iCloud 照片图库”可与全新“照片”应用无缝搭配使用，从而将您的<strong>照片和视频</strong>存储在 iCloud 中，并在您的 iPhone、iPad、iPod touch、Mac 和 iCloud.com 上保持最新状态。</p>
</blockquote>

<span id="more"></span><!-- more -->

<h2 id="toc_0">目录</h2>

<ul>
<li>
<a href="#toc_0">目录</a>
</li>
<li>
<a href="#toc_1">阅读指导</a>
</li>
<li>
<a href="#toc_2">“我的照片流”在各设备都不上传了</a>
<ul>
<li>
<a href="#toc_3">事情起因</a>
</li>
<li>
<a href="#toc_4">事情进展</a>
</li>
<li>
<a href="#toc_5">事情转机</a>
</li>
</ul>
</li>
<li>
<a href="#toc_6">“我的照片流”和“iCloud照片图库”到底是个啥</a>
</li>
<li>
<a href="#toc_7">“我的照片流”和“iCloud照片图库”使用特别注意</a>
</li>
<li>
<a href="#toc_8">有啥备份照片的好方法</a>
</li>
<li>
<a href="#toc_9">小彩蛋</a>
</li>
</ul>


<h2 id="toc_1">阅读指导</h2>

<ul>
<li>本文篇幅较长，且包含了一些技术性的东西，所以针对不同的阅读人群有一个阅读指导；</li>
<li>如果你手里有Apple的设备且是一个普通/小白用户，可以从<strong><em>“我的照片流”和“iCloud照片图库”到底是个啥</em></strong>部分开始往后阅读；</li>
<li>如果你手里没有Apple设备，可以从<strong><em>有啥备份照片的好方法</em></strong>部分开始往后阅读；</li>
<li>如果你手里有Apple的设备且想知道“我的照片流”和“iCloud照片图库”的具体原理或者跟我遇到了<strong><em>“我的照片流”在各设备都不上传了</em></strong>的类似问题或者是一个高级用户、极客等，可以直接阅读全文。</li>
</ul>

<h2 id="toc_2">“我的照片流”在各设备都不上传了</h2>

<h3 id="toc_3">事情起因</h3>

<p>前几天，我突然发现我的iPhone上的“照片流”停止工作，不再上传照片了，通过手机拍的美美的照片就不能自动同步到iPad和Mac上了。查看了下iPad和Mac上的照片流也都停止工作了，这是什么鬼？</p>

<p>简单在网络上查了下，发现有不少网友遇到了类似问题，但是时间跨度很大，有最近发生的，有发生在几年前的，结果是有的自己就好了，有的是悬而未决。</p>

<h3 id="toc_4">事情进展</h3>

<p>虽然这个问题也不是很大，但偶尔在Apple设备中使用这个功能还是很方便的。为了搞清事情的真相，我联系了Apple客服，虽然据以前的经验，这种问题Apple客服一般是解决不了的。</p>

<p>果然Apple客服对这个问题有点懵，问题立马从一线客服转向了更高层级的产品专家，在这位产品专家的的建议下，为了找出问题的原因，我做了一系列测试，以下是测试方式和结果：</p>

<ul>
<li>使用我的Apple ID（A，中区），在家里的网络条件下，iPhone、iPad、Mac上照片流同步功能都是停止工作的，即从某个时间点开始往后照片流就不再同步；</li>
<li>同样的设备，在公司的网络条件下，照片流同步功能依然是停止工作；</li>
<li>更换了一个Apple ID（B，美区），在同样的设备上、家里的网络条件下测试，照片流功能恢复正常；</li>
<li>抹除iPad的所有内容和设置后，登录我的Apple ID（A，中区），在家里的网络条件下，照片流功能仍然无法正常同步；</li>
<li>后来无意中发现，在家里的网络条件下，开启VPN，照片流同步功能基本恢复正常。</li>
</ul>

<p>基于前三个测试的测试结果，可以看出问题似乎与我的设备或者Apple ID有关，与网络无关；基于第四个测试结果，问题与我的设备没有关系；基于第五个测试结果，问题似乎又与我的网络有关。这不是相互矛盾吗？</p>

<p>将以上的测试结果反馈给Apple客服，Apple客服也无法解释这种情况，认为可能是Apple的服务器临时抽风了吧，并把此问题进一步向上反馈。</p>

<p>事情至此，我想即使这个问题再向上反馈，估计也不会得到什么特别明确的答复了。毕竟Apple的iCloud的部分服务器由于在国外的缘故，在国内经常出现各种问题也是司空见惯的。</p>

<h3 id="toc_5">事情转机</h3>

<p>之后的几天，我无意中发现了照片流同步功能恢复正常，我去，真是活见鬼，还真的莫名其妙的自己好了。</p>

<p>虽然问题解决了，但是这个问题是怎么解决的？问题是怎么发生的？完全没搞懂啊！无意中到了程序猿聚集地V2EX论坛搜索了一下“照片流”的相关问题，发现有个网友遇到了类似的问题，他设备的照片流功能时好时坏，下面其中有个回复，建议把亚马逊服务器的一个域名“amazonaws.com”加入代理列表。似曾相识的域名，突然恍然大悟，似乎明白了问题的原因，经过进一步查证后也证实了我的想法。</p>

<ul>
<li><p>根据网上的资料可以确认，Apple的iCloud服务中的数据并不是完全存储于Apple的服务器上，部分数据经过Apple加密后存储在了其他外部的服务器上，例如中国电信、亚马逊的AWS和微软的Azure，这些都有过公开报道，但似乎Apple官方并没有正式承认；</p></li>
<li><p>上面所说的亚马逊的AWS服务其实在中国大陆访问存在一定的问题，AWS服务有众多的服务器，这些服务器有的在中国大陆访问正常，有的访问速度特别慢，甚至发生数据丢失的情况，有的直接不能访问。原因是中国的“墙”对其有屏蔽；</p></li>
<li><p>由于我最近需要在亚马逊的AWS服务中访问一些文件，故近期我把此服务的相关域名加入了我的科学上网工具中的代理列表，通俗地说就是在我的这个代理列表中的域名地址，就可以跨过“墙&quot;以正常速度访问；</p></li>
<li><p>我的照片流随之很快恢复了正常同步，后来我意识到这与我将亚马逊AWS服务加入我的代理列表有直接关系。因为我的Apple ID的照片流在同步时上传到了亚马逊的AWS服务器，但AWS服务器在中国大陆环境下访问存在问题，致使我的照片流同步不正常，我跨过”墙“后，AWS访问恢复正常，故我的照片流同步也恢复正常。这也解释了当时为什么在挂VPN的条件下，我的照片流就能同步了。</p></li>
<li><p>为进一步证实，我把域名“amazonaws.com”从科学上网工具中的代理列表中移除，再测试照片流功能，照片又不上传了；</p></li>
<li><p>而我的另一个Apple ID当时能正常同步照片流的原因是没有上传到亚马逊的AWS服务器，而是上传到了其他可以正常访问的服务器，比如中国电信。</p></li>
<li><p>“我的照片流”、“iCloud照片图库”服务中用户的照片会上传到哪个服务器，这个逻辑可能就是Apple不断动态调整的，具体就不清楚了，但可以猜测不同的Apple ID、不同的网络、不同的时间上传的服务器可能都不一样。我的照片流之前同步正常的原因可能就是当时并没有上传到亚马逊的AWS服务器，在某一个时间点调整到了亚马逊的AWS服务器，导致问题发生。</p></li>
</ul>

<p>总结一下，问题的根本原因就是iCloud的分布式服务器搞得鬼，而有的服务器在大陆访问不正常导致了问题的发生。</p>

<p>多么简单的原因啊，这就是埋藏在事情背后的真相。通过问题的表象，自己一步步地查找资料，顺藤摸瓜，拨云见日，最终发现问题的真相，这种感觉真棒。</p>

<h2 id="toc_6">“我的照片流”和“iCloud照片图库”到底是个啥</h2>

<p>在查找问题原因的过程中，我也进一步了解了Apple设备的“我的照片流”和“iCloud照片图库”到底是个啥。只要是有在使用Apple设备的用户很有必要好好了解下。</p>

<ul>
<li><p>“我的照片流/My Photo Stream”是Apple先推出的服务，需要iOS 7 和更高版本以及Lion 10.7.5和更高版本才支持；“iCloud照片图库/iCloud Photo Library”功能是Apple推出不久的服务，需要iOS 8.3 和更高版本以及 Yosemite 10.10.3 和更高版本才支持。两者都依托于iCloud提供功能支持。</p></li>
<li><p>“我的照片流”的用途是在各个Apple设备间同步你<strong><em>最近</em></strong>存储的图片，它只会在Apple的服务器中存储最多30天，最大数量1000张，只同步照片，不同步视频，它不占用iCloud存储空间，即服务是免费的，但存储的照片不保证是原始分辨率、原始画质；</p></li>
<li><p>“iCloud照片图库”的用途是备份并同步各个Apple设备间的照片和视频，没有时间限制，占用iCloud存储空间，iCloud初始免费存储空间是5GB，存满后需要付费购买，存储在服务中的照片全部都是原件，但在下载时可以在各设备上自行选择是下载原件还是优化过的版本。</p></li>
</ul>

<p>总结下，“我的照片流”功能只是用来短暂时间内在各个Apple设备间同步照片的，不担负备份功能；“<br/>
iCloud照片图库”功能既可以备份，又可以同步。</p>

<h2 id="toc_7">“我的照片流”和“iCloud照片图库”使用特别注意</h2>

<p>从我的观察来看，一般情况下Apple设备的“我的照片流”功能都是默认开启的，而“iCloud照片图库”会在第一次设置时询问用户，可能很多用户都是关闭的。这就使得使用”我的照片流“功能的用户非常普遍。</p>

<p>根据上面说的两者的功能和区别，有一个特别需要注意的是：</p>

<p><strong>不要拿“我的照片流”功能当备份用！</strong><br/>
<strong>不要拿“我的照片流”功能当备份用！</strong><br/>
<strong>不要拿“我的照片流”功能当备份用！</strong></p>

<p>重要的话说三遍！不要以为开启了“我的照片流”，看到自己的照片都被上传了，而且还在其他Apple设备间同步了，以为照片被备份了，下次刷机或者购买新设备那些照片就又会被下载下来。这种想法是大多数小白用户都有的，但却是完全错误的。看到的那只是表象，在设备中显示的只是下载下来的照片的副本，一旦你关闭照片流功能再开启、刷机、购置新的设备，下载下来的只有最多30天、最多1000张照片。到那时候再哭着喊着我的照片去哪了，可就啥都不管用了。</p>

<p>如果确实想备份自己美美的照片，那就只能开启“iCloud照片图库”功能了。如果你照片比较多，超过了5GB，那就只能付费了。</p>

<h2 id="toc_8">有啥备份照片的好方法</h2>

<p>除了Apple自有的服务，还有什么好方法，最好是免费的方法可以备份自己的照片呢？特别是自己的设备特别多时该咋整呢？不要告诉我你是手动备份转存在自己的硬盘上的。说几种常见的和我推荐的：</p>

<ul>
<li><p>类似于百度云盘的照片备份功能，优点是应该空间足够大，一般不需要付费（我相信大家的百度云盘的空间都超级大，当年的各大云盘大战不是白战的），缺点是其一安全有很大隐患，据说百度云盘的一些私人文件、照片都可以被搜索引擎直接搜到，说不定下个艳照门的主角就是你，而且百度存储的资料说不能访问就不能访问，这个你也懂得；其二，最近也看到了，“新浪微盘”、“UC网盘”、“快盘”、“115网盘”、“腾讯微云”纷纷关停部分服务甚至整项服务，如果你在这些网盘上存储了大量文件，这简直就是灾难，说没就没啊。虽然百度云盘和360云盘财大气粗，但我依然不看好国内的云盘服务；其三，最近百度这口碑啊直线下滑，不仅谋财还害命，即使公关再强大，说不定哪天也被群众的唾沫淹死了。你说还有360？360也不是什么好鸟。</p></li>
<li><p>类似于小米手机自带的照片备份功能，优点是系统原生自带，肯定一些功能可以做的更加友好方便；缺点其一是到一定量级后还是需要付费，其二是平台局限性太大，如果你有非小米设备就搞不定了。</p></li>
<li><p>类似于国外网盘Dropbox的照片备份功能，优点是安全，Dropbox可以说是世界上最好的个人网盘，没有之一，专注做这个，不干别的；缺点其一是Dropbox的免费空间真的很少，用不了多久就需要付费，照片又那么地占用空间，其二是这么好的服务当然已经被墙了啊，所以好多小白用户用不到这么好的服务。</p></li>
<li><p>最后一个也是我推荐的是Google Photos，这是Google去年才推出的服务，覆盖移动端、PC端、Web端所有平台。优点是其一安全，Google的口碑也是杠杠的，其二是不限空间，这简直就是天上掉馅饼，免费的午餐啊，不过稍微要注意的是，不限空间的前提是备份的照片经过一定处理，不是原片。但有人已经做过仔细对比，这种处理算法做的非常棒，照片的画质损失几乎看不出来；缺点就不用我说了吧，这么好的服务怎么有理由不被墙呢？不过一个科学上网工具不应该是一个社会主义接班人必备的武器吗？</p></li>
</ul>

<p>以上缺点中提到的付费是针对于想要一个免费的照片备份工具来说的，并不是说付费就是不好的。不管是App、电子书还是其他网络服务，我相信只要他对你有很大帮助，甚至改变了你的生活，就是值得你付费的。</p>

<p>说到底，这篇文章其实算是一篇科普文，让你明白你手机上的那些功能背后到底是什么原理，到底该如何利用好它并服务好自己？希望对你有帮助。如果你有疑问，欢迎留言与我进一步探讨。</p>

<h2 id="toc_9">小彩蛋</h2>

<p>之前提到的我咨询问题的Apple 苹果专家倒是给我留下了很深刻的印象。我印象中的客服都是很劳累，问多了会很没有耐心的，因为他们每天要在电话中面对形形色色的用户，重复着说着一些话，但这位Apple 苹果客服是抱着一种学习乐观的态度来做客服的，耐心的听用户反馈问题，交流问题，甚至反过来从用户的描述中学习很多东西自己利用，更甚至可以在交流中聊聊其他更广、更有趣的话题，可以听出她特别积极乐观的工作生活态度。这样一天的工作轻松结束，自己既能学到东西，还帮人解决了问题，自己很开心，客户也很开心。不管干嘛，快乐不快乐，开心不开心，还是看自己怎么看待！</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[建立个人网站目标已达成√]]></title>
    <link href="http://chuxiangyuan.github.io/14631451597072.html"/>
    <updated>2016-05-13T21:12:39+08:00</updated>
    <id>http://chuxiangyuan.github.io/14631451597072.html</id>
    <content type="html"><![CDATA[
<p>之前有了解过Markdown语言，但之前只了解了下皮毛，最近做了进一步研究，也对比了一下各个Markdown编辑器的优劣。结果利用MWeb以及Github的PAGES服务顺藤摸瓜的建立起了自己的个人网站。</p>

<span id="more"></span><!-- more -->

<h2 id="toc_0">建站工具</h2>

<ul>
<li>个人网站的地址：<a href="http://chuxiangyuan.github.io/">http://chuxiangyuan.github.io/</a>，也可通过扫描或识别下边的二维码前往;</li>
</ul>

<p><img src="media/14631451597072/%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2.jpg" alt="我的博客"/></p>

<ul>
<li><p>如果你习惯了使用RSS工具查看文章，你也可以通过RSS工具订阅我的个人博客，以下是RSS地址：<code>http://chuxiangyuan.github.io/atom.xml</code>；</p></li>
<li><p>网站中所有文章均在<a href="http://zh.mweb.im">MWeb</a>中使用Markdown语言格式编写完成;</p></li>
<li><p>通过MWeb的静态博客生成功能生成了网站，使用了<a href="https://github.com/oulvhai/mweb-medium-like">mweb-medium-like</a>主题样式；</p></li>
<li><p>网站所有的源代码均托管在Github上，可在我的Github上查看，<a href="https://github.com/ChuXiangyuan/chuxiangyuan.github.io">点击前往</a>；</p></li>
<li><p>网站中使用了<a href="http://duoshuo.com">多说评论插件</a>、<a href="http://www.jiathis.com">JiaThis分享插件</a>；</p></li>
<li><p>通过Github提供的<a href="https://pages.github.com">PAGES服务</a>发布了网站,根据实际情况暂时没有申请独立域名；</p></li>
<li><p>建站过程中除上述工具外还使用了：<a href="http://www.sketchapp.com">Sketch</a>（经常用此软件画原型，所以直接拿来进行简单的图片处理）、<a href="http://cli.im/">草料二维码</a>（二维码生成）、<a href="https://itunes.apple.com/cn/app/jie-tu-jietu/id1059334054?mt=12">Jietu</a>（截图和截图处理）、<a href="http://pasteapp.me">Paste</a>（剪贴板管理）等工具。</p></li>
</ul>

<h2 id="toc_1">建站目的</h2>

<ul>
<li><p>在这个各种信息共享的年代，希望能将自己每天所听、所见、所想的事情记录下来、沉淀下来，同时与大家共享，如果我的文字能够帮助你，那是再好不过了；</p></li>
<li><p>具体的主题不限，但是自己作为一只产品汪，对科技、IT、数码、App极其热爱，所以文章内容基本会与这些有关。</p></li>
</ul>

<h2 id="toc_2">One More Thing</h2>

<p>之前也建立了一个公众号，在小部分朋友间进行了小范围的试运营，但发现通过微信公众平台来编辑发文章，所花时间成本太高，大部分时间都浪费在了素材整理和排版上，不如Markdown纯粹。不过微信公众号的好处是，在微信如此普及的时代，发出的内容到达率会特别高。</p>

<p>之后公众号在有时间的前提下会发些与生活、朋友密切相关的趣事、照片吧，当做是”一起潮玩“的朋友们的生活记录工具吧。当然，如果合适的文章，可能博客和公众号都会发。</p>

<p><img src="media/14631451597072/%E4%B8%80%E8%B5%B7%E6%BD%AE%E7%8E%A9.jpg" alt="一起潮玩" class="mw_img_center" style="display: block; clear:both; margin: 0 auto;"/></p>

<p>公众号叫”向远“，向着远方前进，如果你想关注，可以扫描下面的二维码关注。</p>

<p><img src="media/14631451597072/%E5%90%8D%E7%89%87.jpg" alt="名片" class="mw_img_center" style="display: block; clear:both; margin: 0 auto;"/></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[About Me]]></title>
    <link href="http://chuxiangyuan.github.io/about.html"/>
    <updated>2016-05-07T00:29:34+08:00</updated>
    <id>http://chuxiangyuan.github.io/about.html</id>
    <content type="html"><![CDATA[
<p><img src="media/14625521742746/%E5%A4%B4%E5%83%8F.png" alt="头像" class="mw_img_center" style="display: block; clear:both; margin: 0 auto;"/></p>

<h2 id="toc_0">欢迎光临北极熊不不的博客</h2>

<span id="more"></span><!-- more -->

<ul>
<li><p>这里记录了我对生活、工作的思考！</p></li>
<li><p>爱科技，爱生活，爱折腾 | Geek | 正在不断升级打怪中的产品汪</p></li>
<li><p>坐标北京市朝阳区，常出没于山东、魔都</p></li>
<li><p><a href="14631451597072.html">点击这里查看我的建站记录</a></p></li>
</ul>

<h2 id="toc_1">Contact Me</h2>

<ul>
<li><p>我的微博：<a href="http://weibo.com/chuxiangyuan1104">@北极熊不不</a></p></li>
<li><p>我的Twitter：<a href="https://twitter.com/chuxiangyuan/">@chuxiangyuan</a></p></li>
<li><p>我的Github：<a href="https://github.com/ChuXiangyuan/">@ChuXiangyuan</a></p></li>
<li><p>我的微信：<br/>
<img src="media/14625521742746/IMG_0833.png" alt="IMG_0833"/></p></li>
</ul>

]]></content>
  </entry>
  
</feed>
